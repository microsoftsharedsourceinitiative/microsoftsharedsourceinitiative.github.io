<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>291 - Bitwise operation on logical result.</TITLE>
<META Name="InChm" Content="True">
<META name="rtfFileName" content="prefast.rtf">
<!--CSS_START-->
<SCRIPT SRC="../scripts/dtuelink.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>PREfast&nbsp;User&nbsp;Guide</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vcgrf291bitwiseoperationonlogicalresult"></A>291 - Bitwise operation on logical result.</H1>

<H1 class="dtH1">Additional Information: ! has higher precedence than |.</H1>

<H1 class="dtH1">Recommended Fix: Use || or (!(x | y)) instead.</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><!-- Topic Status -->
<P>The <code class="ce">!</code> operator yields a Boolean result, and the <code class="ce">|</code> (bitwise-or) operator takes two arithmetic arguments. The <code class="ce">!</code> operator also has higher precedence than <code class="ce">|</code>. </P>

<P>Therefore, one of the following errors has been detected: 

<UL type="disc">
	<LI><B>The expression is misparenthesised: </B>
<P>Because the result of <code class="ce">!</code> is Boolean (zero or one), an attempt to test that two variables have bits set will only end up testing that the lowest bit is present in the right side: <code class="ce">((!x) | y) != (!(x | y))</code> when <code class="ce">x == 0</code> and <code class="ce">y == 1</code>. 
</li>

	<LI><B>The ! operator is incorrect, and should be a ~ instead: </B>
<P>The <code class="ce">!</code> operator has a Boolean result, while the <code class="ce">~</code> operator has an arithmetic result. These operators are only interchangeable when operating on a Boolean value (zero or one): <code class="ce">((!x) | y) != ((~x) | y)</code>) when <code class="ce">x == 1</code> and <code class="ce">y == 0</code>. 
</li>

	<LI><B>The binary operator | is incorrect, and should instead be ||: </B>
<P>While <code class="ce">|</code> can sometimes be interchanged with <code class="ce">||</code>, it is neither equivalent nor efficient as it forces evaluation of the right side of the expression. Certain side effects in this sort of expression can be terminal. For example, if <code class="ce">(!p | (*p == '\0'))</code>, when <code class="ce">p == NULL</code>, it must be dereferenced to evaluate the other half of the expression. 
</li>
</UL>

<P>This warning is not reported if the <code class="ce">!</code> operator is on the left-hand-side of the <code class="ce">|</code> operator as this case is typically just the relatively benign case of an incorrect operator. </P>

<P>It is difficult to judge the severity of this problem without examining the code. The code should be inspected to ensure that the intended test is occurring. </P>

<P>This warning always indicates possible confusion in the use of an operator or operator precedence. </P>

<H4 class="dtH4">Example</H4>

<P><B>Defective Source</B></P>

<PRE class="code">if (!x | y) {;}</PRE>

<P><B>Corrected Source</B></P>

<PRE class="code">// When checking whether any bits are set in either x or y.
if (!(x | y)) {;}

// When checking whether bits are set in either the 
// complement of x or in y. 
if ((~x) | y) {;}

// When y is a Boolean or Boolean result. 
if ((!x) || y) {;}</PRE>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p><MSHelp:link keywords="vxmscCopyright" TABINDEX="0">&copy; Microsoft Corporation. All rights reserved.</MSHelp:link></p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
