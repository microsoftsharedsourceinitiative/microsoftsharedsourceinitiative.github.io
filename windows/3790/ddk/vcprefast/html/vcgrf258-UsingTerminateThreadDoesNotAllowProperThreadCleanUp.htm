<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>258 - Using TerminateThread does not allow proper thread clean up.</TITLE>
<META Name="InChm" Content="True">
<META name="rtfFileName" content="prefast.rtf">
<!--CSS_START-->
<SCRIPT SRC="../scripts/dtuelink.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>PREfast&nbsp;User&nbsp;Guide</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vcgrf258-usingterminatethreaddoesnotallowproperthreadcleanup"></A>258 - Using TerminateThread does not allow proper thread clean up.</H1>

<H1 class="dtH1">Additional Information: Consult MSDN for more information.</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><!-- Topic Status -->
<P>This warning indicates that a call to <B>TerminateThread</B> has been detected.</P>

<P><B>TerminateThread</B> is a dangerous function that should only be used in the most extreme cases. You should call <B>TerminateThread</B> only if you know exactly what the target thread is doing, and you control all the code that the target thread could possibly be running at the time of the termination. For example, <B>TerminateThread</B> can result in the following problems: 

<UL type="disc">
	<LI>If the target thread owns a critical section, the critical section will not be released. </li>

	<LI>If the target thread is executing certain kernel32 calls when it is terminated, the kernel32 state for the thread's process could be inconsistent. </li>

	<LI>If the target thread is manipulating the global state of a shared DLL, the state of the DLL could be destroyed, affecting other users of the DLL. </li>
</UL>

<P>A thread cannot protect itself against <B>TerminateThread</B>, other than by controlling access to its handles. The thread handle returned by the <B>CreateThread</B> and <B>CreateProcess</B> functions has THREAD_TERMINATE access, so any caller holding one of these handles can terminate your thread.</P>

<BLOCKQUOTE class="dtBlock">
<B>Note</B>&nbsp;&nbsp;&nbsp;<B>SuspendThread</B> has similar problems, but PREfast does not currently detect use of this API.</BLOCKQUOTE>

<H4 class="dtH4">Example</H4>

<P><B>Defective Source</B></P>

<PRE class="code">TerminateThread(Thread,
                0);</PRE>

<P><B>Corrected Source</B></P>

<P><CODE>extern HANDLE ThreadTerminationEvent[];</CODE></P>

<P><CODE>SetEvent(ThreadTerminationEvent[(ULONG)Thread]);</CODE></P>

<P><CODE>/*</CODE></P>

<P><CODE>* Target thread waits on/polls the termination event</CODE></P>

<P><CODE>* and gracefully releases locks and resources before</CODE></P>

<P><CODE>* calling ExitThread().</CODE></P>

<P><CODE>*/</CODE></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p><MSHelp:link keywords="vxmscCopyright" TABINDEX="0">&copy; Microsoft Corporation. All rights reserved.</MSHelp:link></p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
