<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Warnings by Number</TITLE>
<META Name="InChm" Content="True">
<META name="rtfFileName" content="prefast.rtf">
<!--CSS_START-->
<SCRIPT SRC="../scripts/dtuelink.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>PREfast&nbsp;User&nbsp;Guide</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vcgrfwarningsbynumber"></A>Warnings by Number</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><!-- Topic Status -->
<P>For specific information about each warning number, click the appropriate link.

<UL type="disc">
	<LI><A HREF="vcgrf1-usinguninitializedmemoryvariable.htm">1 - Using uninitialized memory <I>&lt;variable&gt;</I>.</A></li>

	<LI><A HREF="vcgrf11-dereferencingnullpointerpointer.htm">11 - Dereferencing NULL pointer <I>&lt;pointer&gt;</I>.</A></li>

	<LI><A HREF="vcgrf14-leakingmemorypointer.htm">14 - Leaking memory <I>&lt;pointer&gt;</I>.</A></li>

	<LI><A HREF="vcgrf29-possiblebufferoverrunincalltofunction.htm">29 - Possible buffer overrun in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf31-returnvalueignored.htm">31 - Return value ignored.</A></li>

	<LI><A HREF="vcgrf53-calltofunctionmaynotzero-terminatestringvariable.htm">53 - Call to <I>&lt;function&gt;</I> may not zero-terminate string <I>&lt;variable&gt;</I>.</A></li>

	<LI><A HREF="vcgrf56-calltofunctiondoesnotvalidatebuffersize.htm">56 - Call to <I>&lt;function&gt;</I> does not validate buffer size.</A></li>

	<LI><A HREF="vcgrf57-bufferoverrunduetonumberofcharactersnumberofbytesmismatchincalltofunction.htm">57 - Buffer overrun due to number of characters/number of bytes mismatch in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf59-misuseoflengthparameterincalltofunction.htm">59 - Misuse of length parameter in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf63-formatstringmismatch.htm">63 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf64-formatstringmismatch.htm">64 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf66-formatstringmismatch.htm">66 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf67-formatstringmismatch.htm">67 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf69-inefficientuseoffunction.htm">69 - Inefficient use of <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf201-bufferoverrunforstackbuffervariable.htm">201 - Buffer overrun for stack buffer <I>&lt;variable&gt;</I>.</A></li>

	<LI><A HREF="vcgrf202-bufferoverrunforstackbuffervariableincalltofunction.htm">202 - Buffer overrun for stack buffer <I>&lt;variable&gt;</I> in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf203-bufferoverrunforbuffervariableincalltofunction.htm">203 - Buffer overrun for buffer <I>&lt;variable&gt;</I> in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf204-possiblebufferoverrunincalltofunction.htm">204 - Possible buffer overrun in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf205-stackbufferoverruninvariableincalltoevilfunctionfunction.htm">205 - Stack buffer overrun in <I>&lt;variable&gt;</I> in call to evil function <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf207-bufferoverrunincalltoevilfunctionfunction.htm">207 - Buffer overrun in call to evil function <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf209-usingsizeofvariableasparameternumberincalltofunctionwherevariableisarrayofwidecharacters.htm">209 - Using sizeof(<I>&lt;variable&gt;</I>) as parameter <I>&lt;number&gt;</I> in call to <I>&lt;function&gt;</I> where <I>&lt;variable&gt;</I> is an array of wide characters.</A></li>

	<LI><A HREF="vcgrf211-leakingmemorypointerduetoexception.htm">211 - Leaking memory <I>&lt;pointer&gt;</I> due to an exception.</A></li>

	<LI><A HREF="vcgrf214-castbetweensemanticallydifferentintegertypes.htm">214 - Cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf215-castbetweensemanticallydifferentintegertypes.htm">215 - Cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf216-compiler-insertedcastbetweensemanticallydifferentintegertypes.htm">216 - Compiler-inserted cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf217-implicitcastbetweensemanticallydifferentintegertypes.htm">217 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf219-implicitcastbetweensemanticallydifferentintegertypes.htm">219 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf220-implicitcastbetweensemanticallydifferentintegertypes.htm">220 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf221-implicitcastbetweensemanticallydifferentintegertypes.htm">221 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf225-implicitcastbetweensemanticallydifferentintegertypes.htm">225 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf226-implicitcastbetweensemanticallydifferentintegertypes.htm">226 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf230-implicitcastbetweensemanticallydifferentintegertypes.htm">230 - Implicit cast between semantically different integer types.</A></li>

	<LI><A HREF="vcgrf235-non-zeroconstantexpressionisalwaystrue.htm">235 - (<I>&lt;non-zero constant&gt;</I> || <I>&lt;expression&gt;</I>) is always TRUE.</A></li>

	<LI><A HREF="vcgrf236-expressionnon-zeroconstantisalwaystrue.htm">236 - (<I>&lt;expression&gt;</I> || <I>&lt;non-zero constant&gt;</I>) is always TRUE.</A></li>

	<LI><A HREF="vcgrf237-zeroexpressionisalwaysfalse.htm">237 - (<I>&lt;zero&gt;</I> &amp;&amp; <I>&lt;expression&gt;</I>) is always FALSE.</A></li>

	<LI><A HREF="vcgrf239-non-zeroconstantexpressionalwaysevaluatestobooleanresultofexpression.htm">239 - (<I>&lt;non-zero constant&gt;</I> &amp;&amp; <I>&lt;expression&gt;</I>) always evaluates to Boolean result of <I>&lt;expression&gt;</I>.</A></li>

	<LI><A HREF="vcgrf240-expressionnon-zeroconstantalwaysevaluatestobooleanresultofexpression.htm">240 - (<I>&lt;expression&gt;</I> &amp;&amp; <I>&lt;non-zero constant&gt;</I>) always evaluates to Boolean result of <I>&lt;expression&gt;</I>.</A></li>

	<LI><A HREF="vcgrf241-valuereturnedfromfinally-blockoverridesvaluereturnedfromitscorrespondingtry-block.htm">241 - Value returned from the finally-block overrides the value returned from its corresponding try-block.</A></li>

	<LI><A HREF="vcgrf242jumpoutofthistry-blockforceslocalunwind.htm">242 &#0150; A jump out of this try-block forces local unwind.</A></li>

	<LI><A HREF="vcgrf243-returnfromfinally-blockhaltsglobalunwind.htm">243 - Return from a finally-block halts global unwind.</A></li>

	<LI><A HREF="vcgrf244-localdeclarationofvariablehidesglobaldeclaration.htm">244 - Local declaration of <I>&lt;variable&gt;</I> hides global declaration.</A></li>

	<LI><A HREF="vcgrf245-for-initdeclarationofvariablehidesglobaldeclaration.htm">245 - For-init declaration of <I>&lt;variable&gt;</I> hides global declaration.</A></li>

	<LI><A HREF="vcgrf246-localdeclarationofvariablehidesdeclarationofsamenameinouterscope.htm">246 - Local declaration of <I>&lt;variable&gt;</I> hides declaration of same name in outer scope.</A></li>

	<LI><A HREF="vcgrf247-for-initdeclarationofvariablehidesdeclarationofsamenameinouterscope.htm">247 - For-init declaration of <I>&lt;variable&gt;</I> hides declaration of same name in outer scope.</A></li>

	<LI><A HREF="vcgrf248-settingsecurity_descriptorsdacltonullwillresultinunprotectedobject.htm">248 - Setting a SECURITY_DESCRIPTOR's DACL to NULL will result in an unprotected object.</A></li>

	<LI><A HREF="vcgrf249-callingkernelfunctionwithoutmem_releaseflagfreesmemorybutnotaddressdescriptorsvads.htm">249 - Calling <I>&lt;kernel function&gt;</I> without the MEM_RELEASE flag frees memory but not the address descriptors (VADs).</A></li>

	<LI><A HREF="vcgrf250-callinglfunctionwithoutmem_releaseflagfreesmemorybutnotaddressdescriptorsvads.htm">250 - Callingl <I>&lt;function&gt;</I> without the MEM_RELEASE flag frees memory but not the address descriptors (VADs).</A></li>

	<LI><A HREF="vcgrf251-initializecriticalsectionindicatesfailurebyraisingasynchronousexception.htm">251 - InitializeCriticalSection indicates failure by raising an asynchronous exception.</A></li>

	<LI><A HREF="vcgrf252-untaggedpoolallocation.htm">252 - Untagged pool allocation.</A></li>

	<LI><A HREF="vcgrf253-mmsecurevirtualmemorylocksvadsnotpages.htm">253 - MmSecureVirtualMemory locks VADs not pages.</A></li>

	<LI><A HREF="vcgrf255-_allocaindicatesfailurebyraisingstackoverflowexception.htm">255 - _alloca indicates failure by raising a stack overflow exception.</A></li>

	<LI><A HREF="vcgrf257-_allocausedinprohibitedlocation.htm">257 - _alloca used in prohibited location.</A></li>

	<LI><A HREF="vcgrf258-usingterminatethreaddoesnotallowproperthreadcleanup.htm">258 - Using TerminateThread does not allow proper thread clean up.</A></li>

	<LI><A HREF="vcgrf259-labeledcodeisunreachable.htm">259 - Labeled code is unreachable.</A></li>

	<LI><A HREF="vcgrf260-sizeofsizeofisalmostalwayswrong.htm">260 - Sizeof * Sizeof is almost always wrong.</A></li>

	<LI><A HREF="vcgrf261-mustsucceedpoolallocationsareforbidden.htm">261 - MustSucceed pool allocations are forbidden.</A></li>

	<LI><A HREF="vcgrf262-thisfunctionusesconstantbytesofstack.htm">262 - This function uses <I>&lt;constant&gt;</I> bytes of stack.</A></li>

	<LI><A HREF="vcgrf263-using_allocainloop.htm">263 - Using _alloca in a loop.</A></li>

	<LI><A HREF="vcgrf268-incorrectorderofoperations.htm">268 - Incorrect order of operations.</A></li>

	<LI><A HREF="vcgrf269incorrectorderofoperations.htm">269 &#0150; Incorrect order of operations.</A></li>

	<LI><A HREF="vcgrf270formatstringmismatch.htm">270 &#0150; Format string mismatch.</A></li>

	<LI><A HREF="vcgrf271-formatstringmismatch.htm">271 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf272-formatstringmismatch.htm">272 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf273-formatstringmismatch.htm">273 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf274-formatstringmismatch.htm">274 - Format string mismatch.</A></li>

	<LI><A HREF="vcgrf276-castbetweensemanticallydifferentstringtypes.htm">276 - Cast between semantically different string types.</A></li>

	<LI><A HREF="vcgrf277-dangerouscalltofunction.htm">277 - Dangerous call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf278allocationfreemismatch.htm">278 &#0150; Allocation/free mismatch.</A></li>

	<LI><A HREF="vcgrf279-allocationfreemismatch.htm">279 - Allocation/free mismatch.</A></li>

	<LI><A HREF="vcgrf280-allocationfreemismatch.htm">280 - Allocation/free mismatch.</A></li>

	<LI><A HREF="vcgrf281-incorrectorderofoperators.htm">281 - Incorrect order of operators.</A></li>

	<LI><A HREF="vcgrf282-incorrectoperator.htm">282 - Incorrect operator.</A></li>

	<LI><A HREF="vcgrf283-allocationfreemismatch.htm">283 - Allocation/free mismatch.</A></li>

	<LI><A HREF="vcgrf284formatstringmismatch.htm">284 &#0150; Format string mismatch.</A></li>

	<LI><A HREF="vcgrf285-non-zeroconstantnon-zeroconstantisalwaystrue.htm">285 - (<I>&lt;non-zero constant&gt;</I> || <I>&lt;non-zero constant&gt;</I>) is always TRUE.</A></li>

	<LI><A HREF="vcgrf286-non-zeroconstantexpressionisalwaystrue.htm">286 - (<I>&lt;non-zero constant&gt;</I> || <I>&lt;expression&gt;</I>) is always TRUE.</A></li>

	<LI><A HREF="vcgrf287redundantcode.htm">287 &#0150; Redundant code.</A></li>

	<LI><A HREF="vcgrf288incorrectoperator.htm">288 &#0150; Incorrect operator.</A></li>

	<LI><A HREF="vcgrf289incorrectoperator.htm">289 &#0150; Incorrect operator.</A></li>

	<LI><A HREF="vcgrf290bitwiseoperationonlogicalresult.htm">290 &#0150; Bitwise operation on logical result.</A></li>

	<LI><A HREF="vcgrf291bitwiseoperationonlogicalresult.htm">291 &#0150; Bitwise operation on logical result.</A></li>

	<LI><A HREF="vcgrf292ill-definedfor-loop.htm">292 &#0150; Ill-defined for-loop.</A></li>

	<LI><A HREF="vcgrf293ill-definedfor-loop.htm">293 &#0150; Ill-defined for-loop.</A></li>

	<LI><A HREF="vcgrf294ill-definedfor-loop.htm">294 &#0150; Ill-defined for-loop.</A></li>

	<LI><A HREF="vcgrf295ill-definedfor-loop.htm">295 &#0150; Ill-defined for-loop.</A></li>

	<LI><A HREF="vcgrf296ill-definedfor-loop.htm">296 &#0150; Ill-defined for-loop.</A></li>

	<LI><A HREF="vcgrf297arithmeticoverflow.htm">297 &#0150; Arithmetic overflow.</A></li>

	<LI><A HREF="vcgrf298usingread-onlystringpointeraswritablestringargument.htm">298 &#0150; Using a read-only string <I>&lt;pointer&gt;</I> as a writable string argument.</A></li>

	<LI><A HREF="vcgrf299explicitlycomparingbitfieldtobooleanwillyieldunexpectedresults.htm">299 &#0150; Explicitly comparing a bit field to a Boolean will yield unexpected results.</A></li>

	<LI><A HREF="vcgrf300discardedresultsoftoplevelexpressionexpression.htm">300 &#0150; Discarded the results of top level expression <I>&lt;expression&gt;</I>.</A></li>

	<LI><A HREF="vcgrf301-functionisdeprecated.htm">301 - <I>&lt;function&gt;</I> is deprecated.</A></li>

	<LI><A HREF="vcgrf302formatstringmismatch.htm">302 &#0150; Format string mismatch.</A></li>

	<LI><A HREF="vcgrf303formatstringmismatch.htm">303 &#0150; Format string mismatch.</A></li>

	<LI><A HREF="vcgrf304addressoflocalarrayvariableissameaslocalarrayvariable.htm">304 &#0150; Address of local array <I>&lt;variable&gt;</I> is the same as the local array variable.</A></li>

	<LI><A HREF="vcgrf305potentialmismatchbetweensizeofcountofquantities.htm">305 &#0150; Potential mismatch between sizeof and countof quantities.</A></li>

	<LI><A HREF="vcgrf306incorrectcalltofunction.htm">306 &#0150; Incorrect call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf307castbetweensemanticallydifferentstringtypes.htm">307 &#0150; Cast between semantically different string types.</A></li>

	<LI><A HREF="vcgrf308leakingmemory.htm">308 &#0150; Leaking memory.</A></li>

	<LI><A HREF="vcgrf309potentialnullargumentnumbertofunction.htm">309 &#0150; Potential NULL argument <I>&lt;number&gt;</I> to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf310illegalconstantinexceptionfilter.htm">310 &#0150; Illegal constant in exception filter.</A></li>

	<LI><A HREF="vcgrf311considerusingfunctioninsteadoffunction.htm">311 &#0150; Consider using <I>&lt;function&gt;</I> instead of <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf312possibleinfiniteloop.htm">312 &#0150; Possible infinite loop.</A></li>

	<LI><A HREF="vcgrf313incorrectoperator.htm">313 &#0150; Incorrect operator.</A></li>

	<LI><A HREF="vcgrf314incorrectorderofoperations.htm">314 &#0150; Incorrect order of operations.</A></li>

	<LI><A HREF="vcgrf315incorrectorderofoperations.htm">315 &#0150; Incorrect order of operations.</A></li>

	<LI><A HREF="vcgrf316incorrectoperator.htm">316 &#0150; Incorrect operator.</A></li>

	<LI><A HREF="vcgrf317incorrectoperator.htm">317 &#0150; Incorrect operator.</A></li>

	<LI><A HREF="vcgrf318degenerate_try_except.htm">318 &#0150; Degenerate _try/_except.</A></li>

	<LI><A HREF="vcgrf319deadcode.htm">319 &#0150; Dead code.</A></li>

	<LI><A HREF="vcgrf321potentialuseofrelativepathnameincalltoloadlibraryawexaexw.htm">321 &#0150; Potential use of relative pathname in call to LoadLibrary(A/W/ExA/ExW).</A></li>

	<LI><A HREF="vcgrf322empty_exceptblock.htm">322 &#0150; Empty _except block.</A></li>

	<LI><A HREF="vcgrf323useofarithmeticoperatoronbools.htm">323 &#0150; Use of arithmetic operator on bool(s).</A></li>

	<LI><A HREF="vcgrf324potentialincorrectuseofstrcpy.htm">324 &#0150; Potential incorrect use of strcpy.</A></li>

	<LI><A HREF="vcgrf325potentialcomparisonofbstrwithnull.htm">325 &#0150; Potential comparison of BSTR with NULL.</A></li>

	<LI><A HREF="vcgrf326potentialcomparisonofconstantwithconstant.htm">326 &#0150; Potential comparison of a constant with constant.</A></li>

	<LI><A HREF="vcgrf327potentialbufferoverrun.htm">327 &#0150; Potential buffer overrun.</A></li>

	<LI><A HREF="vcgrf328typepassedasparameternumberwhentypeisrequiredincalltofunction.htm">328 &#0150; <I>&lt;type&gt;</I> passed as parameter <I>&lt;number&gt;</I> when <I>&lt;type&gt;</I> is required in call to <I>&lt;function&gt;</I>.</A></li>

	<LI><A HREF="vcgrf329returnvalueforcalltofunctionshouldnotbecheckedagainstnumber.htm">329 &#0150; Return value for a call to <I>&lt;function&gt;</I> should not be checked against <I>&lt;number&gt;</I>.</A></li>

	<LI><A HREF="vcgrf331invalidparameter.htm">331 &#0150; Invalid parameter.</A></li>

	<LI><A HREF="vcgrf332invalidparameter.htm">332 &#0150; Invalid parameter.</A></li>

	<LI><A HREF="vcgrf333invalidparameter.htm">333 &#0150; Invalid parameter.</A></li>

	<LI><A HREF="vcgrf334sizeofoperatorappliedtoexpressionwithoperatormayyieldunexpectedresults.htm">334 &#0150; The sizeof operator applied to an expression with an operator may yield unexpected results.</A></li>

	<LI><A HREF="vcgrf380legacyshutdownapifunctionused.htm">380 &#0150; Legacy shutdown API <I>&lt;function&gt;</I> used.</A></li>

	<LI><A HREF="vcgrf381shutdownapifunctionusedwithdwreasonequaltozeroothernolpmessagespecifiedorwithinvaliddwreason.htm">381 &#0150; Shutdown API <I>&lt;function&gt;</I> used with dwReason equal to zero (other) and no lpMessage specified, or with an invalid dwReason.</A></li>

	<LI><A HREF="vcgrf382shutdownresourceidvariableused.htm">382 &#0150; Shutdown resource ID <I>&lt;variable&gt;</I> used.</A></li>

	<LI><A HREF="vcgrf400-usingfunctiontoperformcase-insensitivecomparetoconstantstring.htm">400 - Using <I>&lt;function&gt;</I> to perform a case-insensitive compare to constant <I>&lt;string&gt;</I>.</A></li>

	<LI><A HREF="vcgrf401-usingfunctionindefaultlocalelocaletoperformcase-insensitivecomparetoconstantstring.htm">401 - Using <I>&lt;function&gt;</I> in default locale <I>&lt;locale&gt;</I> to perform a case-insensitive compare to constant <I>&lt;string&gt;</I>.</A></li>

	<LI><A HREF="vcgrf98102errorprocessingfile.htm">98102 &#0150; Error processing file.</A></li>

	<LI><A HREF="vcgrf99101internalerror.htm">99101 &#0150; Internal error.</A></li>
</UL>

<H4 class="dtH4">See Also</H4>

<P><A HREF="vcgrfprefastwarningmessagereference.htm">PREfast Warning Message Reference</A> | <A HREF="vcgrfprefastreference.htm">PREfast Reference</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p><MSHelp:link keywords="vxmscCopyright" TABINDEX="0">&copy; Microsoft Corporation. All rights reserved.</MSHelp:link></p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
