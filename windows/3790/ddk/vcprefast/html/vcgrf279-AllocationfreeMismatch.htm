<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>279 - Allocation/free mismatch.</TITLE>
<META Name="InChm" Content="True">
<META name="rtfFileName" content="prefast.rtf">
<!--CSS_START-->
<SCRIPT SRC="../scripts/dtuelink.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>PREfast&nbsp;User&nbsp;Guide</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vcgrf279-allocationfreemismatch"></A>279 - Allocation/free mismatch.</H1>

<H1 class="dtH1">Additional Information: <I>&lt;variable&gt;</I> is allocated with scalar new, deleted with array delete [] (see allocation at <I>&lt;location&gt;</I>).</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><!-- Topic Status -->
<P>This warning appears only in C++ code and indicates that the calling function has inconsistently allocated memory with the scalar <B>new </B>operator, but freed it with the array <B>delete []</B> operator. This is undefined behavior according to the C++ standard and the Microsoft Visual C++ implementation. This can cause problems for three reasons:

<UL type="disc">
	<LI>The constructors for the individual objects in the array are not invoked, but the destructors are invoked. </li>

	<LI>If global (or class-specific) <B>operator new</B> and <B>operator delete</B> are not compatible with <B>operator new[]</B> and <B>operator delete[]</B>, unexpected results are likely to occur</li>

	<LI>If memory is allocated with scalar <B>new</B>, it should typically be freed with scalar <B>delete</B>.</li>
</UL>

<P>The exact ramifications of this defect are difficult to predict. It can result in random behavior or crashes (because of usage of uninitialized memory because constructors are not invoked), or memory allocations and crashes (in situations where operators have been overridden). In rare cases, the mismatch can be unimportant. PREfast does not currently distinguish between these situations.</P>

<H4 class="dtH4">Example</H4>

<P><B>Defective Source</B></P>

<PRE class="code">C *pC = (C *)new byte[arraySize * sizeof (C)];

delete[] pC;</PRE>

<P><B>Corrected Source</B></P>

<PRE class="code">C *pC = (C *)new C[arraySize];

delete[] pC;</PRE>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p><MSHelp:link keywords="vxmscCopyright" TABINDEX="0">&copy; Microsoft Corporation. All rights reserved.</MSHelp:link></p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
