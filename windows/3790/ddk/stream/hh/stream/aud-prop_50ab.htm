<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KSPROPERTY_SYNTH_DLS_DOWNLOAD</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KSPROPERTY_SYNTH_DLS_DOWNLOAD">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ksproperty_synth_dls_download_ks"></A>KSPROPERTY_SYNTH_DLS_DOWNLOAD</H1>

<P>The KSPROPERTY_SYNTH_DLS_DOWNLOAD property is used to perform DLS downloads to the synthesizer.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=11%>Get</TH>
<TH align=left width=11%>Set</TH>
<TH align=left width=14%>Target</TH>
<TH align=left width=32%>Property Descriptor Type</TH>
<TH align=left width=32%>Property Value Type</TH>
</TR>

<TR VALIGN="top">
<TD width=11%>Yes</TD>
<TD width=11%>No</TD>
<TD width=14%>Pin</TD>
<TD width=32%><A HREF="aud-prop_5n3n.htm">KSNODEPROPERTY</A> + <A HREF="aud-prop_2nn7.htm">SYNTH_BUFFER</A></TD>
<TD width=32%><A HREF="aud-prop_8f8z.htm">SYNTHDOWNLOAD</A></TD>
</TR>
</TABLE><BR>

<P>The property descriptor (instance data) consists of a KSNODEPROPERTY structure that is immediately followed by a SYNTH_BUFFER structure, which specifies the location and size of the DLS data buffer that is being downloaded.</P>

<P>The property value (operation data) is a SYNTHDOWNLOAD structure. The miniport driver passes back the following information in this structure:

<UL>
	<LI>A handle that the miniport driver generates to uniquely identify the downloaded DLS data. This client should save this handle and use it later to unload the data (see <A HREF="aud-prop_6trn.htm">KSPROPERTY_SYNTH_DLS_UNLOAD</A>).</LI>

	<LI>A Boolean value that indicates whether the client can free the buffer containing the DLS data after the property request completes. If the miniport driver has made its own copy of the DLS data, the client can free the buffer. Otherwise, if the miniport driver continues to use the client's original DLS data buffer, the client should not free the buffer until the miniport driver unloads the DLS data.</LI>
</UL>

<H4>Return Value</H4>

<P>A KSPROPERTY_SYNTH_DLS_DOWNLOAD property request returns STATUS_SUCCESS to indicate that it has completed successfully. Otherwise, the request returns an appropriate error status code. The following table shows some of the possible error codes.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=39%>Status Code</TH>
<TH align=left width=61%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=39%>STATUS_BUFFER_TOO_SMALL</TD>
<TD width=61%>The buffer was too small to complete the operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>STATUS_UNSUCCESSFUL</TD>
<TD width=61%>The operation did not complete successfully.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>STATUS_NO_MEMORY</TD>
<TD width=61%>No memory is available to complete this request.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>dmusprop.h</I>. Include <I>dmusprop.h</I>.</P>

<H4>Comments</H4>

<P>For more information, see the discussion of the <B>IDirectMusicPort::DownloadInstrument</B> method in the Platform SDK documentation.</P>

<H4>Example</H4>

<P>The KSPROPERTY_SYNTH_DLS_DOWNLOAD property request specifies the location of the DLS download data with a user memory address. The miniport driver should probe and lock the user memory containing the DLS data before attempting to access it. The following example code shows how to do this:</P>

<PRE>  NTSTATUS Status = STATUS_UNSUCCESSFUL;
  PSYNTH_BUFFER pDlsBuffer = (PSYNTH_BUFFER)pRequest-&gt;Instance;
  PMDL pMdl = IoAllocateMdl(pDlsBuffer-&gt;BufferAddress, pDlsBuffer-&gt;BufferSize,
                            FALSE, FALSE, NULL);
  if (pMdl)
  {
      __try
      {
          MmProbeAndLockPages(pMdl, KernelMode, IoReadAccess);
          PVOID pvUserData = MmGetSystemAddressForMdlSafe(pMdl, NormalPagePriority);
 
         // do something with the data here
      }
      __except (EXCEPTION_EXECUTE_HANDLER)
      {
          Status = GetExceptionCode();
      }
 
      MmUnlockPages(pMdl);
      IoFreeMdl(pMdl);
  }
  else
  {
      Status = STATUS_NO_MEMORY;
  }</PRE>

<H4>See Also</H4>

<P><A HREF="aud-prop_5n3n.htm">KSNODEPROPERTY</A>, <A HREF="aud-prop_2nn7.htm">SYNTH_BUFFER</A>, <A HREF="aud-prop_8f8z.htm">SYNTHDOWNLOAD</A>, <A HREF="aud-prop_6trn.htm">KSPROPERTY_SYNTH_DLS_UNLOAD</A>, <A HREF="audmp-routines_1vec.htm"><B>IDirectMusicSynth::Download</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KSPROPERTY_SYNTH_DLS_DOWNLOAD"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
