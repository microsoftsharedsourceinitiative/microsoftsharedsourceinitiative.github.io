<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Driver Frameworks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Driver Frameworks">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_driver_frameworks_ksg"></A>Driver Frameworks</H3>

<P>All subunit drivers are written as WDM architecture drivers. However, being a WDM driver does not provide the standard mechanism necessary for applications to interact with and control your driver. The recommended approach for control of these types of devices at the application level is by DirectShow filters and filter graphs. The KS Proxy mechanism of DirectShow provides a generic filter (ksproxy.ax), a standard way to represent properties of the device (KS property sets), and a standard way to represent events that the device might trigger (KS event sets). </P>

<P>The KS proxy filter can be extended with “proxy plug-ins,” either provided by Microsoft or by each vendor, that allow COM interfaces to hide the low-level details of the KS property and event sets. However, a general way to directly access the property and event sets remains available. The IAMExtTransport interface (for tape subunits) is an example of an interface implemented in a proxy plug-in. The plug-in can also include property pages, providing a UI for control of the device. These property pages are generally used for testing purposes (through GraphEdit or AMCap), rather than for end-user device interaction. The plug-in is associated with your subunit driver by the INF file.</P>

<P>The KS Proxy mechanism is supported at the driver level by one of two driver frameworks. The first framework is called the Stream Class architecture. A subunit driver within this framework is referred to as a Streaming Minidriver. The next generation framework, which is recommended for all new driver development, is AV Streaming. Drivers using either framework can coexist, even within the same AV/C unit. For more information, see <A HREF="avsover_02w7.htm">AVStream Overview</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Driver%20Frameworks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
