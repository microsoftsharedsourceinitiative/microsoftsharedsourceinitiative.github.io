<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BdaGetChangeState</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="BdaGetChangeState">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_bdagetchangestate_ks"></A>BdaGetChangeState</H1>

<P>The <B>BdaGetChangeState</B> function returns the current change state of BDA topology. </P>

<PRE class=syntax><B>STDMETHODIMP_(NTSTATUS) 
  BdaGetChangeState(
    IN PIRP  </B><I>Irp</I><B>,</B>
<B>    OUT BDA_CHANGE_STATE  *</B><I>pChangeState</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Points to the IRP for the request to get the current change state.</DD>

<DT><I>pChangeState</I></DT>

<DD>Points to a variable that receives the current change state of BDA topology. The BDA change state can be one of the following values from the BDA_CHANGE_STATE enumeration:

<TABLE>

<TR VALIGN="top">
<TH align=left width=44%>Value</TH>
<TH align=left width=56%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=44%>BDA_CHANGES_COMPLETE</TD>
<TD width=56%>BDA topology changes are complete. </TD>
</TR>

<TR VALIGN="top">
<TD width=44%>BDA_CHANGES_PENDING</TD>
<TD width=56%>BDA topology changes are pending.</TD>
</TR>
</TABLE><BR>


</DD>
</DL>

<H4>Return Value</H4>

<P>Returns STATUS_SUCCESS or an appropriate error code. </P>

<H4>Headers</H4>

<P>Declared in <I>Bdasup.h</I>. Include <I>Bdasup.h</I>.</P>

<H4>Comments</H4>

<P>A BDA minidriver calls the <B>BdaGetChangeState</B> function to retrieve the current change state of BDA topology after the minidriver receives a KSMETHOD_BDA_GET_CHANGE_STATE request of the KSMETHODSETID_BdaChangeSync method set from the network provider. BDA minidrivers define dispatch and filter-automation tables so that those minidrivers either dispatch the <B>BdaGetChangeState</B> function directly or intercept this request using an internal method, which then calls the <B>BdaGetChangeState</B> function. For example, BDA minidrivers that intercept this request can obtain a pointer to the BDA filter from the passed IRP so that they can: 

<OL>
	<LI>Not only check for pending topology changes but also for pending changes on the filter. </LI>

	<LI>Return the current change state for both BDA topology and the BDA filter. </LI>
</OL>

<P>See <A HREF="bdadg_92xz.htm">Defining Automation Tables</A> and <A HREF="bdadg_3prb.htm">Changing BDA Filter Properties</A> for more information. </P>

<P>A BDA minidriver calls <B>BdaGetChangeState</B> at IRQL = PASSIVE_LEVEL.</P>

<P><B>BdaGetChangeState</B> is available on Windows® XP and later. <B>BdaGetChangeState</B> is available on the Windows 2000 platform only if DirectX 9.0 or later is installed on that platform.</P>

<H4>See Also</H4>

<P><A HREF="bdaref_7wvn.htm">BDA_CHANGE_STATE</A>, <A HREF="bdaref_3mlv.htm">KSMETHODSETID_BdaChangeSync</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: BdaGetChangeState"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
