<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KSPROPERTY</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KSPROPERTY">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ksproperty_ks"></A>KSPROPERTY</H1>

<P>The KSPROPERTY structure describes the property and request type of a property request.</P>

<PRE class=syntax>typedef struct {
    GUID Set;
    ULONG Id;
    ULONG Flags;
} KSIDENTIFIER;
 
typedef KSIDENTIFIER KSPROPERTY;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Set</B></DT>

<DD>Specifies a GUID that identifies this property set.</DD>

<DT><B>Id</B></DT>

<DD>Specifies the member of the property set.</DD>

<DT><B>Flags</B></DT>

<DD>Specifies the request type. If you are writing a stream class minidriver, also see <A HREF="ks-struct_2iwj.htm">KSPROPERTY_ITEM</A> for class-specific flag information. <B>Flags</B> should be one of the values listed in the following table.

<TABLE>

<TR VALIGN="top">
<TH align=left width=50%>Value</TH>
<TH align=left width=50%>Type of Property Request</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_GET</TD>
<TD width=50%>Get the current property data setting. Flags returned indicate read, write, or read/write access to the property. The queried identifier is appended to the structure as property-specific data. For multiple instance property sets, this identifies all sets as a whole, rather than any particular instance.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_SET</TD>
<TD width=50%>Set the current property data setting.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_SETSUPPORT</TD>
<TD width=50%>Does the driver support this property set?</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_BASICSUPPORT</TD>
<TD width=50%>What request types does the driver handle for this property? What is the valid data type, and what are the valid ranges for the property data? All property sets must support this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_DEFAULTVALUES</TD>
<TD width=50%>What are the driver's default values for the property data for this property? If default values exist, they are returned in the Basic Support information, rather than the normal range values. Default values are tagged as such by the filter when defining property range values.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_RELATIONS</TD>
<TD width=50%>Specify all properties whose property data depends on the current setting of this property. Specifies that the property relations list is to be returned, or the amount of buffer room required by such a list if the return buffer is the size of a ULONG. Each element is on FILE_QUAD_ALIGNMENT, preceded by a KSMULTIPLE_ITEM structure. This is not valid when querying support of the property set in general. All property sets must support this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_SERIALIZESET</TD>
<TD width=50%>Serialize the property set, using the standard KSPROPERTY_SERIALHDR and KSPROPERTY_SERIAL structures.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_UNSERIALIZESET</TD>
<TD width=50%>Unserialize the property set, using the standard KSPROPERTY_SERIALHDR and KSPROPERTY_SERIAL structures.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_SERIALIZESIZE</TD>
<TD width=50%>Returns a ULONG specifying size of the property data when serialized as part of a KSPROPERTY_TYPE_SERIALIZESET request. A size of zero indicates that a property does not need to be serialized.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_SERIALIZERAW</TD>
<TD width=50%>Specifies that the properties in this set should be serialized by the property set support handler, if one exists. If not, the call fails. The serialization format is private. This operation must be the inverse of KSPROPERTY_TYPE_UNSERIALIZERAW.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_TOPOLOGY</TD>
<TD width=50%>Property passed is of type <A HREF="ks-struct_0jhv.htm">KSP_NODE</A>, where NodeId indicates the numeric id of the topology node. Do not set this flag on its own; instead, OR it with the above.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>KSPROPERTY_TYPE_UNSERIALIZERAW</TD>
<TD width=50%>Specifies that the buffer provided contains a group of properties belonging to this set that should be unserialized by the property set support handler, if one exists. If not, the call fails. The serialization format is private. This operation must be the inverse of KSPROPERTY_TYPE_SERIALIZERAW. </TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ks.h</I>. Include <I>ks.h</I>.</P>

<H4>Comments</H4>

<P>The size of the output buffer passed determines what data is returned from a KSPROPERTY_TYPE_BASICSUPPORT request. If the output buffer is the size of a ULONG, only the access flags are returned. If the output buffer is the size of the <A HREF="ks-struct_9wab.htm">KSPROPERTY_DESCRIPTION</A> structure, the structure is filled with the access flags, the inclusive size of the entire values information, the property value type information, and the number of members lists that correspond to the structure.</P>

<P>For a KSPROPERTY_TYPE_RELATIONS request, data returned also depends on the size of the output buffer. If the output buffer size is zero, the size required to return the related properties is returned in <B>BytesReturned</B> with a warning status of STATUS_BUFFER_OVERFLOW. If the buffer is the size of a <A HREF="ks-struct_3f03.htm">KSMULTIPLE_ITEM</A> structure, both the byte size and count of relations is returned. Otherwise, the buffer is expected to be long enough to return the KSMULTIPLE_ITEM structure and all related property identifiers, which is returned as a list of <A HREF="ks-struct_1p6b.htm">KSIDENTIFIER</A> structures.</P>

<P>KSPROPERTY_TYPE_SERIALIZESET and KSPROPERTY_TYPE_UNSERIALIZESET requests allow interaction with multiple properties with a single call from the client. If the KS handler is being used to process property requests, these are broken up into multiple calls by the <A HREF="ksfunc_7sqb.htm"><B>KsPropertyHandler</B></A> function. When using this handler, the property set definition controls which properties are to be serialized. </P>

<P>For serialization requests, the <B>SerializedSize</B> member of the relevant <A HREF="ks-struct_2iwj.htm">KSPROPERTY_ITEM</A> structure is checked for a non-zero value indicating the size in bytes of the property, where –1 is unknown and must be queried (all unknown properties begin with a KSMULTIPLE_ITEM structure that can be queried separately). To query for the total size a serialization would take, the clients passes a zero length buffer in the call to <B>DeviceIoControl</B>. <B>BytesReturned</B> then returns the size in bytes the buffer must be to serialize the set and a warning status of STATUS_BUFFER_OVERFLOW is returned. A buffer allocated that size can then be filled with the serialized data.</P>

<P>The format of the serialization buffer is a <A HREF="ks-struct_4khf.htm">KSPROPERTY_SERIALHDR</A>, followed by serialized properties. Each property that follows contains a header (<A HREF="ks-struct_5yk3.htm">KSPROPERTY_SERIAL</A>), followed by the property data, with the start of each property on FILE_LONG_ALIGNMENT. Note that the serial header structure is defined to be on FILE_LONG_ALIGNMENT.</P>

<P>KSPROPERTY_TYPE_SERIALIZERAW and KSPROPERTY_TYPE_UNSERIALIZERAW are supported if a property item handler exists. The <B>KsPropertyHandler</B> function invokes the minidriver-provided handler. The buffer size required for serialization can also be queried by passing a zero length buffer to a serialize raw request. Because handlers are attached to property items rather than the property set, a specific item within the property set must be specified in the <B>Property</B> parameter. This handler may deal with multiple properties within the set.</P>

<P>The <A HREF="ks-struct_5lmb.htm">KSEVENT</A>, <A HREF="ks-struct_8xf7.htm">KSMETHOD</A>, and KSPROPERTY structures are aliases for the KSIDENTIFIER structure. As such, their definitions are identical. </P>

<P>See related information in <A HREF="ks-overview_1uhz.htm">KS Properties</A>.</P>

<H4>See Also</H4>

<P><A HREF="ks-struct_2iwj.htm">KSPROPERTY_ITEM</A>, <A HREF="ks-struct_9wab.htm">KSPROPERTY_DESCRIPTION</A>, <A HREF="ks-struct_3f03.htm">KSMULTIPLE_ITEM</A>, <A HREF="ks-struct_1p6b.htm">KSIDENTIFIER</A>, <A HREF="ks-struct_5lmb.htm">KSEVENT</A>, <A HREF="ks-struct_8xf7.htm">KSMETHOD</A>, <A HREF="ks-struct_4khf.htm">KSPROPERTY_SERIALHDR</A>, <A HREF="ks-struct_5yk3.htm">KSPROPERTY_SERIAL</A>, <A HREF="ksfunc_7sqb.htm"><B>KsPropertyHandler</B></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KSPROPERTY"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
