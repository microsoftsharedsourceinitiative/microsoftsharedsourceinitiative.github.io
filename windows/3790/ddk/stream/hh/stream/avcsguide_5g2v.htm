<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using AVCSTRM.sys</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Using AVCSTRM.sys">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_using_avcstrm.sys_ksg"></A>Using <I>Avcstrm.sys</I></H1>

<P>The AV/C Streaming filter driver (<I>avcstrm.sys</I>) can start providing services after its client subunit driver creates a data stream. A data stream can be categorized to perform three functions: data streaming, clock provider, and getting and setting of stream properties or events. These three functions are inter-related, and the data stream's behavior will be controlled with stream state: stop, pause, or run.</P>

<P>A subunit driver first requests that the AV/C Streaming filter driver open a stream with a given data format. This data format contains definitions of the signal format used in IEC 61883-x protocol specifications. This signal can be SDDV or MPEG2TS. This protocol defines how data is transmitted on the 1394 bus. The AV/C Streaming filter driver validates and caches the data format, queries the available isochronous resources from the target device, such as plug information, and allocates the necessary resources for queuing data streaming requests. Upon successful creation of a stream, a stream context is returned. This context is a pointer to an opaque structure that contains information about the current stream, such as data format and stream state.</P>

<P>After a stream is created, a subunit driver can start to send down the stream data request. This request will be queued and a separate IRP will be allocated and submitted to <I>61883.sys</I> for receiving data or data transmission. Upon completion of the data request, the completion routine will be called. This request is asynchronous because data transfer is controlled by the stream state and availability of the data.</P>

<P>The stream may be in either paused or run states when stream data requests arrive. The isochronous connection is made in the paused state. The AV/C Streaming filter driver will request the 61883-protocol driver (<I>61883.sys</I>) to allocate bandwidth and isochronous channel, if needed, transitioning into the run state.</P>

<P>A data stream will be stopped when transitioning into the stop state. The AV/C Streaming filter driver will reclaim ownership of the data buffer by requesting 61883 to detach the data buffers. These data buffers will be completed with STATUS_CANCELLED.</P>

<P>A stream may need to be aborted during events such as surprise device removal or data IRP cancellation, for example, if the thread that dispatched the IOCTL was terminated. When transitioning to a stop state, the AV/C Streaming filter driver will stop isochronous data transfer but it does not change the stream state.</P>

<P>As a filter driver, <I>avcstrm.sys</I> filters and processes only the I/O request packet (IRP) with <B>MajorFunction</B> of IRP_MJ_INTERNAL_DEVICE_CONTROL and the I/O control (IOCTL) code of IOCTL_AVCSTRM_CLASS, and passes through other IRPs to the lower stack. Depending on the request, the AV/C Streaming filter driver processes an IRP from its client and then creates one or more locally allocated IRPs to request service from its lower stack, either the 61883 or AV/C protocol drivers. Even though the IRP from a subunit driver can be used to send down a request to the lower stack, it is safer to create a different IRP in case a class driver claims ownership of an IRP.</P>

<P>The AV/C Streaming filter driver is designed to work with the kernel streaming (KS) mini driver on the 61883 and AV/C stack. A subunit driver can use either the stream class driver (KS 1.0) or the AVStream class driver (KS 2.0) to handle and provide the semantics of kernel streaming, but it has no built in dependency on structures used by only the class driver. A subunit driver that uses a class driver must extract the KS structure from the class driver structures to construct requests to be issued to the AV/C Streaming filter driver. Therefore, the subunit driver has a dependency only on <I>ks.h</I> and <I>avcstrm.h</I>. </P>

<P>In the following section, each AV/C Streaming command function is discussed (some with sample code). The sample code used in this section is from a streaming class (KS 1.0) based subunit driver.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Using%20AVCSTRM.sys"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
