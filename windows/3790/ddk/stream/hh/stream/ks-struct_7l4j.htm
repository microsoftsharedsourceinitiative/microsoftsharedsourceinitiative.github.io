<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KSSTREAM_HEADER</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KSSTREAM_HEADER">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ksstream_header_ks"></A>KSSTREAM_HEADER</H1>

<P>The KSSTREAM_HEADER structure is a variable-length structure that describes a packet of data to be read from or written to a streaming driver pin.</P>

<PRE class=syntax>typedef struct {
    ULONG       Size;
    ULONG       TypeSpecificFlags;
    KSTIME      PresentationTime;
    LONGLONG    Duration;
    ULONG       FrameExtent;
    ULONG       DataUsed;
    PVOID       Data;
    ULONG       OptionsFlags;
} KSSTREAM_HEADER, *PKSSTREAM_HEADER;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Size</B></DT>

<DD>Specifies the size in bytes of the structure. This should be at least <B>sizeof</B>(KSSTREAM_HEADER).</DD>

<DT><B>TypeSpecificFlags</B></DT>

<DD>Specifies the flags specific to a data format.</DD>

<DT><B>PresentationTime</B></DT>

<DD>Specifies the presentation time for the related stream buffer, nominally in 100-nanoseconds units. This represents the presentation time of the initial sample in the stream data, and cannot be separately modified without knowledge of the data format. If the no-timestamp flag is set, this is ignored.</DD>

<DT><B>Duration</B></DT>

<DD>Optionally specifies the duration of this stream segment in the same units as the presentation time. Set to zero when not used. This can be used to shorten the data presented from the amount of data actually passed. For example, a set of MPEG frames may be passed all in a single block because of encryption constraints and the duration indicates the actual amount of data to be rendered.</DD>

<DT><B>FrameExtent</B></DT>

<DD>Specifies the size of the entire frame. The region within the frame extent is available to the filter and the resulting valid data size for the stream operation is reflected in the <B>DataUsed</B> member.</DD>

<DT><B>DataUsed</B></DT>

<DD>Specifies, for a write operation, the number of bytes within the frame that are valid when submitting a frame to a lower-level driver. The headers are not modified on a write operation; however, the <B>Information</B> member of the IO_STATUS_BLOCK structure contains the total number of bytes actually written. For a read operation, this field is not used when submitting a frame to a lower-level driver and must be set to 0. On return, this member contains the number of bytes actually filled in this frame and the <B>Information</B> member of the IO_STATUS_BLOCK structure contains the size of the list of headers actually used.</DD>

<DT><B>Data</B></DT>

<DD>Specifies the virtual address of the data buffer.</DD>

<DT><B>OptionsFlags</B></DT>

<DD>Specifies a variety of attributes of the data stream. The <B>OptionsFlags</B> member can have the values listed in the following table.</DD>
</DL>

<PRE></PRE>

<TABLE>

<TR VALIGN="top">
<TH align=left width=52%>Value</TH>
<TH align=left width=48%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY</TD>
<TD width=48%>Specifies that there has been a discontinuity in the data stream before the data contained in this packet. This implies that the filter may need to reset its internal state before processing the data. No actual data buffer need be attached.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_DURATIONVALID</TD>
<TD width=48%>The <B>Duration</B> member of this structure is valid.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM</TD>
<TD width=48%>Indicates that this frame represents the end of the data stream. This can then be used to generate an end-of-stream event.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE</TD>
<TD width=48%>If the stream is paused, this buffer should be flushed. This parameter is used, for example, by live data sources, where a pause renders the current data stale.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA</TD>
<TD width=48%>This data buffer is the start of looped data. The driver should loop on this data until explicitly stopped.   </TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_PREROLL</TD>
<TD width=48%>The data in this buffer is used to prime the device state. This is a stream-specific option.   </TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT</TD>
<TD width=48%>The data stream is at a natural point for splicing.   A client uses this, for example, when sending data that uses inter-frame compression, such as MPEG video, to indicate that it is safe to splice at this point.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY</TD>
<TD width=48%>There is a discontinuity in the data stream after this packet. This flag may be used for positional oriented interfaces to indicate an end of stream data. No actual data buffer need be attached. </TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_TIMEVALID</TD>
<TD width=48%>The <B>PresentationTime</B> member of this structure is valid. Indicates that this buffer has a valid timestamp associated with it.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>KSSTREAM_HEADER_OPTIONSF_TYPECHANGED</TD>
<TD width=48%>The data format for this stream has changed. The data buffer actually contains the <A HREF="ks-struct_0fub.htm">KSDATAFORMAT</A> structure that defined the new format. Valid only for streams that have previously negotiated dynamic type changing. On a Stream Write, the new data format must be contained in place of a media sample, and if the media-specific extension size is different, must be the last header in a list of headers for that stream request. The data allocator is not used to contain the new media format. On a Stream Read, any further I/O remains pending until the new format is retrieved through KSPROPERTY_CONNECTION_DATAFORMAT. On a Stream Write, the header must not be extended, and must be the only header in the Write.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>ks.h</I>. Include <I>ks.h</I>.</P>

<H4>Comments</H4>

<P>This structure may be followed in memory by additional information specific to the type of data in the data packet.</P>

<P>The presentation time is normally in 100-nanosecond units, however the standard format of this time is based on the data format. For example, this number might represent the current sample. This number can be normalized using the KSSTREAM_HEADER.PresentationTime.Numerator and KSSTREAM_HEADER.PresentationTime.Denominator as a scaling fractional. This allows time to be represented in a native format to reduce unnecessary conversions, but implies that the native value can be linearly scaled. A value of <SUP>1</SUP>/<SUB>1</SUB> indicates that no scaling is necessary. A conversion should use the numerator first, then the denominator, in order to reduce rounding errors. For example, an audio stream may present the current time as a byte offset in the data stream:</P>

<PRE>#define BITS_PER_BYTE    8
#define NANOSECONDS    10000000

StreamHdr-&gt;PresentationTime.Numerator = BITS_PER_BYTE * NANOSECONDS;
StreamHdr-&gt;PresentationTime.Denominator = BitsPerSample * Channels * Frequency;
StreamHdr-&gt;PresentationTime.Time = ByteOffset;
StreamHdr-&gt;Duration = ByteLength;</PRE>

<P>On an IOCTL_KS_READ_STREAM, portions of the stream header are filled in by the call. Each KSSTREAM_HEADER.DataUsed element contains the actual number of bytes read, which is less than or equal to each KSSTREAM_HEADER.FrameExtent. The pIrp-&gt;IoStatus.Information element contains the total size of the header data to return, which is at least one sizeof(KSSTREAM_HEADER). The headers could be longer if this was defined by the data format.</P>

<P>On an IOCTL_KS_WRITE_STREAM, the member elements must be initialized, and each KSSTREAM_HEADER.DataUsed element contains the number of bytes to write. The actual number of total bytes written is returned in pIrp-&gt;IoStatus.Information. This is less than or equal to the total of all KSSTREAM_HEADER.DataUsed elements in the headers.</P>

<H4>See Also</H4>

<P><A HREF="ks-struct_0fub.htm">KSDATAFORMAT</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KSSTREAM_HEADER"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
