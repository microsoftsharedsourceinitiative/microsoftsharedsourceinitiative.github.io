<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IMiniport::DataRangeIntersection</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IMiniport::DataRangeIntersection">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iminiport_datarangeintersection_ks"></A>IMiniport::DataRangeIntersection</H1>

<P>The <B>DataRangeIntersection</B> method determines the highest quality intersection of two data ranges.</P>

<PRE class=syntax><B>NTSTATUS
  DataRangeIntersection(
</B>    <B>IN ULONG  </B><I>PinId</I>,
    <B>IN PKSDATARANGE  </B><I>DataRange</I>,
    <B>IN PKSDATARANGE  </B><I>MatchingDataRange</I>,
    <B>IN ULONG  </B><I>OutputBufferLength</I>,
    <B>OUT PVOID</B>  <I>ResultantFormat</I>  <B>OPTIONAL</B>,
    <B>OUT PULONG</B>  <I>ResultantFormatLength</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>PinId</I></DT>

<DD>Specifies the pin ID. This parameter identifies the pin factory for which the data intersection is being determined. If the filter contains N pin factories, valid pin IDs range from 0 to N-1.</DD>

<DT><I>DataRange</I></DT>

<DD>Pointer to a <A HREF="ks-struct_065v.htm">KSDATARANGE</A> structure that contains the data range submitted by the client in the data-range intersection property request.</DD>

<DT><I>MatchingDataRange</I></DT>

<DD>Pointer to a <A HREF="ks-struct_065v.htm">KSDATARANGE</A> structure that contains the miniport driver's data range that is to be compared to the client's data range.</DD>

<DT><I>OutputBufferLength</I></DT>

<DD>Specifies the size in bytes of the buffer pointed to by the <I>ResultantFormat</I> parameter. The caller can specify <I>OutputBufferLength</I> as zero to query for the required buffer size. See the following <B>Comments</B> section.</DD>

<DT><I>ResultantFormat</I></DT>

<DD>Pointer to the buffer into which the method writes the resultant format. If this parameter is NULL, the <I>OutputBufferLength</I> parameter must be zero. If non-NULL, this parameter must point to a buffer that is large enough to contain the number bytes specified in <I>OutputBufferLength</I>.</DD>

<DT><I>ResultantFormatLength</I></DT>

<DD>Output pointer for the resultant-format length. This parameter points to a caller-allocated ULONG variable into which the method writes the length of the resultant format. This is the size in bytes of the resultant format that is written to the buffer pointed to by <I>ResultantFormat</I>. This size must be less than or equal to <I>OutputBufferLength</I> (unless <I>OutputBufferLength</I> is zero; see the following <B>Comments</B> section).
</DD>
</DL>

<H4>Return Value</H4>

<P><B>DataRangeIntersection</B> returns STATUS_SUCCESS if the call was successful. Otherwise, the method returns an appropriate error code. The following table shows some of the possible return status codes.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=46%>Error Code</TH>
<TH align=left width=54%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=46%>STATUS_NO_MATCH</TD>
<TD width=54%>There is no intersection.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>STATUS_NOT_IMPLEMENTED</TD>
<TD width=54%>Defers data-intersection handling to the port driver's default data-intersection handler.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=54%>The <I>OutputBufferLength</I> parameter was specified as zero.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>STATUS_BUFFER_TOO_SMALL</TD>
<TD width=54%>The buffer length specified in <I>OutputBufferLength</I> was nonzero but was too small to hold the resultant format.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>portcls.h</I>. Include <I>portcls.h</I>.</P>

<H4>Comments</H4>

<P>The <B>DataRangeIntersection</B> method is the miniport driver's <A HREF="aud-design_8n1j.htm">data-intersection handler</A>. The port driver calls this method when it receives a data-range intersection property request (see <A HREF="ks-prop_7gdv.htm">KSPROPERTY_PIN_DATAINTERSECTION</A>) and the target for the request is a pin factory on a filter instance that the miniport driver implements.</P>

<P>The <I>ResultantFormatBuffer</I> parameter points to a buffer that begins with a <A HREF="aud-prop_7v77.htm">KSDATAFORMAT_WAVEFORMATEX</A> structure. Note that the <B>WaveFormatEx</B> member of this structure can be extended to include additional format information (for example, a channel configuration mask). For more information, see <A HREF="aud-prop_7wz7.htm">WAVEFORMATEXTENSIBLE</A>.</P>

<P>The <I>ResultantFormat</I> parameter is optional and can be specified as NULL, in which case <I>OutputBufferLength</I> must be specified as zero. The caller can query for the required buffer length by making an initial call to <B>DataRangeIntersection</B> with an <I>OutputBufferLength</I> value of zero. The method responds by writing the required buffer length to the location pointed to by <I>ResultantFormatLength</I> and returning status code STATUS_BUFFER_OVERFLOW. The caller can then allocate a buffer of the required size and specify this buffer in a second call to <B>DataRangeIntersection</B>.</P>

<H4>See Also</H4>

<P><A HREF="ks-struct_065v.htm">KSDATARANGE</A>, <A HREF="ks-prop_7gdv.htm">KSPROPERTY_PIN_DATAINTERSECTION</A>, <A HREF="aud-prop_7v77.htm">KSDATAFORMAT_WAVEFORMATEX</A>, <A HREF="aud-prop_7wz7.htm">WAVEFORMATEXTENSIBLE</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IMiniport::DataRangeIntersection"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
