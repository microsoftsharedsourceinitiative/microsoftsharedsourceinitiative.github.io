<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CUV Limitations</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="CUV Limitations">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_cuv_limitations_tools"></A>CUV Limitations</H2>

<P>Call Usage Verifier (CUV) is a diagnostic tool for finding otherwise hard-to-spot driver errors. However, shared data structures and stack-based data structures can cause CUV to report false errors.</P>

<H4>Shared Data Structures</H4>

<P>Most CUV error checks keep track of calls that your driver makes to specific standard driver routines. When a driver attempts to use a data structure, such as a list head or spin lock, in a call to a routine that CUV tracks, and CUV has not seen the driver previously call an initialization routine for that data structure, CUV reports an error.</P>

<P>Therefore, if a driver uses a data structure that has been properly initialized by a component other than that driver, CUV will report an error. You can ignore such errors, if you are sure that the data structure has been properly initialized. If your driver frequently uses shared data structures for lists or spin locks, you should probably not use CUV.</P>

<H4>Stack-Based Structures</H4>

<P>In general, CUV does not track or validate data structures that are located on the stack, because stack-based variables are valid only within the scope of the current function. However, due to the way Windows manages stacks in deferred procedure calls (DPCs) and interrupt service routines (ISRs), CUV might incorrectly identify stack-based variables used by these routines as not being on the stack. This can cause CUV to report false errors for such variables. For example, CUV might report that a data structure has already been initialized, when in fact it has not.</P>

<P>Most data structures that would typically be tracked by CUV are not tracked or validated if CUV determines that they are located on the stack. However, CUV can be "fooled" by data structures that are located on the stack within DPCs and ISRs. Therefore, CUV can report false errors for stack-based data structures — such as reporting that such a data structure has already been initialized, when in fact it has not.</P>

<P>CUV does not consider the stack to be a valid storage location for structures that must reside in nonpaged memory. Although the stack can safely be used for temporary storage of nonpaged data structures under some very specific conditions, such cases are very rare. So, for example, if a driver allocates an IRP or a spin lock on the stack, CUV will report this as an error.</P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: CUV%20Limitations"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
