<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CUV Error Messages</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="CUV Error Messages">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iogetnextirpstacklocation_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_cuv_error_messages_tools"></A>CUV Error Messages</H3>

<P>This section describes each of the error messages that CUV displays. In the error messages, <I>Type</I> represents the name of a data structure and <I>Number</I> identifies a parameter of the current routine. (A <I>Number</I> value of 1 represents the first argument.)

<DL>
<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] has not been previously initialized by this driver."</B></DT>

<DD>CUV has not seen a call to an appropriate initialization routine prior to this use of <I>Type</I> as parameter <I>Number</I> in this function call. The address of the parameter <I>Type</I> is <I>Address</I>.</DD>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] has already been initialized by this driver."</B></DT>

<DD>CUV has already seen a call to initialize the data structure <I>Type</I>. The message typically appears as a result of a second or subsequent call to the same initialization routine and before <I>Type</I> has been used in another function call.</DD>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] has been initialized by this driver as a </B><I>Type1</I><B> (not a </B><I>Type2</I><B>)."</B></DT>

<DD>CUV has seen a prior initialization of the data structure at <I>Address</I> as a data structure of <I>Type1</I>, but the driver is attempting to use or initialize this same location as a data structure of <I>Type2</I>.</DD>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] has been previously initialized and used as a </B><I>Type2</I><B> by this driver."</B></DT>

<DD>The driver is attempting to use a data structure that has been initialized (and perhaps used) as a <I>Type1</I>. For example, this message is displayed when a driver attempts to use the same spin lock as both an in-stack queued spin lock and a standard executive (IRQL = DISPATCH_LEVEL) spin lock.</DD>

<DT><B>"The </B><I>Type1</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address1</I><B>] is not the same </B><I>Type2</I><B> [0x</B><I>Address2</I><B>] as previously used with the </B><I>PairedType</I><B> specified on the function call. Refer to your use of this same </B><I>Type</I><B> at </B><I>Path</I><B>, line </B><I>LineNumber</I><B>."</B></DT>

<DD>The driver has incorrectly used a set of paired data structures, using <I>Type1</I> at <I>Address1</I> in this function call with <I>PairedType</I>, and the <I>Type2</I> at <I>Address2</I> also with <I>PairedType</I> previously. For example, this message is displayed when a driver attempts to perform interlocked operations on one list head, using two different spin locks.</DD>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] must be located in non-paged memory, but is instead a NULL pointer."</B></DT>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] must be located in non-paged memory, but is instead located in paged memory."</B></DT>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] must be located in non-paged memory, but is instead located on the stack."</B></DT>

<DD>The data structure of <I>Type</I> that is located at <I>Address</I> must be located in nonpaged space, but CUV has found the data structure located in the memory type specified. Note that CUV does not consider the stack to be a valid storage location for structures that must reside in nonpaged memory. See <A HREF="cuv_2dmb.htm">CUV Limitations</A> for a further discussion of stack-based nonpaged parameters.</DD>

<DT><B>"The </B><I>Type</I><B> specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] is not a valid </B><I>Type</I><B>."</B></DT>

<DD>CUV has determined that the data structure at <I>Address</I> is not a valid <I>Type</I>. For example, this message is displayed when CUV attempts to validate an IRP and discovers that <B>Irp-&gt;Type</B> does not equal IO_TYPE_IRP.</DD>

<DT><B>"The current stack location in the IRP specified as parameter </B><I>Number</I><B> [0x</B><I>Address</I><B>] is not valid."</B></DT>

<DT><B>"The next stack location in the IRP specified as parameter num [0xaddress] is not valid."</B></DT>

<DD>The indicated stack location in the IRP at <I>Address</I> is not valid, because there is no such stack location in the IRP. For example, this message is displayed when a driver calls <A HREF="JavaScript:hhobj_1.Click()"><B>IoGetNextIrpStackLocation</B></A>, but there are no more valid stack locations in the IRP.


</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: CUV%20Error%20Messages"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
