<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GFlags Examples</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="GFlags Examples">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_gflags_examples_tools"></A>GFlags Examples</H2>

<P>The examples in this topic show how to submit GFlags commands and how to use Gflags features in practical scenarios.</P>

<H4>Example 1 – Displaying Global Flags</H4>

<P>The commands demonstrated in this example display the system-wide flags set in the registry, the system flags set for the session (kernel mode), and the flags set for an image file. </P>

<P>The following GFlags command displays the current value of the system-wide flags set in the registry. It uses the <B>/r</B> parameter to specify the system-wide registry entry.</P>

<PRE>gflags /r 
</PRE>

<P>In response, GFlags displays a single hexadecimal value representing the sum of all flags set and a list of the flags set.</P>

<PRE>Current Boot Registry Settings are: 40001400
    ptg - Enable pool tagging
    ust - Create user mode stack trace database
    bhd - Enable bad handles detection
</PRE>

<P>In this example, the results show that there are three tags set, with a combined value of 0x40001400.

<UL>
	<LI><A HREF="gflags_7u5v.htm#ddk_enable_pool_tagging_tools"><B>Enable pool tagging</B></A> (ptg) = 0x400 </LI>

	<LI><A HREF="gflags_7u5v.htm#ddk_create_user_mode_stack_trace_database_tools"><B>Create user mode stack trace database</B></A> (ust) = 0x1000 </LI>

	<LI><A HREF="gflags_7u5v.htm#ddk_enable_bad_handles_detection_tools"><B>Enable bad handles detection</B></A> (bhd) = 0x40000000 </LI>
</UL>

<P>The following command displays the flags set for the current session. It uses the <B>/k</B> parameter to indicate kernel mode.</P>

<PRE><B>gflags /k</B> 
</PRE>

<P>The following command displays flags set in the registry for the image file <I>Notepad.exe</I>. It uses the <B>/i</B> parameter to indicate image file mode and specifies the image file.</P>

<PRE><B>gflags /i notepad.exe</B> 
</PRE>

<P>Remember that the flag value displayed might not be the current, effective flag value. Changes to the system-wide flags are not effective until you restart Windows. Changes to image file flag settings are not effective until you restart the program.</P>

<H4>Example 2 – Setting a Flag by Using a Flag Abbreviation</H4>

<P>The following command sets the <A HREF="gflags_7u5v.htm#ddk_show_loader_snaps_tools">Show Loader Snaps</A> flag for the <I>Notepad.exe</I> image file. <B>Show Loader Snaps</B> takes snapshots of the load process, capturing in detail the loading and unloading of executable images and their supporting library modules.</P>

<P>The command uses the <B>/i</B> parameter to indicate image file mode and specifies the name of the image file <I>Notepad.exe</I>. To identify the flag, the command uses <B>sls</B>, the abbreviation for <B>Show Loader Snaps</B>, and it precedes the abbreviation with a plus sign (+) to indicate that the flag is set. Without the plus sign, the command has no effect.</P>

<PRE><B>gflags /i notepad.exe +sls</B> 
</PRE>

<P>In response, GFlags displays the flags set for <I>Notepad.exe</I>. The display indicates that the command is successful. The <B>Show Loader Snaps</B> feature is enabled for all new sessions of the Notepad program.</P>

<PRE>Current Registry Settings for notepad.exe executable are: 00000002
    sls - Show Loader Snaps
</PRE>

<H4>Example 3 – Setting a Flag by Using Its Hexadecimal Value</H4>

<P>The following command sets the system-wide <A HREF="gflags_7u5v.htm#ddk_enable_page_heap_tools">Enable Page Heap</A> flag. <B>Enable Page Heap</B> adds a guard page and other tracking features to each heap allocation.</P>

<P>The command uses the <B>/r</B> parameter to indicate system-wide registry mode. To identify the flag, the command uses <B>2000000</B>, which represents 0x2000000, the hexadecimal value for <B>Enable Page Heap</B>.</P>

<P>Although the command sets a flag, it omits the plus (+) sign. When using hexadecimal values, the sign is optional and add (+) is the default.</P>

<PRE><B>gflags /r 2000000 
</B></PRE>

<P>In response, GFlags displays the system-wide flags set in the registry. The display indicates that the command is successful. The <B>Enable Page Heap</B> feature will be enabled for all processes when Windows restarts.</P>

<PRE>Current Boot Registry Settings are: 02000000
    hpa - Enable page heap
</PRE>

<H4>Example 4 – Setting Multiple Flags</H4>

<P>The following command sets these three flags for the current session:

<UL>
	<LI><A HREF="gflags_7u5v.htm#ddk_enable_heap_free_checking_tools">Enable heap free checking</A> (hfc, 0x20) </LI>

	<LI><A HREF="gflags_7u5v.htm#ddk_enable_heap_parameter_checking_tools">Enable heap parameter checking</A> (hpc, 0x40) </LI>

	<LI><A HREF="gflags_7u5v.htm#ddk_enable_heap_validation_on_call_tools">Enable heap validation on call</A> (hvc, 0x80) </LI>
</UL>

<P>This command uses the <B>/k</B> parameter to specify kernel mode (session only). It sets the value for kernel mode to <B>E0</B> (0xE0), the sum of the hexadecimal values of the selected flags (0x20 + 0x40 + 0x80).</P>

<PRE><B>gflags /k e0 
</B></PRE>

<P>In response, GFlags displays the revised value of flags set for the session. The display indicates that the command is successful and that the three flags specified in the command are set.</P>

<PRE>Current Running Kernel Settings are: 000000e0
    hfc - Enable heap free checking
    hpc - Enable heap parameter checking
    hvc - Enable heap validation on call
</PRE>

<P>You can use several different GFlags commands to set flags. Each of the following commands has the same effect as the command used in this example and the methods can be used interchangeably: </P>

<PRE><B>gflags /k +20 +40 +80 
gflags /k +E0 
gflags /k +hfc +hpc +hvc 
</B></PRE>

<P>Kernel-mode (session-only) flags are effective immediately and remain effective until Windows shuts down.</P>

<H4>Example 5 – Clearing a Flag</H4>

<P>The following command clears the system-wide <A HREF="gflags_7u5v.htm#ddk_enable_page_heap_tools">Enable Page Heap</A> flag set in the registry. The command uses the <B>/r</B> parameter to indicate the system-wide registry mode and <B>hpa</B>, the abbreviation for the <B>Enable Page Heap</B> flag. The minus sign (<B>-</B>) indicates that the flag is to be cleared.</P>

<PRE><B>gflags /r -hpa 
</B></PRE>

<P>In response, GFlags displays the current value of the system-wide registry entry. The display indicates that the command is successful and that there are no longer any flags set.</P>

<PRE>Current Boot Registry Settings are: 00000000 
</PRE>

<P>Note that the following command, which uses the hexadecimal value of the <B>Enable Page Heap</B> flag, has the same effect as the command used in this example. These commands can be used interchangeably:</P>

<PRE><B>gflags /r -02000000</B> 
</PRE>

<H4>Example 6 – Clearing All Flags</H4>

<P>This example demonstrates two different ways to clear all flags set in the registry and for the session:

<UL>
	<LI>Subtract the current flag value.</LI>

	<LI>Subtract high values.</LI>
</UL>

<P class=note><B>Note</B>&nbsp;&nbsp;The methods demonstrated by this example clear flags only. They do not reset the maximum stack trace size or kernel special pool tag to the default values. </P>

<H4>Subtract the Current Flag Value</H4>

<P>The following command clears all flags set in the system-wide flag entry in the registry by subtracting the current value of the entry. In this example, the current value is 0xE0. The command uses the <B>/r</B> parameter to indicate the system-wide registry mode and the E0 value with a minus sign (<B>-</B>) to subtract E0 from the flag value.</P>

<PRE><B>gflags /r -E0 
</B></PRE>

<P>In response, GFlags displays the revised value of system-wide flag registry entry. A value of zero indicates that the command is successful and that there are no longer any system-wide flags set in the registry.</P>

<PRE>Current Boot Registry Settings are: 00000000 
</PRE>

<P>Note that the following commands have the same effect as the command used in this example and can be used interchangeably:</P>

<PRE><B>gflags /r -20 -40 -80 
gflags /r -hfc -hpc -hvc 
</B></PRE>

<H4>Subtract High Values</H4>

<P>The following command clears all system-wide flags by subtracting high values (0xFFFFFFFF) from the system-wide flag setting.</P>

<PRE><B>gflags /r -ffffffff 
</B></PRE>

<P>In response, GFlags displays the revised value of the system-wide flag entry. A value of zero indicates that the command is successful and that there are no longer any system-wide flags set in the registry.</P>

<PRE>Current Boot Registry Settings are: 00000000 
</PRE>

<P class=note><B>Tip</B>&nbsp;&nbsp;Type this command into Notepad, then save the file as <I>ClearFlag.bat</I>. Thereafter, to clear all flags, just type <B>ClearFlag</B>. </P>

<P>Finally, the following example demonstrates that the intuitive method of clearing all flags does not work.</P>

<P>The following command appears to set the value of the system-wide flag entry to&nbsp;0. However, it actually adds zero to the system-wide flag value. In this example, the current value of the system-wide flag entry is 0xE0.</P>

<PRE><B>gflags /r 0 
</B></PRE>

<P>In response, GFlags displays the system-wide flag value after the command completes:</P>

<PRE>Current Boot Registry Settings are: 000000e0
    hfc - Enable heap free checking
    hpc - Enable heap parameter checking
    hvc - Enable heap validation on call
</PRE>

<P>The command has no effect because it adds the value 0 to system-wide flag entry.</P>

<H4>Example 7 – Clearing All Flags for an Image File</H4>

<P>The following command clears all flags and image debugger options for an image file. The command adds high-values (0xFFFFFFFF) to the current flag value. GFlags responds by deleting the <B>GlobalFlag</B> registry entry for the image file, thereby deleting all of the values it stores.</P>

<P>This command does not affect flags set in the system-wide <B>GlobalFlag</B> registry entry or flags set for the session (kernel mode).</P>

<PRE><B>gflags /i notepad.exe ffffffff 
</B></PRE>

<P>In response, GFlags displays a message indicating that there are no flags set for the image file:</P>

<PRE>No Registry Settings for notepad.exe executable 
</PRE>

<H4>Example 8 – Enlarging the User-Mode Stack Trace Database</H4>

<P>The following GFlags command increases the maximum size of the user-mode stack trace database for <I>MyApp.exe</I>, a fictitious program, from 8 MB to 24 MB.</P>

<P>The command uses the <B>/i</B> parameter to specify the image file. It uses the <B>/tracedb</B> parameter to set the maximum stack trace database size and the value 24 to indicate the size in megabytes. The command uses decimal units. (Hexadecimal units are not valid.)</P>

<PRE><B>gflags /i MyApp.exe /tracedb 24
</B></PRE>

<P>As the following error message indicates, this command fails because the <A HREF="gflags_7u5v.htm#ddk_create_user_mode_stack_trace_database_tools">Create user mode stack trace database</A> (+ust) flag is not set for the MyApp image file. You cannot set the size of a trace database until you create one. </P>

<PRE>Failed to set the trace database size for `MyApp.exe'
</PRE>

<P>The following commands fix the error. The first command creates a trace database for <I>MyApp.exe</I> and the second command sets the maximum size of the trace database to 24 MB. These commands cannot be combined into a single command. The following display shows the commands and the success message from GFlags.</P>

<PRE><B>gflags /i MyApp.exe +ust

</B>Current Registry Settings for MyApp.exe executable are: 00001000
    ust - Create user mode stack trace database

<B>gflags /i MyApp.exe /tracedb 24</B>

Trace database size for `MyApp.exe' set to 24 Mb.
</PRE>

<P>GFlags can change the size of the user-mode stack trace database, but it does not display it. To display the trace database size, use registry APIs, Regedit, or Reg (<I>reg.exe</I>), a tool included in Windows&nbsp;XP and Windows Server&nbsp;2003, to check the value of the <B>StackTraceDatabaseSizeInMB</B> registry entry (HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\<I>ImageFileName</I>\<B>StackTraceDatabaseSizeInMB</B>).</P>

<P>(A version of Reg is included in Windows&nbsp;XP, but that version does not permit the <B>/v</B> and <B>/s</B> switches in the same command.) </P>

<P>The following command uses Reg to query the value of <B>StackTraceDatabaseSizeInMB</B>:</P>

<PRE><B>reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\MyApp.exe" /v StackTraceDatabaseSizeInMB 
</B></PRE>

<P>In response, Reg displays the value of <B>StackTraceDatabaseSizeInMB</B>, which confirms that the new value, 24 (0x18), was set. This value becomes effective when you restart <I>MyApp.exe</I>.</P>

<PRE>! REG.EXE VERSION 3.0

HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\MyApp.exe
    StackTraceDatabaseSizeInMB  REG_DWORD       0x18
</PRE>

<P class=note><B>Tip</B>&nbsp;&nbsp;Type the <B>reg query</B> command into Notepad, then save the file as <I>TraceDb.bat</I>. Thereafter, to display the value of <B>StackTraceDatabaseSizeInMB</B>, just type <B>TraceDb</B>. </P>

<H4>Example 9 – Detecting a Pool Memory Leak</H4>

<P>The following example uses GFlags to set the system-wide <A HREF="gflags_7u5v.htm#ddk_enable_pool_tagging_tools">Enable pool tagging</A> flag in the registry. Then, it uses <A HREF="poolmon_7983.htm">Poolmon</A>, a tool in the Windows DDK, to display the size of the memory pools. </P>

<P>Poolmon monitors the bytes in the paged and nonpaged memory pools and sorts them by pool tag. By running Poolmon periodically, you can identify pools that expand continuously over time. This pattern often indicates a memory leak.</P>

<P class=note><B>Notes</B>&nbsp;&nbsp;Pool tagging is permanently enabled on all versions of Windows Server&nbsp;2003. On these systems, the <B>Enable pool tagging</B> checkbox on the <B>Global Flags</B> dialog box is dimmed, and commands to enable or disable pool tagging fail. </P>

<P class=note>If pool tagging is not enabled, Poolmon fails and displays the following message: "Query pooltags Failed c0000002." </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>To detect a pool memory leak</B>

<OL>
	<LI>To enable pool tagging for all processes, set the system-wide <A HREF="gflags_7u5v.htm#ddk_enable_pool_tagging_tools">Enable pool tagging</A> flag in the registry. The following command line uses the flag abbreviation method, but you can identify the flag by its hexadecimal value or use the <B>Global Flags</B> dialog box:
<PRE><B>gflags /r +ptg 
</B></PRE>
</LI>

	<LI>Restart the computer to make the registry change effective.</LI>

	<LI>Run Poolmon periodically by using the following command. In this command, the <B>/b</B> parameter sorts the pools in descending size order. 
<PRE><B>poolmon /b 
</B></PRE>

<P>In response, Poolmon displays allocations from the memory pools in descending size order , including the number of allocate operations and free operations, and the amount of memory remaining in the pool (in the Bytes column).

<PRE>Memory: 16224K Avail: 4564K PageFlts: 31 InRam Krnl: 684K P: 680K
 Commit: 24140K Limit: 24952K Peak: 24932K  Pool N: 744K P: 2180K

 Tag  Type    Allocs          Frees         Diff   Bytes      Per Alloc
-----------------------------------------------------------------------

 CM   Paged    1283 (   0)    1002 (   0)    281 1377312 (     0) 4901
Strg  Paged   10385 (  10)    6658 (   4)   3727  317952 (   512)   85
 Fat  Paged    6662 (   8)    4971 (   6)   1691  174560 (   128)  103
MmSt  Paged     614 (   0)     441 (   0)    173   83456 (     0)  482
</PRE>

<P>If the value in the <B>Bytes</B> column for an allocation expands continuously for no obvious reason, there might be a memory leak in that pool.
</LI>

	<LI>Clear the <B>Enable pool tagging</B> flag. 
<P>The following command line uses the flag abbreviation method, but you can identify the flag by its hexadecimal value or use the <B>Global Flag</B>s dialog box:

<PRE><B>gflags /r -ptg 
</B></PRE>
</LI>

	<LI>Restart Windows to make the registry change effective. </LI>
</OL>

<P class=note><B>Note</B>&nbsp;&nbsp;Use the append symbol (<B>&gt;&gt;</B>) to redirect the Poolmon output to a log file. Later, you can examine the log file for pool size trends. For example:</P>

<PRE><B>poolmon.exe /b &gt;&gt; poolmon.log 
</B></PRE>

<H4>Example 10 – Detecting a Heap Memory Leak in a Process</H4>

<P>This example uses GFlags and User Mode Dump Heap (UMDH, <I>umdh.exe</I>), a tool included in Microsoft Debugging Tools for Windows. For information about UMDH, see the <a href="http://go.microsoft.com/fwlink/?linkid=8708&clcid=0x409" target="_blank">Debugging Tools</A> Web site.</P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>To detect a leak in heap memory in Notepad.exe</B>

<OL>
	<LI>Set the <A HREF="gflags_7u5v.htm#ddk_create_user_mode_stack_trace_database_tools">Create user mode stack trace database</A> (<B>ust</B>) flag for the Notepad.exe image file. 
<P>The following command uses GFlags to set the <B>Create user mode stack trace database</B> flag. It uses the <B>/i</B> parameter to identify the image file and the <B>ust</B> abbreviation for the flag.

<PRE><B>gflags /i Notepad.exe +ust</B> 
</PRE>

<P>As a result of this command, a user-mode stack trace is created for all new instances of the Notepad process.
</LI>

	<LI>Set the symbol file path. 
<P>The following command creates an environment variable that stores the path to the directory of symbol files:

<PRE><B>set _NT_SYMBOL_PATH=C:\Windows\symbols
</B></PRE>
</LI>

	<LI>Start Notepad. </LI>

	<LI>Find the process identifier (PID) of the Notepad process. 
<P>You can find the PID of any running process from Task Manager or Tasklist (<I>tasklist.exe</I>), a tool included in Windows XP Professional and Windows Server&nbsp;2003 operating systems. In this example, the Notepad PID is 1228.
</LI>

	<LI>Run UMDH.
<P>The following command runs UMDH (<I>umdh.exe</I>). It uses the <B>-p:</B> parameter to specify the PID that, in this example, is 1228. It uses the <B>/f:</B> parameter to specify the name and location of the output file for the heap dump, <I>Notepad.dmp</I>.

<PRE><B>umdh -p:1228 -f:notepad.dmp</B> 
</PRE>

<P>In response, UMDH writes a complete dump of all active heaps to the <I>Notepad.dmp</I> file.
</LI>
</OL>

<H4>Example 11 – Enabling Page Heap Verification</H4>

<P>The following commands enable full and standard page heap verification for <I>MyApp.exe</I>, a fictitious program.</P>

<P>The first command enables <I>standard</I> page heap verification for <I>MyApp.exe</I>. It uses the <B>/p</B> parameter to enable page heap for a process. By default, <B>/p</B> enables standard page heap.</P>

<PRE><B>gflags /p /enable myapp.exe</B> 
</PRE>

<P>The following commands enable <I>full</I> page heap verification for the <I>MyApp.exe</I> program. Although these commands create different settings in the registry, they are all functionally equivalent to selecting the <B>Enable page heap</B> check box for the <I>MyApp.exe</I> image file in the <B>Global Flags</B> dialog box. These methods can be used interchangeably.</P>

<PRE><B>gflags /p /enable myapp.exe /full
gflags /i myapp.exe +hpa
gflags /i myapp.exe +02000000
</B></PRE>

<P>The following commands disable full or standard page heap verification for the <I>Myapp.exe</I> program, regardless of the command or dialog box method used to enable page heap verification.</P>

<PRE><B>gflags /p /disable myapp.exe
gflags /i myapp.exe -hpa
gflags /i myapp.exe -02000000
</B></PRE>

<P class=note><B>Note</B>&nbsp;&nbsp;When using the <B>/debug</B> or <B>/kdebug</B> parameters, use the <B>/p /disable</B> parameters to turn off the page heap verification (not the <B>/i -hpa</B> parameters). The <B>/p /disable</B> parameters disable page heap verification and delete registry entries that the debugger reads.</P>

<H4>Example 12 – Using Page Heap Verification to Find a Bug</H4>

<P>The following series of commands demonstrates how to use the page heap verification features of GFlags and the Windows® NT® Symbolic Debugger (NTSD) to detect an error in heap memory use. In this example, the programmer suspects that a fictitious application, <I>Pheap-buggy.exe</I>, has a heap error, and proceeds through a series of tests to identify the error.</P>

<P>For details on NTSD, see <A HREF="dbgblurb_25bn.htm">Debugging Tools for NT-Based Operating Systems</A>. </P>

<H4>Step 1: Enable standard page heap verification</H4>

<P>The following command enables standard page heap verification for <I>Pheap-buggy.exe</I>:</P>

<PRE><B>gflags /p /enable pheap-buggy.exe
</B></PRE>

<H4>Step 2: Verify that page heap is enabled</H4>

<P>The following command lists the image files for which page heap verification is enabled:</P>

<PRE><B>gflags /p
</B></PRE>

<P>In response, GFlags displays the following list of programs. In this display, <B>traces</B> indicates standard page heap verification, and <B>full traces</B> indicates full page heap verification. In this case, <I>Pheap-buggy.exe</I> is listed with <B>traces</B>, indicating that standard page heap verification is enabled, as intended.</P>

<PRE>pheap-buggy.exe: page heap enabled with flags (traces )
</PRE>

<H4>Step 3: Run the debugger</H4>

<P>The following command runs the <B>CorruptAfterEnd</B> function of <I>Pheap-buggy.exe</I> in NTSD with the <B>-g</B> (ignore initial breakpoint) and <B>-x</B> (set second-chance break on access violation exceptions) parameters:</P>

<PRE><B>ntsd -g -x pheap-buggy /CorruptAfterEnd
</B></PRE>

<P>When the application fails, NTSD generates the following display, which indicates that it detected an error in <I>Pheap-buggy.exe</I>:</P>

<PRE>===========================================================
VERIFIER STOP 00000008: pid 0xAA0: corrupted suffix pattern

        00C81000 : Heap handle 
        00D81EB0 : Heap block 
        00000100 : Block size 
        00000000 :
===========================================================

Break instruction exception - code 80000003 (first chance)
eax=00000000 ebx=00d81eb0 ecx=77f7e257 edx=0006fa18 esi=00000008 edi=00c81000
eip=77f7e098 esp=0006fc48 ebp=0006fc5c iopl=0         nv up ei pl zr na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246
ntdll!DbgBreakPoint:
77f7e098 cc               int     3
</PRE>

<P>The header information includes the address of the heap with the corrupted block (00C81000 : Heap handle), the address of the corrupted block (00D81EB0 : Heap block), and the size of the allocation (00000100 : Block size).</P>

<P>The "corrupted suffix pattern" message indicates that the application violated the data integrity pattern that GFlags inserted after the end of the <I>Pheap-buggy.exe</I> heap allocation.</P>

<H4>Step 4: Display the call stack</H4>

<P>In the next step, use the addresses that NTSD reported to locate the function that caused the error. The next two commands turn on line number dumping in the debugger and display the call stack with line numbers.</P>

<PRE>C:\&gt;<B>.lines</B>

Line number information will be loaded 

C:\&gt;<B>kb</B>

ChildEBP RetAddr  Args to Child
WARNING: Stack unwind information not available. Following frames may be wrong.
0006fc5c 77f9e6dd 00000008 77f9e3e8 00c81000 ntdll!DbgBreakPoint
0006fcd8 77f9f3c8 00c81000 00000004 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x2879
0006fcfc 77f9f5bb 00c81000 01001002 00000010 ntdll!RtlpNtEnumerateSubKey+0x3564
0006fd4c 77fa261e 00c80000 01001002 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x3757
0006fdc0 77fc0dc2 00c80000 01001002 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x67ba
0006fe78 77fbd87b 00c80000 01001002 00d81eb0 ntdll!RtlSizeHeap+0x16a8
0006ff24 010013a4 00c80000 01001002 00d81eb0 ntdll!RtlFreeHeap+0x69
0006ff3c 01001450 00000000 00000001 0006ffc0 pheap-buggy!TestCorruptAfterEnd+0x2b [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 185]
0006ff4c 0100157f 00000002 00c65a68 00c631d8 pheap-buggy!main+0xa9 [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 69]
0006ffc0 77de43fe 00000000 00000001 7ffdf000 pheap-buggy!mainCRTStartup+0xe3 [crtexe.c @ 349]
0006fff0 00000000 0100149c 00000000 78746341 kernel32!DosPathToSessionPathA+0x204
</PRE>

<P>As a result, the debugger displays the call stack for <I>Pheap-buggy.exe</I> with line numbers. The call stack display shows that the error occurred when the <B>TestCorruptAfterEnd</B> function in <I>Pheap-buggy.exe</I> tried to free an allocation at 0x00c80000 by calling <B>HeapFree</B>, a redirect to <B>RtlFreeHeap</B>.</P>

<P>The most likely cause of this error is that the program wrote past the end of the buffer that it allocated in this function.</P>

<H4>Step 5: Enable full page heap verification</H4>

<P>Unlike standard page heap verification, full page heap verification can catch the misuse of this heap buffer as soon as it occurs. The following command enables full page heap verification for <I>Pheap-buggy.exe</I>:</P>

<PRE><B>gflags /p /enable pheap-buggy.exe /full
</B></PRE>

<H4>Step 6: Verify that full page heap is enabled</H4>

<P>The following command lists the programs for which page heap verification is enabled:</P>

<PRE><B>gflags /p
</B></PRE>

<P>In response, GFlags displays the following list of programs. In this display, <B>traces</B> indicates standard page heap verification, and <B>full traces</B> indicates full page heap verification. In this case, <I>Pheap-buggy.exe</I> is listed with <B>full traces</B>, indicating that full page heap verification is enabled, as intended.</P>

<PRE>pheap-buggy.exe: page heap enabled with flags (full traces )
</PRE>

<H4>Step 7: Run the debugger again</H4>

<P>The following command runs the <B>CorruptAfterEnd</B> function of <I>Pheap-buggy.exe</I> in the NTSD debugger with the <B>-g</B> (ignore initial breakpoint) and <B>-x</B> (set second-chance break on access violation exceptions) parameters:</P>

<PRE><B>ntsd -g -x pheap-buggy /CorruptAfterEnd
</B></PRE>

<P>When the application fails, NTSD generates the following display, which indicates that it detected an error in <I>Pheap-buggy.exe</I>:</P>

<PRE>Page heap: process 0x5BC created heap @ 00880000 (00980000, flags 0x3)
ModLoad: 77db0000 77e8c000   kernel32.dll
ModLoad: 78000000 78046000   MSVCRT.dll
Page heap: process 0x5BC created heap @ 00B60000 (00C60000, flags 0x3)
Page heap: process 0x5BC created heap @ 00C80000 (00D80000, flags 0x3)
Access violation - code c0000005 (first chance)
Access violation - code c0000005 (!!! second chance !!!)
eax=00c86f00 ebx=00000000 ecx=77fbd80f edx=00c85000 esi=00c80000 edi=00c16fd0
eip=01001398 esp=0006ff2c ebp=0006ff4c iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000206
pheap-buggy!TestCorruptAfterEnd+1f:
01001398 889801010000     mov     [eax+0x101],bl          ds:0023:00c87001=??
</PRE>

<P>With full page heap verification enabled, the debugger breaks at an access violation. To find the precise location of the access violation, turn on line number dumping and display the call stack trace.</P>

<P>The numbered call stack trace appears as follows: The line displaying the problem appears in bold text.</P>

<PRE>ChildEBP RetAddr  Args to Child
0006ff3c 01001450 00000000 00000001 0006ffc0 pheap-buggy!TestCorruptAfterEnd+0x1f <B>[d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 184]</B>
0006ff4c 0100157f 00000002 00c16fd0 00b70eb0 pheap-buggy!main+0xa9 [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 69]
0006ffc0 77de43fe 00000000 00000001 7ffdf000 pheap-buggy!mainCRTStartup+0xe3 [crtexe.c @ 349]
WARNING: Stack unwind information not available. Following frames may be wrong.
0006fff0 00000000 0100149c 00000000 78746341 kernel32!DosPathToSessionPathA+0x204
</PRE>

<P>The stack trace shows that the problem occurs in line 184 of <I>Pheap-buggy.exe</I>. Because full page heap verification is enabled, the call stack starts in the program code, not in a system DLL. As a result, the violation was caught where it happened, instead of when the heap block was freed.</P>

<H4>Step 8: Locate the error in the code</H4>

<P>A quick inspection reveals the cause of the problem: The program tries to write to the 101st byte of a 100-byte buffer, a common off-by-one error.</P>

<PRE>*((PCHAR)Block + 0x100 + 1) = 0; 
</PRE>

<H4>Example 13 – Listing Image Files with Global Flags</H4>

<P>GFlags displays the flags set for a particular image file, but it does not display all image files that have flags set.</P>

<P>Windows stores flags for an image file that the <B>GlobalFlag</B> registry entry in a registry subkey named for the image file in the following registry path, <B>HKEY_LOCAL_MACHINE\ SOFTWARE\ Microsoft\ Windows&nbsp;NT\ CurrentVersion\ Image File Execution Options\<I> </I></B><I>ImageFileName</I><B>\ GlobalFlag</B>.</P>

<P>To determine which image files have flags set, use Reg (<I>reg.exe</I>), a tool included in Windows Server&nbsp;2003.</P>

<P>The following Reg <B>Query</B> command searches for the <B>GlobalFlag</B> registry entry in the specified registry path. The <B>-v</B> parameter specifies the <B>GlobalFlag</B> registry entry. The <B>/s</B> parameter makes the search recursive.</P>

<PRE><B>reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options" /v GlobalFlag /s
</B></PRE>

<P>In response, Reg displays all instances of the <B>GlobalFlag</B> registry entry in the path and the value of the entry.</P>

<PRE>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe
    GlobalFlag    REG_SZ    0x00001000

HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\photohse.EXE
    GlobalFlag    REG_SZ    0x00200000

HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\printhse.EXE
    GlobalFlag    REG_SZ    0x00200000
</PRE>

<P class=note><B>Tip</B>&nbsp;&nbsp;Type the <B>Reg</B> command into Notepad, then save the file as <I>ImageFlags.bat</I>. Thereafter, to find image files for which flags have been set, just type <B>ImageFlags</B>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: GFlags%20Examples"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
