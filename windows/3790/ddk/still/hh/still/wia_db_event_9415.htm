<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Adding Interrupt Event Support</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_system_power_states_kg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_power_states_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Still&nbsp;Image&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_adding_interrupt_event_support_si"></A>Adding Interrupt Event Support</H1>

<P>To properly set up your WIA driver to report interrupt events, do the following:

<OL>
	<LI>Set <B>Capabilities=0x31</B> in the device's INF file. (See <A HREF="wia_gs_07ft.htm">INF Files for WIA Devices</A> for details.)</LI>

	<LI>Report STI_GENCAP_NOTIFICATIONS and STI_USD_GENCAP_NATIVE_PUSHSUPPORT in the <A HREF="stifnc_63zd.htm"><B>IStiUSD::GetCapabilities</B></A> method.</LI>

	<LI>Report all supported events in the <A HREF="minidrv_3ctl.htm"><B>IWiaMiniDrv::drvGetCapabilities</B></A> method.</LI>

	<LI>Cache and use the event handle passed in the <A HREF="stifnc_6vqh.htm"><B>IStiUSD::SetNotificationHandle</B></A> method. This is the event handle that the device signals, or the WIA minidriver signals directly using <B>SetEvent</B> (described in the Platform SDK documentation). It is in this method that you initiate the waiting state of the WIA device.</LI>

	<LI>Report the proper event information response in the <A HREF="stifnc_1zft.htm"><B>IStiUSD::GetNotificationData</B></A> method.</LI>
</OL>

<P>The following two examples show configuring your device for interrupts with implementations of the <B>IWiaMinidrv::drvGetCapabilities</B> and <B>IStiUSD::SetNotificationHandle</B> methods.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;It is important to use overlapped I/O calls with all activities involving the kernel mode drivers. This allows for proper time-outs and cancellation of device requests. </P>

<H4>Explanation of the IWiaMinidrv::drvGetCapabilities Implementation</H4>

<P>The <B>IWiaMinidrv::drvGetCapabilities</B> method is called by the WIA service to obtain the WIA device-supported events and commands. The WIA driver should first look at the incoming <I>lFlags</I> parameter to determine which request it should answer.</P>

<P>The WIA driver should allocate memory (to be used by the WIA driver and freed by it) to contain an array of <A HREF="wiastrct_2o15.htm">WIA_DEV_CAP_DRV</A> structures. A pointer to this WIA driver-allocated memory should be assigned to the <I>ppCapabilities</I> parameter.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;The WIA service will not free this memory. It is important that the WIA driver manages the allocated memory.</P>

<P>The following example shows an implementation of the <A HREF="minidrv_3ctl.htm"><B>IWiaMinidrv::drvGetCapabilities</B></A> method.</P>

<PRE>HRESULT _stdcall CWIADevice::drvGetCapabilities(
  BYTE            *pWiasContext,
  LONG            lFlags,
  LONG            *pcelt,
  WIA_DEV_CAP_DRV **ppCapabilities,
  LONG            *plDevErrVal)
{
  //
  // If the caller did not pass in the correct parameters,
  //  then fail the call and return E_INVALIDARG.
  //

  if (!pWiasContext) {

    //
    // The WIA service may pass in a NULL for the pWiasContext. 
    // This is expected because there is a case where no item 
    // was created at the time the event was fired.
    //
  }

  if (!plDevErrVal) {
      return E_INVALIDARG;
  }

  if (!pcelt) {
      return E_INVALIDARG;
  }

  if (!ppCapabilities) {
      return E_INVALIDARG;
  }

  *plDevErrVal = 0;

  HRESULT hr = S_OK;

  LONG lNumberOfCommands = 1;
  LONG lNumberOfEvents   = 2;

  //
  // initialize WIA driver capabilities ARRAY
  // a member WIA_DEV_CAP_DRV m_Capabilities[3] variable
  // This memory should live with the WIA minidriver.
  // A pointer to this structure is given to the WIA service using
  // ppCapabilities.  Do not delete this memory until
  // the WIA minidriver has been unloaded.
  //

  // This ARRAY should only be initialized once.
  // The Descriptions and Names should be read from the proper
  // string resource.  These string values should be localized in
  // multiple languages because an application will be use them to
  // be displayed to the user.
  //

  // Command #1
  m_Capabilities[0].wszDescription = L"Syncronize Command";
  m_Capabilities[0].wszName = L"Syncronize";
  m_Capabilities[0].guid    = (GUID*)&amp;WIA_CMD_SYNCHRONIZE;
  m_Capabilities[0].lFlags = 0;
  m_Capabilities[0].wszIcon = WIA_ICON_SYNCHRONIZE;

  // Event #1
  m_Capabilities[1].wszDescription = L"Scan Button";
  m_Capabilities[1].wszName = L"Scan";
  m_Capabilities[1].guid    = (GUID*)&amp;WIA_EVENT_SCAN_IMAGE;
  m_Capabilities[1].lFlags = WIA_NOTIFICATION_EVENT | WIA_ACTION_EVENT;
  m_Capabilities[1].wszIcon = WIA_ICON_SCAN_BUTTON_PRESS;

  // Event #2
  m_Capabilities[2].wszDescription = L"Copy Button";
  m_Capabilities[2].wszName = L"Copy";
  m_Capabilities[2].guid    = (GUID*)&amp;WIA_EVENT_SCAN_PRINT_IMAGE;
  m_Capabilities[2].lFlags = WIA_NOTIFICATION_EVENT | WIA_ACTION_EVENT;
  m_Capabilities[2].wszIcon = WIA_ICON_SCAN_BUTTON_PRESS;


  //
  //  Return depends on flags.  Flags specify whether we should return
  //  commands, events, or both.
  //
  //

  switch (lFlags) {
  case WIA_DEVICE_COMMANDS:

    //
    //  report commands only
    //

    *pcelt          = lNumberOfCommands;
    *ppCapabilities = &amp;m_Capabilities[0];
    break;
  case WIA_DEVICE_EVENTS:

    //
    //  report events only
    //

    *pcelt          = lNumberOfEvents;
    *ppCapabilities = &amp;m_Capabilities[1]; // start at the first event in the ARRAY
    break;
  case (WIA_DEVICE_COMMANDS | WIA_DEVICE_EVENTS):

    //
    //  report both events and commands
    //

     *pcelt          = (lNumberOfCommands + lNumberOfEvents);
     *ppCapabilities = &amp;m_Capabilities[0];
     break;
  default:

    //
    //  invalid request
    //
    hr = E_INVALIDARG;
    break;
  }

  return hr;
}

</PRE>

<P>The <A HREF="stifnc_6vqh.htm"><B>IStiUSD::SetNotificationHandle</B></A> method is called by the WIA service or internally by this driver to start or stop event notifications. The WIA service will pass in a valid handle, created using <B>CreateEvent</B> (described in the Platform SDK documentation), indicating that the WIA driver is to signal this handle when an event occurs in the hardware.</P>

<P>NULL can be passed to the <B>IStiUSD::SetNotificationHandle</B> method. NULL indicates that the WIA minidriver is to stop all device activity, and exit any event wait operations.</P>

<P>The following example shows an implementation of the <B>IStiUSD::SetNotificationHandle</B> method.</P>

<PRE>STDMETHODIMP CWIADevice::SetNotificationHandle(HANDLE hEvent)
{
  HRESULT hr = S_OK;

  if (hEvent &amp;&amp; (hEvent != INVALID_HANDLE_VALUE)) {

    //
    // A valid handle indicates that we are asked to start our "wait"
    // for device interrupt events
    //

    //
    // reset last event GUID to GUID_NULL
    //

    m_guidLastEvent = GUID_NULL;

    //
    // clear EventOverlapped structure
    //

    memset(&amp;m_EventOverlapped,0,sizeof(m_EventOverlapped));

    //
    // fill overlapped hEvent member with the event passed in by 
    // the WIA service. This handle will be automatically signaled
    //  when an event is triggered at the hardware level.
    //

    m_EventOverlapped.hEvent = hEvent;

    //
    // clear event data buffer.  This is the buffer that will be used
    //  to determine what event was signaled from the device.
    //

    memset(m_EventData,0,sizeof(m_EventData));

    //
    // use the following call for interrupt events on your device
    //

    DWORD dwError = 0;
    BOOL bResult = DeviceIoControl( m_hDeviceDataHandle,
                                    IOCTL_WAIT_ON_DEVICE_EVENT,
                                    NULL,
                                    0,
                                    &amp;m_EventData,
                                    sizeof(m_EventData),
                                    &amp;dwError,
                                    &amp;m_EventOverlapped );

    if (bResult) {
        hr = S_OK;
    } else {
        hr = HRESULT_FROM_WIN32(::GetLastError());
    }

  } else {

    //
    // stop any hardware waiting events here, the WIA service has
    // notified us to kill all hardware event waiting
    //

    //
    // Stop hardware interrupt events. This will stop all activity on
    // the device. Since DeviceIOControl was used with OVERLAPPED i/o 
    // functionality the CancelIo() can be used to stop all kernel
    // mode activity.
    //


    if(m_hDeviceDataHandle){
        if(!CancelIo(m_hDeviceDataHandle)){

            //
            // canceling of the IO failed, call GetLastError() here to determine the cause.
            //

            LONG lError = ::GetLastError();

        }
    }
  }
  return hr;
}</PRE>

<P>When an event has been detected and signaled by the WIA minidriver or WIA device, the WIA service calls the <A HREF="stifnc_1zft.htm"><B>IStiUSD::GetNotificationData</B></A> method. It is in this method that the WIA minidriver should report the details of the event that occurred. </P>

<P>The <B>IStiUSD::GetNotificationData</B> method is called by the WIA service to get information about an event that has just been signaled. The <B>IStiUSD::GetNotificationData</B> method can be called as a result of one of two event operations.

<OL>
	<LI><B>IStiUSD::GetStatus</B> reported that there was an event pending by setting the STI_EVENTHANDLING_PENDING flag in the <A HREF="stifnc_8rl5.htm">STI_DEVICE_STATUS</A> structure.</LI>

	<LI>The <I>hEvent</I> handle passed in by <B>IStiUSD::SetNotificationHandle</B> was signaled by the hardware, or by calling <B>SetEvent</B> (documented in the Platform SDK) directly.</LI>
</OL>

<P>The WIA driver is responsible for filling out the <A HREF="stifnc_5rqh.htm">STINOTIFY</A> structure</P>

<P>The following example shows an implementation of the <B>IStiUSD::GetNotificationData</B> method.</P>

<PRE>STDMETHODIMP CWIADevice::GetNotificationData( LPSTINOTIFY pBuffer )
{
  //
  // If the caller did not pass in the correct parameters,
  // then fail the call with E_INVALIDARG.
  //

  if(!pBuffer){
      return E_INVALIDARG;
  }
  
  GUID guidEvent = GUID_NULL;
  DWORD dwBytesRet = 0;
  BOOL bResult = GetOverlappedResult(m_hDeviceDataHandle, &amp;m_EventOverlapped, &amp;dwBytesRet, FALSE );
  if (bResult) {
    //
    // read the m_EventData buffer to determine the proper event.
    // set guidEvent to the proper event GUID
    // set guidEvent to GUID_NULL when an event has
    // not happened that you are concerned with
    //

    if(m_EventData[0] == DEVICE_SCAN_BUTTON_PRESSED) {
       guidEvent = WIA_EVENT_SCAN_IMAGE;
    } else {
       guidEvent = GUID_NULL;
    }
  }

  //
  // If the event was triggered, then fill in the STINOTIFY structure
  // with the proper event information
  //

  if (guidEvent != GUID_NULL) {
    memset(pBuffer,0,sizeof(STINOTIFY));
    pBuffer-&gt;dwSize               = sizeof(STINOTIFY);
    pBuffer-&gt;guidNotificationCode = guidEvent;        
  } else {
    return STIERR_NOEVENTS;
  }

  return S_OK;
}</PRE>

<P>Interrupt events can be stopped at any time by passing NULL as the event handle. This should be interpreted by the minidriver as a signal to stop any wait states on the hardware device.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;The <A HREF="minidrv_41ex.htm"><B>IWiaMiniDrv::drvNotifyPnpEvent</B></A> method can receive power management events that affect the event waiting state.</P>

<P>The WIA service calls the <B>IWiaMiniDrv::drvNotifyPnpEvent</B> method and sends a WIA_EVENT_POWER_SUSPEND event when the system is about to be placed in a sleep state. If this call occurs, the device might already be out of its wait state. Sleep states automatically trigger kernel-mode drivers to exit any waiting state to allow the system to enter this powered-down state. When the system resumes from its sleep state, the WIA service sends the WIA_EVENT_POWER_RESUME event. At this time the WIA minidriver must reestablish the interrupt event wait state. For more information on sleep states, see <A HREF="JavaScript:hhobj_1.Click()">System Power States</A> and <A HREF="JavaScript:hhobj_2.Click()">Device Power States</A>.</P>

<P>It is recommended that the WIA minidriver cache the event handle initially passed into the <A HREF="stifnc_6vqh.htm"><B>IStiUSD::SetNotificationHandle</B></A> method so that it can be reused when the system wakes up from a sleep or hibernation.  </P>

<P>The WIA service <I>does not</I> call the <B>IStiUSD::SetNotificationHandle</B> method after the system has resumed. It is recommended that the minidriver call its <B>IStiUSD::SetNotificationHandle</B> method, passing the cached event handle.  </P>

<P>The <B>IWiaMinidrv::drvNotifyPnpEvent</B> method is called by the WIA service when system events occur. The WIA driver should check the <I>pEventGUID</I> parameter to determine which event is being processed.</P>

<P>Some common events that must be processed are:

<DL>
<DT>WIA_EVENT_POWER_SUSPEND</DT>

<DD>The system is going into suspend/sleep mode.</DD>

<DT>WIA_EVENT_POWER_RESUME</DT>

<DD>The system is waking up from suspend/sleep mode.</DD>
</DL>

<P>The WIA driver should restore any event interrupt wait states after returning from a suspend. This ensures that the events will still function when the system wakes up.</P>

<P>The following example shows an implementation of the <A HREF="minidrv_41ex.htm"><B>IWiaMinidrv::drvNotifyPnpEvent</B></A> method.</P>

<PRE>HRESULT _stdcall CWIADevice::drvNotifyPnpEvent(
  const GUID *pEventGUID,
  BSTR       bstrDeviceID,
  ULONG      ulReserved)
{
  //
  // If the caller did not pass in the correct parameters,
  // then fail the call with E_INVALIDARG.
  //

  if ((!pEventGUID)||(!bstrDeviceID)) {
      return E_INVALIDARG;
  }

  HRESULT hr = S_OK;

  if(*pEventGUID == WIA_EVENT_POWER_SUSPEND) {

    //
    // disable any driver activity to make sure we properly
    // shut down (the driver is not being unloaded, just disabled)
    //

  } else if(*pEventGUID == WIA_EVENT_POWER_RESUME) {

    //
    // re-establish any event notifications to make sure we properly
    // set up any event waiting status using the WIA service supplied
    // event handle
    //

    if(m_EventOverlapped.hEvent) {

      //
      // call ourselves with the cached EVENT handle given to
      // the WIA driver by the WIA service.
      //

        SetNotificationHandle(m_EventOverlapped.hEvent);
    }
  }
  return hr;
}</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Adding%20Interrupt%20Event%20Support"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
