<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Vendor-Extended Commands</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Vendor-Extended Commands">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Still&nbsp;Image&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_vendor_extended_commands_si"></A>Vendor-Extended Commands</H3>

<P>An application can send an arbitrary command to the device through the <B>IWiaItemExtras::Escape</B> method, which is described in the Platform SDK documentation. By calling <B>QueryInterface</B> on the root item, you can retrieve a pointer to the <B>IWiaItemExtras</B> interface. The application can then construct a PTP command using any opcode and parameters, and send this command to the device. The application also can send data to or receive data from the device. </P>

<P>The device informs the application of the outcome of the operation when the <B>IWiaItemExtras::Escape</B> method returns, filling in a response code and response parameters in a <A HREF="wiastrct_24h5.htm">PTP_VENDOR_DATA_OUT</A> structure. The <B>SessionId</B> and <B>TransactionId</B> members of the <A HREF="wiastrct_6y3t.htm">PTP_VENDOR_DATA_IN</A> structure are ignored. The driver supplies correct values for these.</P>

<P>For vendor-defined commands other than ESCAPE_PTP_CLEAR_STALLS, a special flag, ESCAPE_PTP_VENDOR_COMMAND, must be ORed with the command used in the <B>IWiaItemExtras::Escape</B> method. If a vendor-defined command creates or deletes an object on the device using the following described flags, the driver adds or removes the object from its internal structures and generates a WIA event. All other standard commands should be issued through the appropriate WIA interface.</P>

<P>The first parameter to <B>IWiaItemExtras::Escape</B> is the ORed combination of one or more of the following flags:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Escape Code</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADD_OBJ_CMD</TD>
<TD width=52%>An object is being added and the handle for the object is in one of the command parameters.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_REM_OBJ_CMD</TD>
<TD width=52%>An object is being removed and the handle for the object is in one of the command parameters.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADD_OBJ_RESP</TD>
<TD width=52%>An object is being added and the handle for the object is in one of the response parameters.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_REM_OBJ_RESP</TD>
<TD width=52%>An object is being removed and the handle for the object is in one of the response parameters.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADDREM_PARM1</TD>
<TD width=52%>The handle for the added or removed object is in the first parameter of the command or response.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADDREM_PARM2</TD>
<TD width=52%>The handle for the added or removed object is in the second parameter of the command or response.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADDREM_PARM3</TD>
<TD width=52%>The handle for the added or removed object is in the third parameter of the command or response.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADDREM_PARM4</TD>
<TD width=52%>The handle for the added or removed object is in the fourth parameter of the command or response.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_ADDREM_PARM5</TD>
<TD width=52%>The handle for the added or removed object is in the fifth parameter of the command or response.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_CLEAR_STALLS</TD>
<TD width=52%>Clear any error conditions caused by a vendor-extended command. This flag cannot be used in combination with any of the other flags. For more information about this flag, see the note that follows this table.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ESCAPE_PTP_VENDOR_COMMAND</TD>
<TD width=52%>The command is a vendor-extended command.</TD>
</TR>
</TABLE><BR>

<P class=note><B>Note</B>&nbsp;&nbsp;When an application calls <B>IWiaItemExtras::Escape</B> with the ESCAPE_PTP_CLEAR_STALL flag as the first argument to this method, the driver issues the PTP <B>Get Device Status</B> request to determine whether any endpoints are in a STALL condition. If the <B>Get Device Status</B> command succeeds, the driver issues the <A HREF="stifnc_17vu.htm">IOCTL_RESET_PIPE</A> USB control code for each such endpoint. If the <B>Get Device Status</B> command fails, the driver issues a PTP <B>Device Reset</B> request. <B>Get Device Status</B> and <B>Device Reset</B> are described in the PIMA 15740:2000 standard, First Edition, and Revision 1.0 of the USB Still Image Capture Device Definition (USB SICDD). </P>

<P class=note></P>

<P>The following sample code illustrates how to use the vendor-extended command interface. Be sure that your code includes the <I>ptpusd.h</I> header, because it contains the definitions of the escape codes and other constants, and the <A HREF="wiastrct_6y3t.htm">PTP_VENDOR_DATA_IN</A> and <A HREF="wiastrct_24h5.htm">PTP_VENDOR_DATA_OUT</A> structures. The <B>IWiaItemExtras</B> interface is obtained by using a call to <B>QueryInterface</B> on the root item. A pointer to this root item, <I>pIWiaRootItem</I>, can be obtained, for example, by a call to <B>IWiaDevMgr::SelectDeviceDlg</B> (described in the Platform SDK documentation).</P>

<PRE>//
// Test IWiaItemExtras::Escape method
//
HRESULT hr = S_OK;
IWiaItemExtras *pIWiaItemExtras = NULL;

hr = pIWiaRootItem-&gt;QueryInterface(IID_IWiaItemExtras,
                                   (VOID **) &amp;pIWiaItemExtras);
if (FAILED(hr)) {
    MessageBox("QueryInterface for IWiaItemExtras failed");
    return;
}

PTP_VENDOR_DATA_IN *pDataIn = NULL;
PTP_VENDOR_DATA_OUT *pDataOut = NULL;
DWORD dwDataInSize = SIZEOF_REQUIRED_VENDOR_DATA_IN;
DWORD dwDataOutSize = SIZEOF_REQUIRED_VENDOR_DATA_OUT + 0x1000;
DWORD dwActualDataOutSize = 0;

pDataIn = (PTP_VENDOR_DATA_IN *) CoTaskMemAlloc(dwDataInSize);
if (!pDataIn) {
    MessageBox("CoTaskMemAlloc failed");
    return;
}

pDataOut = (PTP_VENDOR_DATA_OUT *) CoTaskMemAlloc(dwDataOutSize);
if (!pDataOut) {
    <B>CoTaskMemFree(pDataIn);</B>
    MessageBox("CoTaskMemAlloc failed");
    return;
}
ZeroMemory(pDataIn, dwDataInSize);
ZeroMemory(pDataOut, dwDataOutSize);

pDataIn-&gt;OpCode = 0x1001;
pDataIn-&gt;SessionId = 0;     // This will be filled in by the driver.
pDataIn-&gt;TransactionId = 0; // This will be filled in by the driver.
pDataIn-&gt;NumParams = 0;

//
// pDataIn-&gt;NextPhase informs the PTP driver whether to 
// read data from the device (as shown), or
// write data to the device (use PTP_NEXTPHASE_WRITE_DATA),
// to neither read nor write data (use PTP_NEXTPHASE_NO_DATA).
//
pDataIn-&gt;NextPhase = PTP_NEXTPHASE_READ_DATA;

hr = pIWiaItemExtras-&gt;Escape(ESCAPE_PTP_VENDOR_COMMAND,
                             (BYTE *) pDataIn, dwDataInSize,
                             (BYTE *) pDataOut, dwDataOutSize,
                             &amp;dwActualDataOutSize);

if (FAILED(hr)) {
    MessageBox("Escape failed");
    return;
}

//
// Data returned from device is located at pDataOut-&gt;VendorReadData.
//</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Vendor-Extended%20Commands"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
