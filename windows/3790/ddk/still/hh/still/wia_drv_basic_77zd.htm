<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Loading and Unloading a WIA Minidriver</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Loading and Unloading a WIA Minidriver">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Still&nbsp;Image&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_loading_and_unloading_a_wia_minidriver_si"></A>Loading and Unloading a WIA Minidriver</H3>

<P>After the WIA device driver is installed, the WIA service attempts to load it for the first time. The WIA minidriver’s <A HREF="stifnc_0lrd.htm"><B>IStiUSD::Initialize</B></A> method is called and should perform the following tasks:

<OL>
	<LI>Check the transfer mode to determine the caller’s intent for initializing this device driver. This is done by calling the <A HREF="stifnc_5nzd.htm"><B>IStiDeviceControl::GetMyDeviceOpenMode</B></A> method.</LI>

	<LI>Obtain the installed device’s port name, so that this driver can call <B>CreateFile</B> (documented in the Platform SDK) on the proper port to access the device. This is done by calling the <A HREF="stifnc_9oa1.htm"><B>IStiDeviceControl::GetMyDevicePortName</B></A> method.</LI>

	<LI>Read device-specific registry settings written during device installation. This can be done by using <I>hParametersKey</I> parameter passed to <B>IStiUSD::Initialize</B>.</LI>
</OL>

<P>The <B>IStiUSD::Initialize</B> method is called by the WIA service when the driver is first loaded. The <B>IStiUSD::Initialize</B> method is also called when a client uses the legacy STI DDIs and calls the <A HREF="stifnc_3hd5.htm"><B>IStillImage::CreateDevice</B></A> method.</P>

<P>The <B>IStiUSD::Initialize</B> method should initialize the WIA driver and the device for use. WIA drivers can store the <B>IStiDeviceControl</B> interface pointer if they need it at a later time. The <A HREF="stifnc_2y3t.htm"><B>IStiDeviceControl::AddRef</B></A> method must be called before storing this interface. If you do not need to store the interface, then ignore it. Do <I>not</I> release the <B>IStiDeviceControl</B> interface if you have not called <B>IStiDeviceControl::AddRef </B>first. This might cause unpredictable results. The <A HREF="stillimg_6lk9.htm"><B>IStiDeviceControl</B> COM Interface</A> is needed to get information about the device's ports. The port name used in a call to the <B>CreateFile</B> function can be obtained by calling the <B>IStiDeviceControl::GetMyDevicePortName </B>method. For devices on shared ports, such as serial port devices, opening the port in <B>IStiUSD::Initialize</B> is not recommended. The port should be opened only in calls to <B>IStiUSD::LockDevice</B>. The closing of the ports should be controlled internally to provide fast access. (Opening and closing in <B>IStiUSD::LockDevice</B> and <B>IStiUSD::UnLockDevice</B> is very inefficient. <B>CreateFile</B> can cause a delay making the device appear slow and unresponsive to the user.)</P>

<P>If a WIA driver cannot support multiple <B>CreateFile</B> calls on the same device port, then the <B>IStiDeviceControl::GetMyDeviceOpenMode</B> method should be called.</P>

<P>The WIA driver should check the returned mode value for the STI_DEVICE_CREATE_DATA flag and open the port accordingly.</P>

<P>If the device port must be opened, a call to <B>CreateFile</B> should be used. When opening a port, the FILE_FLAG_OVERLAPPED flag should be used. This allows the OVERLAPPED structure (described in the Platform SDK documentation) to be used when access the device. Using overlapped I/O will help control responsive access to the hardware. When a problem is detected, the WIA driver can call <B>CancelIo</B> (described in the Platform SDK documentation) to stop all current hardware access.</P>

<P>The following example shows an implementation of the <B>IStiUSD::Initialize</B> method.</P>

<PRE>STDMETHODIMP CWIADevice::Initialize(
  PSTIDEVICECONTROL   pIStiDeviceControl,
  DWORD               dwStiVersion,
  HKEY                hParametersKey)
{
  if (!pIStiDeviceControl) {
      return STIERR_INVALID_PARAM;
  }

  HRESULT hr = S_OK;

  //
  // Get the mode of the device to check why we were created.  status, data, or both...
  //

  DWORD dwMode = 0;
  hr = pIStiDeviceControl-&gt;GetMyDeviceOpenMode(&amp;dwMode);
  if(FAILED(hr)){
      return hr;
  }

  if(dwMode &amp; STI_DEVICE_CREATE_DATA)
  {
      //
      // device is being opened for data
      //
  }

  if(dwMode &amp; STI_DEVICE_CREATE_STATUS)
  {
      //
      // device is being opened for status
      //
  }

  if(dwMode &amp; STI_DEVICE_CREATE_BOTH)
  {
      //
      // device is being opened for both data and status
      //
  }

  //
  // Get the name of the device port to be used in a call to CreateFile().
  //

  WCHAR szDevicePortNameW[MAX_PATH];
  memset(szDevicePortNameW,0,sizeof(szDevicePortNameW));

  hr = pIStiDeviceControl-&gt;GetMyDevicePortName(szDevicePortNameW,
                                            sizeof(szDevicePortNameW)/sizeof(WCHAR));
  if(FAILED(hr)) {
      return hr;
  }

  //
  // Open kernel mode device driver. Use the FILE_FLAG_OVERLAPPED flag 
  // for proper cancellation
  // of kernel mode operations and asynchronous file IO. 
  //  The CancelIo() call will function properly if this flag is used.
  //  It is recommended to use this flag.
  //

  m_hDeviceDataHandle = CreateFileW(szDevicePortNameW,
                                   GENERIC_READ | GENERIC_WRITE, // Access mask
                                   0,                            // Share mode
                                   NULL,                         // SA
                                   OPEN_EXISTING,                // Create disposition
                                   FILE_ATTRIBUTE_SYSTEM|FILE_FLAG_OVERLAPPED,
                                   NULL );

  m_dwLastOperationError = ::GetLastError();

  hr = (m_hDeviceDataHandle != INVALID_HANDLE_VALUE) ?
              S_OK : MAKE_HRESULT(SEVERITY_ERROR,FACILITY_WIN32,m_dwLastOperationError);

  if (FAILED(hr)) {
      return hr;
  }

  //
  // Open DeviceData section to read driver specific information
  //

  HKEY hKey = hParametersKey;
  HKEY hOpenKey = NULL;
  if (RegOpenKeyEx(hKey,                     // handle to open key
                   TEXT("DeviceData"),       // address of name of subkey to open
                   0,                        // options (must be NULL)
                   KEY_QUERY_VALUE|KEY_READ, // just want to QUERY a value
                   &amp;hOpenKey                 // address of handle to open key
                  ) == ERROR_SUCCESS) {

      //
      // This is where you read registry entries for your device.
      // The DeviceData section is the proper place to put this 
      // information. Information about your device should
      // have been written using the WIA device's .INF installation
      // file.
      // You can access this information from this location in the
      // Registry. The hParameters HKEY is owned by the WIA service. 
      // DO NOT CLOSE THIS KEY. Always close any HKEYS opened by
      //  this WIA driver after you are finished.
      //

      //
      // close registry key when finished, reading DeviceData information.
      //

      RegCloseKey(hOpenKey);
  } else {
      return E_FAIL;
  }
  return hr;
}</PRE>

<P>The WIA service calls <A HREF="stifnc_63zd.htm"><B>IStiUSD::GetCapabilities</B></A> after a successful call to the <B>IStiUSD::Initialize</B> method. <B>IStiUSD::GetCapabilities</B> then supplies the <A HREF="stifnc_0qw9.htm">STI_USD_CAPS</A> structure with STI version information, WIA support flags (bit flags indicating driver capabilities), and any event requirements.</P>

<P>The following example shows an implementation of <B>IStiUSD::GetCapabilities</B>.</P>

<PRE>/********************************************************************\
* CWIADevice::GetCapabilities
* Remarks:
* This WIA driver sets the following capability flags:
* 1. STI_GENCAP_WIA - This driver supports WIA
* 2. STI_USD_GENCAP_NATIVE_PUSHSUPPORT - This driver supports push
*    buttons
* 3. STI_GENCAP_NOTIFICATIONS - This driver requires the use of 
*    interrupt events.
*
\********************************************************************/

STDMETHODIMP CWIADevice::GetCapabilities(PSTI_USD_CAPS pUsdCaps)
{
  //
  // If the caller did not pass in the correct parameters,
  // then fail the call with E_INVALIDARG.
  //

  if (!pUsdCaps) {
      return E_INVALIDARG;
  }

  memset(pUsdCaps, 0, sizeof(STI_USD_CAPS));
  pUsdCaps-&gt;dwVersion     = STI_VERSION;    // STI version
  pUsdCaps-&gt;dwGenericCaps = STI_GENCAP_WIA| // WIA support
                            STI_USD_GENCAP_NATIVE_PUSHSUPPORT| // button support
                            STI_GENCAP_NOTIFICATIONS; // interrupt event support
  return S_OK;
}</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Loading%20and%20Unloading%20a%20WIA%20Minidriver"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
