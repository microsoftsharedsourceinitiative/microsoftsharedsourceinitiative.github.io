<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Applying WIA Property Settings to the Hardware</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Applying WIA Property Settings to the Hardware">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Still&nbsp;Image&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_applying_wia_property_settings_to_the_hardware_si"></A>Applying WIA Property Settings to the Hardware</H3>

<P>When a WIA application initiates a data transfer, the WIA service gives the WIA minidriver the opportunity to apply current WIA property settings, and to apply any device-specific settings to the hardware. The WIA service then calls the <A HREF="minidrv_7quh.htm"><B>IWiaMiniDrv::drvWriteItemProperties</B></A> method before it calls the <A HREF="minidrv_1dpl.htm"><B>IWiaMiniDrv::drvAcquireItemData</B></A> method. The latter method is called only when a WIA application initiates a data transfer. The WIA minidriver should use the WIA service functions to read the properties in its own driver item tree. </P>

<H4>Implementing IWiaMiniDrv::drvWriteItemProperties</H4>

<P>The <B>IWiaMiniDrv::drvWriteItemProperties</B> method is called by the WIA service after the client requests a data transfer. The WIA service calls this method before it makes a call to <A HREF="minidrv_1dpl.htm"><B>IWiaMiniDrv::drvAcquireItemData</B></A>. The WIA minidriver should commit any settings it needs to the hardware before returning from this method.</P>

<P>When this method is called, the WIA minidriver has been committed to performing a data transfer. Any application that attempts to acquire data at this time will be failed by the WIA service with a WIA_ERROR_BUSY error code.</P>

<P>The following example shows an implementation of the <A HREF="minidrv_7quh.htm"><B>IWiaMiniDrv::drvWriteItemProperties</B></A> method:</P>

<PRE>HRESULT _stdcall CWIADevice::drvWriteItemProperties(
  BYTE                      *pWiasContext,
  LONG                      lFlags,
  PMINIDRV_TRANSFER_CONTEXT pmdtc,
  LONG                      *plDevErrVal)
{
  //
  // If the caller did not pass in the correct parameters,
  // then fail the call with E_INVALIDARG.
  //

  if (!pWiasContext) {
      return E_INVALIDARG;
  }

 if (!pmdtc) {
      return E_INVALIDARG;
  }

  if (!plDevErrVal) {
      return E_INVALIDARG;
  }

  HRESULT hr = S_OK;
  *plDevErrVal = 0;
  PROPVARIANT pv[2];
  PROPSPEC ps[2] = {
      {PRSPEC_PROPID, WIA_IPS_XRES},
      {PRSPEC_PROPID, WIA_IPS_YRES}
  };

  //
  // initialize propvariant structures
  //

  pv[0].vt = VT_I4;   // X resolution is a LONG value
  pv[1].vt = VT_I4;   // Y resolution is a LONG value

  //
  // read 2 WIA item properties (X and Y resolution)
  //

  hr = wiasReadMultiple(pWiasContext, 2, ps, pv, NULL);

  if (hr == S_OK) {

    //
    // write current X and Y resolution values, read from the
    // the WIA property set, and write them to the device.
    //

      hr = SetMyDeviceXResolution(pv[0].lVal);
      if(S_OK == hr) {
          hr = SetMyDeviceYResolution(pv[1].lVal);
          if(FAILED(hr)) {

            //
            // could not set Y resolution to device
            //

          }
      } else {

        //
        // could not set X resolution to device
        //

      }
  }
  return hr;
}</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Applying%20WIA%20Property%20Settings%20to%20the%20Hardware"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
