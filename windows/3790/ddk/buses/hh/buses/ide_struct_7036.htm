<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ATA_PASS_THROUGH_DIRECT</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ATA_PASS_THROUGH_DIRECT">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>System&nbsp;Support&nbsp;for&nbsp;Buses:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ata_pass_through_direct_kr"></A>ATA_PASS_THROUGH_DIRECT</H1>

<P>The ATA_PASS_THROUGH_DIRECT structure is used in conjunction with an <A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A> request to instruct the port driver to send an embedded ATA command to the target device. </P>

<PRE class=syntax>typedef struct _ATA_PASS_THROUGH_DIRECT {
  USHORT  Length;
  USHORT  AtaFlags;
  UCHAR  PathId;
  UCHAR  TargetId;
  UCHAR  Lun;
  UCHAR  ReservedAsUchar;
  ULONG  DataTransferLength;
  ULONG  TimeOutValue;
  ULONG  ReservedAsUlong;
  PVOID  DataBuffer;
  UCHAR  PreviousTaskFile[8];
  UCHAR  CurrentTaskFile[8];
}ATA_PASS_THROUGH_DIRECT, *PATA_PASS_THROUGH_DIRECT;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Length</B></DT>

<DD>Specifies the length in bytes of the ATA_PASS_THROUGH_DIRECT structure.</DD>

<DT><B>AtaFlags</B></DT>

<DD>Indicates the direction of data transfer and specifies the kind of operation to be performed. The following flags are currently defined.</DD>

<DT></DT>

<DD>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>ATA Flags</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>ATA_FLAGS_DRDY_REQUIRED</TD>
<TD width=52%>Wait for DRDY status from the device before sending the command to the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ATA_FLAGS_DATA_OUT</TD>
<TD width=52%>Read data from the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ATA_FLAGS_DATA_IN</TD>
<TD width=52%>Write data to the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ATA_FLAGS_48BIT_COMMAND</TD>
<TD width=52%>The ATA command to be send uses the 48 bit LBA feature set. When this flag is set, the contents of the <B>PreviousTaskFile</B> member in the ATA_PASS_THROUGH_DIRECT structure should be valid. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>PathId</B></DT>

<DD>Indicates which IDE port or bus is to be used for the request. This value is set by the port driver.</DD>

<DT><B>TargetId</B></DT>

<DD>Indicates the target device on the bus. This value is set by the port driver.</DD>

<DT><B>Lun</B></DT>

<DD>Indicates the logical unit number of the device. This value is set by the port driver.</DD>

<DT><B>ReservedAsUchar</B></DT>

<DD>Reserved for future use. </DD>

<DT><B>DataTransferLength</B></DT>

<DD>Indicates the size, in bytes, of the data buffer. If an underrun occurs, the miniport must update this member to the number of bytes actually transferred. </DD>

<DT><B>TimeOutValue</B></DT>

<DD>Indicates the number of seconds that are allowed for the request to execute before the OS-specific port driver determines that the request has timed out.</DD>

<DT><B>ReservedAsUlong </B></DT>

<DD>Reserved for future use. </DD>

<DT><B>DataBuffer </B></DT>

<DD>Pointer to the data buffer. </DD>

<DT><B>PreviousTaskFile</B></DT>

<DD>Specifies the contents of the input task file register prior to the current pass-through command. This member is not used when the ATA_FLAGS_48BIT_COMMAND flag is not set. </DD>

<DT><B>CurrentTaskFile</B></DT>

<DD>Specifies the content of the task file register on both input and output. On input, the array values in <B>CurrentTaskFile</B> map to the input registers in the following manner.


<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Byte</TH>
<TH align=left width=71%>Input Register</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>0</TD>
<TD width=71%>Features Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>1</TD>
<TD width=71%>Sector Count Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>2</TD>
<TD width=71%>Sector Number Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>3</TD>
<TD width=71%>Cylinder Low Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>4</TD>
<TD width=71%>Cylinder High Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>5</TD>
<TD width=71%>Device/Head Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>6</TD>
<TD width=71%>Command Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>7</TD>
<TD width=71%>Reserved</TD>
</TR>
</TABLE><BR>



<P>When <A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A> completes, the port driver updates <B>CurrentTaskFile</B> with the values that are present in the device's output registers at the completion of the embedded command. The array values in <B>CurrentTaskFile</B> correspond to the following task file output registers.



<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Byte</TH>
<TH align=left width=71%>Output Register</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>0</TD>
<TD width=71%>Error Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>1</TD>
<TD width=71%>Sector Count Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>2</TD>
<TD width=71%>Sector Number Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>3</TD>
<TD width=71%>Cylinder Low Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>4</TD>
<TD width=71%>Cylinder High Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>5</TD>
<TD width=71%>Device/Head Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>6</TD>
<TD width=71%>Status Register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>7</TD>
<TD width=71%>Reserved</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntddscsi.h</I>. Include <I>ntddscsi.h</I>. </P>

<H4>Comments</H4>

<P>The ATA_PASS_THROUGH_DIRECT structure is used with <A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A>. With this request, the system locks down the buffer in user memory and the device accesses this memory directly. For a double-buffered equivalent of this device control request, see <A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A> and <A HREF="ide_struct_2b76.htm">ATA_PASS_THROUGH_EX</A>.</P>

<H4>See Also</H4>

<P><A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A>, <A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A>, <A HREF="ide_struct_2b76.htm">ATA_PASS_THROUGH_EX</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ATA_PASS_THROUGH_DIRECT"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
