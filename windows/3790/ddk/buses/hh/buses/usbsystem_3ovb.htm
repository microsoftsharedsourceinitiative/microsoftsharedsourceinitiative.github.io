<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Software Representation of Interfaces for Composite USB Devices</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Software Representation of Interfaces for Composite USB Devices">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>System&nbsp;Support&nbsp;for&nbsp;Buses:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_software_representation_of_interfaces_for_composite_usb_devices_kg"></A>Software Representation of Interfaces for Composite USB Devices</H2>

<P>As described by the USB specification, every USB device provides a set of hierarchical descriptors that define its functionality. At the top level, each device has one or more USB configuration descriptors, each of which has one or more interface descriptors. For further information about USB configuration descriptors, see <A HREF="usb-config_6tuv.htm">USB Configuration Descriptors</A>. Configurations are mutually exclusive, so only one configuration can be selected to operate at a time. Microsoft-supplied drivers only select configuration 1. Within a configuration, interfaces may be used independently. Thus, a <I>composite</I> USB device that is managed by a Microsoft-supplied driver is one that has multiple interfaces within configuration 1. Each interface is represented, at the descriptor level, by a unique value in the <B>bInterfaceNumber</B> member of its <A HREF="usbstrct_7j1u.htm">USB_INTERFACE_DESCRIPTOR</A> structure. </P>

<P>The function of an interface is indicated by the <B>bInterfaceClass</B><I>, </I><B>bInterfaceSubClass</B><I>, </I>and<I> </I><B>bInterfaceProtocol</B> members of the same structure, along with the class-specific descriptors that might follow it. Most often, the interfaces of a composite device operate independently. For example, a composite USB keyboard with power buttons may have one interface for the keyboard and another interface for the power buttons. In this case, Windows uses the USB generic parent driver to make each interface appear as a separate device. The keyboard interface can then be managed by the Microsoft-supplied keyboard driver and the power keys interface by the Microsoft-supplied power keys driver, independently of one another. </P>

<P>The generic parent driver can simplify the task for vendors of composite hardware, if Microsoft-supplied drivers support some interfaces but not others. Vendors of such devices need only supply drivers for the unsupported interfaces, because the generic parent driver facilitates the use of Microsoft-supplied drivers for the supported interfaces. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Software%20Representation%20of%20Interfaces%20for%20Composite%20USB%20Devices"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
