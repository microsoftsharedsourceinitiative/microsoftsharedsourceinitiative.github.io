<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating Varying Resource Maps</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating Varying Resource Maps">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Multifunction&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_creating_varying_resource_maps_dg"></A>Creating Varying Resource Maps</H2>

<P><B><I>Windows XP and later</I></B></P>

<P>While standard resource maps can only assign an entire parent resource to a child of a multifunction device, varying resource maps let you subdivide a parent resource among children enumerated by <I>mf.sys</I>. Varying resource maps are supported on Windows XP and later versions of the NT-based operating system.</P>

<P>For example, consider a multi-port serial card on the PCI bus. Assume each of the card's 16550 UART functions requires a set of eight I/O ports and a single, shared interrupt. Also assume that the card is implemented as a single PCI function. In this scenario, it is typical to request a single block of I/O ports and to then split this block into eight segments, one for each 16550 UART function.</P>

<P>In addition to the I/O port and interrupt resources required by the card's 16550 UART functions, assume that the device also requires memory ranges and device-private resources.</P>

<P>Based on these assumptions, <I>mf.sys</I> will return a resource requirements list for this device, constructed as follows:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=20%>Resource<BR>
Number</TH>
<TH align=left width=80%>Resource</TH>
</TR>

<TR VALIGN="top">
<TD width=20%>00</TD>
<TD width=80%><I>Memory Range</I>    Base Register Address (BAR) 0</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>01</TD>
<TD width=80%><I>Private Data</I></TD>
</TR>

<TR VALIGN="top">
<TD width=20%>02</TD>
<TD width=80%><I>Memory Range</I>    BAR 1                                        </TD>
</TR>

<TR VALIGN="top">
<TD width=20%>03</TD>
<TD width=80%><I>Private Data</I></TD>
</TR>

<TR VALIGN="top">
<TD width=20%>04</TD>
<TD width=80%><I>I/O Port Range</I>    BAR 2                                        </TD>
</TR>

<TR VALIGN="top">
<TD width=20%>05</TD>
<TD width=80%><I>Private Data</I></TD>
</TR>

<TR VALIGN="top">
<TD width=20%>06</TD>
<TD width=80%><I>Interrupt</I></TD>
</TR>
</TABLE><BR>

<P>Vendors use INF file directives to specify the sharing of these resources among the card's 16550 UART functions. For each function that requires a segment of the device's resources, you must use a <B>VaryingResourceMap</B> entry in the INF to create a registry entry. Following is an excerpt from the INF file for this device:</P>

<PRE>[DDInstall.RegHW]    
; for each "child" function list hardware ID and resource map 
; and/or varying resource map
HKR,Child0002,HardwareID,, <I>child0002-hardware ID</I>
HKR,Child0002,VaryingResourceMap,1,04, 10,00,00,00, 08,00,00,00
HKR,Child0002,ResourceMap,1,06
</PRE>

<P>The line containing <B>VaryingResourceMap</B> is interpreted as follows:

<UL>
	<LI>The "1" following the <B>VaryingResourceMap</B> parameter specifies that the registry entry's data type is REG_BINARY.</LI>

	<LI>The numbers following the "1" are the varying resource map values. The ‘04’ indicates the parent resource, a segment of which we are assigning to this child. In this case, we’re assigning a segment of resource 04 (BAR 2) to the child (that is, a piece of the resource representing the eight I/O port ranges for each serial port).</LI>

	<LI>The next two DWORDs indicate, first, the offset into the resource and, second, the length of the range that should be allocated to this child. In this case, eight I/O ports are being allocated to this child, starting at offset 0x10 into the parent resource. </LI>

	<LI>If this child required another parent resource, the resource's number, length, and offset would be included on the same line of the INF, following the first resource.</LI>
</UL>

<P>The <B>ResourceMap </B>parameter is described in <A HREF="mf-supp_7k6f.htm">Creating Standard Resource Maps</A> and indicates that this child should get a share of resource 06, which in this case is the PCI device’s interrupt.</P>

<P>Following is a more complete example for this device, specifying four child functions:</P>

<PRE>[Version]
Signature="$Windows NT$"
Class=MultiFunction
ClassGUID={4d36e971-e325-11ce-bfc1-08002be10318}
Provider=%MYCOMPANY%
LayoutFile=layout.inf
DriverVer=1/20/2000
[ControlFlags]
ExcludeFromSelect=*
[Manufacturer]
%MYCOMPANY%=MYCOMPANY

[MYCOMPANY]
%MYCOMPANY_4PORT%=MYCOMPANY4PORT_inst, PCI\VEN_10B5&amp;DEV_9050&amp;SUBSYS_003112E0

[MYCOMPANY4PORT_inst]
Include = mf.inf
Needs = MFINSTALL.mf

[MYCOMPANY4PORT_inst.HW]
AddReg=MYCOMPANY4PORT_inst.RegHW

[MYCOMPANY4PORT_inst.Services]
Include = mf.inf
Needs = MFINSTALL.mf.Services

[MYCOMPANY4PORT_inst.RegHW]    
HKR,Child0000,HardwareID,,*PNP0501
HKR,Child0000,VaryingResourceMap,1,04, 00,00,00,00, 08,00,00,00
HKR,Child0000,ResourceMap,1,06
HKR,Child0001,HardwareID,,*PNP0501
HKR,Child0001,VaryingResourceMap,1,04, 08,00,00,00, 08,00,00,00
HKR,Child0001,ResourceMap,1,06
HKR,Child0002,HardwareID,,*PNP0501
HKR,Child0002,VaryingResourceMap,1,04, 10,00,00,00, 08,00,00,00
HKR,Child0002,ResourceMap,1,06
HKR,Child0003,HardwareID,,*PNP0501
HKR,Child0003,VaryingResourceMap,1,04, 18,00,00,00, 08,00,00,00
HKR,Child0003,ResourceMap,1,06

[Strings]
MYCOMPANY= "MYCOMPANY Inc."
MYCOMPANY_4PORT="MYCOMPANY 4PORT"
</PRE>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating%20Varying%20Resource%20Maps"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
