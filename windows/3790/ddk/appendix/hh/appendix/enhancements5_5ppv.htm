<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Support Enhancements</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Support Enhancements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Appendix:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_supp_support_enhancements"></A>Support Enhancements</H1>

<P>Numerous product support enhancements have been built into Windows&nbsp;XP, including enhancements to the kernel that improve the debugger shipped with Windows&nbsp;XP and the DDK. These enhancements include:

<UL>
	<LI>Kernel changes for improved debugging</LI>

	<LI>Built-in heap leak detection</LI>

	<LI>New heap performance counters</LI>
</UL>

<H3>Kernel Changes for Improved Debugging</H3>

<P>The debuggers for Windows&nbsp;XP have been redesigned and include tools such as WinDbg, KD, and CDB. Although the new debugger will also work with Windows&nbsp;NT® 4 and Windows&nbsp;2000, some features are only available when debugging Windows&nbsp;XP. There is also a 64-bit version of all of the debuggers to debug Intel Itanium-based servers running Windows&nbsp;XP. </P>

<P>Kernel enhancements available only for debugging under Windows&nbsp;XP include:

<UL>
	<LI>Cross-session debugging</LI>

	<LI>Quit and detach</LI>

	<LI>Debugging over an IEEE 1394 port </LI>

	<LI>Dynamic control over debug-child flag</LI>

	<LI>Improved KD serial bandwidth usage</LI>

	<LI>Loading updated driver files through KD</LI>

	<LI>Control over whether terminating a debugger also terminates the debuggee</LI>
</UL>

<P>The Windows&nbsp;XP debugger and debugger documentation are available at the <a href="http://go.microsoft.com/fwlink/?linkid=8708&clcid=0x409" target="_blank">Debugging Tools</A> Web site.</P>

<H4>Cross Session Debugging</H4>

<P>Windows&nbsp;XP supports cross-session debugging. Previously, all debugging was done against the Microsoft Win32® environment subsystem (<I>csrss.exe</I>) running on the computer. This caused potential problems, because on Terminal Services each client has its own Csrss process, so that debugging could not be done across terminal sessions. For example, if User1 logged in running Notepad, a second user, such as a system administrator, couldn’t perform a terminal session into the same server and debug User1’s Notepad process. The debugger code for Windows&nbsp;XP, along with accompanying kernel changes, supports such cross session debugging scenario. </P>

<H4>Quit and Detach</H4>

<P>Windows&nbsp;XP makes it possible to debug a user-mode application and then detach the debugger, without killing the application. This functionality is supported by a new debugger command, <B>qd</B> (quit and detach), which supports detaching the debugger from an application. The debugger command <B>q</B> has the default behavior of killing the application. </P>

<H4>Example: Using Quit and Detach</H4>

<P>Using Windows&nbsp;XP, it is possible to investigate an application with a noncrashing problem without killing the application. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>To investigate the application</B>

<OL>
	<LI>Attach to the process using the debugger.</LI>

	<LI>Debug the application.</LI>

	<LI>Detach the debugger using <B>qd</B>.</LI>
</OL>

<H4>Example: Using qd and the .dump Command</H4>

<P>When debugging a production machine or other computer you don’t want to block with debugging, you can take advantage of <B>qd</B> and .dump command; these commands let you generate a dump file. The <B>.dump</B> command works on any version of Windows&nbsp;NT&nbsp;4, Windows&nbsp;2000, or Windows&nbsp;XP if you use the new Windows&nbsp;XP debugger.</P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>To use qd and .dump</B>

<OL>
	<LI>Attach to the process using the debugger.</LI>

	<LI>Generate a dump file for the application, using the <B>.dump</B> command.</LI>

	<LI>Detach the debugger using <B>qd</B>.</LI>

	<LI>Analyze the dump file using the debugger (<B>WinDBG -z</B> &lt;<I>dumpfile</I>&gt;) without disturbing the original application.</LI>
</OL>

<H4>Debugging over an IEEE 1394 Port</H4>

<P>The debugger and debuggee machines running Windows&nbsp;XP can be connected through IEEE 1394 ports. IEEE 1394 provides much better debugger performance than serial port debugging. For details on how to use IEEE 1394 debugging and other debugger features, see the <a href="http://go.microsoft.com/fwlink/?linkid=8708&clcid=0x409" target="_blank">Debugging Tools</A> Web site.</P>

<H4>Dynamic Control over Debug-child Flag</H4>

<P>When a process is created for debugging, either the DEBUG_PROCESS or DEBUG_ONLY_THIS_PROCESS flag is used, indicating whether child processes should also be debugged. DebugActiveProcess always debugs with the DEBUG_ONLY_THIS_PROCESS flag. Prior to Windows XP, these flag settings were permanent, but system changes in Windows XP now allow the state of the flag to be changed. This allows debuggers more flexibility in whether child processes are debugged, because the flag can be changed at any time.</P>

<H4>Improved KD Serial Bandwidth Usage</H4>

<P>Improvements in the kernel debugger protocol reduce the amount of data sent back and forth between the target machine and the kernel debugger, improving debugging performance over slow kernel debugger links.</P>

<H4>Loading Updated Driver Files Through KD</H4>

<P>Enhancements to the kernel debugger protocol and the kernel now allow the kernel to demand-load driver files from a properly configured kernel debugger. When the system loads a driver, it now queries the kernel debugger to see if the kernel debugger wants to provide the file for the driver in question. If so, the file content is downloaded from the kernel debugger and used. This avoids extra reboots just to copy driver files.</P>

<H4>Control over Whether Terminating a Debugger Also Terminates the Process Being Debugged</H4>

<P>Prior to Windows XP, terminating a debugger would always kill all processes being debugged by the debugger. The new <B>DebugSetProcessKillOnExit</B> routine allows a debugger to control this behavior and select either a detach or the default kill.</P>

<H3>Built-in User Heap Leak Detection</H3>

<P>Windows&nbsp;XP provides built-in user mode heap-leak detection. Poorly written or miscoded applications can “leak” heap memory. In earlier versions before Windows&nbsp;XP, when this situation arose, special tools were needed on the server to help identify the cause of the memory leak. User-mode component heap allocation leaks can be seen in two ways:

<UL>
	<LI>Leak detection when the process is exiting</LI>

	<LI>Using a debugger extension to investigate leaks</LI>
</UL>

<H4>Leak Detection when the Process Is Exiting</H4>

<P>Leak detection is made every time a process is cleanly exiting. It doesn't work if the process is terminated with TerminateProcess() or TerminateThread() / ExitThread() for the last thread in the process; but for most applications this is not a problem.</P>

<P>To enable leak detection when the process is exiting, set the registry key as follows:</P>

<P>[<B>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\ImageName</B>]</P>

<P>"ShutdownFlags"="3"</P>

<H4>Using a Debugger Extension to Investigate Leaks</H4>

<P>Windows&nbsp;XP allows you to use a debugger extension to investigate leaks. This is useful because using leak detection when the process is exiting doesn't work for processes such as <I>Explorer.exe</I>, <I>Services.exe</I>, and others that are not cleanly shut down. In such cases, you can attach an NTSD to the process and use the new debugger extension <B>!heap -l</B> to create a similar list. If the size or contents of the block aren’t enough to determine whether the program is leaking, you can enable the debug options to get stack traces for these blocks.</P>

<H4>!heap -l Usage Example</H4>

<PRE>0:011&gt;!heap -l
Scanning VM ...
Entry   User   Heap   Segment    Size PrevSize Flags
--------------------------------------------------------------------
00178908 00178910 00170000 00000000    258    258 busy extra  
....... &lt;&lt; other 20 blocks &gt;&gt;
005278a8 005278b0 00520000 00000000    40    80 busy extra
22 leaks detected.

0:011&gt; dc 178908 + 20 l1
00178928 002787bc

0:011&gt; dds 002787bc
002787bc abcdaaaa
002787c0 00000001
002787c4 0000000b
002787c8 00000001
002787cc 0000021a
002787d0 00071000
002787d4 00000000
002787d8 002787dc
002787dc 6a252a35 ntdll!RtlAllocateHeapSlowly+0x5b
002787e0 6a2505a4 ntdll!RtlAllocateHeap+0xa26
002787e4 6a206b0f ntdll!RtlDosPathNameToNtPathName_U+0xd9
002787e8 6a20bc48 ntdll!hOpenFile+0x2e
002787ec 6a20bfff ntdll!bOpenAndMapDB+0x17
002787f0 6a20c1ab ntdll!pdbOpenDatabase+0x2d
002787f4 6a20e4e2 ntdll!trGetMatchingExe+0x1ec
002787f8 6a20b145 ntdll!LdrpInstallAppcompatBackend+0xa0
002787fc 6a2117c6 ntdll!LdrpInitializeProcess+0x9f6
00278800 6a2041a0 ntdll!LdrpInitialize+0x256
00278804 6a2180db ntdll!KiUserApcDispatcher+0x7
</PRE>

<P>In this example, the bug is in hOpenFile, which didn't free the string returned by RtlDosPathNameToNtPathName_U. In all, 22 heap allocations were not freed when the application was exited. The heap address that was allocated is in the entry column, and the size is in the size column. If the GlobalFlag for Stack Backtrace was enabled, then analysis could show the actual functions that allocated the heap memory. This can be done several ways:

<UL>
	<LI>Use<B> !heap </B><B>–</B><B>k </B>&lt;<I>address</I>&gt;, using the address of the heap that is shown to be leaking. 
<P>-Or-
</LI>

	<LI>As shown in the example, go to the end of the leaking heap allocation, find the stack number that allocated the heap, and dump the structure ntdll!RtlpStackTraceDataBase. This structure holds all of the stack back traces. The stack back traces will be in numerical order, so dump the structure until you get to the stack number you are looking for and then <B>dds</B> &lt;<I>address</I>&gt;, where &lt;<I>address</I>&gt; is the address in the RtlpStackTraceDataBase where your stack number resides.</LI>
</UL>

<P class=note><B>Note</B>&nbsp;&nbsp;In some cases false positives are seen, such as applications that keep encoded pointers and blocks passed as contexts to local procedure call (LPC) ports. In addition, this doesn't work for an application that has its own heap, such as Microsoft Office applications, or for paged heap enabled with the <B>/full</B> option.</P>

<H3>Additional Heap Counters</H3>

<P>Another important new feature in Windows&nbsp;XP is heap performance monitoring. Performance Monitor (Perfmon) can display about 20 heap-related counters: amount of memory reserved and committed per heap, number of blocks allocated and freed for three class sizes, average allocated and free time, lock contention, and others. Perfmon will display these counters when the following registry key is set:</P>

<P>[<B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PerfProc\Performance</B>]</P>

<P>"DisplayHeapPerfObject"=dword:00000001</P>

<P>Only the process heap and the heaps with higher usage are monitored.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Support%20Enhancements"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
