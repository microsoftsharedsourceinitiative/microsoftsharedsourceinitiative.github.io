<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registry Enhancements</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registry Enhancements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Appendix:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_supp_registry_enhancements"></A>Registry Enhancements</H1>

<P>As with Windows&nbsp;2000, the registry plays a key role in the configuration and control of Windows&nbsp;XP. The registry, which resides on the disk as multiple files called <I>hives</I>, was originally designed as a repository for system configuration data. Although most people think of the registry as static data stored on the hard disk, it is also a window into various in-memory structures maintained by the Windows&nbsp;XP executive and kernel. </P>

<P>The registry code is redesigned for Windows&nbsp;XP, providing enhanced performance while remaining transparent to applications by using existing registry programming interfaces. Windows&nbsp;XP registry enhancements provide performance improvements, including the following areas:

<UL>
	<LI>Converting a delayed close table to a Least Recently Used (LRU) list.</LI>

	<LI>In previous versions of Windows, the system used exclusive locks for registry changes and for searches. To avoid lock contention, Windows XP does not use exclusive registry locks unless it is essential, such as when a program deletes a key control block. To eliminate the need for locks during registry searches, Windows XP uses hardware instructions to maintain reference counts. Locks are used only when a search changes other data, such as the least-recently-used list. While registry access has improved, for best performance, applications should avoid accessing the registry frequently.</LI>

	<LI>Providing a security cache to eliminate duplicate security descriptors.</LI>
</UL>

<P>The new registry implementation delivers two key benefits:

<UL>
	<LI>Larger registries</LI>

	<LI>Faster queries</LI>
</UL>

<H3>Larger Registries</H3>

<P>Windows&nbsp;XP supports larger registries than previous versions of the kernel, which were effectively limited to about 80 percent of the total size of paged pool. The new implementation is limited only by available system disk space.</P>

<P>A tendency to use the registry more like a database developed among registry consumers, which increased demands on registry size. The original design of the registry kept all of the registry files in the paged pool, which, in the 32-bit kernel, is effectively limited at approximately 160 MB because of the layout of the kernel virtual address space. A problem arose because, as larger registry consumers such as Terminal Services and COM appeared, a considerable amount of paged pool was used for the registry alone, potentially leaving too little memory for other kernel-mode components. </P>

<P>Windows&nbsp;XP solves this problem by moving the registry out of paged pool and using the cache manager to do an in-house management of mapped views of the registry files. The mapped views are mapped in 256-KB chunks into system cache space instead of paged pool.</P>

<H3>Faster Queries</H3>

<P>Another issue that affected registry performance in earlier versions is the locality problem. Related cells are spread through the entire registry files. Accessing certain information, such as attributes of a key, could degenerate into page-faults, which lowers performance.</P>

<P>The Windows&nbsp;XP registry uses an improved algorithm for allocating new cells that keeps related cells in closer proximity — such as keeping cells on the same page or nearby pages, which solves the locality problem and reduces the page faults incurred when accessing related cells. A new hive structure member tracks freed cells instead of relying on linked freed cells. When future cells are allocated, the freed cell list and a vicinity argument are used to ensure the allocation is in the same bin as the hive.</P>

<P>Windows&nbsp;XP improves the way the registry handles big data. In versions before Windows&nbsp;XP, if an inefficient application constantly increased a value with a small increment, it created a sparse and wasteful registry file. Windows&nbsp;XP solves this problem with a big cell implementation where cells larger than 16 KB are split into increments of 16-KB chunks. This reduces fragmentation when the data length of a value is increased within a certain threshold.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registry%20Enhancements"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
