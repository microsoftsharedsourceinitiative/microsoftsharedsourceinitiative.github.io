<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VideoPortDDCMonitorHelper</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="VideoPortDDCMonitorHelper">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_edid_gg_gly">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_edid_gg_gly">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_i2c_gg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_videoportddcmonitorhelper_gg"></A>VideoPortDDCMonitorHelper</H1>

<P>The <B>VideoPortDDCMonitorHelper</B> function queries a monitor for <A HREF="JavaScript:hhobj_1.Click()">EDID</A> information using the DDC protocol.</P>

<PRE class=syntax><B>BOOLEAN
  VideoPortDDCMonitorHelper(
    IN PVOID</B>  <I>HwDeviceExtension</I><B>,
    IN PVOID</B>  <I>DDCControl</I><B>,
    IN OUT PUCHAR</B>  <I>EdidBuffer</I><B>,
    IN ULONG</B>  <I>EdidBufferSize</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>HwDeviceExtension</I></DT>

<DD>Pointer to the miniport driver's device extension.</DD>

<DT><I>DDCControl</I></DT>

<DD>Pointer to a <A HREF="#ddk_ddc_control_gg">DDC_CONTROL</A> structure.</DD>

<DT><I>EdidBuffer</I></DT>

<DD>Pointer to a buffer in which the video port driver returns the EDID structure. For ACPI devices, the first four bytes are preset by the video port driver to indicate an attempt to read the EDID. </DD>

<DT><I>EdidBufferSize</I></DT>

<DD>Specifies the size in bytes of the buffer to which <I>EdidBuffer</I> points.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>VideoPortDDCMonitorHelper</B> returns TRUE if successful.</P>

<H4>Headers</H4>

<P>Declared in <I>video.h</I>. Include <I>video.h</I>.</P>

<H4>Comments</H4>

<P>This function existed prior to the Windows&nbsp;XP release, but has been changed.</P>

<P>The miniport driver's <A HREF="vmpfncs_76hz.htm"><I>HwVidGetVideoChildDescriptor</I></A> function can call <B>VideoPortDDCMonitorHelper</B> to more easily obtain the <A HREF="JavaScript:hhobj_2.Click()">EDID</A> structure from a DDC2-compliant monitor. The video port driver calls the functions identified in <I>DDCControl</I><B>-&gt;I2CCallbacks</B> to obtain the EDID; therefore, the miniport driver must implement all of its functions.</P>

<P>In a 256-byte buffer a caller of this function can receive:

<UL>
	<LI>One 128-byte EDID</LI>

	<LI>Two 128-byte EDIDs</LI>

	<LI>One 256-byte EDID (from P&amp;D display)</LI>

	<LI>No EDID</LI>
</UL>

<P>The caller should always ask for the full 256 bytes, because it is impossible to read just the second 128-byte block of the segment.</P>

<P>Callers of <B>VideoPortDDCMonitorHelper</B> must be running at IRQL = PASSIVE_LEVEL.</P>



<H4><A NAME="ddk_ddc_control_gg"></A>DDC_CONTROL</H4>

<P>The DDC_CONTROL structure is a Display Data Channel (DDC) access control block.</P>

<PRE class=syntax>typedef struct _DDC_CONTROL {
  ULONG  Size;
  I2C_CALLBACKS  I2CCallbacks;
  UCHAR  EdidSegment;
} DDC_CONTROL, *PDDC_CONTROL;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Size</B></DT>

<DD>Specifies the size, in bytes, of this DDC_CONTROL structure.</DD>

<DT><B>I2CCallbacks</B></DT>

<DD>Is an <A HREF="#ddk_i2c_callbacks_gg">I2C_CALLBACKS</A> structure, containing pointers to functions to read and write clock and data lines.</DD>

<DT><B>EdidSegment</B></DT>

<DD>Specifies the particular EDID segment. Currently, this member is meaningful only for EEDID (EDID Version 1.3); for other EDID versions, this member should always be set to 0. For EEDID (EDID Version 1.3), segment numbers can range from 0 through 127, where each segment is 256 bytes in length. Since the EDID version number is in segment 0, this member must be set to 0 for the first call to <B>VideoPortDDCMonitorHelper</B>.
</DD>
</DL>



<H4><A NAME="ddk_i2c_callbacks_gg"></A>I2C_CALLBACKS</H4>

<P>The I2C_CALLBACKS structure contains pointers to functions that read from or write to data and clock lines. This structure defines the interface supported by the miniport driver for communicating with a monitor over a standard protocol two-wire serial data bus. (See <A HREF="JavaScript:hhobj_3.Click()">I2C</A> for more information.) The miniport driver must implement all functions identified by this structure and set each structure member with the address of the relevant function.</P>

<PRE class=syntax>typedef struct _I2C_CALLBACKS {
  PVIDEO_WRITE_CLOCK_LINE  WriteClockLine;
  PVIDEO_WRITE_DATA_LINE  WriteDataLine;
  PVIDEO_READ_CLOCK_LINE  ReadClockLine;
  PVIDEO_READ_DATA_LINE  ReadDataLine;
} I2C_CALLBACKS, *PI2C_CALLBACKS;</PRE>

<H4>Members</H4>

<DL>
<DT><B>WriteClockLine</B></DT>

<DD>Pointer to the function that resets the clock line. The miniport driver-defined function is prototyped as follows:

<PRE>typedef VOID (*PVIDEO_WRITE_CLOCK_LINE)(PVOID HwDeviceExtension, UCHAR data);</PRE>
</DD>

<DT><B>WriteDataLine</B></DT>

<DD>Pointer to the function that resets the data line. The miniport driver-defined function is prototyped as follows:

<PRE>typedef VOID (*PVIDEO_WRITE_DATA_LINE)(PVOID HwDeviceExtension, UCHAR data);</PRE>
</DD>

<DT><B>ReadClockLine</B></DT>

<DD>Pointer to the function that reads the data line. The miniport driver-defined function is prototyped as follows:

<PRE>typedef BOOLEAN (*PVIDEO_READ_CLOCK_LINE)(PVOID HwDeviceExtension);</PRE>
</DD>

<DT><B>ReadDataLine</B></DT>

<DD>Pointer to the function that reads the data line. The miniport driver-defined function is prototyped as follows:

<PRE>typedef BOOLEAN (*PVIDEO_READ_DATA_LINE)(PVOID HwDeviceExtension);</PRE>

</DD>
</DL>

<H4>See Also</H4>

<P><A HREF="vmpfncs_76hz.htm"><I>HwVidGetVideoChildDescriptor</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VideoPortDDCMonitorHelper"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
