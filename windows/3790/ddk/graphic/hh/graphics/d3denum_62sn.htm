<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Instruction Token</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Instruction Token">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_instruction_token_gg"></A>Instruction Token</H2>

<P>An instruction token informs the driver of a specific operation to perform and is composed of the following bits:</P>

<H4>Bits</H4>

<DL>
<DT><B>[15:00]</B></DT>

<DD>Bits 0 through 15 indicate an <A HREF="d3denum_0dd3.htm">operation code</A>. D3DSIO_* is an example of an operation code, where * represents the instruction. For example, the following code snippet shows an <A HREF="d3denum_8ejr.htm">ADD instruction</A>:

<PRE>// D3DSIO_ADD d, s1, s2</PRE>
</DD>

<DT><B>[23:16]</B></DT>

<DD>Bits 16 through 23 indicate specific controls related to the operation code.</DD>

<DT><B>[27:24]</B></DT>

<DD>For pixel and vertex shader versions earlier than 2_0, bits 24 through 27 are reserved and set to 0x0.

<P>For pixel and vertex shader versions 2_0 and later, bits 24 through 27 specify the size in DWORDs of the instruction excluding the instruction token itself (that is, the number of tokens that comprise the instruction excluding the instruction token).
</DD>

<DT><B>[28]</B></DT>

<DD>For pixel and vertex shader versions earlier than 2_0, bit 28 is reserved and set to 0x0.

<P>For pixel and vertex shader versions 2_0 and later, bit 28 indicates whether the instruction is predicated (that is, contains an extra predicate source token at the end of the shader code. If this bit is set to 0x1, the instruction is predicated. 
</DD>

<DT><B>[29]</B></DT>

<DD>Reserved. This value is set to 0x0.</DD>

<DT><B>[30]</B></DT>

<DD>For pixel shader versions earlier than 2_0, bit 30 is the co-issue bit. If set to 1, execute this instruction with previous instructions; otherwise, execute separately.

<P>For pixel shader version 2_0 and later and all vertex shader versions, bit 30 is reserved and set to 0x0.
</DD>

<DT><B>[31]</B></DT>

<DD>Bit 31 is zero (0x0).
</DD>
</DL>

<H4>Comments</H4>

<P>See the Pixel Shader Reference and Vertex Shader Reference in the latest DirectX SDK documentation for more information about operations that can be specified in bits 0 through 15 of instruction tokens. </P>

<P>After the DirectX3D runtime receives shader code from an application, the runtime validates the code before passing the code to the driver. Typically, the runtime prefixes assembler instructions with "D3DSIO_" to create the operation code. For example, the following assembler instructions correspond to kernel-mode operations:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Assembler instruction</TH>
<TH align=left width=52%>Kernel-mode operation</TH>
</TR>

<TR VALIGN="top">
<TD width=48%><B>add</B></TD>
<TD width=52%>D3DSIO_ADD</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>mov</B></TD>
<TD width=52%>D3DSIO_MOV</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>sub</B></TD>
<TD width=52%>D3DSIO_SUB</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>tex</B></TD>
<TD width=52%>D3DSIO_TEX</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>texcoord</B></TD>
<TD width=52%>D3DSIO_TEXCOORD</TD>
</TR>
</TABLE><BR>

<P>Note that in all vertex shader versions, the <B>sub</B> assembler instruction is implemented as a D3DSIO_ADD operation with the source modifier (bits 27:24) of the second source set to negate (0x1).</P>

<P>The <B>tex</B> and <B>texcoord</B> instructions apply to pixel shader versions 1_0 through 1_3; each instruction has one <A HREF="d3denum_5mp3.htm">destination parameter</A> associated with it. </P>

<P>The <B>texld</B> and <B>texcrd</B> instructions are new to pixel shader version 1_4 and later; each instruction has both destination and <A HREF="d3denum_6jon.htm">source parameters</A> associated with it. </P>

<P>The runtime converts the <B>tex</B> and <B>texld</B> assembler instructions to the D3DSIO_TEX kernel-mode operation. The runtime converts the <B>texcoord</B> and <B>texcrd</B> assembler instructions to the D3DSIO_TEXCOORD kernel-mode operation. Drivers first verify the pixel shader version of the shader code and then process the instructions accordingly. For example, if a driver verifies that it received version 1_4 pixel shader code with a D3DSIO_TEX operation, the driver determines that destination and source parameters follow the instruction token. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Instruction%20Token"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
