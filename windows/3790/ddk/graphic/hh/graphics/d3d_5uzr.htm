<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Command and Vertex Buffer Allocation</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Command and Vertex Buffer Allocation">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_command_and_vertex_buffer_allocation_gg"></A>Command and Vertex Buffer Allocation</H3>

<P>There are three types of buffers used in Direct3D:

<UL>
	<LI>Implicit vertex buffers, which are created for internal use only; that is, applications are unaware of them. One implicit vertex buffer is always created after context creation and Direct3D stores vertex data in them. </LI>

	<LI>Explicit vertex buffers, which are created only in response to an application request. Direct3D then stores vertex data in explicit vertex buffers.</LI>

	<LI>Command buffers, which are created for internal use only; that is, applications are unaware of command buffers. Direct3D stores command data in command buffers. </LI>
</UL>

<P>Implicit vertex buffers are special vertex buffers used internally by Direct3D for batching. They are created during device initialization and can be multibuffered. They are always read/write so they should not be put in video memory (for Microsoft DirectX® 6.0 and the later versions). This type of buffer is marked by the absence of both the DDSCAPS2_VERTEXBUFFER and DDSCAPS2_COMMANDBUFFER flags.</P>

<P>Explicit vertex buffers are created and controlled by the application. These cannot be multibuffered and cannot be put into local or nonlocal video memory unless the DDSCAPS_WRITEONLY flag is set. Explicit vertex buffers are marked with DDSCAPS_VERTEXBUFFER.</P>

<P>Command buffers are used by Direct3D to batch commands. They can be multibuffered and are used for all APIs except for TLVERTEX or unclipped execute-buffer API calls. This type of buffer is marked by the flag DDSCAPS2_COMMANDBUFFER. They are always write-only, though no explicit flag is set and they never contain invalid instructions.</P>

<P>By default, the Direct3D runtime allocates all of these buffers. Implicit vertex buffers and command buffers are accessed through the surfaces with which they are associated. All buffers are passed to the driver's <A HREF="d3dfncs_5usn.htm"><I>D3dDrawPrimitives2</I></A> callback.</P>

<H4>Driver-Allocated Vertex and Command Buffers</H4>

<P>A Direct3D driver optionally performs the allocation of vertex and command buffers by supplying callback functions. To supply these callback functions, the Direct3D driver fills out a <A HREF="ddstrcts_5b1j.htm">DD_D3DBUFCALLBACKS</A> structure and points the <B>lpD3DBufCallbacks</B> member of the <A HREF="ddstrcts_17s7.htm">DD_HALINFO</A> structure to it. DD_HALINFO is returned by <A HREF="ddfncs_4yav.htm"><I>DrvGetDirectDrawInfo</I></A> in response to the initialization of the DirectDraw component of the driver. The callbacks reported in the DD_D3DBUFCALLBACKS structure are:</P>

<P class=indent1><A HREF="d3dfncs_567b.htm"><I>CanCreateD3dBuffer</I></A></P>

<P class=indent1><A HREF="d3dfncs_29bb.htm"><I>CreateD3dBuffer</I></A></P>

<P class=indent1><A HREF="d3dfncs_0d5z.htm"><I>DestroyD3dBuffer</I></A></P>

<P class=indent1><A HREF="d3dfncs_1bqf.htm"><I>LockD3dBuffer</I></A></P>

<P class=indent1><A HREF="d3dfncs_41lz.htm"><I>UnlockD3dBuffer</I></A></P>

<P>These functions are called in the same way as the <I>DdXxxSurface</I> callbacks (such as <A HREF="ddfncs_9yxz.htm"><I>DdCanCreateSurface</I></A>) and only when the DDSCAPS_EXECUTEBUFFER flag is set. The buffer creation flags are DDSCAPS_WRITEONLY, DDSCAPS2_VERTEXBUFFER, and DDSCAPS2_COMMANDBUFFER. </P>

<P class=note><B>Windows 98/Me Note</B>&nbsp;&nbsp;A Direct3D driver for Windows 98/Me uses the DDHAL_DDEXEBUFCALLBACKS structure rather than DD_D3DBUFCALLBACKS to supply callback functions. The callbacks reported in the DDHAL_DDEXEBUFCALLBACKS structure are named <I>XxxExecuteBuffer</I> instead of <I>XxxD3dBuffer</I> like the preceding callback functions. However, the callback functions reported in DDHAL_DDEXEBUFCALLBACKS are used in the same way. The <I>ddrawi.h</I> file defines DDHAL_DDEXEBUFCALLBACKS; the <I>ddrawint.h</I> file defines DD_D3DBUFCALLBACKS. </P>

<P class=note>A Direct3D driver's source code must contain the following definition to map DD_D3DBUFCALLBACKS to DDHAL_DDEXEBUFCALLBACKS so that such source code can be used to build a driver for either Windows 2000/XP or Windows 98/Me: <BR>
<CODE>#define DDHAL_D3DBUFCALLBACKS DDHAL_DDEXEBUFFCALLBACKS<BR>
</CODE>For more information, see <A HREF="ddraw_0t5z.htm">Data Type Mapping between Windows 2000/XP and Windows 9x/98/Me</A>.</P>

<P>Drivers determine the type of buffer being requested by checking the <B>ddsCaps</B> member of the <A HREF="ddstrcts_1vl4.htm">DD_SURFACE_LOCAL</A> structure passed to the <I>CanCreateExecuteBuffer</I> and <I>CreateExecuteBuffer</I> callback for the following flags:

<UL>
	<LI>DDSCAPS_VERTEXBUFFER indicates that the driver should allocate an explicit vertex buffer.</LI>

	<LI>DDSCAPS_COMMANDBUFFER indicates that the driver should allocate a command buffer.</LI>

	<LI>If neither flag is set, the driver should allocate an implicit vertex buffer. </LI>
</UL>

<P>The driver internally allocates vertex and command buffers and cycles through these buffers. Direct3D fills a given pair while the hardware asynchronously renders from the other queued buffers. This is very useful with direct memory access (DMA). </P>

<P>Buffers in a multibuffering set can be in different memory types, that is, in system or video memory. When the driver is called to create the first buffer, it creates the set immediately and returns the first buffer in the set to Direct3D. The driver uses flags to specify the type of memory that it used to allocate each buffer in the set. The driver should return a new buffer in system memory for each call to <A HREF="d3dfncs_5usn.htm"><I>D3dDrawPrimitives2</I></A> if the D3DHALDP2_SWAPVERTEXBUFFER or D3DHALDP2_SWAPCOMMANDBUFFER flag is set. If the returned buffer is in video memory, the corresponding D3DHALDP2_VIDMEMVERTEXBUF or D3DHALDP2_VIDMEMCOMMANDBUF flag should be set.</P>

<P>Occasionally, Direct3D requests the minimum size for the next buffer. If the size is too large, the driver should allocate the buffer in system memory (a backing surface). If the size is too small, the driver is permitted to provide a larger buffer. The driver should keep track of how many buffers and what memory types they are and clean up everything on exit. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Command%20and%20Vertex%20Buffer%20Allocation"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
