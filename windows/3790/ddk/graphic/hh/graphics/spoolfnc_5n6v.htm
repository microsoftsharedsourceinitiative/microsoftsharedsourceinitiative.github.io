<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>XcvDataPort</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="XcvDataPort">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_xcvdataport_gg"></A>XcvDataPort</H1>

<P>A port monitor server DLL's <B>XcvDataPort</B> function receives information from, and returns information to, the port monitor's UI DLL.</P>

<PRE class=syntax><B>DWORD
  XcvDataPort(
    HANDLE  </B><I>hXcv</I><B>,
    LPCWSTR  </B><I>pszDataName</I><B>,
    PBYTE  </B><I>pInputData</I><B>,
    DWORD  </B><I>cbInputData</I><B>,
    PBYTE  </B><I>pOutputData</I><B>,
    DWORD  </B><I>cbOutputData</I><B>,
    PDWORD  </B><I>pcbOutputNeeded</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>hXcv</I></DT>

<DD>Caller-supplied printer handle, obtained by calling <B>OpenPrinter</B> (described in the Platform SDK documentation). This handle is created and returned by the <A HREF="spoolfnc_3lpj.htm"><B>XcvOpenPort</B></A> function.</DD>

<DT><I>pszDataName</I></DT>

<DD>Caller-supplied pointer to a string representing the name of the data being requested. For more information, see the following <B>Comments</B> section.</DD>

<DT><I>pInputData</I></DT>

<DD>Caller-supplied pointer to a buffer containing input data.</DD>

<DT><I>cbInputData</I></DT>

<DD>Caller-supplied size, in bytes, of the buffer pointed to by <I>pInputData</I>.</DD>

<DT><I>pOutputData</I></DT>

<DD>Caller-supplied pointer to a buffer to receive output data.</DD>

<DT><I>cbOutputData</I></DT>

<DD>Caller-supplied size, in bytes, of the buffer pointed to by <I>pOutputData</I>.</DD>

<DT><I>pcbOutputNeeded</I></DT>

<DD>Caller-supplied pointer to a location to receive the minimum size, in bytes, required for the buffer pointed to by <I>pOutputData</I>.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the operation succeeds, this function should return ERROR_SUCCESS. Otherwise, it should return an ERROR_-prefixed Win32 error code. The print monitor UI DLL receives this value in the <I>pdwStatus</I> location specified for <A HREF="spoolfnc_2gtj.htm"><B>XcvData</B></A>.</P>

<H4>Headers</H4>

<P>Declared in <I>winsplp.h</I>. Include <I>winsplp.h</I>.</P>

<H4>Comments</H4>

<P><A HREF="provider_897r.htm#ddk_port_monitor_server_dll_gg">Port monitor server DLLs</A> are required to define an <B>XcvDataPort</B> function so they can receive information from, and return information to, <A HREF="provider_897r.htm#ddk_port_monitor_ui_dll_gg">port monitor UI DLLs</A>. The function's address must be included in a <A HREF="spoolfnc_0k9z.htm">MONITOR2</A> structure.</P>

<P>The <B>XcvDataPort</B> function is called by the spooler's <A HREF="spoolfnc_2gtj.htm"><B>XcvData</B></A> function. The function parameters for <B>XcvDataPort</B> and <B>XcvData</B> are almost identical. (<B>XcvData</B> has an additional parameter, <I>pdwStatus</I>, that is not present in <B>XcvDataPort</B>.)</P>

<P>The string pointed to by <I>pszDataName</I> specifies the operation to be performed. The function must recognize the following data name strings:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Data Name String</TH>
<TH align=left width=71%>Operation</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>L"AddPort"</TD>
<TD width=71%>All information needed for adding a port has been sent. The function should perform operations necessary to add the specified port, including writing the port name in the registry under the <B>Ports</B> key.
<P>The <I>pInputData</I> parameter points to a NULL-terminated port name string.</P>

<P>If the function returns ERROR_SUCCESS, the spooler marks the port as added.</P>

<P>This string is specified by the print monitor UI DLL, from within its <A HREF="spoolfnc_1b1j.htm"><B>AddPortUI</B></A> function.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>L"DeletePort"</TD>
<TD width=71%>All information needed for deleting a port has been sent. The function should perform operations necessary to delete the specified port, including removing the port name from the registry's <B>Ports</B> key.
<P>The <I>pInputData</I> parameter points to a NULL-terminated port name string.</P>

<P>If the function returns ERROR_SUCCESS, the spooler marks the port as deleted.</P>

<P>This string is specified by the print monitor UI DLL, from within its <A HREF="spoolfnc_9fs7.htm"><B>DeletePortUI</B></A> function.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>L"MonitorUI"</TD>
<TD width=71%>The function should use <I>pOutputData</I> to return the name of the associated <A HREF="provider_897r.htm#ddk_port_monitor_ui_dll_gg">port monitor UI DLL</A>.
<P>This string is specified by the print spooler, when an application calls the Platform SDK <B>AddPort</B> function.</P>
</TD>
</TR>
</TABLE><BR>

<P>Typically, the function is written to recognize additional, customized strings that are sent by the UI DLL from within its <A HREF="spoolfnc_1b1j.htm"><B>AddPortUI</B></A>, <A HREF="spoolfnc_9kbr.htm"><B>ConfigurePortUI</B></A>, and <A HREF="spoolfnc_9fs7.htm"><B>DeletePortUI</B></A> functions. These strings might represent commands that request current configuration values from the server DLL, or that deliver new values. For example, your <B>XcvDataPort</B> function might recognize the string "GetTransmissionRetryTimeout", which your UI DLL could send to your server DLL to request the currently stored transmission retry time-out value. Or, you might define a set of strings that must be sent before "AddPort" or "DeletePort" is sent, where the strings are used to supply information identifying the port to add or delete.</P>

<P>For a given <I>pszDataName</I> string and input buffer, <B>XcvDataPort</B> might first be called with a <I>cbOutputData</I> value of zero. The function should return a required buffer size in <I>pcbOutputNeeded</I>, along with a return value of ERROR_INSUFFICIENT_BUFFER. The caller can use the value received in <I>pcbOutputNeeded</I> to allocate an output buffer of adequate size, and can then call <B>XcvDataPort</B> again, this time specifying the allocated buffer size in <I>cbOutputData</I>.</P>

<P>The <B>XcvDataPort</B> function must validate all input arguments. Specifically, the function must:

<UL>
	<LI>Validate the contents of the string pointed to by the <I>pszDataName</I> parameter. If this string represents an administrative operation (typically adding, deleting, or configuring a port), the <B>XcvDataPort</B> function should compare the granted access mask that was previously received by the <A HREF="spoolfnc_3lpj.htm"><B>XcvOpenPort</B></A> function with SERVER_ACCESS_ADMINISTER. If the comparison fails, <B>XcvDataPort</B> must  return ERROR_ACCESS_DENIED. </LI>

	<LI>Validate the contents of the buffer pointed to by the <I>pInputData</I> parameter. When the spooler calls the <B>XcvOpenPort</B> function, it performs no validation on the contents of this buffer. The monitor can make no assumptions about the validity of this data, which can come from a malicious application.</LI>
</UL>

<P>If you are writing a port monitor that will communicate with TCPMON, see <A HREF="provider_5iuf.htm">TCPMON Xcv Interface</A>.</P>

<H4>See Also</H4>

<P><A HREF="spoolfnc_3lpj.htm"><B>XcvOpenPort</B></A>, <A HREF="spoolfnc_2gtj.htm"><B>XcvData</B></A>, <A HREF="spoolfnc_1b1j.htm"><B>AddPortUI</B></A>, <A HREF="spoolfnc_9kbr.htm"><B>ConfigurePortUI</B></A>, <A HREF="spoolfnc_9fs7.htm"><B>DeletePortUI</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: XcvDataPort"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
