<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using I2C to Communicate with a Child Device</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Using I2C to Communicate with a Child Device">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_i2c_gg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_using_i2c_to_communicate_with_a_child_device_gg"></A>Using I<SUP>2</SUP>C to Communicate with a Child Device</H2>

<P>On Microsoft® Windows® XP and later, after the Plug and Play Manager has enumerated a video adapter's child devices, the miniport driver can communicate with the adapter's child devices on an <A HREF="JavaScript:hhobj_1.Click()">I<SUP>2</SUP>C</A> bus using the I<SUP>2</SUP>C protocol. Communication between the miniport driver and WDM drivers for those devices on an I<SUP>2</SUP>C bus can occur via a software interface exposed by the miniport driver (as described in <A HREF="vmport_2mjr.htm">Communicating with the Driver of a Child Device</A>). The miniport driver can initiate physical communication between those devices on the I<SUP>2</SUP>C bus by way of a new hardware interface exposed by the video port driver. If the miniport driver needs the I<SUP>2</SUP>C master device (usually the graphics chip) to read from or write to a physical child device over the I<SUP>2</SUP>C bus, it can use the hardware I<SUP>2</SUP>C interface provided by the video port driver's <A HREF="vpfncs_9m7b.htm"><B>VideoPortQueryServices</B></A> routine. Note that this communication over the I<SUP>2</SUP>C bus is limited strictly to hardware devices on the same I<SUP>2</SUP>C bus. Miniport driver writers are strongly encouraged to use these routines for all such communication.</P>

<P>This mode of communication is also useful in cases where a video adapter has components for which there is no WDM driver. For example, a video adapter may have a daughter board or circuit that is used to send the video image to a digital flat panel. In this case, the miniport driver can make use of the hardware I<SUP>2</SUP>C interface provided by <B>VideoPortQueryServices</B> to send commands to that circuit over the I<SUP>2</SUP>C bus.</P>

<P><IMG SRC="images/i2cfig1.gif" ALT="" BORDER=0></P>

<P><B>Communicating with Child Devices Through the I<SUP>2</SUP>C Interface</B></P>

<P>The preceding figure illustrates how a miniport driver can initiate communication between two hardware devices on an I<SUP>2</SUP>C bus.</P>

<P>To take advantage of the video port's I<SUP>2</SUP>C routines, the miniport driver must query the video port driver for an I<SUP>2</SUP>C interface. In preparation for this, the miniport driver must allocate a <A HREF="vstrcts_4i07.htm">VIDEO_PORT_I2C_INTERFACE</A> structure, and initialize its first two members (the <B>Size</B> and <B>Version</B> members) to appropriate values. The miniport driver then calls the video port driver's <A HREF="vpfncs_9m7b.htm"><B>VideoPortQueryServices</B></A> routine, setting the <I>servicesType</I> parameter to <B>VideoPortServicesI2C</B>, and setting the <I>pInterface</I> parameter to the partially-initialized VIDEO_PORT_I2C_INTERFACE structure. </P>

<P>If the call to <B>VideoPortQueryServices</B> is successful, the video port driver fills in the remaining members of the VIDEO_PORT_I2C_INTERFACE structure, including the addresses of four I<SUP>2</SUP>C routines: <A HREF="vpfncs_48x3.htm"><I>I2CStart</I></A>, <A HREF="vpfncs_7k87.htm"><I>I2CStop</I></A>, <A HREF="vpfncs_8qlj.htm"><I>I2CRead</I></A>, and <A HREF="vpfncs_897r.htm"><I>I2CWrite</I></A>. </P>

<P><I>I2CStart </I>and <I>I2CStop</I> are used, respectively, to initiate communication with the child device, and to terminate communication with it.</P>

<P><I>I2CRead</I> reads a specified number of bytes from the child device; <I>I2CWrite</I> writes a specified number of bytes to it.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Using%20I2C%20to%20Communicate%20with%20a%20Child%20Device"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
