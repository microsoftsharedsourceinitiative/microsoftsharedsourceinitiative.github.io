<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating the Plug-In</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating the Plug-In">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_creating_the_plug_in_gg"></A>Creating the Plug-In</H2>

<P>All printer driver plug-ins must define <B>DllMain</B>, <B>DllGetClassObject</B>, and <B>DllCanUnloadNow</B> functions. They must also implement the <B>IClassFactory</B> COM interface and one of the <A HREF="custdrvr_2ckn.htm"><B>IPrintOemUI</B></A>, <A HREF="custdrvr_1fhj.htm"><B>IPrintOemUI2</B></A>, <A HREF="custdrvr_5go7.htm"><B>IPrintOemUni</B></A>, <A HREF="custdrvr_0pt3.htm"><B>IPrintOemUni2</B></A>, <A HREF="custdrvr_9y5j.htm"><B>IPrintOemPS</B></A>, or <A HREF="custdrvr_7smf.htm"><B>IPrintOemPS2</B></A> COM interfaces.</P>

<P>When creating either a <A HREF="custdrvr_0mjr.htm">user interface plug-in</A> or a <A HREF="custdrvr_91rb.htm">rendering plug-in</A>, you should base your code on the <A HREF="custdrvr_4asn.htm">sample UI plug-in</A> or the <A HREF="custdrvr_3a5j.htm">sample rendering plug-ins</A> provided in this DDK.</P>

<P>To create either type of plug-in, you must do the following:

<OL>
	<LI>Define a <B>DllMain</B> function (described in the Platform SDK documentation).
<P>This is the entry point for all Win32 DLLs.
</LI>

	<LI>Define and export a <B>DllGetClassObject</B> function (described in the Platform SDK documentation).
<P>The printer driver calls this function to obtain access to the plug-in's implementation of the <B>IClassFactory</B> interface (described in the Platform SDK documentation). When the driver calls <B>DllGetClassObject</B>, it specifies one of the following class identifiers (defined in <I>prcomoem.h</I>):

<P>CLSID_OEMUI – for UI plug-ins<BR>
CLSID_OEMRENDER – for rendering plug-ins

<P>The driver also specifies an interface identifier of <B>IID_IClassFactory</B>.

<P>The <B>DllGetClassObject</B> function must create an instance of its <B>IClassFactory</B> interface and return a pointer to it, as illustrated in the sample code.
</LI>

	<LI>Implement the <B>IClassFactory</B> COM interface.
<P>The <B>IClassFactory</B> interface's <B>CreateInstance</B> method should create an instance of the plug-in's implementation of one of the following COM interfaces:

<P><A HREF="custdrvr_2ckn.htm"><B>IPrintOemUI</B></A>, <A HREF="custdrvr_1fhj.htm"><B>IPrintOemUI2</B></A>, <A HREF="custdrvr_5go7.htm"><B>IPrintOemUni</B></A>, <A HREF="custdrvr_0pt3.htm"><B>IPrintOemUni2</B></A>, <A HREF="custdrvr_9y5j.htm"><B>IPrintOemPS</B></A>, or <A HREF="custdrvr_7smf.htm"><B>IPrintOemPS2</B></A>

<P>One of the <B>CreateInstance</B> method's inputs is an interface identifier. The driver calls <B>CreateInstance</B> with an interface identifier of <B>IID_IUnknown</B>, meaning the <B>CreateInstance</B> method must return a pointer to the created instance's <B>IUnknown</B> interface (described in the Platform SDK documentation), as illustrated in the sample code.
</LI>

	<LI>Implement one of the <B>IPrintOemUI</B>, <B>IPrintOemUI2</B>, <B>IPrintOemUni</B>, <B>IPrintOemUni2</B>, <B>IPrintOemPS</B>, or <B>IPrintOemPS2</B> COM interfaces, including the standard <B>IUnknown</B> interface, as illustrated in the sample code.
<P>The first of the implemented methods to be called by the driver is the <B>IUnknown</B> interface's <B>QueryInterface</B> method (described in the Platform SDK documentation). This method receives one of the <A HREF="custdrvr_03hj.htm">interface identifiers for printer drivers</A> as an input argument. The driver calls the method to determine which version of the interface is supported by the plug-in and to receive a pointer to the supported interface.
</LI>

	<LI>Define and export a <B>DllCanUnloadNow</B> function (described in the Platform SDK documentation).
<P>The <B>DllCanUnloadNow</B> function must return S_OK if all instances of the plug-in-implemented <B>IPrintOemUI</B>, <B>IPrintOemUI2</B>, <B>IPrintOemUni</B>, <B>IPrintOemUni2</B>, <B>IPrintOemPS</B>, or <B>IPrintOemPS2</B> COM interfaces have been released. The S_OK return indicates to the driver that the plug-in can be unloaded.

<P>Note that when the printer driver unloads the plug-in DLL, it first calls the plug-in's <B>DllCanUnloadNow</B> function. Regardless of the value returned by <B>DllCanUnloadNow</B>, the printer driver then unloads the plug-in DLL by calling the <B>FreeLibrary</B> function. This is done to ensure that the plug-in DLL is unloaded before the driver is unloaded. 

<P>If the plug-in DLL must remain loaded (for example, when it creates a thread that uses the plug-in DLL), the thread must load the DLL, using a call to the <B>LoadLibrary</B> function. When the thread is finished with the DLL, it should call the <B>FreeLibraryAndExitThread</B> function to unload it. In a situation in which a thread has called <B>LoadLibrary</B>, the driver's call to <B>FreeLibrary</B> merely decrements the DLL's reference count, thereby preventing it from being unloaded. The <B>LoadLibrary</B>, <B>FreeLibrary</B>, and <B>FreeLibraryAndExitThread</B> functions are described in the Platform SDK documentation.   
</LI>
</OL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating%20the%20Plug-In"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
