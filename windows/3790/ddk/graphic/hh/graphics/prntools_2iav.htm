<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Debugging in Printer Driver Components</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Debugging in Printer Driver Components">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_debugging_in_printer_driver_components_gg"></A>Debugging in Printer Driver Components</H2>

<P>If you are developing a printer driver rendering plug-in or user interface plug-in, you can enable debug messages in these components. You can use a global debug variable to control the level of detail in messages appearing in the debugger window. </P>

<P>You can use the macros discussed in the Debug Message Macros section to send messages to the debugger window under a variety of conditions. </P>

<P>In addition, you can use the information in this section to enable debug messages in the Unidrv or Pscript renderers, provided that you have checked builds of these DLLs. </P>

<H4>Global Debug Variable</H4>

<P>The <B>giDebugLevel</B> global variable is declared in <I>minidrv.h</I>, a header file that ships with the Windows DDK. The value of <B>giDebugLevel</B> can be modified by:

<OL>
	<LI>Changing its value in the debugger.</LI>

	<LI>Redefining its value in the minidriver.</LI>
</OL>

<P>You can set <B>giDebugLevel</B> to any of the following values:</P>

<PRE>#define DBG_VERBOSE 1
#define DBG_TERSE   2
#define DBG_WARNING 3
#define DBG_ERROR   4
#define DBG_RIP     5
</PRE>

<H4>Debug Message Macros</H4>

<P>The following macros are used for debugging purposes. Several of them take action only if the <B>giDebugLevel</B> global variable, which controls which debug messages are emitted, is set to a specific value. The macros expand to white spaces on a free build. Here are brief descriptions of what they do and their parameters.

<DL>
<DT><B>ASSERT</B>(<I>cond</I>)</DT>

<DD>Verifies whether the Boolean expression in <I>cond</I> is TRUE. If it is not, the macro forces a breakpoint.</DD>

<DT><B>ASSERTMSG</B>(<I>cond,</I> (<I>msg</I>))</DT>

<DD>Verifies whether the Boolean expression in <I>cond</I> is TRUE. If it is not, the macro displays the message in <I>msg,</I> and forces a breakpoint.</DD>

<DT><B>ERR</B>((<I>msg</I>))</DT>

<DD>Displays the message in <I>msg</I> if the current debug level is &lt;= DBG_ERROR. The message format is:

<PRE>ERR filename (linenumber): msg
</PRE>
</DD>

<DT><B>RIP</B>((<I>msg</I>))</DT>

<DD>Displays the message in <I>msg</I> and forces a breakpoint.</DD>

<DT><B>TERSE</B>((<I>msg</I>))</DT>

<DD>Displays the message in <I>msg</I> if the current debug level is &lt;= DBG_TERSE.</DD>

<DT><B>VERBOSE</B>((<I>msg</I>))</DT>

<DD>Displays the message in <I>msg</I> if the current debug level is &lt;= DBG_VERBOSE.</DD>

<DT><B>WARNING</B>((<I>msg</I>))</DT>

<DD>Displays the message in <I>msg</I> if the current debug level is &lt;= DBG_WARNING. The message format is: 

<PRE>WRN filename (linenumber): msg
</PRE>
</DD>
</DL>

<P>Note that all of the macros with an <I>msg</I> argument require an extra pair of parentheses surrounding this argument. Here are two examples that illustrate this requirement: </P>

<PRE>ASSERTMSG(x &gt; 0, ("x is less than 0\n"));
WARNING( ("App passed NULL pointer, ignoring...\n") );
</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Debugging%20in%20Printer%20Driver%20Components"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
