<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>EnumPorts</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="EnumPorts">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_enumports_gg"></A>EnumPorts</H1>

<P>A port monitor server DLL's <B>EnumPorts</B> function enumerates the ports that the port monitor supports.</P>

<PRE class=syntax><B>BOOL
  (WINAPI *pfnEnumPorts)(
    HANDLE  </B><I>hMonitor  </I>//MONITOR2 only<B>
    LPWSTR  </B><I>pName</I><B>,
    DWORD  </B><I>Level</I><B>,
    LPBYTE  </B><I>pPorts</I><B>,
    DWORD  </B><I>cbBuf</I><B>,
    LPDWORD  </B><I>pcbNeeded</I><B>,
    LPDWORD  </B><I>pcReturned<B>
    </B></I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>hMonitor</I></DT>

<DD>Caller supplied monitor instance handle. This is the handle returned by the monitor's <A HREF="spoolfnc_4m5j.htm"><B>InitializePrintMonitor2</B></A> function. (This parameter does not exist if the print monitor supports <B>InitializePrintMonitor</B> instead of <B>InitializePrintMonitor2</B>.)</DD>

<DT><I>pName</I></DT>

<DD>Caller-supplied pointer to a string containing the name of the server whose ports are to be enumerated. A NULL pointer represents the system on which the port monitor server DLL is executing.</DD>

<DT><I>Level</I></DT>

<DD>Caller-supplied value indicating the type of structures to be returned in the buffer pointed to by <I>pPorts</I>. Possible values are as follows:

<TABLE>

<TR VALIGN="top">
<TH align=left width=38%><I>Level</I></TH>
<TH align=left width=62%><I>pPorts</I></TH>
</TR>

<TR VALIGN="top">
<TD width=38%>1</TD>
<TD width=62%>PORT_INFO_1</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>2</TD>
<TD width=62%>PORT_INFO_2</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>pPorts</I></DT>

<DD>Caller-supplied pointer to a buffer to receive port information. Returned information must consist of an array of PORT_INFO_1 or PORT_INFO_2 structures, followed by the strings pointed to by structure members. These structures are described in the Platform SDK documentation.</DD>

<DT><I>cbBuf</I></DT>

<DD>Caller-supplied size, in bytes, of the buffer pointed to by <I>pPorts</I>.</DD>

<DT><I>pcbNeeded</I></DT>

<DD>Caller-supplied pointer to a location to receive the buffer size, in bytes, required to contain all returned information.</DD>

<DT><I>pcReturned</I></DT>

<DD>Caller-supplied pointer to a location to receive the number enumerated ports.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the operation succeeds, the function should return TRUE. Otherwise it should return FALSE.</P>

<H4>Headers</H4>

<P>Declared in <I>winsplp.h</I>. Include <I>winsplp.h</I>.</P>

<H4>Comments</H4>

<P><A HREF="provider_897r.htm#ddk_port_monitor_server_dll_gg">Port monitor server DLLs</A> are required to define an <B>EnumPorts</B> function and include the function's address in a <A HREF="spoolfnc_0k9z.htm">MONITOR2</A> structure. Language monitors do not export this function.</P>

<P>The purpose of the <B>EnumPorts</B> function is to enumerate the ports currently supported by a print monitor. These ports are ones that were previously specified to the monitor's <A HREF="spoolfnc_1b1j.htm"><B>AddPortUI</B></A> or <A HREF="spoolfnc_22zr.htm"><B>AddPortEx</B></A> function.</P>

<P>The <B>EnumPorts</B> function should fill the buffer pointed to by <I>pPort</I> with an array of PORT_INFO_1 or PORT_INFO_2 structures. Following the last array element, the function must load all the strings pointed to by the array's structure members. Refer to <I>localmon.dll</I>, a <A HREF="provider_3h9j.htm">sample port monitor</A>, for an example of how to do this. The function must also return the number of structures supplied (that is, the number of supported ports) by placing the number in the location pointed to by <I>pcReturned</I>.</P>

<P>The caller specifies the size of the supplied buffer in <I>cbBuf</I>. If the buffer is too small, the function should place the required buffer size in the location pointed to by <I>pcbNeeded</I>, call <B>SetLastError</B> (described in the Platform SDK documentation) specifying ERROR_INSUFFICIENT_BUFFER, and return FALSE.</P>

<P>If <I>Level</I> contains an invalid level number, the function should call <B>SetLastError</B> specifying ERROR_INVALID_LEVEL, and return FALSE. Some port monitors only support a level value of 1.</P>

<P>The port monitor must support localization of strings pointed to by the <B>pMonitorName</B> and <B>pDescription</B> members of the PORT_INFO_2 structure. These strings should be defined in resource files and obtained by calling <B>LoadString</B> (described in the Platform SDK documentation).</P>

<P>The <B>fPortType</B> member of the PORT_INFO_2 structure is not used with NT-based operating systems.</P>

<H4>See Also</H4>

<P><A HREF="spoolfnc_1b1j.htm"><B>AddPortUI</B></A>, <A HREF="spoolfnc_22zr.htm"><B>AddPortEx</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: EnumPorts"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
