<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Texturing Requirements</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Texturing Requirements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_texturing_requirements_gg"></A>Texturing Requirements</H3>

<P>This section lists requirements for texture sizes and texture filtering. There are also texture-related requirements for the <B>IDirect3DDevice7::ValidateDevice</B> method.</P>

<H4>Texture Sizes</H4>

<P>The following are requirements for texture sizes:

<OL>
	<LI>The driver must expose its minimum and maximum texture dimensions through the <B>dwMinTextureWidth</B>, <B>dwMinTextureHeight</B>, <B>dwMaxTextureWidth</B>, and <B>dwMaxTextureHeight</B> members of the D3DDEVICEDESC7 structure. This structure is defined in the Direct3D SDK documentation.</LI>

	<LI>If the hardware has an aspect ratio restriction on its textures, that ratio must be present in the <B>dwMaxTextureAspectRatio</B> member of the D3DDEVICEDESC7 structure.</LI>

	<LI>If the device supports only texture dimensions that are powers of two, then it must set the <B>dwTextureCaps</B> member of the <A HREF="d3dstrct_1rtz.htm">D3DPRIMCAPS</A> structure to contain the D3DPTEXTURECAPS_POW2 flag for the appropriate primitive type (line or triangle).</LI>

	<LI>If the device can support two-dimensional (2D) textures (that is, not volume or cube textures) of an arbitrary size when the texture addressing mode for the texture stage is set to D3DTADDRESS_CLAMP, the texture wrapping for the texture stage is disabled (D3DRENDERSTATE_WRAP<I>n </I>set to 0), and MIP mapping is not in use, then it must set the D3DPTEXTURECAPS_NONPOW2CONDITIONAL flag.</LI>

	<LI>If the device only supports textures whose dimensions are equal, then it must set the <B>dwTextureCaps</B> member of the <A HREF="d3dstrct_1rtz.htm">D3DPRIMCAPS</A> structure to contain the D3DPTEXTURECAPS_SQUAREONLY flag for the appropriate primitive type (line or triangle).</LI>
</OL>

<P>If the device supports textures of an arbitrary size without restrictions other than those described in the first and second requirements, then it must not set any of the flags described in the third, fourth, and fifth requirements.</P>

<H4>Texture Filtering</H4>

<P>Filters that magnify and minify textures must be enabled and disabled through the D3DTSS_MAGFILTER and D3DTSS_MINFILTER texture stage states. This filtering must not be performed automatically when these states are disabled. For more information about the D3DTSS_<I>Xxx</I> texture stage states, see the D3DTEXTURESTAGESTATETYPE enumerated type in the Direct3D SDK documentation.</P>

<P>Texture MIP mapping must be enabled and disabled through the D3DTSS_MIPFILTER texture stage state. If this state is disabled, but the texture was created as a MIP map, the device must use only the top level of the MIP map. MIP mapped filtering must not be performed when this state is disabled.</P>

<P>If the device supports anisotropic filtering, the maximum anisotropy level must be exported through the value of the <B>dwMaxAnisotropy</B> member of the D3DDEVICEDESC7 structure (defined in the Direct3D SDK documentation). Furthermore, the device must accept any setting from 1 through <B>dwMaxAnisotropy</B> in the D3DTSS_MAXANISOTROPY texture stage state.</P>

<P>The device must be able to apply all supported filter modes to textures of any supported format. For example, if MIP mapping is supported with other texture formats, MIP map filtering of YUV textures should be able to be performed.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;DirectX 9.0 and later applications can use values in the D3DSAMPLERSTATETYPE enumeration to control the characteristics of sampler texture-related render states. In DirectX 8.0 and earlier, these sampler states were included in the D3DTEXTURESTAGESTATETYPE enumeration. The runtime maps user-mode sampler states (D3DSAMP_<I>Xxx</I>) to kernel-mode D3DTSS_<I>Xxx</I> values so that drivers are not required to process user-mode sampler states. For more information on D3DSAMPLERSTATETYPE, see the latest DirectX SDK documentation.</P>

<H4>IDirect3DDevice7::ValidateDevice</H4>

<P>If a device supports a particular combination of texture stage state blending operations and operands in a single pass, then the device must return DD_OK from a call to the <B>IDirect3DDevice7::ValidateDevice</B> method (described in the Direct3D SDK documentation) for each such combination.</P>

<P>If a device does not support a particular combination of texture stage state blending operations in a single pass, or does not support one or more of the blending operations or operands, then it must return one of the error codes allowable for the <B>IDirect3DDevice7::ValidateDevice</B> method. Invalid blending operations cannot silently fail the <B>IDirect3DDevice7::ValidateDevice</B> method.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Texturing%20Requirements"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
