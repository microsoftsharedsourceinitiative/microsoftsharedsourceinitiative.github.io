<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Point, Line, and Triangle Filling Requirements</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Point and Line and Triangle Filling Requirements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_point_line_and_triangle_filling_requirements_gg"></A>Point, Line, and Triangle Filling Requirements</H3>

<P>The requirements for filling points, lines, and triangles are as follows:</P>



<H4><A NAME="ddk_point_fill_rules_gg"></A>Points</H4>

<P>The point fill and rasterization rules determine how a point is rendered. These rules are identical to the <A HREF="#ddk_triangle_fill_rules_gg">triangle fill rules</A>. All flags and capabilities that apply to triangles also apply to points, and vice-versa. The reference implementation expands a point into a rectangle and applies the triangle fill rules to the result.</P>

<P>Given a point with coordinates P<SUB>0</SUB>(x,y), generate four new points P<SUB>1</SUB>, P<SUB>2</SUB>, P<SUB>3</SUB>, and P<SUB>4</SUB> as follows:</P>

<PRE>P<SUB>1</SUB>(x,y) = (x – 0.5, y – 0.5)
P<SUB>2</SUB>(x,y) = (x – 0.5, y + 0.5)
P<SUB>3</SUB>(x,y) = (x + 0.5, y + 0.5)
P<SUB>4</SUB>(x,y) = (x + 0.5, y – 0.5)</PRE>

<P>The rectangle is then generated as two triangles, such as (P<SUB>1</SUB>, P<SUB>2</SUB>, P<SUB>3</SUB>) and (P<SUB>1</SUB>, P<SUB>3</SUB>, P<SUB>4</SUB>). You may also examine the reference rasterizer implementation for rendering points in the source files <I>setup.cpp </I>and <I>scancnv.cpp</I> of the DirectX DDK.</P>



<H4><A NAME="ddk_line_fill_rules_gg"></A>Lines</H4>

<P>Line fill rules (that is, rules that determine how a line is rendered) follow the Grid Intersection Quantization (GIQ) diamond convention. For more information about the GIQ diamond convention, see <A HREF="ddioview_3fon.htm">Cosmetic Lines</A>. An example of line-drawing code that follows these rules can be found in the DirectX DDK in the reference rasterizer source files <I>setup.cpp </I>and <I>scancnv.cpp</I>.</P>



<H4><A NAME="ddk_triangle_fill_rules_gg"></A>Triangles</H4>

<P>The triangle fill rules determine how a triangle is rendered. These rules are identical to the <A HREF="#ddk_point_fill_rules_gg">point fill rules</A>. An example of triangle-drawing code that follows the triangle fill rules can be found in the DirectX DDK in the reference rasterizer source files <I>setup.cpp </I>and <I>scancnv.cpp</I>. </P>

<P>Hardware should supply the culling caps and properly implement the three culling modes. The following code fragment determines whether to cull the current triangle:</P>

<PRE>if (CurrentCullMode != D3DCULL_NONE) {
    int ccw = (((v[0]-&gt;sx - v[2]-&gt;sx) *
                (v[1]-&gt;sy - v[2]-&gt;sy)) &lt;
               ((v[1]-&gt;sx - v[2]-&gt;sx) *
                (v[0]-&gt;sy - v[2]-&gt;sy)));
if ((CurrentCullMode == D3DCULL_CW &amp;&amp; (ccw == 0)) ||
        (CurrentCullMode == D3DCULL_CCW &amp;&amp; (ccw != 0))) {
        // Current triangle is culled, move onto
        // next triangle.
    }
}
// Current triangle is not culled, render it</PRE>

<P>The preceding code sample tests to determine which way the triangle is facing. The triangle is defined 0,1,2 and tested for being counterclockwise in screen space. If it is not, and there is clockwise culling, then that triangle is not drawn because the vertices go in clockwise order.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Point,%20Line,%20and%20Triangle%20Filling%20Requirements"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
