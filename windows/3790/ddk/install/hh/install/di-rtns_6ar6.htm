<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetupDiGetDeviceInterfaceDetail</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="SetupDiGetDeviceInterfaceDetail">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_setupdigetdeviceinterfacedetail_dr"></A>SetupDiGetDeviceInterfaceDetail</H1>

<P>The <B>SetupDiGetDeviceInterfaceDetail</B> function returns details about a particular device interface.</P>

<PRE class=syntax><B>WINSETUPAPI BOOL WINAPI</B>
  <B>SetupDiGetDeviceInterfaceDetail(</B>
    <B>IN HDEVINFO</B>  <I>DeviceInfoSet</I><B>,
    IN PSP_DEVICE_INTERFACE_DATA</B>  <I>DeviceInterfaceData</I><B>,
    OUT PSP_DEVICE_INTERFACE_DETAIL_DATA</B>  <I>DeviceInterfaceDetailData</I><B>,  OPTIONAL</B>
    <B>IN DWORD</B>  <I>DeviceInterfaceDetailDataSize</I><B>,
    OUT PDWORD</B>  <I>RequiredSize</I><B>,  OPTIONAL</B>
    <B>OUT PSP_DEVINFO_DATA</B>  <I>DeviceInfoData</I><B>  OPTIONAL</B>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceInfoSet</I></DT>

<DD>Pointer to the <A HREF="setup-cls_2h9j.htm">device information set</A> containing the interface and its underlying device. This handle is typically returned by <A HREF="di-rtns_9ks2.htm"><B>SetupDiGetClassDevs</B></A>.</DD>

<DT><I>DeviceInterfaceData</I></DT>

<DD>Pointer to a <A HREF="di-struct_6j8y.htm">SP_DEVICE_INTERFACE_DATA</A> structure that identifies the interface, typically returned by <A HREF="di-rtns_1cky.htm"><B>SetupDiEnumDeviceInterfaces</B></A>.</DD>

<DT><I>DeviceInterfaceDetailData</I></DT>

<DD>Optionally points to a caller-allocated <A HREF="di-struct_6agi.htm">SP_DEVICE_INTERFACE_DETAIL_DATA</A> structure to receive information about the specified interface. The caller must set <I>DeviceInterfaceDetailData</I><B>.cbSize</B> to <B>sizeof</B>(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function. The <B>cbSize</B> field always contains the size of the fixed part of the data structure, not a size reflecting the variable-length string at the end.

<P>This parameter must be NULL if <I>DeviceInterfaceDetailSize</I> is zero.
</DD>

<DT><I>DeviceInterfaceDetailDataSize</I></DT>

<DD>Specifies the size of the <I>DeviceInterfaceDetailData</I> buffer. The buffer must be at least (<B>offsetof</B>(SP_DEVICE_INTERFACE_DETAIL_DATA, <B>DevicePath</B>) + <B>sizeof</B>(TCHAR)) bytes, to contain the fixed part of the structure and a single NULL to terminate an empty MULTI_SZ string. 

<P>This parameter must be zero if <I>DeviceInterfaceDetailData</I> is NULL.
</DD>

<DT><I>RequiredSize</I></DT>

<DD>Optionally points to a caller-allocated variable to receive the required size of the <I>DeviceInterfaceDetailData</I> buffer. This size includes the size of the fixed part of the structure plus the number of bytes required for the variable-length device path string.</DD>

<DT><I>DeviceInfoData</I></DT>

<DD>Optionally points to a caller-allocated buffer to receive information about the device that exposes the requested interface. The caller must set <I>DeviceInfoData</I><B>.cbSize</B> to <B>sizeof</B>(SP_DEVINFO_DATA). 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>SetupDiGetDeviceInterfaceDetail</B> returns TRUE if the function completed without error. If the function completed with an error, FALSE is returned and the error code for the failure can be retrieved by calling <B>GetLastError</B>.</P>

<H4>Headers</H4>

<P>Declared in <I>setupapi.h</I>. Include <I>setupapi.h</I>. </P>

<H4>Comments</H4>

<P>Using this function to get details about an interface is typically a two-step process:

<OL>
	<LI>Get the required buffer size. Call <B>SetupDiGetDeviceInterfaceDetail</B> with a NULL <I>DeviceInterfaceDetailData</I> pointer, an <I>DeviceInterfaceDetailDataSize</I> of zero, and a valid <I>RequiredSize</I> variable. In response to such a call, this function returns the required buffer size at <I>RequiredSize</I> and fails with <B>GetLastError</B> returning ERROR_INSUFFICIENT_BUFFER.</LI>

	<LI>Allocate an appropriately sized buffer and call the function again to get the interface details.</LI>
</OL>

<P>The interface detail returned by this function consists of a device path that can be passed to Win32 functions such as <B>CreateFile</B>. Do not attempt to parse the device path symbolic name. The device path can be reused across system boots.</P>

<P><B>SetupDiGetDeviceInterfaceDetail</B> can be used to get just the <I>DeviceInfoData</I>. If the interface exists but <I>DeviceInterfaceDetailData</I> is NULL, this function fails, <B>GetLastError</B> returns ERROR_INSUFFICIENT_BUFFER, and the <I>DeviceInfoData</I> structure is filled with information about the device that exposes the interface.</P>

<H4>See Also</H4>

<P><A HREF="di-rtns_1cky.htm"><B>SetupDiEnumDeviceInterfaces</B></A>, <A HREF="di-rtns_9ks2.htm"><B>SetupDiGetClassDevs</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: SetupDiGetDeviceInterfaceDetail"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
