<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetupDiGetDeviceInterfaceAlias</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="SetupDiGetDeviceInterfaceAlias">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_setupdigetdeviceinterfacealias_dr"></A>SetupDiGetDeviceInterfaceAlias</H1>

<P>The <B>SetupDiGetDeviceInterfaceAlias</B> function returns an alias of the specified device interface. Device interfaces are considered aliases if they are exposed by the same underlying device and have identical reference strings, but are of different interface classes.</P>

<PRE class=syntax><B>WINSETUPAPI BOOL WINAPI</B>
  <B>SetupDiGetDeviceInterfaceAlias(</B>
    <B>IN HDEVINFO</B>  <I>DeviceInfoSet</I><B>,
    IN PSP_DEVICE_INTERFACE_DATA</B>  <I>DeviceInterfaceData</I><B>,
    IN LPGUID</B>  <I>AliasInterfaceClassGuid</I><B>,
    OUT PSP_DEVICE_INTERFACE_DATA</B>  <I>AliasDeviceInterfaceData</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceInfoSet</I></DT>

<DD>Pointer to the <A HREF="setup-cls_2h9j.htm">device information set</A> containing the device interface for which to retrieve an alias. This handle is typically returned by <B>SetupDiGetClassDevs</B>.</DD>

<DT><I>DeviceInterfaceData</I></DT>

<DD>Pointer to a <A HREF="di-struct_6j8y.htm">SP_DEVICE_INTERFACE_DATA</A> structure that identifies the device interface within the device information set. This pointer is typically returned by <A HREF="di-rtns_1cky.htm"><B>SetupDiEnumDeviceInterfaces</B></A>.</DD>

<DT><I>AliasInterfaceClassGuid</I></DT>

<DD>Is a class GUID specifying the interface class of the alias to retrieve.</DD>

<DT><I>AliasDeviceInterfaceData</I></DT>

<DD>Pointer to a caller-allocated buffer that contains, on successful return, a completed <A HREF="di-struct_6j8y.htm">SP_DEVICE_INTERFACE_DATA</A> structure that identifies the requested alias. The caller must set <I>AliasDeviceInterfaceData</I><B>.cbSize</B> to <B>sizeof</B>(SP_DEVICE_INTERFACE_DATA) before calling this function. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>SetupDiGetDeviceInterfaceAlias</B> returns TRUE if the function completed without error. If the function completed with an error, FALSE is returned and the error code for the failure can be retrieved by calling <B>GetLastError</B>.</P>

<P>Possible errors returned by <B>GetLastError</B> are listed in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=53%>Error</TH>
<TH align=left width=47%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=53%>ERROR_INVALID_PARAMETER</TD>
<TD width=47%>Invalid <I>DeviceInfoSet</I> or invalid <I>DeviceInterfaceData</I> parameter.</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>ERROR_NO_SUCH_INTERFACE_DEVICE</TD>
<TD width=47%>There is no alias of class <I>AliasInterfaceClassGuid</I> for the specified device interface.</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>ERROR_INVALID_USER_BUFFER</TD>
<TD width=47%>Invalid <I>AliasDeviceInterfaceData</I> buffer. </TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>setupapi.h</I>. Include <I>setupapi.h</I>. </P>

<H4>Comments</H4>

<P><B>SetupDiGetDeviceInterfaceAlias</B> can be used to locate a device that exposes more than one interface. For example, consider a disk that can be part of a fault-tolerant volume and can contain encrypted data. The function driver for the disk device could register a fault-tolerant-volume interface and an encrypted-volume interface. These interfaces are device interface aliases if the function driver registers them with identical reference strings and they refer to the same device. (The reference strings will likely be NULL and therefore are equal.)</P>

<P>To locate such a multi-interface device, first locate all available devices that expose one of the interfaces, such as the fault-tolerant-volume interface, using <A HREF="di-rtns_9ks2.htm"><B>SetupDiGetClassDevs</B></A> and <A HREF="di-rtns_1cky.htm"><B>SetupDiEnumDeviceInterfaces</B></A>. Then, pass a device with the first interface (fault-tolerant-volume) to <B>SetupDiGetDeviceInterfaceAlias</B> and request an alias of the other interface class (encrypted-volume). </P>

<P>If the requested alias exists but the caller-supplied <I>AliasDeviceInterfaceData</I> buffer is invalid, this function successfully adds the device interface element to <I>DevInfoSet</I> but returns FALSE for the return value. In this case, <B>GetLastError</B> returns ERROR_INVALID_USER_BUFFER.</P>

<H4>See Also</H4>

<P><A HREF="di-rtns_1cky.htm"><B>SetupDiEnumDeviceInterfaces</B></A>, <A HREF="di-rtns_9ks2.htm"><B>SetupDiGetClassDevs</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: SetupDiGetDeviceInterfaceAlias"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
