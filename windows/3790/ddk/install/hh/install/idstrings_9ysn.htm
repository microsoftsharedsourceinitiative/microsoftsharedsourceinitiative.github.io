<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Identifiers for 1394 Devices</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Identifiers for 1394 Devices">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_identifiers_for_1394_devices_dg"></A>Identifiers for 1394 Devices</H1>

<P>The 1394 bus driver constructs these identifiers for a device:</P>

<P class=indent1>1394\<I>VendorName</I>&amp;<I>ModelName</I></P>

<P class=indent1>1394\<I>UnitSpecId</I>&amp;<I>UnitSwVersion</I></P>

<P>where <I>VendorName</I> is the name of the hardware vendor, <I>ModelName</I> identifies the device, <I>UnitSpecId</I> identifies the software specification authority, and <I>UnitSwVersion</I> identifies the software specification. The information used to construct these identifiers comes from the device's configuration ROM.</P>

<P>If a device has vendor and model name strings, the 1394 bus driver uses the first identifier as both, the device ID and the hardware ID, and the second identifier as the compatible ID. If a device lacks a vendor or model name string, the bus driver uses the second identifier as both, the device ID and the compatible ID, and returns double NULL if queried for the hardware ID. Thus, the IEEE1394 bus driver, under certain circumstances, supplies a device ID but no hardware ID. This is an exception to the general rule that the device ID is one of the hardware IDs.</P>

<P>The device ID for a camera on a IEEE1394 might appear as follows</P>

<P class=indent1>1394\SONY&amp;CCM-DS250_1.08</P>

<P>Multifunction devices have a separate set of identifiers for each unit directory in the device’s configuration ROM.</P>

<P>If the device’s function driver sits on top of the SBP-2 port driver, then its device ID has the following format.</P>

<P class=indent1>SBP2\VendorName&amp;ModelName&amp;LUNn*</P>

<P>where <I>VendorName</I> is the hardware vendor, <I>ModelName</I> identifies the device, and <I>n</I>* is a string representing the lower-order 2 bytes of the logical unit number in hexadecimal. Various functions on a multifunction device produce device IDs that are identical except for this number.</P>

<P>The device ID for a SBP-2 1394 hard disk might be as follows:</P>

<P class=indent1>SBP2\VST_TECHNOLOGIESINC.&amp;VST_FULL_HEIGHT_FIREWIRE_DRIVE&amp;LUN0</P>

<P>As with the 1394 bus, the SBP2 port driver does not classify the device ID as a hardware ID. However, whereas the 1394 bus distinguishes between hardware IDs and compatible IDs, the SBP2 port driver does not. For <B>IRP_MN_QUERY_ID</B> IRPs of type <B>BusQueryHardwareIDs</B> and <B>IRP_MN_QUERY_ID</B> IRPs of type <B>BusQueryCompatibleIDs</B> SBP2 returns the same set of four identifiers:</P>

<P class=indent1>SBP2\<I>VendorName</I>&amp;<I>ModelName</I>&amp;CmdSetId<I>n</I>*</P>

<P class=indent1>SBP2\<I>Gen</I></P>

<P class=indent1><I>Gen</I></P>

<P class=indent1>SBP2\<I>n</I>*&amp;<I>d</I>*</P>

<P>where <I>n</I>* is the Command Set ID number, <I>Gen</I> is one of the generic names listed in the <I>Generic Type</I> column of the table below, and <I>d</I>* is a number formed by taking the lower five bits of the upper two bytes of the logical unit number. This number is the numeric code for the generic name of the device corresponding to the string identifier <I>Gen</I>. The fourth ID, listed in the preceding example (SBP2\<I>n*&amp;d*</I>), is unique among all of the SBP2 hardware identifiers in that both <I>n*</I>, the Command Set ID number and <I>d*</I>, the numeric code of the generic name are in decimal, not hexadecimal.</P>

<P>This table lists the generic device names returned by the SBP2 port driver. Most, but not all, of the generic names generated by the SBP2 port driver are a subset of those generated by ScsiPort driver.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=59%>1394 Type Code</TH>
<TH align=left width=18%>Device Type</TH>
<TH align=left width=23%>Generic Type</TH>
</TR>

<TR VALIGN="top">
<TD width=59%>RBC_DEVICE or DIRECT_ACCESS_DEVICE (0)</TD>
<TD width=18%>Disk</TD>
<TD width=23%>GenDisk</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SEQUENTIAL_ACCESS_DEVICE (1)</TD>
<TD width=18%>Sequential</TD>
<TD width=23%>GenSequential</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>PRINTER_DEVICE (2)</TD>
<TD width=18%>Printer</TD>
<TD width=23%>GenPrinter</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WRITE_ONCE_READ_MULTIPLE_DEVICE (4)</TD>
<TD width=18%>Worm</TD>
<TD width=23%>GenWorm</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>READ_ONLY_DIRECT_ACCESS_DEVICE (5)</TD>
<TD width=18%>CdRom</TD>
<TD width=23%>GenCdRom</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SCANNER_DEVICE (6)</TD>
<TD width=18%>Scanner</TD>
<TD width=23%>GenScanner</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>OPTICAL_DEVICE (7)</TD>
<TD width=18%>Optical</TD>
<TD width=23%>GenOptical</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>MEDIUM_CHANGER (8)</TD>
<TD width=18%>Changer</TD>
<TD width=23%>GenChanger</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>Default Type (all values not listed above)</TD>
<TD width=18%>Other</TD>
<TD width=23%>GenSbp2Device</TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Identifiers%20for%201394%20Devices"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
