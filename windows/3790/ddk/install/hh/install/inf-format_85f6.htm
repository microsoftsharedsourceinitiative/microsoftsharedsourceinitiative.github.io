<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>INF LogConfig Directive</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="INF LogConfig Directive">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_supporting_multifunction_devices_dg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_supporting_pc_cards_that_have_incomplete_configuration_register_addresses_dg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_inf_logconfig_directive_dr"></A>INF LogConfig Directive</H1>

<P><B>[</B><I>DDInstall</I><B>]</B> | <BR>
<B>[</B><I>DDInstall</I><B>.LogConfigOverride]</B> <BR>
<B>&nbsp;</B> <BR>
<B>LogConfig=</B><I>log-config-section</I>[<B>,</B><I>log-config-section</I>]...<BR>
<B>&nbsp;</B> <BR>
<B>&nbsp;</B> <BR>
</P>

<P>A <B>LogConfig</B> directive references one or more INF-writer-defined sections, each of which specifies a logical configuration of hardware resources – the interrupt request lines, memory ranges, I/O ports, and DMA channels that can be used by the device. Each <I>log-config-section</I> specifies an alternative set of bus-relative hardware resources that can be used by the device. </P>

<P>INF files for non-PnP devices use this directive to create basic configurations.</P>

<P>INF files for PnP devices use this directive only to create override configurations. </P>

<H4>Comments</H4>

<P>A <B>LogConfig</B> directive can be specified under any per-manufacturer, per-models <A HREF="inf-format_2k8i.htm">INF <I>DDInstall</I> section</A> or <A HREF="inf-format_03qq.htm">INF <I>DDInstall</I><B>.LogConfigOverride</B> section</A>.</P>

<P>An INF for a non-PnP device that supports several alternate logical configurations typically defines a set of <I>log-config sections</I> under a <I>DDInstall</I> section. Each <I>log-config section</I> specifies a discrete set of logical configuration resources. It also includes a <B>ConfigPriority</B> entry, which ranks each logical configuration according to its effects on device and driver performance, ease of initialization, and so forth. </P>

<P>For PnP devices, the PnP Manager assigns a set of logical hardware resources to each PnP device. That is, the PnP Manager queries the system bus drivers, receives their reports of per-device I/O bus configuration resources in use, and assigns per-device sets of logical hardware resources to achieve the best system-wide balance in the usage of all such resources. </P>

<P>For PnP devices, the <B>LogConfig</B> directive under a <I>DDInstall</I> section is ignored. To override the resources reported by the bus for a PnP device, include the <B>LogConfig</B> directive under a <I>DDInstall</I><B>.LogConfigOverride</B> section. In this case, the resources specified in the <I>log-config-section</I> will be used instead of those reported by the bus. For more information, see <A HREF="inf-format_03qq.htm">INF <I>DDInstall</I><B>.LogConfigOverride</B> Section</A>.</P>

<P>Platform extensions can be added to a <I>DDInstall</I> section containing a <B>LogConfig</B> directive, or to a <I>DDInstall</I><B>.LogConfigOverride</B> section, to specify platform-specific or OS-specific logical configurations. For more information, see <A HREF="create-inf_4l47.htm">Creating an INF File</A>. </P>

<P>A given <I>log-config-section</I> name must be unique to the INF file, but it can be referenced by <B>LogConfig</B> directives in other INF <I>DDInstall</I> sections for the same devices. Each INF-writer-created section name must be unique within the INF and must follow the general rules for defining section names. These rules are described in <A HREF="inf-format_7soi.htm">General Syntax Rules for INF Files</A>.</P>

<P>Each named section referenced by a <B>LogConfig</B> directive has the following form:</P>

<P><B>[</B><I>log-config-section</I><B>]<BR>
&nbsp;</B><BR>
<B>ConfigPriority=</B><I>Priority_Value</I>[<B>,</B><I>Config_Type</I>]<BR>
[<B>DMAConfig=</B>[<I>DMAattrs</I><B>:</B>]<I>DMANum</I>[<B>,</B><I>DMANum</I>]...]<BR>
[<B>IOConfig=</B><I>io-range</I>[<B>,</B><I>io-range</I>]...]<BR>
[<B>MemConfig=</B><I>mem-range</I>[<B>,</B><I>mem-range</I>]...]<BR>
[<B>IRQConfig=</B>[<I>IRQattrs</I><B>:</B>]<I>IRQNum</I>[<B>,</B><I>IRQNum</I>]...]<BR>
[<B>PcCardConfig=</B><I>ConfigIndex</I>[<B>:</B>[<I>MemoryCardBase1</I>][<B>:</B><I>MemoryCardBase2</I>]][<B>(</B><I>attrs</I><B>)</B>]]<BR>
[<B>MfCardConfig=</B><I>ConfigRegBase</I><B>:</B><I>ConfigOptions</I>[<B>:</B><I>IoResourceIndex</I>][<B>(</B><I>attrs</I><B>)</B>]...]<BR>
 ...</P>

<P>Only one <B>ConfigPriority</B> entry can be used in each <I>log-config-section</I>. There can be more than one of each of the other entries, depending on the hardware resource requirements of the device. </P>

<P>One or more <B>MfCardConfig=</B> entries can appear only in a <I>log-config-section</I> that is referenced by a <B>LogConfig</B> directive in the <I>DDInstall</I><B>.LogConfigOverride</B> section of an INF for a multifunction device. For more information about INF files for multifunction devices, see <A HREF="JavaScript:hhobj_1.Click()">Supporting Multifunction Devices</A>.</P>



<H4><A NAME="ddk_logconfig_referenced_section_entries_and_values_dr"></A>LogConfig-Referenced Section Entries and Values</H4>

<DL>
<DT><B>ConfigPriority=</B><I>Priority_Value</I>[<B>,</B><I>Config_Type</I>]</DT>

<DD>Specifies the priority value for this logical configuration, as one of the following:

<DL>
<DT>DESIRED</DT>

<DD>Soft configured, most optimal.</DD>

<DT>NORMAL</DT>

<DD>Soft configured, less optimal than DESIRED. This is the typical setting.

<P>NORMAL should be specified if the log-config section was defined in a <I>DDInstall</I><B>.LogConfigOverride</B> section, and no <I>Config_Type</I> value can be specified. 
</DD>

<DT>SUBOPTIMAL</DT>

<DD>Soft configured, less optimal than NORMAL.</DD>

<DT>HARDRECONFIG</DT>

<DD>Requires a jumper change to reconfigure.</DD>

<DT>HARDWIRED</DT>

<DD>Cannot be changed.</DD>

<DT>RESTART</DT>

<DD>Requires restart to take effect.</DD>

<DT>REBOOT</DT>

<DD>For Windows&nbsp;2000 and later, this is the same as RESTART.</DD>

<DT>POWEROFF</DT>

<DD>Requires power cycle to take effect.</DD>

<DT>DISABLED</DT>

<DD>Hardware/device is disabled.</DD>
</DL>


<P><I>Config_Type </I>is obsolete in Windows&nbsp;2000 and later INF files. 
</DD>

<DT><B>DMAConfig=</B>[<I>DMAattrs</I><B>:</B>]<I>DMANum</I>[<B>,</B><I>DMANum</I>]...]</DT>

<DD><I>DMAattrs</I> is optional if the device is connected on a bus that has only 8-bit DMA channels and the device uses standard system DMA. Otherwise, it can be one of the letters <B>D</B> for 32-bit DMA, <B>W</B> for 16-bit DMA, and <B>N</B> for 8-bit DMA, with <B>M </B>if the device uses bus-master DMA and with one of the following (mutually exclusive) letters, indicating the type of DMA channel used: <B>A</B>, <B>B</B>, or <B>F</B>. If none of <B>A</B>, <B>B</B>, or <B>F</B> is specified, a standard DMA channel is assumed. 

<P><I>DMANum</I> specifies one or more bus-relative DMA channels as decimal numbers, each separated from the next by a comma (<B>,</B>). 
</DD>

<DT><B>IOConfig=</B><I>io-range</I>[<B>,</B><I>io-range</I>]...</DT>

<DD>Specifies one or more I/O port ranges for the device, in either of the following forms:

<P><I>start</I><B>-</B><I>end</I>[<B>(</B>[<I>decode-mask</I>][<B>:</B><I>alias-offset</I>][<B>:</B><I>attr</I>]<B>)</B>]<BR>
(Type 1 I/O range) where:


<P class=indent1><I>start </I>specifies the starting address of the I/O port range as a 64-bit hexadecimal address. </P>


<P class=indent1><I>end</I> specifies the ending address of the I/O port range, also as a 64-bit hexadecimal address. </P>


<P class=indent1><I>decode-mask</I> defines the alias type and can be any of the following:</P>


<TABLE>

<TR VALIGN="top">
<TH align=left width=30%>Mask Value</TH>
<TH align=left width=35%>Meaning</TH>
<TH align=left width=35%>IOR_Alias =</TH>
</TR>

<TR VALIGN="top">
<TD width=30%><B>3ff</B></TD>
<TD width=35%>10-bit decode</TD>
<TD width=35%>0x04</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>fff</B></TD>
<TD width=35%>12-bit decode</TD>
<TD width=35%>0x10</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>ffff</B></TD>
<TD width=35%>16-bit decode</TD>
<TD width=35%>0x00</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>0</B></TD>
<TD width=35%>positive decode</TD>
<TD width=35%>0xFF</TD>
</TR>
</TABLE><BR>



<P class=indent1><I>alias-offset</I> is ignored. </P>


<P class=indent1><I>attr</I> specifies the letter <B>M</B> if the given range is in system memory. If omitted, the given range is in I/O port space. </P>


<P><I>size</I><B>@</B><I>min</I><B>-</B><I>max</I>[<B>%</B><I>align-mask</I>][<B>(</B>[<I>decode-mask</I>][<B>:</B><I>alias-offset</I>][<B>:</B><I>attr</I>]<B>)</B>]<BR>
(Type 2 I/O range) where:


<P class=indent1><I>size</I> specifies the number of bytes required for the I/O port range as a 32-bit hexadecimal value.</P>


<P class=indent1><I>min </I>specifies the lowest possible starting address of the I/O port range as a 64-bit hexadecimal address. </P>


<P class=indent1><I>max </I>specifies the highest possible ending address of the I/O port range as a 64-bit hexadecimal address. </P>


<P class=indent1><I>align-mask</I> optionally specifies a 64-bit mask that is used in an AND operation to align the start of the I/O port range on an integral (usually 32-bit or 64-bit) address boundary. </P>


<P class=indent1><I>decode-mask</I> defines the alias type and can be any of the following:</P>


<TABLE>

<TR VALIGN="top">
<TH align=left width=30%>Mask Value</TH>
<TH align=left width=35%>Meaning</TH>
<TH align=left width=35%>IOR_Alias =</TH>
</TR>

<TR VALIGN="top">
<TD width=30%><B>3ff</B></TD>
<TD width=35%>10-bit decode</TD>
<TD width=35%>0x04</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>fff</B></TD>
<TD width=35%>12-bit decode</TD>
<TD width=35%>0x10</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>ffff</B></TD>
<TD width=35%>16-bit decode</TD>
<TD width=35%>0x00</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>0</B></TD>
<TD width=35%>positive decode</TD>
<TD width=35%>0xFF</TD>
</TR>
</TABLE><BR>



<P class=indent1><I>alias-offset</I> is ignored. </P>


<P class=indent1><I>attr</I> specifies the letter <B>M</B> if the given range is in system memory. If omitted, the given range is in I/O port space. </P>
</DD>

<DT><B>MemConfig=</B><I>mem-range</I>[<B>,</B><I>mem-range</I>]...</DT>

<DD>Specifies one or more memory ranges for the device in either of the following forms:

<P><I>start</I><B>-</B><I>end</I>[<B>(</B><I>attr</I><B>)</B>] | <I>size</I><B>@</B><I>min</I><B>-</B><I>max</I>[<B>%</B><I>align-mask</I>][<B>(</B><I>attr</I><B>)</B>]<BR>
where:


<P class=indent1><I>start </I>specifies the starting (bus-relative) physical address of the device memory range as a 64-bit hexadecimal value. </P>


<P class=indent1><I>end</I> specifies the ending physical address of the memory range, also as a 64-bit hexadecimal value. </P>


<P class=indent1><I>attr</I> specifies the attributes of the memory range as one or more of the following letters: <B>R</B> (read-only), <B>W</B> (write-only), <B>RW</B> (read/write), <B>C</B> (combined write allowed), <B>H</B> (cacheable), <B>F</B> (prefetchable), and <B>D</B> (card decode addressing is 32-bit, instead of 24-bit). If both <B>R </B>and <B>W</B> are specified or if neither is specified, read/write is assumed. </P>


<P class=indent1><I>size</I> specifies the number of bytes required in the memory range as a 32-bit hexadecimal value.</P>


<P class=indent1><I>min </I>specifies the lowest possible starting address of the device memory range as a 64-bit hexadecimal value. </P>


<P class=indent1><I>max </I>specifies the highest possible ending address of the memory range as a 64-bit hexadecimal value. </P>


<P class=indent1><I>align-mask</I> optionally specifies a 64-bit mask that is used in an AND operation to align the start of the device memory range on an integral (usually 64-bit) address boundary. If <I>align-mask</I> is omitted, the default memory alignment is on a 4K boundary (FFFFF000). </P>
</DD>

<DT><B>IRQConfig=</B>[<I>IRQattrs</I><B>:</B>]<I>IRQNum</I>[<B>,</B><I>IRQNum</I>]...</DT>

<DD><I>IRQattrs</I> is omitted if the device uses a bus-relative, edge-triggered IRQ. Otherwise, specify <B>L</B> to indicate a level-triggered IRQ and <B>LS</B> if the device can share the IRQ lines listed in this entry.

<P><I>IRQNum</I> specifies one or more bus-relative IRQs the device can use as decimal numbers, each separated from the next by a comma (<B>,</B>). 
</DD>

<DT><B>PcCardConfig=</B><I>ConfigIndex</I>[<B>:</B>[<I>MemoryCardBase1</I>][<B>:</B><I>MemoryCardBase2</I>]][<B>(</B><I>attrs</I><B>)</B>]</DT>

<DD>Configures PCMCIA card registers and/or creates up to two permanent memory windows that map to the attribute space of the device. A driver can use the memory windows to access the attribute space from an ISR. Specify all numeric values in hexadecimal format.

<P>The elements of a <B>PcCardConfig</B> entry are as follows:


<DL>
<DT><I>ConfigIndex</I></DT>

<DD>Specifies the 8-bit PCMCIA configuration index for a device on a PCMCIA bus.</DD>

<DT><I>MemoryCardBase1</I></DT>

<DD>Optionally specifies a 32-bit base address for a first memory window.</DD>

<DT><I>MemoryCardBase2</I></DT>

<DD>Optionally specifies a 32-bit base address for a second memory window.</DD>

<DT><I>attrs</I></DT>

<DD>Optionally specifies one or more attributes for the device, separated by spaces. An invalid attribute specifier invalidates the whole <B>PcCardConfig</B> entry. If more than one specifier for a particular attribute is provided, the attributes are applied to individual I/O or memory windows for the device. If only one specifier is provided, then that attribute is applied to all windows (see the following example).

<P>Specifically, if multiple specifiers are provided, the first specifier found reading from left to right will be applied to the first window, and the next specifier applied to the second window. A maximum of two I/O windows and two memory windows may be controlled by a single PcCardConfig directive. If the device has more than two memory windows, then a second <B>PcCardConfig</B> directive must be included.


<P>The attributes include:


<TABLE>

<TR VALIGN="top">
<TH align=left width=17%>Attribute</TH>
<TH align=left width=83%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=17%><B>W</B></TD>
<TD width=83%>16-bit I/O data path. The default is 8-bit if the INF specifies a <B>LogConfig</B>. If there is no <B>LogConfig</B>, the driver uses 16-bit I/O.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>S</B><I>n</I></TD>
<TD width=83%>~IOCS16 source. If <I>n</I> is 0, ~IOCS16 is based on the value of the datasize bit. If <I>n</I> is 1, ~IOCS16 is based on the ~IOIS16 signal from the device. The default is <B>S</B>1.  </TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>Z</B><I>n</I></TD>
<TD width=83%>I/O 8-bit, zero wait state. If <I>n</I> is 1, 8-bit I/O accesses occur with zero additional wait states. If <I>n</I> is 0, access will occur with additional wait states. This flag has no meaning for 16-bit I/O. The default is <B>Z</B>0.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>XI</B><I>n</I></TD>
<TD width=83%>I/O wait states. If n is 1, 16-bit system accesses occur with one additional wait state. The default is <B>X</B>1.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>M</B></TD>
<TD width=83%>16-bit memory data path. The default is 8-bit.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>M8</B></TD>
<TD width=83%>8-bit memory data path.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>XM</B><I>n</I></TD>
<TD width=83%>Memory wait states, where <I>n</I> can be 0, 1, 2 or 3. This value determines the number of additional wait states for 16-bit accesses to a memory window. The default is <B>XM</B>3.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>A</B></TD>
<TD width=83%>Memory range to be mapped as Attribute memory</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>C</B></TD>
<TD width=83%>Memory range to be mapped as Common Memory (default)</TD>
</TR>
</TABLE><BR>



<P>For example, an <I>attrs</I> value of (WB CA M XM1 XI0) translates to:


<P>&nbsp;&nbsp;&nbsp;&nbsp;1st I/O window is 16-bit<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2nd I/O window 8-bit<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1st memory window is common<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2nd memory window is attribute<BR>
&nbsp;&nbsp;&nbsp;&nbsp;memory 16-bit<BR>
&nbsp;&nbsp;&nbsp;&nbsp;one wait state on memory windows<BR>
&nbsp;&nbsp;&nbsp;&nbsp;zero wait states on I/O windows
</DD>
</DL>
</DD>

<DT><B>MfCardConfig=</B><I>ConfigRegBase</I><B>:</B><I>ConfigOptions</I>[<B>:</B><I>IoResourceIndex</I>][<B>(</B><I>attrs</I><B>)</B>]...</DT>

<DD>Specifies the attribute-memory location of the set of configuration registers for one function of a multifunction device, as follows:

<P class=indent1><I>ConfigRegBase</I> specifies the attribute offset of the configuration registers for this function of the multifunction device.</P>


<P class=indent1><I>ConfigOptions</I> specifies the 8-bit PCMCIA configuration option register.</P>


<P class=indent1><I>IoResourceIndex</I> specifies the index to the <B>IOConfig</B> entry for the bus driver to use in programming the configuration I/O base and limit registers. This index is zero-based, that is, zero designates the initial <B>IOConfig</B> entry in this log-config section.</P>


<P class=indent1><I>attrs</I> can be <B>A</B> if the PCMCIA bus driver should turn on audio enable in the configuration and status registers.</P>


<P>Each <B>MfCardConfig</B> entry supplies information about a single function of the multifunction device. When a set of <B>LogConfig</B> directives each reference a discrete log-config section in the INF's <I>DDInstall</I><B>.LogConfigOverride</B> section, each such log-config section must have its entries, including <B>MfCardConfig</B> entries, listed in the same order.

</DD>
</DL>

<P>From a <I>log-config-section</I>, the system installer builds binary logical configuration records and stores them in the registry.</P>

<P>An INF file can contain any number of per-device log-config sections. However, each such section must contain complete information for installing one device. In general, the INF should specify the entries in each of its log-config sections in the same order. The INF should specify each set of entries in the order best suited to how the driver initializes its device. </P>

<P>If more than one <I>log-config-section</I> is present for a given device, only one of these INF sections will be used during installation. Such an INF file partially controls which such section is used with the <B>ConfigPriority</B> value it supplies in each such log-config section. That is, the system installers attempt to honor any configuration priorities in an INF file, but might choose a lower ranked logical configuration if a conflict with an already installed device is found.</P>

<P>During installation, one and only one resource from each entry in a given <I>log-config-section</I> is selected and assigned to a particular device. If a particular device needs more than one resource of the same type, a set of entries of that type must be used in its <I>log-config-sections</I>. For example, to ensure two I/O port ranges for a particular device, two <B>IOConfig=</B> entries must be specified in the <I>log-config-section</I> for that device. On the other hand, if a device requires no IRQ, its INF can simply omit the <B>IRQConfig</B> entry from the <I>log-config-sections</I>.</P>

<H4>Examples</H4>

<P>This example shows some valid <B>PcCardConfig</B> entries for a PCMCIA device. </P>

<PRE>PcCardConfig=0:E0000:F0000(W)
PcCardConfig=0:E0000(M)
PcCardConfig=0::(W)
PcCardConfig=0(W)</PRE>

<P>This example shows a Type 1 I/O range specification in an <B>IOConfig</B> entry. It specifies an I/O port region, eight bytes in size, which can start at 1F8, 2F8, or 3F8.</P>

<PRE>IOConfig=1F8-1FF, 2F8-2FF, 3F8-3FF</PRE>

<P>By contrast, this example shows a Type 2 I/O range specification in an <B>IOConfig</B> entry. It specifies an I/O port region, eight bytes in size, which can start at 300, 308, 310, 318, 320, or 328.</P>

<PRE>IOConfig=8@300-32F%FF8</PRE>

<P>This example shows a set of <B>IOConfig=</B> entries for a four-port device, each specifying an I/O port range that is offset by 0x400 bytes from the next.</P>

<PRE>IoConfig=0x200-0x21f
IoConfig=0x600-0x61f
IoConfig=0xA00-0xA1f
IoConfig=0xE00-0xE1f</PRE>

<P>The next two examples show typical <B>MemConfig</B> entries.</P>

<P>This example specifies a memory region of 32K bytes that can start at either C0000 or D0000.</P>

<PRE>MemConfig=C0000-C7FFF, D0000-D7FFF</PRE>

<P>This example specifies a memory region of 32k bytes starting on 64K boundaries.</P>

<PRE>MemConfig=8000@C0000-D7FFF%F0000</PRE>

<P>This example shows how the system HDC class INF file sets up a number of log-config sections for generic ESDI hard disk controllers and uses a <I>DDInstall</I><B>.LogConfigOverride</B> section for a particular IDE controller.</P>

<PRE>[MS_HDC] ; per-manufacturer Models section
%FujitsuIdePccard.DeviceDesc% = 
          atapi_fujitsu_Inst, PCMCIA\FUJITSU-IDE-PC_CARD-DDF2
%*PNP0600.DeviceDesc% = atapi_Inst, *PNP0600 ; generic ESDI HDCs
%PCI\CC_0101.DeviceDesc% = pciide_Inst,,PCI\CC_0101
 
; ... other manufacturers' Models sections omitted
 
[atapi_Inst]
CopyFiles = @atapi.sys
LogConfig = esdilc1, esdilc2, esdilc3, esdilc4
 
; ... [atapi_Inst.Services] + service/EventLog-install omitted here
 
[esdilc1]
ConfigPriority=HARDWIRED
IOConfig=1f0-1f7(3ff::)
IoConfig=3f6-3f6(3ff::)
IRQConfig=14
 
[esdilc2]
ConfigPriority=HARDWIRED
IOConfig=170-177(3ff::)
IoConfig=376-376(3ff::)
IRQConfig=15
 
[esdilc3]
ConfigPriority=HARDWIRED
IOConfig=1e8-1ef(3ff::)
IoConfig=3ee-3ee(3ff::)
IRQConfig=11
 
[esdilc4]
; ...
 
[atapi_fujitsu_Inst.LogConfigOverride]
LogConfig = fujitsu.LogConfig0
 
[fujitsu.LogConfig0]
ConfigPriority=NORMAL
IOConfig=10@100-400%fff0
IRQConfig=14,15,5,7,9,11,12,3
PcCardConfig=1:0:0(W)</PRE>

<P>For some examples of how <B>MfCardConfig</B> entries are used, see <A HREF="JavaScript:hhobj_2.Click()">Supporting PC Cards That Have Incomplete Configuration Register Addresses</A>. </P>

<H4>See Also</H4>

<P><A HREF="inf-format_2k8i.htm"><I>DDInstall</I></A>, <A HREF="inf-format_7dgy.htm"><I>DDInstall</I><B>.FactDef</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: INF%20LogConfig%20Directive"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
