<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>INF CopyFiles Directive</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="INF CopyFiles Directive">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_inf_copyfiles_directive_dr"></A>INF CopyFiles Directive</H1>

<P><B>[</B><I>DDInstall</I><B>]</B> | <BR>
<B>[</B><I>DDInstall</I><B>.CoInstallers]</B> | <BR>
<B>[ClassInstall32]</B> | <BR>
<B>[ClassInstall32.ntx86]</B> | <B><BR>
[ClassInstall32.ntia64]</B> <B><BR>
&nbsp;</B> <BR>
<B>CopyFiles=@</B><I>filename</I> | <I>file</I>-<I>list</I>-<I>section</I>[<B>,</B> <I>file</I>-<I>list</I>-<I>section</I>]... <BR>
<B>&nbsp;</B> <BR>
<B>&nbsp;</B> <BR>
</P>

<P>A <B>CopyFiles</B> directive can do either of the following:

<UL>
	<LI>Cause a single file to be copied from the source media to the default destination directory. </LI>

	<LI>Reference one or more INF-writer-defined sections in the INF that each specify a list of files to be copied from the source media to the destination. </LI>
</UL>

<P>The destination of copy operations is controlled by the <A HREF="inf-format_8kfm.htm">INF <B>DestinationDirs</B> section</A>. For more information see the following Comments section.</P>

<P>Do not use <B>CopyFiles</B> directives to copy INF files. See <A HREF="create-inf_8rtz.htm">Copying INFs</A>.</P>

<P>A <B>CopyFiles</B> directive can be specified within any of the sections shown in the formal syntax statement. This directive also can be specified within any of the following INF sections: 

<UL>
	<LI>An <I>add-interface-section</I> referenced by the <A HREF="inf-format_3omq.htm">INF <B>AddInterface</B> directive</A> in a <I>DDInstall</I><B>.Interfaces</B> section </LI>

	<LI>An <I>install-interface-section</I> referenced in an <A HREF="inf-format_3o8i.htm">INF <B>InterfaceInstall32</B> section</A> </LI>
</UL>

<H4>Comments</H4>

<P>Any <I>file-list-section</I> name must be unique to the INF file, but it can be referenced by <B>CopyFiles</B>, <B>DelFiles</B>, or <B>RenFiles</B> directives elsewhere in the same INF file. The section name must follow the general rules that are described in <A HREF="inf-format_7soi.htm">General Syntax Rules for INF Files</A>. For information about how to use the system-defined <B>.nt</B>, <B>.ntx86</B>, and <B>.ntia64</B> extensions, see <A HREF="create-inf_9xpj.htm">Creating INF Files for Multiple Platforms and Operating Systems</A>. </P>

<P>Each named section referenced by a <B>CopyFiles</B> directive has one or more entries of the following form:</P>

<P><B>[</B><I>file-list-section</I><B>]</B><BR>
<I>destination-file-name</I>[<B>,</B><I>source-file-name</I>][<B>,</B><I>temporary-file-name</I>][<B>,</B><I>flag</I>]<BR>
 ...</P>

<P>An INF-writer-defined <I>file-list-section</I> can have any number of entries, each on a separate line.</P>

<P>Each <I>file-list-section</I> can have an optional, associated <I>file-list-section</I><B>.security</B><I> </I>section of the following form: </P>

<P><B>[</B><I>file-list-section</I><B>.security]</B><BR>
<B>"</B><I>security-descriptor-string</I><B>"</B></P>

<H4><I>file-list-section</I> Entries</H4>

<DL>
<DT><I>destination-file-name</I></DT>

<DD>Specifies the name of the destination file. If no <I>source-file-name</I> is given, this specification is also the name of the source file.</DD>

<DT><I>source-file-name</I></DT>

<DD>Specifies the name of the source file. If the source and destination file names for the file copy operation are the same, <I>source-file-name</I> can be omitted.</DD>

<DT><I>temporary-file-name</I></DT>

<DD>Specifies the name of a temporary file to be created in the copy operation if a file of the same name on the destination is open or currently in use. Only used on Windows 9x/Me platforms. The NT-based OS automatically generates temporary file names when necessary and renames the copied source files the next time the OS is started. </DD>

<DT><I>flag</I></DT>

<DD>These optional flags, expressed in hexadecimal notation or as a decimal value in a section entry, can be used to control how (or whether) a particular source file is copied to the destination. One or more (ORed) values for the following system-defined flags can be specified, but some of these flags are mutually exclusive:

<DL>
<DT><B>0x00000400</B> (COPYFLG_REPLACEONLY) </DT>

<DD>Copy the source file to the destination directory only if the file is already present in the destination directory.</DD>

<DT><B>0x00000800</B> (COPYFLG_NODECOMP)</DT>

<DD>Copy the source file to the destination directory without decompressing the source file if it is compressed.</DD>

<DT><B>0x00000008</B> (COPYFLG_FORCE_FILE_IN_USE) </DT>

<DD>Force file-in-use behavior: do not copy over an existing file of the same name if it is currently open. Instead, copy the given source file with a temporary name so that it can be renamed and used when the next reboot occurs.</DD>

<DT><B>0x00000010</B> (COPYFLG_NO_OVERWRITE) </DT>

<DD>Do not replace an existing file in the destination directory with a source file of the same name. This flag cannot be combined with any other flags. </DD>

<DT><B>0x00001000</B> (COPYFLG_REPLACE_BOOT_FILE) </DT>

<DD>This file is required by the system loader. The system will prompt the user to reboot the system.</DD>

<DT><B>0x00002000</B> (COPYFLG_NOPRUNE) </DT>

<DD>Do not delete this operation as a result of optimization. 

<P>For example, Setup might determine that the file copy operation is not necessary because the file already exists. However, the writer of the INF knows that the operation is required and directs Setup to override its optimization and perform the file operation. (This flag can be used to ensure that files are copied if they are also specified in an INF <B>DelFiles</B> directive or an INF <B>RenFiles</B> directive.)
</DD>

<DT><B>0x00000020</B> (COPYFLG_NO_VERSION_DIALOG) </DT>

<DD>Do not write over a file in the destination directory with the source file if the existing file is newer than the source file. 

<P>This flag is irrelevant to digitally signed INF files. If a driver package is digitally signed, Setup installs the package as a whole and does not selectively omit files in the package based on other versions already present on the machine.
</DD>

<DT><B>0x00000004</B> (COPYFLG_NOVERSIONCHECK) </DT>

<DD>Ignore file versions and write over existing files in the destination directory. This flag and the next two are mutually exclusive. This flag is irrelevant to digitally signed INF files.</DD>

<DT><B>0x00000040</B> (COPYFLG_OVERWRITE_OLDER_ONLY)</DT>

<DD>Copy the source file to the destination directory only if the file on the destination will be superseded by a newer version. This flag is irrelevant to digitally signed INF files.</DD>

<DT><B>0x00000001</B> (COPYFLG_WARN_IF_SKIP) </DT>

<DD>Send a warning if the user elects to not copy a file. This flag and the next are mutually exclusive, and both are irrelevant to INF files that are digitally signed. </DD>

<DT><B>0x00000002</B> (COPYFLG_NOSKIP) </DT>

<DD>Do not allow the user to skip copying a file. This flag is implied if the driver package is signed.
</DD>
</DL>
</DD>

<DT><I>security-descriptor-string</I></DT>

<DD>Specifies a security descriptor, to be applied to all files copied by the named <I>file-list-section</I>. The <I>security-descriptor-string</I> is a string with tokens to indicate the DACL (<B>D:</B>) security component. See Platform SDK documentation for information about the format of security descriptor strings.

<P>If an <I>file-list-section</I><B>.security</B><I> </I>section is not specified, files inherit the security characteristics of the directory into which the files are copied. 


<P>If an <I>file-list-section</I><B>.security</B><I> </I>section is specified, the following ACE's must be included so that installations and upgrades of devices and system service packs can occur:


<P>(A;;GA;;;SY) – Grants all access to the local system.<BR>
(A;;GA;;;BA) – Grants all access to built-in administrators.


<P>Do <I>not</I> specify ACE strings that grant write access to nonprivileged users.


<P>For more information about specifying security descriptors, see <A HREF="secure-install_644n.htm">Creating Secure Device Installations</A>.

</DD>
</DL>

<P>The <A HREF="inf-format_8kfm.htm">INF <B>DestinationDirs</B> section</A> controls the destination for all file-copy operations, as follows:

<UL>
	<LI>If a named section referenced by a <B>CopyFiles</B> directive has a corresponding entry in the <B>DestinationDirs</B> section of the same INF, that entry explicitly specifies the target destination directory into which all files listed in the named section will be copied. If the named section is not listed in the <B>DestinationDirs</B> section, Setup uses the <B>DefaultDestDir</B> in the INF file. </LI>

	<LI>If a <B>CopyFiles</B> directive uses the <B>@</B><I>filename</I> syntax, Setup uses the <B>DefaultDestDir</B> entry in the <B>DestinationDirs</B> section of the INF file. </LI>
</UL>

<P>The INF file writer also supplies path specifications to files that are copied from source media in either of the following ways:

<UL>
	<LI>In vendor-supplied INF files, by using the <A HREF="inf-format_0icy.htm">INF <B>SourceDisksNames</B> section</A> and, possibly, the <A HREF="inf-format_4836.htm">INF <B>SourceDisksFiles</B> section</A> to explicitly specify the full path to each named source file that is not in the installation root on the distribution media. </LI>

	<LI>In system-supplied INF files, by supplying one or more additional INF files, identified by name in the <B>LayoutFile</B> entry of the <A HREF="inf-format_2fzm.htm">INF <B>Version</B> section</A>.</LI>
</UL>

<H4>Example</H4>

<P>This example shows how the <B>SourceDisksNames</B>, <B>SourceDisksFiles</B>, and <B>DestinationDirs</B> sections specify the paths for copy-file (and delete-file) operations that occur in processing a simple device-driver INF. (The same INF was also used previously as examples of <B>Version</B>, <B>SourceDisksNames</B>, and <B>SourceDisksFiles</B> sections.) </P>

<PRE>[SourceDisksNames]
1 = %Floppy_Description%,,,\Win98 ; path to Win98 source files
2 = %Floppy_Description%,,,\WinNT
 
[SourceDisksFiles]
aha154x.mpd = 1,, ; on distribution disk 1, in subdir \win98
 
[SourceDisksFiles.x86]
aha154x.sys = 2,\x86 ; on distribution disk 2, in subdir \WinNT\x86
 
[DestinationDirs]
ASPIDEV = 11  ; Win98-specific del-file section
              ; delete existing files from DIRID_SYSTEM 
DefaultDestDir = 12  ; DIRID_DRIVERS 
                     ; == \System32\Drivers on Windows NT platforms
                     ; == \System\IoSubsys on Win9x platforms
 
; ... Manufacturer and Models sections omitted here
 
; Win9x-specific DDInstall, given [AHA154X.NTx86] in this INF
[AHA154X] 
CopyFiles=@AHA154x.MPD
DelFiles=ASPIDEV ; defines a delete-files section not shown here
; ... some other directives and sections omitted here
 
[AHA154X.NTx86]
CopyFiles=@AHA154x.SYS 
; ... some other directives and sections omitted here
; ...</PRE>

<P>This example shows how a <B>CopyFiles</B> directive can be used in a <I>DDInstall</I><B>.CoInstallers</B> section of an INF for a device driver that provides two device-specific co-installers to supplement the INF processing of the system device-type-specific class installer.</P>

<PRE>[DestinationDirs]
XxDev_Coinstallers_CopyFiles = 11  ; DIRID_SYSTEM
; ... other file-list entries and DefaultDestDirs omitted here
 
; ... Manufacturer, Models, and DDInstall sections omitted here
 
[XxDev_Install.CoInstallers] 
CopyFiles=XxDev_Coinstallers_CopyFiles
; ... AddReg omitted here
 
[XxDev_Coinstallers_CopyFiles]
XxPreInst.dll   ; dev-specific co-installer run before class installer
XxPostInst.dll  ; run after class installer (post processing)</PRE>

<P>As the preceding example suggests, the names of new device-specific co-installers can be constructed from the name of the provider (shown here as <I>Xx</I>) and the intended use for each such co-installer DLL (shown here as <I>PreInst</I> and <I>PostInst</I>). </P>

<H4>See Also</H4>

<P><A HREF="inf-format_3omq.htm"><B>AddInterface</B></A>, <A HREF="inf-format_6p9u.htm"><B>ClassInstall32</B></A>, <A HREF="inf-format_2k8i.htm"><I>DDInstall</I></A>, <A HREF="inf-format_65bm.htm"><I>DDInstall</I><B>.CoInstallers</B></A>, <A HREF="inf-format_4eeq.htm"><I>DDInstall</I><B>.Interfaces</B></A>, <A HREF="inf-format_3vg2.htm"><B>DelFiles</B></A>, <A HREF="inf-format_8kfm.htm"><B>DestinationDirs</B></A>, <A HREF="inf-format_3o8i.htm"><B>InterfaceInstall32</B></A>, <A HREF="inf-format_0pki.htm"><B>RenFiles</B></A>, <A HREF="inf-format_4836.htm"><B>SourceDisksFiles</B></A>, <A HREF="inf-format_0icy.htm"><B>SourceDisksNames</B></A>, <A HREF="inf-format_2fzm.htm"><B>Version</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: INF%20CopyFiles%20Directive"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
