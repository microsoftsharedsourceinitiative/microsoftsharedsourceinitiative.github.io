<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Storport Queue Management</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Storport Queue Management">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_storport_queue_management_kg"></A>Storport Queue Management</H2>

<P>To take advantage of the capabilities of high-performance storage adapters, miniport drivers must exert control over their device queues, pausing and resuming these queues in ways that will maximize efficiency.</P>

<P>In the ScsiPort queue model, queue management is the exclusive domain of the port driver. In the Storport queue model, the port driver supplies several queue management support routines that give the miniport driver a significant amount of queue management control. </P>

<P>In the Storport queue model, all requests are queued in the port driver in per-logical-unit queues. Each logical unit can have a maximum of 254 outstanding requests. When this request limit is reached, Storport prevents further requests to that logical unit until the number of outstanding requests to the unit drops below 254. </P>

<P>There are no limits on the number of outstanding requests that an adapter can have. Although the limit on the logical unit of 254 requests per unit is strictly enforced. For example, an adapter with 55 logical units attached to it could post up to a maximum of 13,970 (55 &times; 254) requests at a time. See the following diagram for a description of the port driver's queuing model.</P>

<P><IMG SRC="images/queues.gif" ALT="" BORDER=0></P>

<PRE class=syntax>Port Driver's Queuing Model</PRE>

<P>If the adapter and a logical unit are both ready to receive a request, the system calls the miniport's <A HREF="k301_29iq.htm"><I>HwStorBuildIo</I></A> and <A HREF="k301_4ng2.htm"><I>HwStorStartIo</I></A> routines in that order.</P>

<P>Unlike ScsiPort, Storport allows miniport drivers to notify the port driver of busy conditions. These communications are handled by the following eight routines, which allow the miniport to signal when either the logical unit or the adapter is paused or busy. </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Storport Routine</TH>
<TH align=left width=52%>Action Taken</TH>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_1ulu.htm"><B>StorPortPauseDevice</B></A> </TD>
<TD width=52%>Pause a device for a specified period of time.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_2mya.htm"><B>StorPortResumeDevice</B></A> </TD>
<TD width=52%>Resume a paused device.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_78oi.htm"><B>StorPortPause</B></A> </TD>
<TD width=52%>Pause an adapter for a specified period of time.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_1qcy.htm"><B>StorPortResume</B></A> </TD>
<TD width=52%>Resume a paused adapter.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_3gs2.htm"><B>StorPortDeviceBusy</B></A> </TD>
<TD width=52%>Make a device busy until the device queue has completed a specified number of I/O requests.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_62lu.htm"><B>StorPortDeviceReady</B></A> </TD>
<TD width=52%>Make a busy device ready to receive requests again.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_12uq.htm"><B>StorPortBusy</B></A> </TD>
<TD width=52%>Make an adapter busy until it has completed a specified number of I/O requests.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="k301_3bci.htm"><B>StorPortReady</B></A> </TD>
<TD width=52%>Make a busy adapter ready to receive requests again.</TD>
</TR>
</TABLE><BR>

<P>While a device is paused or busy, the port driver sends no requests to the device. If a miniport completes a request with a busy status (SRB_STATUS_BUSY or SCSISTAT_BUSY), the port driver will retry the request an indefinite number of times, until the request fails or is completed.</P>

<P>In addition to supplying a set of explicit queue management routines that are not available in the ScsiPort queue model, the Storport queue model does not use the implicit queue management routines that the ScsiPort employed. In particular, the <B>NextRequest</B> and <B>NextLuRequest</B> notifications are ignored.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Storport%20Queue%20Management"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
