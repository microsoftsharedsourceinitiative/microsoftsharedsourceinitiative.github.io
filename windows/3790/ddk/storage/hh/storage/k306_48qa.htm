<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DISK_CACHE_INFORMATION</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DISK_CACHE_INFORMATION">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_disk_cache_information_kr"></A>DISK_CACHE_INFORMATION</H1>

<P>The DISK_CACHE_INFORMATION structure is used with the <A HREF="k307_5xv6.htm">IOCTL_DISK_GET_CACHE_INFORMATION</A> request to retrieve cache information.</P>

<PRE class=syntax>typedef struct _DISK_CACHE_INFORMATION {
    BOOLEAN  ParametersSavable;
    BOOLEAN  ReadCacheEnabled;
    BOOLEAN  WriteCacheEnabled;
    DISK_CACHE_RETENTION_PRIORITY  ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY  WriteRetentionPriority;
    USHORT  DisablePrefetchTransferLength;
    BOOLEAN  PrefetchScalar;
    union {
        struct {
            USHORT  Minimum;
            USHORT  Maximum;
            USHORT  MaximumBlocks;
        } ScalarPrefetch;
        struct {
            USHORT  Minimum;
            USHORT  Maximum;
        } BlockPrefetch;
    };
} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;</PRE>

<H4>Members</H4>

<DL>
<DT><B>ParametersSavable</B></DT>

<DD>Indicates, when set to 1, that the device is capable of saving any parameters in nonvolatile storage.</DD>

<DT><B>ReadCacheEnabled</B></DT>

<DD>Indicates, when set to 1, that the read cache is enabled.</DD>

<DT><B>WriteCacheEnabled</B></DT>

<DD>Indicates, when set to 1, that the write cache is enabled.</DD>

<DT><B>ReadRetentionPriority</B></DT>

<DD>Determines the likelihood of various types of data remaining in the cache. By means of this value, for instance, data cached from a READ or WRITE operation might be given a different priority than data cached under other circumstances, such as prefetch operations. Thus a value of <B>EqualPriority</B> indicates that no data is held in the cache on a preferential basis. When <B>ReadRetentionPriority</B> is set to <B>EqualPriority</B>, all types of data have equal access to cache memory. On the other hand, a value of <B>KeepPrefetchedData</B> indicates that a preference is to be given to prefetched data while a value of <B>KeepReadData</B> indicates that a preference is to be given to data cached from a READ operation. For more information on the values that can be assigned to this member see the <A HREF="k306_5y9e.htm">DISK_CACHE_RETENTION_PRIORITY</A> enumeration. </DD>

<DT><B>WriteRetentionPriority</B></DT>

<DD>See discussion under <B>ReadRetentionPriority</B>.</DD>

<DT><B>DisablePrefetchTransferLength</B></DT>

<DD>Disables prefetching. Prefetching might be disabled whenever the number of blocks requested exceeds the value in <B>DisablePrefetchTransferLength</B>. When zero, prefetching is disabled no matter what the size of the block request.</DD>

<DT><B>PrefetchScalar</B></DT>

<DD>When TRUE, Indicates that <B>ScalarPrefetch.Maximum</B> should be used together with the transfer length to calculate the amount of data that can be prefetched. When FALSE, <B>BlockPrefetch.Maximum</B> will be the maximum number of disk blocks that can be prefetched.</DD>

<DT><B>ScalarPrefetch.Minimum</B></DT>

<DD>Contains the scalar multiplier of the transfer length of the request when <B>PrefetchScalar</B> is TRUE. If <B>PrefetchScalar</B> is TRUE, the value in <B>ScalarPrefetch.Minimum</B> is multiplied by the transfer length to obtain the minimum amount of data that can be prefetched into the cache on a disk operation. </DD>

<DT><B>ScalarPrefetch.Maximum</B></DT>

<DD>Contains the scalar multiplier of the transfer length of the request when <B>PrefetchScalar</B> is TRUE. If <B>PrefetchScalar</B> is TRUE, the value in <B>ScalarPrefetch.Maximum</B> is multiplied by the transfer length to obtain the maximum amount of data that can be prefetched into the cache on a disk operation. </DD>

<DT><B>ScalarPrefetch.MaximumBlocks</B></DT>

<DD>Contains the maximum size, in blocks, of the transfer length. </DD>

<DT><B>BlockPrefetch.Minimum</B></DT>

<DD>Indicates the minimum amount of data, as an absolute number of disk blocks, that can be prefetched into the cache on a disk operation, when <B>PrefetchScalar</B> is FALSE. </DD>

<DT><B>BlockPrefetch.Maximum</B></DT>

<DD>Indicates the maximum amount of data, as an absolute number of disk blocks, that can be prefetched into the cache on a disk operation, when <B>PrefetchScalar</B> is FALSE. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntdddisk.h</I>. Include <I>ntdddisk.h</I>. </P>

<H4>See Also</H4>

<P><A HREF="k307_5xv6.htm">IOCTL_DISK_GET_CACHE_INFORMATION</A>, <A HREF="#ddk_disk_cache_information_kr">DISK_CACHE_INFORMATION</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DISK_CACHE_INFORMATION"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
