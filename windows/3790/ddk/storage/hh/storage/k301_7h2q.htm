<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ScsiPortCompleteRequest</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ScsiPortCompleteRequest">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_scsiportcompleterequest_kr"></A>ScsiPortCompleteRequest</H1>

<P>The <B>ScsiPortCompleteRequest</B> routine completes all of the active requests for the given SCSI bus, controller, or LU, including a request being processed by the calling miniport routine.</P>

<PRE class=syntax><B>VOID 
  ScsiPortCompleteRequest(
    IN PVOID</B>  <I>HwDeviceExtension</I><B>,</B>
<B>    IN UCHAR</B>  <I>PathId</I><B>,</B>
<B>    IN UCHAR</B>  <I>TargetId</I><B>,</B>
<B>    IN UCHAR</B>  <I>Lun</I><B>,</B>
<B>    IN UCHAR</B>  <I>SrbStatus</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>HwDeviceExtension</I></DT>

<DD>Pointer to the hardware device extension. This is a per-HBA storage area that the port driver allocates and initializes on behalf of the miniport driver. Miniport drivers usually store HBA-specific information in this extension, such as the state of the HBA and the HBA's mapped access ranges. This area is available to the miniport driver in the <B>DeviceExtension-&gt;HwDeviceExtension</B> member of the HBA's device object immediately after the miniport driver calls <A HREF="k301_9n76.htm"><B>ScsiPortInitialize</B></A>. The port driver frees this memory when it removes the device. </DD>

<DT><I>PathId</I></DT>

<DD>Identifies the SCSI bus; SP_UNTAGGED indicates all buses controlled by the HBA.</DD>

<DT><I>TargetId</I></DT>

<DD>Identifies the target controller or device on the given buses; SP_UNTAGGED indicates all targets on the bus.</DD>

<DT><I>Lun</I></DT>

<DD>Identifies the logical unit for the given target controller or device; SP_UNTAGGED indicates all logical units for the given target controllers on the given buses.</DD>

<DT><I>SrbStatus</I></DT>

<DD>Specifies the completion status to be set in the <B>SrbStatus </B>member of each SRB.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Comments</H4>

<P><B>ScsiPortCompleteRequest</B> can be called to complete outstanding requests after a bus reset, a device reset, or an abort, rather than calling <B>ScsiPortNotification</B> for each outstanding request individually. After calling <B>ScsiPortCompleteRequest</B>, do not also call <B>ScsiPortNotification</B>. </P>

<H4>Headers</H4>

<P>Declared in <I>srb.h</I>. Include <I>miniport.h</I> and <I>scsi.h</I>. </P>

<H4>See Also</H4>

<P><A HREF="k306_0hte.htm">SCSI_REQUEST_BLOCK</A>, <A HREF="k301_659u.htm"><B>ScsiPortNotification</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ScsiPortCompleteRequest"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
