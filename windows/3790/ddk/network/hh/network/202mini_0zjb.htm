<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating, Activating, Deactivating, and Deleting Virtual Connections</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating Activating Deactivating and Deleting Virtual Connections">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_creating_activating_deactivating_and_deleting_virtual_connections_ng"></A>Creating, Activating, Deactivating, and Deleting Virtual Connections</H2>

<P>A connection-oriented miniport driver always sends and receives data, whether packets for a connection-oriented client or signaling messages for a call manager, on a <I>virtual connection (VC)</I>. Before it can send or receive data on a VC, a connection-oriented miniport driver must set up the per-VC context, which involves allocating and initializing memory. <B>Ndis…NPagedLookasideList</B> functions are recommended for this task. The miniport driver must then activate the VC, which involves doing any processing required by the NIC to satisfy the request. When the VC is no longer needed for a call, the miniport driver deactivates and perhaps deletes the VC.</P>

<P>A connection-oriented miniport driver creates a VC in the following situations:

<UL>
	<LI>After the call manager and miniport driver finish their initialization, the call manager calls <A HREF="103ndisx_3qia.htm"><B>NdisCoCreateVc</B></A> to request that the miniport driver set up a VC on which the call manager can send signaling messages. In response to this call, NDIS calls the miniport driver's <I>MiniportCoCreateVc</I> function, which sets up the per-VC context.</LI>

	<LI>When a network administrator manually adds a permanent VC (PVC), the call manager calls <B>NdisCoCreateVc</B> to request that the miniport driver set up the VC.</LI>

	<LI>Before requesting a call manager to set up an outgoing call, a connection-oriented client calls <B>NdisCoCreateVC</B> to request that the miniport driver set up a VC on which to send the call data.</LI>

	<LI>Before indicating an incoming call to a connection-oriented client, a call manager calls <B>NdisCoCreateVc</B> to request that the miniport driver set up a VC on which to receive the call data.</LI>
</UL>

<P>After a call is finished or a VC is otherwise not needed, the call manager or integrated miniport call manager (MCM) can deactivate the VC by calling <A HREF="103ndisx_5g4y.htm"><B>NdisCmDeactivateVc</B></A>, which causes NDIS to call the miniport driver's <A HREF="101mini_8ak2.htm"><I>MiniportCoDeactivateVc</I></A> function. Either the connection-oriented client or the call manager can initiate deletion of the VC by calling <A HREF="103ndisx_920i.htm"><B>NdisCoDeleteVc</B></A>, which causes NDIS to call the miniport driver's <A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A> function. <I>MiniportCoDeleteVc</I> tears down the per-VC state allocated by the miniport driver.</P>

<P>For more information about miniport driver operations on VCs, and for an overview of the connection-oriented architecture provided by NDIS, see <A HREF="401condis_8cfb.htm">Connection Oriented NDIS</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating,%20Activating,%20Deactivating,%20and%20Deleting%20Virtual%20Connections"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
