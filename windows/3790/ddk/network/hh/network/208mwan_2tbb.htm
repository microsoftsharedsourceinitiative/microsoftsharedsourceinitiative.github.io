<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Setting Up Handles</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Setting Up Handles">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_setting_up_handles_ng"></A>Setting Up Handles</H2>

<P>After the NDISTAPI driver has initialized an NDIS WAN miniport driver as a provider, the miniport driver can expect a request to open a line device at its <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function specifying <A HREF="29tpioid_9jhu.htm">OID_TAPI_OPEN</A> and the appropriate parameters. Upon receiving an open request the miniport driver would typically do the following: 

<UL>
	<LI>Mark the line device as open in the miniport driver’s internal data structures.</LI>

	<LI>Save the NDISTAPI driver’s handle to the line device (passed in the <B>htLine</B> member), which is to be used in subsequent event notifications.</LI>

	<LI>Return its own handle to the line device (passed back in the <B>hdLine</B> member). </LI>
</UL>

<P>Once again, the impetus for this request would be a client process calling <B>lineOpen</B>.</P>

<P>After a client process has successfully opened a line, it can place a call on that line by calling <B>lineMakeCall</B>. This will result in the NDISTAPI driver’s calling <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> with an <A HREF="29tpioid_83jm.htm">OID_TAPI_MAKE_CALL</A>, specifying the NDISTAPI-supplied handle to the line in the <B>htLine</B> member, and the NDISTAPI-supplied handle to the call in the <B>htCall</B> member. This request is passed to the miniport driver’s <I>MiniportQueryInformation</I> function, specifying OID_TAPI_MAKE_CALL. If the NIC driver can successfully create the call, it passes back its own handle to the call in the <B>hdCall</B> member.</P>

<P>The two-stage <B>ht</B><I>Xxx</I>/<B>hd</B><I>Xxx</I> (“handle of TAPI object Xxx/handle of Driver object Xxx”) handle scheme provides both the NDISTAPI driver and the NDIS WAN miniport driver the flexibility of defining their own means of reference for the same logical object. Requests made to NIC drivers specify driver handles (<B>hdLine</B>s and <B>hdCall</B>s), while notifications made to the NDISTAPI driver contain TAPI handles (<B>htLine</B>s and <B>htCall</B>s). In the already mentioned cases where the miniport driver is defining its driver handle to some object (for example, <B>hdLine</B>, <B>hdCall</B>), it is typically to the advantage of the NIC driver to specify a pointer to the appropriate driver-internal data structure that represents the object. </P>

<P>When the client process has finished with the call it will call <B>lineDrop</B> to drop the call, and then <B>lineDeallocateCall</B> to free the call instance. This will result in the NDISTAPI driver sending two more requests, <A HREF="29tpioid_9376.htm">OID_TAPI_DROP</A> and <A HREF="29tpioid_844y.htm">OID_TAPI_CLOSE_CALL</A>, respectively, through NDISWAN to the NDIS WAN miniport driver to drop the call and deallocate the call instance. It is also possible that the miniport driver will get an OID_TAPI_CLOSE_CALL request without a preceding OID_TAPI_DROP, in which case the miniport driver should drop the call and deallocate the call instance as if it had received both OIDs.</P>

<P>Finally, when the last TAPI client has called <B>lineClose</B>, the NDISTAPI driver will call <B>NdisRequest</B> to send the miniport driver an <A HREF="29tpioid_1enm.htm">OID_TAPI_CLOSE</A> request at its <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> function. An OID_TAPI_CLOSE can also be received on an active line. In this case, the miniport driver must complete or abort all outstanding calls and asynchronous requests on the device and close the line. An OID_TAPI_CLOSE request with a valid <B>hdLine</B> <I>cannot</I> be failed.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Setting%20Up%20Handles"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
