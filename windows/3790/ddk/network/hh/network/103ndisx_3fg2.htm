<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMAllocateSharedMemoryAsync</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMAllocateSharedMemoryAsync">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismallocatesharedmemoryasync_nr"></A>NdisMAllocateSharedMemoryAsync</H1>

<P><B>NdisMAllocateSharedMemoryAsync</B> allocates additional memory shared between a miniport driver and its bus-master DMA NIC, usually when the miniport driver is running low on available NIC receive buffers. </P>

<PRE class=syntax><B>NDIS_STATUS</B>
<B>  NdisMAllocateSharedMemoryAsync(</B>
    <B>IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN ULONG</B>  <I>Length</I><B>,</B>
    <B>IN BOOLEAN</B>  <I>Cached</I><B>,
    IN PVOID</B>  <I>Context</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle originally input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>Length</I></DT>

<DD>Specifies the number of bytes to allocate. </DD>

<DT><I>Cached</I></DT>

<DD>Specifies TRUE if the memory can be cached. </DD>

<DT><I>Context</I></DT>

<DD>Pointer to driver-determined context to be passed to the <A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A> function when it is called. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisMAllocateSharedMemoryAsync</B> can return one of the following:

<DL>
<DT>NDIS_STATUS_PENDING</DT>

<DD>The caller’s <I>MiniportAllocateComplete </I>function will be called with mapped virtual and device-accessible logical base addresses for the shared memory range, its <I>Length</I> and the <I>Context</I> pointer when the requested memory is allocated. Otherwise, <I>MiniportAllocateComplete</I> will be called with NULL pointers if the attempt to allocate shared memory fails. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>The requested memory could not be allocated at this time. If <B>NdisMAllocateSharedMemoryAsync</B> returns this status, a subsequent call with the same parameters might succeed, depending on whether system resources have become available. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Drivers of bus-master DMA NICs call <B>NdisMAllocateSharedMemoryAsync</B> to dynamically allocate shared memory for transfer operations when high network traffic places excessive demands on the shared memory space that the driver allocated during initialization. </P>

<P>Such a NIC driver usually maintains one or more state variables to track the number of shared memory buffers available for incoming transfers. When the number of available buffers reaches a driver-determined low, the miniport driver calls <B>NdisMAllocateSharedMemoryAsync</B> to allocate more buffer space in shared memory. When the number of available buffers climbs to a driver-determined high, it calls <A HREF="103ndisx_9fjm.htm"><B>NdisMFreeSharedMemory</B></A> one or more times to release its preceding dynamic allocation(s). </P>

<P>Usually, such a driver retains the block of shared memory that its <I>MiniportInitialize</I> function allocated with <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A> until the NIC is removed, when its <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function is called. This allocation is sufficient to handle an average demand for transfers through the NIC. </P>

<P>A miniport driver should set a limit on how much shared memory it can allocate. This limit is driver-specific and should be high enough so that the driver does not run out of buffers. Do not set a limit that is excessively high, as this could result in a wasteful consumption of shared memory that could reduce system performance.</P>

<P>Any miniport driver that calls <B>NdisMAllocateSharedMemoryAsync</B> or <B>NdisMAllocateSharedMemory</B> must release all outstanding allocations with one or more calls to <B>NdisMFreeSharedMemory</B> when its NIC is removed. </P>

<P>Callers of <B>NdisMAllocateSharedMemoryAsync</B> run at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A>, <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A>, <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>, <A HREF="103ndisx_9fjm.htm"><B>NdisMFreeSharedMemory</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMAllocateSharedMemoryAsync"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
