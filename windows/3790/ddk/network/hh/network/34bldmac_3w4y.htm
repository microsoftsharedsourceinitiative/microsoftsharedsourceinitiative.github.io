<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiBuildSend</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiBuildSend">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_zwwritefile_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocalldriver_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdibuildsend_nr"></A>TdiBuildSend</H1>

<P><B>TdiBuildSend</B> sets up an internal device control IRP for a TDI_SEND request to the underlying transport in which the local-node client has already opened a file object representing a connection endpoint and established an endpoint-to-endpoint connection with a remote-node peer. </P>

<PRE class=syntax><B>VOID 
</B>  <B>TdiBuildSend(
</B>    <B>IN PIRP</B>  <I>Irp</I><B>,
</B>    <B>IN PDEVICE_OBJECT</B>  <I>DevObj</I><B>,
</B>    <B>IN PFILE_OBJECT</B>  <I>FileObj</I><B>,
</B>    <B>IN PVOID</B>  <I>CompRoutine</I><B>,
</B>    <B>IN PVOID</B>  <I>Contxt</I><B>,
</B>    <B>IN PMDL</B>  <I>MdlAddr</I><B>,
</B>    <B>IN ULONG</B>  <I>InFlags</I><B>,
</B>    <B>IN ULONG</B>  <I>SendLen
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Pointer to a client-supplied IRP, either originating in a higher level network component or allocated with <B>TdiBuildInternalDeviceControlIrp</B>. </DD>

<DT><I>DevObj</I></DT>

<DD>Pointer to the device object created by the underlying TDI transport driver.</DD>

<DT><I>FileObj</I></DT>

<DD>Pointer to a file object representing a connection endpoint. 

<P>The caller previously made a successful request, set up with <B>TdiBuildAssociateAddress</B>, to the transport to set up an association between this connection endpoint and a local-node address. When the association was established, the caller also established an endpoint-to-endpoint connection with a remote-node peer by issuing a successful request set up with <B>TdiBuildConnect</B> or <B>TdiBuildListen</B>, the latter possibly followed by a successful request set up with <B>TdiBuildAccept</B>. 
</DD>

<DT><I>CompRoutine</I></DT>

<DD>Specifies the entry point of a client-supplied IoCompletion routine or NULL. The I/O Manager calls this routine when the given IRP is completed, unless the client sets this parameter to NULL. </DD>

<DT><I>Contxt</I></DT>

<DD>Pointer to a client-determined context. This client-supplied pointer is passed in to the IoCompletion routine when it is called with the completed IRP. <I>Contxt</I> is NULL if <I>CompRoutine</I> is NULL.</DD>

<DT><I>MdlAddr</I></DT>

<DD>Pointer to an MDL, possibly the initial MDL in a chain of MDLs, mapping a client-supplied buffer from which the transport is to transfer the data to be sent. </DD>

<DT><I>InFlags</I></DT>

<DD>Specifies how the data should be transmitted. If this parameter is zero, the transport should send the given data as a normal TSDU. Otherwise, this parameter can be one or a combination (Ored) of the following flags:

<DL>
<DT>TDI_SEND_EXPEDITED</DT>

<DD>The given data should be sent ahead of any normal send requests the transport is currently holding queued for transmission on this endpoint-to-endpoint connection, assuming the underlying transport supports expedited transfers. </DD>

<DT>TDI_SEND_PARTIAL</DT>

<DD>The given data is terminated by an end-of-record but is not a complete message-mode TSDU. The client will send the additional data later. This flag is irrelevant to clients of stream-mode transports. </DD>

<DT>TDI_SEND_NO_RESPONSE_EXPECTED</DT>

<DD>The caller is giving a hint to the underlying transport that it does not expect a response to this send from its remote-node peer. A client uses this flag to disable piggybacking of the TSDU acknowledgment by the remote-node transport, assuming both transports support this optimization. Otherwise, its underlying transport might time out, waiting for a piggybacked acknowledgment of the send from the remote node.</DD>

<DT>TDI_SEND_NON_BLOCKING</DT>

<DD>If the underlying transport currently has no internal buffer space available for the given data, it should fail this send request with STATUS_DEVICE_NOT_READY, rather than blocking until it can buffer the given data internally. The transport should call the ClientEventSendPossible handler when it again has internal buffer space available for sends. This flag is irrelevant to clients of transports that do no internal buffering.</DD>
</DL>
</DD>

<DT><I>SendLen</I></DT>

<DD>Specifies the size in bytes of the buffer mapped at <I>MdlAddr</I>. The maximum for this parameter depends on the underlying transport. Whether zero is valid also depends on the underlying transport. (See Comments.)
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P><B>TdiBuildSend</B> sets IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B> and TDI_SEND as the <B>MinorFunction</B> codes in the transport's I/O stack location of the given IRP.</P>

<P>In each send request set up with <B>TdiBuildSend</B>, the caller provides a buffer containing the TSDU to be sent to its remote-node peer, or part of a TSDU if the underlying transports support message-mode transfers. A client can send any amount of data up to the maximum size the TDI driver allows. To obtain the transport-specific maximum size for sends, the client can make a TDI_QUERY_PROVIDER_INFO request, set up with <B>TdiBuildQueryInformation</B>. </P>

<P>After the caller of <B>TdiBuildSend</B> passes the send IRP to the underlying transport with <B>IoCallDriver</B>, the client-supplied buffer at <I>MdlAddress</I> is inaccessible to that client until the send operation is completed. The client must not attempt to modify or use its send buffer until the IRP is returned to the client's IoCompletion routine or the client is certain (through protocol semantics) that its underlying transport has completed send operations for the data in that buffer. </P>

<P>The local-node transport can queue several send requests internally, but it always transmits them in FIFO order. If the transport supports expedited sends, it queues incoming expedited-send requests in FIFO order ahead of any normal sends it is currently holding. The transport is responsible for completing incoming sends in a timely manner with either a success or error status. The transport can complete a send with a time-out error based on a driver-determined estimate of a reasonable time-out interval for current network conditions. </P>

<P>Each local-node client's send request on an endpoint-to-endpoint connection corresponds to one of the following:

<UL>
	<LI>One receive request issued by the remote-node client to its underlying TDI transport </LI>

	<LI>One call to the remote-node client's registered ClientEventReceive, ClientEventReceiveExpedited, ClientEventChainedReceive, or ClientEventChainedReceiveExpedited handler by its underlying TDI transport </LI>
</UL>

<P>If the underlying transport supports message-mode sends, its client can send a TSDU in pieces as a sequence of send requests, each except the last specifying the TDI_SEND_PARTIAL flag. When this flag is clear, a message-mode transport considers such a sequence of partial sends to be at an end. In this transfer scenario, the transport on the remote node notifies the receiving client of partial TSDUs by leaving the TDI_RECEIVE_ENTIRE_MESSAGE flag clear in the corresponding receive indications until it indicates the last receive in such a sequence.</P>

<P>The caller of <B>TdiBuildSend</B> can request a nonblocking send by setting the TDI_SEND_NON_BLOCKING flag if the underlying transport has internal buffers into which it copies its clients' send data. Depending on the amount of internal buffer space available, the underlying transport handles such a send request as follows:

<UL>
	<LI>If it currently has sufficient internal buffer space, the transport copies the data from the client-supplied buffer and completes the send IRP with STATUS_SUCCESS.</LI>

	<LI>If it currently has insufficient buffer space for the given <I>SendLength</I>, the transport copies as much data as possible from the client's buffer and returns STATUS_SUCCESS. </LI>

	<LI>If the driver currently has no internal buffer space, the transport completes the send IRP with STATUS_DEVICE_NOT_READY. 
<P>The client of such a transport registers a ClientEventSendPossible handler, which the transport will call when it again has internal buffer space available for the rejected send. 
</LI>
</UL>

<P>When its send is completed with STATUS_SUCCESS, the client of such a transport can determine how much data the transport has buffered for transmission by checking the <B>IoStatus.Information</B> member of the completed IRP. If necessary, the client's IoCompletion routine can resubmit another send request for the remaining data to be sent. </P>

<P>Some transports allow their clients to issue zero-length send requests. For such a transport, a zero-length send actually forces protocol flow, as long as the TDI_SEND_PARTIAL flag is clear. The client of such a transport can issue such a zero-length send as a message that satisfies a receive request. Transports that do not support this feature return an error when a client issues a zero-length send request. </P>

<P>A TDI client also can send a normal TSDU on an endpoint-to-endpoint connection with a call to <B>ZwWriteFile</B>. Because this routine does not allow the specification of TDI_SEND_<I>XXX</I> flags, client-supplied data given to <B>ZwWriteFile</B> is transmitted by the underlying transport as if it were packaged as a <B>TdiBuildSend</B> request with both TDI_SEND_PARTIAL and TDI_SEND_EXPEDITED clear in the <I>SendFlags</I>. The transport assumes that all the data in the buffer at <I>MdlAddr</I> should be sent, and the caller's <I>ByteOffset</I> and <I>Key</I> arguments to <B>ZwWriteFile</B> are ignored. </P>

<P>For more information, see <A HREF="JavaScript:hhobj_1.Click()"><B>ZwWriteFile</B></A> and <A HREF="JavaScript:hhobj_2.Click()"><B>IoCallDriver</B></A>.</P>

<H4>See Also</H4>

<P><A HREF="35tdicli_4qnm.htm"><B>ClientEventChainedReceive</B></A>, <A HREF="35tdicli_57n6.htm"><B>ClientEventChainedReceiveExpedited</B></A>, <A HREF="35tdicli_7yeq.htm"><B>ClientEventReceive</B></A>, <A HREF="35tdicli_7jea.htm"><B>ClientEventReceiveExpedited</B></A>, <A HREF="35tdicli_1wc2.htm"><B>ClientEventSendPossible</B></A>, <A HREF="34bldmac_2voy.htm"><B>TdiBuildAccept</B></A>, <A HREF="34bldmac_72ia.htm"><B>TdiBuildAssociateAddress</B></A>, <A HREF="34bldmac_99pu.htm"><B>TdiBuildConnect</B></A>, <A HREF="34bldmac_8df6.htm"><B>TdiBuildInternalDeviceControlIrp</B></A>, <A HREF="34bldmac_6cc2.htm"><B>TdiBuildListen</B></A>, <A HREF="34bldmac_21de.htm"><B>TdiBuildReceive</B></A>, <A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A>, <A HREF="32ioctl_2hv6.htm"><B>TDI_SEND</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiBuildSend"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
