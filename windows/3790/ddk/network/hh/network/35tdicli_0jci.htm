<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ClientEventChainedReceiveDatagram</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ClientEventChainedReceiveDatagram">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_clienteventchainedreceivedatagram_nr"></A>ClientEventChainedReceiveDatagram</H1>

<P>The ClientEventChainedReceiveDatagram routine is an event handler that the underlying TDI transport calls in response to an incoming receive from a remote node that was directed to a local-node transport address opened by the client. </P>

<P>The transport calls this handler, rather than ClientEventReceiveDatagram, when it is forwarding a full TSDU indicated to the transport by an NDIS miniport driver and the client can be given direct read-only access to the buffered TSDU until the client has consumed the data. </P>

<PRE class=syntax><B>NTSTATUS</B>
  <B>ClientEventChainedReceiveDatagram(</B>
    <B>IN PVOID</B>  <I>TdiEventContext</I><B>,</B>
    <B>IN LONG</B>  <I>SourceAddressLength</I><B>,</B>
    <B>IN PVOID</B>  <I>SourceAddress</I><B>,</B>
    <B>IN LONG</B>  <I>OptionsLength</I><B>,</B>
    <B>IN PVOID</B>  <I>Options</I><B>,</B>
    <B>IN ULONG</B>  <I>ReceiveDatagramFlags</I><B>,</B>
    <B>IN ULONG</B>  <I>ReceiveDatagramLength</I><B>,</B>
    <B>IN ULONG</B>  <I>StartingOffset</I><B>,</B>
    <B>IN PMDL</B>  <I>Tsdu</I><B>,</B>
    <B>IN PVOID</B>  <I>TsduDescriptor</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>TdiEventContext</I></DT>

<DD>Pointer to the client-supplied context provided in the IRP that was set up with <B>TdiBuildSetEventHandler</B> when ClientEventChainedReceiveDatagram was registered with the underlying transport.</DD>

<DT><I>SourceAddressLength</I></DT>

<DD>Specifies the size in bytes of the buffer at <I>SourceAddress</I>.</DD>

<DT><I>SourceAddress</I></DT>

<DD>Pointer to a buffer specifying the remote-node transport address from which the datagram was sent.</DD>

<DT><I>OptionsLength</I></DT>

<DD>Specifies the size in bytes of the buffer at <I>Options</I>. Zero implies no option string is available. <I>Options</I> is NULL if this parameter is zero. </DD>

<DT><I>Options</I></DT>

<DD>Pointer to a buffer specifying a string of transport-specific options sent with the datagram. This pointer is NULL if <I>OptionsLength</I> is zero. </DD>

<DT><I>ReceiveDatagramFlags</I></DT>

<DD>Specifies the nature of the receive-datagram indication as a combination (ORed) of the following flags:

<DL>
<DT>TDI_RECEIVE_ENTIRE_MESSAGE</DT>

<DD>The buffer mapped at <I>Tsdu</I> contains a full TSDU, and the client retains read-only access to this buffer until the client consumes the indicated data if ClientEventChainedReceiveDatagram returns STATUS_PENDING. This flag is always set when ClientEventChainedReceiveDatagram is called. </DD>

<DT>TDI_RECEIVE_BROADCAST</DT>

<DD>The receive was broadcast.</DD>

<DT>TDI_RECEIVE_MULTICAST</DT>

<DD>The receive was multicast. </DD>
</DL>
</DD>

<DT><I>ReceiveDatagramLength</I></DT>

<DD>Specifies the number of bytes of client data in the buffer mapped at <I>Tsdu</I>. </DD>

<DT><I>StartingOffset</I></DT>

<DD>Specifies the byte offset at which the client data starts within the buffer mapped at <I>Tsdu</I>. </DD>

<DT><I>Tsdu</I></DT>

<DD>Pointer to an MDL, possibly the initial MDL in a chain, mapping the buffer containing the received TSDU.</DD>

<DT><I>TsduDescriptor</I></DT>

<DD>Pointer to a descriptor for the received TSDU. The client must call <B>TdiReturnChainedReceives</B> with this pointer subsequently if ClientEventChainedReceiveDatagram returns STATUS_PENDING for this receive indication. This pointer should be treated as a handle to an opaque variable, to be used by the client only as a parameter to <B>TdiReturnChainedReceives</B> if ClientEventChainedReceiveDatagram returns STATUS_PENDING. 
</DD>
</DL>

<H4>Return Value</H4>

<P>ClientEventChainedReceiveDatagram can return one of the following:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>Indicates the client consumed all the data in the given TSDU and is returning ownership of the buffer to the underlying driver immediately.</DD>

<DT>STATUS_PENDING</DT>

<DD>Indicates the client is retaining ownership of the buffer containing the given TSDU until it calls <B>TdiReturnChainedReceives</B> with the given <I>TsduDescriptor</I>. </DD>

<DT>STATUS_DATA_NOT_ACCEPTED</DT>

<DD>Indicates the client is not interested in the TSDU. 
</DD>
</DL>

<H4>Comments</H4>

<P>When a datagram arrives from a remote node, the transport calls the registered ClientEvent(Chained)ReceiveDatagram handlers for each client with an open file object representing an address that matches the destination address of the datagram. Because a datagram is not associated with an established connection, the TDI driver passes the transport address of the remote-node sender at <I>SourceAddress</I> to the receiving client along with the datagram. </P>

<P>A call to ClientEventChainedReceiveDatagram gives the client read-only access to the indicated TSDU for the range within the buffer specified by the input <I>StartingOffset</I> and <I>ReceiveLength</I>. If the indicated data is of interest to the client, ClientEventChainedReceiveDatagram either copies the indicated range of TSDU data into a client-allocated internal buffer and returns STATUS_SUCCESS immediately or retains control of the buffer by returning STATUS_PENDING. If it returns STATUS_PENDING, the client must call <B>TdiReturnChainedReceives</B> subsequently with the input <I>TsduDescriptor</I> to relinquish control of the buffer after the client has consumed the data. </P>

<P>In general, such a call to <B>TdiReturnChainedReceives</B> should occur as quickly as possible. Holding on to a buffer passed to ClientEventChainedReceiveDatagram for any extended period constrains I/O throughput in underlying driver(s), because the NDIS miniport driver that allocated the buffer cannot reuse this resource for subsequent receive indications until <B>TdiReturnChainedReceives</B> is called. </P>

<P>Because calls to ClientEventChainedReceiveDatagram always indicate the availability of a full TSDU, the client never has to set up TDI_RECEIVE_DATAGRAM requests for such an indication, as the corresponding ClientEventReceiveDatagram handler sometimes must to obtain a full TSDU. Consequently, receive indications made to ClientEventChainedReceiveDatagram increase network I/O throughput and performance by decreasing call overhead for the client, for its underlying transport, and for the system overall.  A transport never calls the corresponding ClientEventReceiveDatagram handler with the same indication it makes to ClientEventChainedReceiveDatagram.</P>

<P>When ClientEventChainedReceiveDatagram returns control with either STATUS_SUCCESS or STATUS_DATA_NOT_ACCEPTED, the underlying transport assumes the client is done with this receive indication. If the client returns STATUS_PENDING, the transport assumes it has no way of tracking completion of this receive indication because the client is responsible for calling <B>TdiReturnChainedReceives</B> when it has consumed the indicated TSDU. </P>

<P>The underlying TDI transport does not call ClientEventChainedReceiveDatagram if the client has an outstanding receive or receive-datagram request on the local transport address that is the target of an incoming datagram.</P>

<P>To receive indications for broadcast datagrams that the TDI driver receives on the network, the client must open the broadcast address of its underlying transport and register its ClientEvent(Chained)ReceiveDatagram handler(s).</P>

<P>ClientEventChainedReceiveDatagram must be capable of carrying out its operations at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="35tdicli_82nm.htm"><B>ClientEventReceiveDatagram</B></A>, <A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A>, <A HREF="33tdifun_67aq.htm"><B>TdiReturnChainedReceives</B></A>, <A HREF="36tdstrc_8b8y.htm"><B>TA_ADDRESS</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ClientEventChainedReceiveDatagram"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
