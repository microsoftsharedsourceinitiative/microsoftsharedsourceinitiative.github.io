<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportInitialize</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportInitialize">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportinitialize_nr"></A>MiniportInitialize</H1>

<P>The <I>MiniportInitialize</I> function is a required function that sets up a NIC (or virtual NIC) for network I/O operations, claims all hardware resources necessary to the NIC in the registry, and allocates resources the driver needs to carry out network I/O operations.</P>

<PRE class=syntax><B>NDIS_STATUS</B> <B>
</B>  <B>MiniportInitialize(
    OUT</B> <B>PNDIS_STATUS</B>  <I>OpenErrorStatus</I><B>,</B>
    <B>OUT</B> <B>PUINT</B>  <I>SelectedMediumIndex</I><B>,</B>
    <B>IN</B> <B>PNDIS_MEDIUM</B>  <I>MediumArray</I><B>,</B>
    <B>IN</B> <B>UINT</B>  <I>MediumArraySize</I><B>,</B>
    <B>IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN</B> <B>NDIS_HANDLE</B>  <I>WrapperConfigurationContext
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>OpenErrorStatus</I></DT>

<DD>Pointer to a variable that <I>MiniportInitialize</I> sets to an NDIS_STATUS_<I>XXX</I> code specifying additional information about the error if <I>MiniportInitialize</I> will return NDIS_STATUS_OPEN_ERROR. </DD>

<DT><I>SelectedMediumIndex</I></DT>

<DD>Pointer to a variable in which <I>MiniportInitialize</I> sets the index of the <I>MediumArray</I> element that specifies the medium type the driver or its NIC uses.</DD>

<DT><I>MediumArray</I></DT>

<DD>Specifies an array of <B>NdisMedium</B><I>Xxx</I> values from which <I>MiniportInitialize</I> selects one that its NIC supports or that the driver supports as an interface to higher-level drivers.</DD>

<DT><I>MediumArraySize</I></DT>

<DD>Specifies the number of elements at <I>MediumArray</I>.</DD>

<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies a handle identifying the miniport’s NIC, which is assigned by the NDIS library. <I>MiniportInitialize</I> should save this handle; it is a required parameter in subsequent calls to <B>Ndis</B><I>Xxx</I> functions.</DD>

<DT><I>WrapperConfigurationContext</I></DT>

<DD>Specifies a handle used only during initialization for calls to <B>Ndis</B><I>Xxx</I> configuration and initialization functions. For example, this handle is a required parameter to <A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A> and the <B>NdisImmediateRead</B><I>Xxx</I> and <B>NdisImmediateWrite</B><I>Xxx</I> functions.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>MiniportInitialize</I> can return either of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD><I>MiniportInitialize</I> configured and set up the NIC, and it allocated all the resources the driver needs to carry out network I/O operations. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD><I>MiniportInitialize</I> failed for reasons other than those provided in the following list. <I>MiniportInitialize</I> called <A HREF="103ndisx_71pu.htm"><B>NdisWriteErrorLogEntry</B></A> with parameters specifying the configuration or resource allocation failure. 
</DD>
</DL>

<P><I>MiniportInitialize</I> should return one of the following values, if appropriate, when it fails an initialization:

<DL>
<DT>NDIS_STATUS_UNSUPPORTED_MEDIA</DT>

<DD>The values at <I>MediumArray</I> did not include a medium the driver (or its NIC) can support. </DD>

<DT>NDIS_STATUS_OPEN_ERROR</DT>

<DD><I>MiniportInitialize</I> attempted to set up a NIC but was unsuccessful. </DD>

<DT>NDIS_STATUS_NOT_ACCEPTED</DT>

<DD><I>MiniportInitialize</I> could not get its NIC to accept the configuration parameters that it got from the registry. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD><I>MiniportInitialize</I> could not allocate resources to carry out network I/O operations. <I>MiniportInitialize</I> should call <B>NdisWriteErrorLogEntry</B> to record the particular resource conflict (I/O port range, interrupt vector, device memory range, as appropriate). Supplying an error log record gives the user or system administrator information that can be used to reconfigure the machine to avoid such hardware resource conflicts. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>NDIS calls <I>MiniportInitialize</I> as part of a system PnP operation. Miniport drivers call <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A> from their <B>DriverEntry</B> functions to register their <I>MiniportXxx</I> functions. NDIS can call <I>MiniportInitialize</I> after <B>NdisMRegisterMiniport </B>returns.</P>

<P>An NDIS intermediate driver’s <I>ProtocolBindAdapter</I> function usually calls <A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A>. NDIS can call <I>MiniportInitialize</I> in the context of <B>NdisIMInitializeDeviceInstance</B>. </P>

<P>NDIS submits no requests to a driver until <I>MiniportInitialize</I> returns. </P>

<P>A miniport driver obtains advanced configuration information for its NIC by calling <A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A> and <A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A>. The NIC driver obtains bus-specific information by calling the appropriate bus-specific function:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=16%>Bus</TH>
<TH align=left width=84%>Function for Obtaining Bus-Specific Information</TH>
</TR>

<TR VALIGN="top">
<TD width=16%>PCI</TD>
<TD width=84%><A HREF="103ndisx_3egi.htm"><B>NdisReadPciSlotInformation</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=16%>PC Card</TD>
<TD width=84%><A HREF="103ndisx_38fm.htm"><B>NdisReadPcmciaAttributeMemory</B></A></TD>
</TR>
</TABLE><BR>

<P>Miniport drivers obtain information on the hardware resources for a NIC by calling <A HREF="103ndisx_8hrm.htm"><B>NdisMQueryAdapterResources</B></A>.</P>

<P>When it calls <I>MiniportInitialize</I>, the NDIS library supplies an array of supported media types, specified as system-defined <B>NdisMedium</B><I>Xxx</I> values. <I>MiniportInitialize</I> reads the array elements and provides the index of the medium type that NDIS should use with this driver for its NIC. If the miniport driver is emulating a medium type, its emulation must be transparent to NDIS.</P>

<P>The <I>MiniportInitialize</I> function of a NIC driver must call <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A> or <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A> before it calls any <B>Ndis</B><I>Xxx</I> function, such as <A HREF="103ndisx_76k2.htm"><B>NdisMRegisterIoPortRange</B></A> or <A HREF="103ndisx_81de.htm"><B>NdisMMapIoSpace</B></A>, that claims hardware resources. <I>MiniportInitialize</I> must call <B>NdisMSetAttributes(Ex)</B> before it attempts to allocate resources for DMA operations as well. If the NIC is a bus master, <I>MiniportInitialize</I> must call <A HREF="103ndisx_44j6.htm"><B>NdisMAllocateMapRegisters</B></A> or <A HREF="103ndisx_48aa.htm"><B>NdisMInitializeScatterGatherDma</B></A> following its call to <B>NdisMSetAttributes(Ex)</B> and before it calls <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>. If the NIC is a slave, <I>MiniportInitialize</I> must call <B>NdisMSetAttributes(Ex)</B> before it calls <A HREF="103ndisx_1gxe.htm"><B>NdisMRegisterDmaChannel</B></A>. </P>

<P>Intermediate driver <I>MiniportInitialize</I> functions must call <B>NdisMSetAttributesEx</B> with NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER set in the <I>AttributeFlags</I> argument. Every intermediate driver also should call <B>NdisMSetAttributesEx </B>with NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT and NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT set in the <I>AttributeFlags</I> so that NDIS will not attempt to time out sends and requests that NDIS holds queued to the intermediate driver.</P>

<P>An intermediate driver must operate as a deserialized driver and must register itself as such by setting the NDIS_ATTRIBUTE_DESERIALIZE flag in the <I>AttributeFlags</I> parameter passed to <B>NdisMSetAttributesEx</B>. A deserialized driver serializes the operation of its <I>MiniportXxx</I> functions and queues internally all incoming send packets rather than relying on NDIS to maintain its send queue.</P>

<P>An intermediate driver must also set the NDIS_ATTRIBUTE_NO_HALT_ON_SUSPEND flag in the <I>AttributeFlags</I> parameter passed to <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>. Setting this flag prevents NDIS from halting the driver before the underlying miniport transitions to a low-power state.</P>

<P>If the NDIS library’s default two-second time-out interval for calling <A HREF="101mini_2zua.htm"><I>MiniportCheckForHang</I></A> is too short for the driver’s NIC, <I>MiniportInitialize</I> can call <B>NdisMSetAttributesEx</B> to extend the interval. </P>

<P>The call to<B> <A HREF="103ndisx_175e.htm">NdisMSetAttributes</A></B> or <B>NdisMSetAttributesEx</B> includes a <I>MiniportAdapterContext</I> handle to a driver-allocated context area, in which the miniport driver maintains run-time state information. NDIS subsequently passes the supplied <I>MiniportAdapterContext</I> handle as an input parameter to other <I>MiniportXxx</I> functions. </P>

<P>Consequently, the <I>MiniportInitialize</I> function of an intermediate driver must call <B>NdisMSetAttributesEx</B> to set up the <I>MiniportAdapterContext</I> handle for a driver-allocated per-virtual-NIC context area. </P>

<P>After <I>MiniportInitialize</I> calls <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, the driver’s <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> function is called if the driver’s NIC generates an interrupt or if any other device, with which the NIC shares an interrupt, generates an interrupt. If the NIC shares interrupts, the driver must first determine whether its NIC generated the interrupt; if it did not, the miniport driver must return FALSE as soon as possible. Note that a miniport driver can get an interrupt as soon as it calls <B>NdisMRegisterInterrupt</B> and keeps getting interrupts until its call to <A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A> returns.</P>

<P><I>MiniportInitialize</I> can call <A HREF="103ndisx_87aq.htm"><B>NdisMInitializeTimer</B></A> with a driver-supplied <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function and a pointer to driver-allocated memory for a timer object. Drivers can set up one or more <I>MiniportTimer</I> functions, each with its own timer object. A driver can call <A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A> to enable a periodic <I>MiniportTimer</I> function. A driver can call <A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A> to set a nonperiodic <I>MiniportTimer</I> function. </P>

<P>If the driver subsequently indicates receives with <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A>, the <I>MiniportInitialize</I> function should call <A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A> and <A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A> and save the handles returned by these NDIS functions. The packets that the driver subsequently indicates with <B>NdisMIndicateReceivePacket</B> must reference descriptors that were allocated with <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A> and <A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A>. </P>

<P>If driver functions other than <I>MiniportISR</I> or <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A> share resources, <I>MiniportInitialize</I> should call <A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A> to set up any spin lock necessary to synchronize access to such a set of shared resources. Resources shared by other driver functions with <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> or <I>MiniportDisableInterrupt</I>, such as NIC registers, are protected by the interrupt object set up when <I>MiniportInitialize</I> calls <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A> and accessed subsequently by calling <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A>. </P>

<P>Any NIC driver’s <I>MiniportInitialize</I> function should test the NIC to be sure the hardware is configured correctly to carry out subsequent network I/O operations. If it must wait for state changes to occur in the hardware, <I>MiniportInitialize</I> either can call <A HREF="103ndisx_7uyb.htm"><B>NdisWaitEvent</B></A> with the pointer to a driver-initialized event object, or it can call <A HREF="103ndisx_3lv6.htm"><B>NdisMSleep</B></A>. </P>

<P>For NDIS version 5.0 and earlier versions, unless the <I>MiniportInitialize</I> function of a NIC driver will return an error status, it should call <A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A> with a driver-supplied <I>MiniportShutdown</I> function. For NDIS version 5.1 and later versions, drivers supply a <A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A><I> </I>function in the characteristics structure that they pass to <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>.<I> </I></P>

<P>If <I>MiniportInitialize</I> will fail the initialization, it must release all resources it has already allocated before it returns control.</P>

<P>If <I>MiniportInitialize</I> returns NDIS_STATUS_OPEN_ERROR, NDIS can examine the value returned at <I>OpenErrorStatus</I> to obtain more information about the error.</P>

<P>When <I>MiniportInitialize</I> returns NDIS_STATUS_SUCCESS, the NDIS library calls the driver’s <I>MiniportQueryInformation</I> function next.</P>

<P><I>MiniportInitialize</I> runs at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0quq.htm"><B>DriverEntry of NDIS Miniport Drivers</B></A>, <A HREF="104tdlow_9raq.htm"><B>DriverEntry of NDIS Protocol Drivers</B></A>, <A HREF="101mini_2zua.htm"><I>MiniportCheckForHang</I></A>, <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>, <A HREF="101mini_222a.htm"><I>MiniportEnableInterrupt</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A>, <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A>, <A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A>, <A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A>, <A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A>, <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A>, <A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A>, <A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A>, <A HREF="103ndisx_6ynm.htm"><B>NdisAnsiStringToUnicodeString</B></A>, <A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A>, <A HREF="103ndisx_5lgy.htm"><B>NdisImmediateReadPciSlotInformation</B></A>, <A HREF="103ndisx_0msy.htm"><B>NdisImmediateReadPortUchar</B></A>, <A HREF="103ndisx_873m.htm"><B>NdisImmediateReadSharedMemory</B></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_2rqq.htm"><B>NdisInitializeEvent</B></A>, <A HREF="103ndisx_44j6.htm"><B>NdisMAllocateMapRegisters</B></A>, <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>, <A HREF="103ndisx_18xe.htm"><B>NdisMCreateLog</B></A>, <A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A>, <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A>, <A HREF="103ndisx_87aq.htm"><B>NdisMInitializeTimer</B></A>, <A HREF="103ndisx_81de.htm"><B>NdisMMapIoSpace</B></A>, <A HREF="103ndisx_76nm.htm"><B>NdisMPciAssignResources</B></A>, <A HREF="103ndisx_8hrm.htm"><B>NdisMQueryAdapterResources</B></A>, <A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A>, <A HREF="103ndisx_1gxe.htm"><B>NdisMRegisterDmaChannel</B></A>, <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, <A HREF="103ndisx_76k2.htm"><B>NdisMRegisterIoPortRange</B></A>, <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>, <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, <A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A>, <A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A>, <A HREF="103ndisx_3lv6.htm"><B>NdisMSleep</B></A>, <A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A>, <A HREF="103ndisx_0tma.htm"><B>NdisRawReadPortBufferUchar</B></A>, <A HREF="103ndisx_3qib.htm"><B>NdisRawReadPortBufferUlong</B></A>, <A HREF="103ndisx_8i5u.htm"><B>NdisRawReadPortBufferUshort</B></A>, <A HREF="103ndisx_4kj6.htm"><B>NdisRawReadPortUchar</B></A>, <A HREF="103ndisx_7hf6.htm"><B>NdisRawReadPortUlong</B></A>, <A HREF="103ndisx_8cmq.htm"><B>NdisRawReadPortUshort</B></A>, <A HREF="103ndisx_8vsi.htm"><B>NdisRawWritePortBufferUchar</B></A>, <A HREF="103ndisx_1soi.htm"><B>NdisRawWritePortBufferUlong</B></A>, <A HREF="103ndisx_4d82.htm"><B>NdisRawWritePortBufferUshort</B></A>, <A HREF="103ndisx_4hde.htm"><B>NdisRawWritePortUchar</B></A>, <A HREF="103ndisx_7e9e.htm"><B>NdisRawWritePortUlong</B></A>, <A HREF="103ndisx_2qcy.htm"><B>NdisRawWritePortUshort</B></A>, <A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A>, <A HREF="103ndisx_019v.htm"><B>NdisReadEisaSlotInformation</B></A>, <A HREF="103ndisx_73aq.htm"><B>NdisReadEisaSlotInformationEx</B></A>, <A HREF="103ndisx_5e9f.htm"><B>NdisReadNetworkAddress</B></A>, <A HREF="103ndisx_3egi.htm"><B>NdisReadPciSlotInformation</B></A>, <A HREF="103ndisx_38fm.htm"><B>NdisReadPcmciaAttributeMemory</B></A>, <A HREF="103ndisx_1gc2.htm"><B>NdisReadRegisterUchar</B></A>, <A HREF="103ndisx_4d83.htm"><B>NdisReadRegisterUlong</B></A>, <A HREF="103ndisx_8vzm.htm"><B>NdisReadRegisterUshort</B></A>, <A HREF="103ndisx_07zm.htm"><B>NdisUnicodeStringToAnsiString</B></A>, <A HREF="103ndisx_7uyb.htm"><B>NdisWaitEvent</B></A>, <A HREF="103ndisx_71pu.htm"><B>NdisWriteErrorLogEntry</B></A>, <A HREF="103ndisx_1m2a.htm"><B>NdisWriteRegisterUchar</B></A>, <A HREF="103ndisx_4iya.htm"><B>NdisWriteRegisterUlong</B></A>, <A HREF="103ndisx_92lu.htm"><B>NdisWriteRegisterUshort</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportInitialize"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
