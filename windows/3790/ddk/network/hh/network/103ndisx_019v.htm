<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisReadEisaSlotInformation</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisReadEisaSlotInformation">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisreadeisaslotinformation_nr"></A>NdisReadEisaSlotInformation</H1>

<P>This function is <B>obsolete</B> for Windows XP and later, and is no longer supported.</P>

<P><B>NdisReadEisaSlotInformation</B> returns EISA configuration information for a NIC on an EISA bus. </P>

<PRE class=syntax><B>VOID
  NdisReadEisaSlotInformation(</B>
    <B>OUT PNDIS_STATUS</B>  <I>Status</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>WrapperConfigurationContext</I><B>,</B>
    <B>OUT PUINT</B>  <I>SlotNumber</I><B>,</B>
    <B>OUT PNDIS_EISA_FUNCTION_INFORMATION</B>  <I>EisaData</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Status</I></DT>

<DD>Pointer to a caller-supplied variable in which this function returns the status of the call as one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The NIC driver can examine the buffered configuration data to determine whether a NIC that it supports has been found and, if so, can use the bus-relative configuration values as parameters to certain <B>Ndis</B><I>Xxx</I> initialization functions.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>NDIS could not allocate the resources it needs to collect the EISA configuration information. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>This is a default status, returned if no NIC can be found on an EISA bus or if the caller supplied an invalid parameter. For example, if the caller set the <I>AdapterType</I> to something other than <B>NdisInterfaceEisa</B> when it called <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A><B> </B>or<B> <A HREF="103ndisx_1pmb.htm">NdisMSetAttributesEx</A></B>, <B>NdisReadEisaSlotInformation</B> returns this status. </DD>
</DL>
</DD>

<DT><I>WrapperConfigurationContext</I></DT>

<DD>Specifies the handle input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. </DD>

<DT><I>SlotNumber</I></DT>

<DD>Pointer to a variable in which this function returns the slot number of a NIC found on the EISA bus if this call is successful.</DD>

<DT><I>EisaData</I></DT>

<DD>Pointer to a caller-allocated buffer, which must be at least <B>sizeof(</B>NDIS_EISA_FUNCTION_INFORMATION<B>)</B>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><B>NdisReadEisaSlotInformation</B> reads standard EISA bus configuration information for a NIC that it finds on an EISA I/O bus and copies the bus-relative configuration information into a buffer. </P>

<P>If the call to <B>NdisReadEisaSlotInformation</B> succeeds, this function returns information in the caller-supplied buffer at <I>EisaData</I>, formatted as an NDIS_EISA_FUNCTION_INFORMATION structure.</P>

<P>The NDIS_EISA_FUNCTION_INFORMATION structure is defined as follows: </P>

<PRE>typedef struct _NDIS_EISA_FUNCTION_INFORMATION {
    ULONG CompressedId;
    UCHAR IdSlotFlags1;
    UCHAR IdSlotFlags2;
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    UCHAR Selections[26];
    UCHAR FunctionFlags;
    UCHAR TypeString[80];
    EISA_MEMORY_CONFIGURATION EisaMemory[9];
    EISA_IRQ_CONFIGURATION EisaIrq[7];
    EISA_DMA_CONFIGURATION EisaDma[4];
    EISA_PORT_CONFIGURATION EisaPort[60];
    UCHAR InitializationData[60];
} NDIS_EISA_FUNCTION_INFORMATION, *PNDIS_EISA_FUNCTION_INFORMATION;</PRE>

<P>The members of this structure correspond to the standard EISA configuration function block, as follows: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=32%>Member</TH>
<TH align=left width=68%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=32%><B>CompressedId</B></TD>
<TD width=68%>Specifies the EISA compressed identification for the device. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>IdSlotFlags1</B></TD>
<TD width=68%>Specifies byte 0 identifier and slot information. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>IdSlotFlags2</B></TD>
<TD width=68%>Specifies byte 1 identifier and slot information. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>MinorRevision</B></TD>
<TD width=68%>Specifies the .<I>cfg</I> file minor revision level. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>MajorRevision</B></TD>
<TD width=68%>Specifies the .<I>cfg</I> file major revision level. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>Selections[26]</B></TD>
<TD width=68%>Specifies an array for 26 selections. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>FunctionFlags</B></TD>
<TD width=68%>Specifies function flags. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>TypeString[80]</B></TD>
<TD width=68%>Specifies an array for a type and subtype ASCII string. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>EisaMemory[9]</B></TD>
<TD width=68%>Specifies an array in which each element is an EISA_MEMORY_CONFIGURATION structure, defining the bus-relative device memory range. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>EisaIrq[7]</B></TD>
<TD width=68%>Specifies an array in which each element is an EISA_IRQ_CONFIGURATION structure, defining the bus-relative device interrupt. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>EisaDma[4]</B></TD>
<TD width=68%>Specifies an array in which each element is an EISA_DMA_CONFIGURATION structure, defining the bus-relative DMA capacity, timing, and channel number, if any. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>EisaPort[60]</B></TD>
<TD width=68%>Specifies an array in which each element is an EISA_PORT_CONFIGURATION structure, defining the bus-relative I/O port ranges of the device. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>InitializationData[60]</B></TD>
<TD width=68%>Specifies an array of EISA initialization data. </TD>
</TR>
</TABLE><BR>

<P>NIC drivers call <B>NdisReadEisaSlotInformation</B> to identify their respective adapters in the current platform. When a particular driver’s NIC is found, the bus-relative configuration parameters returned at <I>EisaData</I> are passed in subsequent calls to functions such as <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A> (<B>EisaIrq</B>), <A HREF="103ndisx_81de.htm"><B>NdisMMapIoSpace</B></A><B> </B>(<B>EisaMemory</B>), and <A HREF="103ndisx_76k2.htm"><B>NdisMRegisterIoPortRange</B></A><B> </B>(<B>EisaPort</B>). </P>

<P>After consuming the returned information, the caller of <B>NdisReadEisaSlotInformation</B> is responsible for releasing the memory allocated at <I>EisaData</I>. </P>

<P>Callers of <B>NdisReadEisaSlotInformation</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><B>MiniportInitialize</B></A>, <A HREF="103ndisx_6sc2.htm"><B>NdisFreeMemory</B></A>, <A HREF="103ndisx_81de.htm"><B>NdisMMapIoSpace</B></A>, <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, <A HREF="103ndisx_76k2.htm"><B>NdisMRegisterIoPortRange</B></A>, <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, <A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A>, <A HREF="103ndisx_73aq.htm"><B>NdisReadEisaSlotInformationEx</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisReadEisaSlotInformation"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
