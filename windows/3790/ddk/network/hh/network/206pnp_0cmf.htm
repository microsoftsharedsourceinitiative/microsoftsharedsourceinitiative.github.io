<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handling the Surprise Removal of a NIC</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Handling the Surprise Removal of a NIC">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_handling_the_surprise_removal_of_a_nic_ng"></A>Handling the Surprise Removal of a NIC</H1>

<P>A surprise removal occurs when a user removes a NIC from a running system without notifying the system beforehand through the user interface (UI). </P>

<P>Miniport drivers for Microsoft® Windows®&nbsp;XP and later versions, should be able to handle surprise removals. In particular, NDIS miniport drivers with a WDM lower edge should be able to handle such events. If an NDIS-WDM miniport driver does not handle a surprise removal, any pending IRPs that the miniport driver sent to the underlying bus driver before the surprise removal cannot be completed.</P>

<P>For Windows XP and later versions, a miniport driver (such as a miniport driver with a WDM lower edge) that does not control hardware directly, should set the NDIS_ATTRIBUTE_SURPRISE_REMOVE_OK attribute flag when calling <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>. Setting this flag prevents a warning from being displayed when a user performs a surprise removal of a NIC. A miniport driver that cannot handle a surprise removal should not set this flag.</P>

<P>A miniport driver that supports surprise removal should itself attempt to detect a surprise removal during normal operations—outside the context of <A HREF="101mini_5tgy.htm"><I>MiniportPnPEventNotify</I></A>. After a NIC is removed, an attempt to read a NIC's I/O ports typically results in return values that have all bits set to one. If a miniport driver reads such a value, it should check for the presence of the hardware with a more conclusive test. For example, the miniport driver could write a value to an I/O port and then try to read the value from that port. The miniport driver could also check for valid values in the NIC's I/O registers. Detecting a surprise removal in such a way prevents the miniport driver from hanging in an infinite loop when it attempts to read a removed NIC's registers. A miniport driver that hangs in this way cannot respond when NDIS calls the driver's <I>MiniportPnPEventNotify</I> function. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Handling%20the%20Surprise%20Removal%20of%20a%20NIC"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
