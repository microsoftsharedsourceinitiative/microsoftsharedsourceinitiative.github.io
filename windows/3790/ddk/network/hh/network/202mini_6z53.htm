<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Halting a Miniport Driver</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Halting a Miniport Driver">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_halting_a_miniport_driver_ng"></A>Halting a Miniport Driver</H2>

<P>NDIS halts a miniport driver by calling the miniport driver's <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function. The <I>MiniportHalt</I> function releases system resources claimed by the miniport driver. For example, if the miniport driver's <I>MiniportInitialize</I> function registered an interrupt with <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, the miniport driver's <I>MiniportHalt</I> function must deregister the interrupt with <A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A>.</P>

<P>If the miniport driver fails to initialize a NIC or to claim required system resources, its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function releases all miniport driver-allocated resources. Otherwise, the miniport driver releases its resources in the context of its <I>MiniportHalt</I> function.</P>

<P>If the miniport driver has any outstanding receive packets (packets that it has indicated up to NDIS but which NDIS has not yet returned), the miniport driver must not return from its <I>MiniportHalt</I> function until such packets are returned to the miniport driver's <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function.</P>

<P>If the driver has a <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function associated with any timer object that might be in the system timer queue, <I>MiniportHalt</I> should call <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A>. If a call to <B>NdisMCancelTimer</B> fails, the timer might have already fired. In this case, the miniport driver should wait for the timer handler to complete before returning from <I>MiniportHalt</I>.</P>

<P>Note that a miniport driver's <A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A> function should not release any allocated resources. The <I>MiniportShutdown</I> function should stop any data transfers in progress and put the NIC in its initial state.</P>

<P>For more information on halting a miniport driver, see <A HREF="207sd_2jjb.htm">Halt Handler</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Halting%20a%20Miniport%20Driver"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
