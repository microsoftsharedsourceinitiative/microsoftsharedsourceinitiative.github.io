<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Synchronizing Memory Before Sending Data</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Synchronizing Memory Before Sending Data">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_synchronizing_memory_before_sending_data_ng"></A>Synchronizing Memory Before Sending Data</H2>

<P>If a miniport driver manages a bus-master DMA NIC, it must ensure that any data passed to the NIC to be sent over the network is present in physical memory before the NIC attempts to read such data from this shared memory. Therefore, the miniport driver must call <A HREF="103ndisx_188i.htm"><B>NdisFlushBuffer</B></A> to force flushing of the processor cache. The timing of the flush call is not critical but must be made in <I>MiniportSend</I> or <I>Miniport(Co)SendPackets</I> after the data is written to shared memory and before it is released to the NIC.</P>

<P>For example, to send a packet on the network, <I>MiniportSendPackets</I> usually gives a bus-master DMA NIC the physical addresses of the packet segments in shared memory, and then calls <B>NdisFlushBuffer </B>and <A HREF="103ndisx_29rm.htm"><B>NdisMUpdateSharedMemory</B></A>. The call to <B>NdisFlushBuffer</B> specifies the <I>WriteToDevice</I> parameter as TRUE, indicating that the direction of the transfer is from the host to the NIC. After the miniport driver has called <B>NdisFlushBuffer </B>and <B>NdisMUpdateSharedMemory</B>, it can release the data to the NIC, usually by writing to a NIC register.</P>

<P>Because cache-line tearing is not a problem for transmitted data, the miniport driver can flush the data without concern for cache fill size. </P>

<P>Miniports that manage programmed I/O (PIO) devices are guaranteed that the correct data is transferred to a NIC; therefore, such miniport drivers do not call <B>NdisFlushBuffer</B>.</P>

<P>Miniports for slave DMA NICs are guaranteed that NDIS will ensure cache coherency during DMA transfers.</P>

<P>It is generally preferable to allocate cached memory for transmit data. Noncached memory is a scarce system resource. Allocating a large block of noncached memory is not always possible. Any miniport driver that uses noncached memory must allocate it during driver initialization. </P>

<P>A miniport driver should always assume that buffers set up by a protocol driver are cached memory. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Synchronizing%20Memory%20Before%20Sending%20Data"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
