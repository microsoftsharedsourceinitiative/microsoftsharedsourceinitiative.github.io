<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS Intermediate Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS Intermediate Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_ndis_intermediate_drivers_2_ng"></A>NDIS Intermediate Drivers</H2>

<P><B></B></P>

<P>As the following figure illustrates, intermediate drivers are typically layered between miniport drivers and transport protocol drivers.</P>

<P><IMG SRC="images/id_1.gif" ALT="" BORDER=0></P>

<P><B>Intermediate Driver Layered Between Miniport Driver and Transport Driver</B></P>

<P>Because of its intermediate position in the driver hierarchy, an intermediate driver must communicate with both overlying protocol drivers and underlying miniport drivers in order to expose:

<UL>
	<LI>Protocol entry points
<P>At its lower edge, NDIS calls the <B>Protocol<I>Xxx</I></B> functions to communicate requests from underlying miniport drivers. The intermediate driver looks like a protocol driver to an underlying miniport driver.
</LI>

	<LI>Miniport driver entry points
<P>At its upper edge, NDIS calls the <B>Miniport<I>Xxx</I></B> functions to communicate the requests of one or more overlying protocol drivers. The intermediate driver looks like a miniport driver to an overlying protocol driver.
</LI>
</UL>

<P>Although it exports a subset of the Miniport<I>Xxx</I> functions at its upper edge, an intermediate driver does not actually manage a physical NIC. Instead, it exports one or more virtual adapters, to which overlying protocols can bind. To a protocol driver, a virtual adapter exported by an intermediate driver appears to be a physical NIC. When a protocol driver sends packets or requests to a virtual adapter, the intermediate driver propagates these packets and requests to the underlying miniport driver. When the underlying miniport driver indicates up receives packets, responds to a protocol’s requests for information, or indicates status, the intermediate driver propagates such packets, responses, and status up to the protocol drivers that are bound to the virtual adapter.</P>

<P>Intermediate drivers are typically used to:

<UL>
	<LI>Translate between different network media
<P>For example, the function of an intermediate driver layered between Ethernet and Token Ring transports and an ATM miniport driver is to map Ethernet and Token Ring packets to ATM packets and vice versa.
</LI>

	<LI>Filter packets
<P>A packet scheduler is an example of an intermediate driver that is used as a filter driver. A packet scheduler reads priority information in each send packet passed down by a transport for transmission and each receive packet indicated up by a miniport driver. The packet scheduler then schedules each packet for transmission or reception based on its priority.
</LI>

	<LI>Balance packet transmission across more than one NIC
<P>A load balancing driver exposes one virtual adapter to overlying transport protocols but distributes send packets across more than one NIC.
</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS%20Intermediate%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
