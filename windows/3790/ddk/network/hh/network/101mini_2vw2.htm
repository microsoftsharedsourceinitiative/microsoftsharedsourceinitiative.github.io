<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportQueryInformation</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportQueryInformation">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportqueryinformation_nr"></A>MiniportQueryInformation</H1>

<P>The <I>MiniportQueryInformation</I> function is a required function that returns information about the capabilities and status of the driver and/or its NIC.</P>

<PRE class=syntax><B>NDIS_STATUS</B> <B>
</B>  <B>MiniportQueryInformation(
    IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I><B>,</B>
    <B>IN</B> <B>NDIS_OID</B>  <I>Oid</I><B>,</B>
    <B>IN</B> <B>PVOID</B>  <I>InformationBuffer</I><B>,</B>
    <B>IN</B> <B>ULONG</B>  <I>InformationBufferLength</I><B>,</B>
    <B>OUT</B> <B>PULONG</B> <I> BytesWritten</I><B>,</B>
    <B>OUT</B> <B>PULONG</B>  <I>BytesNeeded
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. </DD>

<DT><I>Oid</I></DT>

<DD>Specifies the system-defined OID_<I>XXX</I> code designating the global query operation the driver should carry out.</DD>

<DT><I>InformationBuffer</I></DT>

<DD>Pointer to a buffer in which <I>MiniportQueryInformation</I> should return the OID-specific information. </DD>

<DT><I>InformationBufferLength</I></DT>

<DD>Specifies the number of bytes at <I>InformationBuffer</I>. </DD>

<DT><I>BytesWritten</I></DT>

<DD>Pointer to a variable that <I>MiniportQueryInformation</I> sets to the number of bytes it is returning at <I>InformationBuffer</I>.</DD>

<DT><I>BytesNeeded</I></DT>

<DD>Pointer to a variable that <I>MiniportQueryInformation</I> sets to the total number of bytes it needs to satisfy the request if <I>InformationBufferLength</I> is less than <I>Oid</I> requires.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>MiniportQueryInformation</I> can return one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD><I>MiniportQueryInformation</I> returned the requested information at <I>InformationBuffer</I> and set the variable at <I>BytesWritten</I> to the amount of information it returned. </DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>The driver will complete the request asynchronously with a call to <A HREF="103ndisx_4ktu.htm"><B>NdisMQueryInformationComplete</B></A> when it has gathered the requested information. </DD>

<DT>NDIS_STATUS_INVALID_OID</DT>

<DD><I>MiniportQueryInformation</I> does not recognize the <I>Oid</I>. </DD>

<DT>NDIS_STATUS_INVALID_LENGTH</DT>

<DD>The <I>InformationBufferLength</I> does not match the length required by the given <I>Oid</I>. <I>MiniportQueryInformation</I> returned how many bytes the buffer should be at <I>BytesNeeded</I>. </DD>

<DT>NDIS_STATUS_NOT_ACCEPTED</DT>

<DD><I>MiniportQueryInformation</I> attempted to gather the requested information from the NIC but was unsuccessful. </DD>

<DT>NDIS_STATUS_NOT_SUPPORTED</DT>

<DD><I>MiniportQueryInformation</I> does not support the <I>Oid</I>, which is optional. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD><I>MiniportQueryInformation</I> could not allocate sufficient resources to return the requested information. This return value does not necessarily mean that the same request, submitted at a later time, will be failed for the same reason.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>NDIS calls the <I>MiniportQueryInformation</I> function either on its own behalf, such as to determine which options the driver supports or to manage binding-specific information for the miniport driver, or when a bound protocol driver calls <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>. </P>

<P>NDIS makes one or more calls to <I>MiniportQueryInformation</I> just after a driver’s <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function returns NDIS_STATUS_SUCCESS. NDIS supplies the following OIDs in its initialization-time calls to the driver’s <I>MiniportQueryInformation</I> function:

<DL>
<DT>OID_GEN_MAXIMUM_LOOKAHEAD</DT>

<DD><I>MiniportQueryInformation</I> must return how many bytes of lookahead data the NIC can provide, that is, the initial transfer capacity of the NIC. 

<P>Even if a driver supports multipacket receives and, therefore, will indicate an array of pointers to fully set up packets, <I>MiniportQueryInformation</I> must supply this information. Such a driver should return the maximum packet size it can indicate. 
</DD>

<DT>OID_GEN_MAC_OPTIONS</DT>

<DD><I>MiniportQueryInformation</I> must return a bitmask set with the appropriate NDIS_MAC_OPTION_<I>XXX</I> flags indicating which options it (or its NIC) supports, or it can return zero at <I>InformationBuffer</I> if the driver supports none of the options designated by these flags. 

<P>For example, a NIC driver always sets the NDIS_MAC_OPTION_NO_LOOPBACK flag if its NIC has no internal hardware support for loopback. This tells NDIS to manage loopback for the driver, which cannot provide software loopback code as efficient as the NDIS library’s because NDIS manages all binding-specific information for miniports. Any miniport driver that tries to provide software loopback must check the destination address of every send packet against the currently set filter addresses to determine whether to loop back each packet. WAN NIC drivers must set this flag. 


<P>If the NIC driver sets the NDIS_MAC_OPTION_FULL_DUPLEX flag, the NDIS library serializes calls to the <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A><I>, </I>or <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> function separately from its serialized calls to other <I>MiniportXxx</I> functions in SMP machines. However, NDIS returns incoming send packets to protocols while such a driver’s <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> function is executing: that is, NDIS <I>never</I> calls a full-duplex miniport driver to transmit a packet until its reset operation is completed. The designer of any full-duplex driver can expect that driver to achieve significantly higher performance in SMP machines, but the driver must synchronize its accesses to shared resources carefully to prevent race conditions or deadlocks from occurring. NDIS assumes that all intermediate drivers are full-duplex drivers.  

</DD>
</DL>

<P>Depending on the <B>NdisMedium</B><I>Xxx</I> that <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> selected, NDIS submits additional initialization-time requests to <I>MiniportQueryInformation</I>, such as the following:

<DL>
<DT>OID_<I>XXX</I>_CURRENT_ADDRESS</DT>

<DD>If the driver’s <I>MiniportInitialize</I> function selected an <B>NdisMedium</B><I>Xxx</I> for which the system supplies a filter, NDIS calls <I>MiniportQueryInformation</I> to return the NIC’s current address in medium-specific format. For FDDI drivers, NDIS requests both long and short current addresses. </DD>

<DT>OID_802_3_MAXIMUM_LIST_SIZE</DT>

<DD>For Ethernet drivers, NDIS requests the multicast list size.</DD>

<DT>OID_FDDI_LONG/SHORT_MAX_LIST_SIZE</DT>

<DD>For FDDI drivers, NDIS requests the multicast list sizes. </DD>
</DL>

<P></P>

<P>If possible, <I>MiniportQueryInformation</I> should not return NDIS_STATUS_PENDING for initialization-time requests. Until NDIS has sufficient information to set up bindings to the miniport driver, such requests should be handled synchronously. </P>

<P>Subsequently, the NDIS library intercepts all protocol-initiated queries on certain OIDs, such as the following:</P>

<P><A HREF="22genoid_4qgi.htm">OID_GEN_CURRENT_PACKET_FILTER</A><BR>
<A HREF="22genoid_18fm.htm">OID_GEN_PROTOCOL_OPTIONS</A><BR>
<A HREF="24tokoid_16gi.htm#ddk_oid_802_5_current_functional_nr">OID_802_5_CURRENT_FUNCTIONAL</A><BR>
<A HREF="23ethoid_8b8y.htm#ddk_oid_802_3_multicast_list_nr">OID_802_3_MULTICAST_LIST</A><BR>
<A HREF="25fddoid_42ya.htm">OID_FDDI_LONG_MULTICAST_LIST</A></P>

<P>For more information about the system-defined OIDs, see <A HREF="21oidovw_8q9e.htm">NDIS Object Identifiers</A>.</P>

<P>If <I>MiniportQueryInformation</I> does not complete a request synchronously and returns NDIS_STATUS_PENDING, the driver must complete the request later with a call to <A HREF="103ndisx_4ktu.htm"><B>NdisMQueryInformationComplete</B></A>. Until it completes any such request, the miniport driver can safely access the memory at <I>InformationBuffer</I>, <I>BytesWritten</I>, and <I>BytesNeeded</I>. After the miniport driver completes any query, ownership of these variables and the buffer reverts to NDIS or the caller of <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, whichever allocated the memory. </P>

<P>After a call to <I>MiniportQueryInformation</I>, NDIS submits no other requests to the driver until it has completed the current request, either synchronously or asynchronously. Instead, NDIS holds requests queued until the current query is completed. </P>

<P><I>MiniportQueryInformation</I> can be preempted by an interrupt.</P>

<P><I>MiniportQueryInformation</I> runs at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="103ndisx_4ktu.htm"><B>NdisMQueryInformationComplete</B></A>, <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportQueryInformation"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
