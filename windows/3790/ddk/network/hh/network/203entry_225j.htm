<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Allocating an Adapter-Specific Context Area</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Allocating an Adapter-Specific Context Area">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_allocating_an_adapter_specific_context_area_ng"></A>Allocating an Adapter-Specific Context Area</H3>

<P>From its <I>MiniportInitialize</I> function, a miniport driver typically allocates memory for a driver-internal structure in which it stores adapter-specific context such as the following:

<UL>
	<LI>The miniport driver adapter handle provided by NDIS to <I>MiniportInitialize</I></LI>

	<LI>The configuration information derived from calling <A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A> </LI>

	<LI>Any other state information the miniport driver requires</LI>
</UL>

<P>For instance, a driver that allocates a staging buffer for received data in its <I>MiniportInitialize</I> function could attach the buffer to this structure. If the driver queues sends, the listhead for this queue could be part of this structure.</P>

<P>A miniport driver calls <A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A> to allocate storage for such a structure. The miniport driver calls <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A> to clear this storage before initializing it. The miniport driver subsequently passes a pointer to this structure to <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>. NDIS retains the pointer to this adapter-specific context and passes it to the miniport driver’s <I>MiniportXxx</I> functions—for example, to <I>MiniportSend</I>, <I>MiniportISR</I>, and <I>MiniportHandleInterrupt</I>. A miniport driver uses the adapter-specific context to maintain whatever adapter-specific run-time state it requires to process sends, receives, and requests.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Allocating%20an%20Adapter-Specific%20Context%20Area"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
