<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportHalt</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportHalt">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniporthalt_nr"></A>MiniportHalt</H1>

<P>The <I>MiniportHalt</I> function is a required function that deallocates resources when the NIC is removed and halts the NIC.</P>

<PRE class=syntax><B>VOID</B> <B>
</B>  <B>MiniportHalt(
    IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P><I>MiniportHalt</I> should stop the NIC, if it controls a physical NIC, and must free all resources that the driver allocated for its NIC before <I>MiniportHalt</I> returns control. In effect, <I>MiniportHalt</I> undoes everything that was done by <I>MiniportInitialize</I> for a particular NIC. </P>

<P>If the NIC driver allocated memory, claimed an I/O port range, mapped on-board device memory to host memory, initialized timer(s) and/or spin lock(s), allocated map registers or claimed a DMA channel, and registered an interrupt, that driver must call the reciprocals of the <B>Ndis</B><I>Xxx</I> functions with which it originally allocated these resources. </P>

<P>As a general rule, a <I>MiniportHalt</I> function should call reciprocal <B>Ndis</B><I>Xxx</I> functions in inverse order to the calls the driver made from <I>MiniportInitialize</I>. That is, if a NIC driver’s <I>MiniportInitialize</I> function called <A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A> just before it returned control, its <I>MiniportHalt</I> function would call <A HREF="103ndisx_7q7m.htm"><B>NdisMDeregisterAdapterShutdownHandler</B></A> first. </P>

<P>If its NIC generates interrupts, a NIC driver’s <I>MiniportHalt</I> function can be preempted by the driver’s <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> or <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A> function until <I>MiniportHalt</I>’s call to <A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A> returns. Such a driver’s <I>MiniportHalt</I> function usually disables interrupts on the NIC, and calls <B>NdisMDeregisterInterrupt</B> as soon as it can. Note that a miniport driver can keep getting interrupts until <B>NdisMDeregisterInterrupt</B> returns.</P>

<P>If the driver has a <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function associated with any timer object that might be in the system timer queue, <I>MiniportHalt</I> should call <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A>. If <B>NdisMCancelTimer</B> fails, the timer could have already fired. In this case, the driver should wait for the timer handler to complete before returning from <I>MiniportHalt</I>.</P>

<P>Otherwise, it is unnecessary for the miniport driver to complete outstanding requests to its NIC before <I>MiniportHalt</I> begins releasing allocated resources. NDIS submits no further requests to the miniport driver for the NIC designated by the <I>MiniportAdapterContext</I> handle when NDIS has called <I>MiniportHalt</I>. </P>

<P>If the miniport driver has any outstanding receive packets (packets that it has indicated up to NDIS but which NDIS has not yet returned), the miniport driver must not return from its <I>MiniportHalt</I> function until such packets are returned to the miniport driver’s <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function.</P>

<P>An NDIS intermediate driver's call to <A HREF="103ndisx_1q7m.htm"><B>NdisIMDeinitializeDeviceInstance</B></A> causes a call to its <I>MiniportHalt</I> function. </P>

<P><I>MiniportHalt</I> runs at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A>, <A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A>, <A HREF="103ndisx_6sc2.htm"><B>NdisFreeMemory</B></A>, <A HREF="103ndisx_4pv6.htm"><B>NdisFreeSpinLock</B></A>, <A HREF="103ndisx_1q7m.htm"><B>NdisIMDeinitializeDeviceInstance</B></A>, <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A>, <A HREF="103ndisx_7q7m.htm"><B>NdisMDeregisterAdapterShutdownHandler</B></A>, <A HREF="103ndisx_3nqq.htm"><B>NdisMDeregisterDmaChannel</B></A>, <A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A>, <A HREF="103ndisx_7ape.htm"><B>NdisMDeregisterIoPortRange</B></A>, <A HREF="103ndisx_1l6a.htm"><B>NdisMFreeMapRegisters</B></A>, <A HREF="103ndisx_9fjm.htm"><B>NdisMFreeSharedMemory</B></A>, <A HREF="103ndisx_5mcy.htm"><B>NdisMUnmapIoSpace</B></A>, <A HREF="104tdlow_1l6a.htm"><I>ProtocolUnbindAdapter</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportHalt"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
