<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS MUX Intermediate Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS MUX Intermediate Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_ndis_mux_intermediate_drivers_ng"></A>NDIS MUX Intermediate Drivers</H2>

<P>The number of virtual miniports exposed by a MUX intermediate driver can be different than the number of lower physical adapters that are bound to the driver. A MUX intermediate driver exposes virtual miniports in a one-to-n, n-to-one, or even an m-to-n relationship with underlying adapters. This results in complicated internal bindings and data paths.</P>

<P>In a one-to-n configuration, a single MUX intermediate driver can bind to many physical adapters below. Transport drivers bind to the virtual miniport of the MUX intermediate driver in the same way that they bind to nonvirtual miniports. The MUX intermediate driver repackages and passes down all requests and send packets that are submitted to the intermediate driver for a specific connection. A Load Balancing Fail Over (LBFO) driver is an example of this type of MUX intermediate driver. (For more information about LBFO solutions, see <A HREF="210lbfo_8z8n.htm">Load Balancing and Fail Over</A>.) </P>

<P>The following figure illustrates a one-to-n MUX intermediate driver configuration:</P>

<P><IMG SRC="images/1tonmux.gif" ALT="" BORDER=0></P>

<P><B>NDIS One-to-N MUX Intermediate Driver Configuration</B></P>

<P>In an n-to-one configuration, a MUX intermediate driver can expose many virtual miniports for a single physical adapter below. Overlying protocols bind to these virtual miniports of the MUX intermediate driver in the same way that they bind to nonvirtual miniports. The MUX intermediate driver handles requests and sends that are submitted to the driver for specific connections at each virtual miniport. The driver repackages and transfers these requests and sends down to the NDIS miniport driver for the bound physical adapter.</P>

<P>The following figure illustrates an n-to-one MUX intermediate driver configuration:</P>

<P><IMG SRC="images/nto1mux.gif" ALT="" BORDER=0></P>

<P><B>NDIS N-to-One MUX Intermediate Driver Configuration</B></P>

<P>MUX intermediate drivers require a notify object DLL. When a MUX intermediate driver is initialized, its bindings are determined by the configuration established by it's notify object DLL. For more information about installing MUX intermediate drivers, see <A HREF="301int_67l3.htm">MUX Intermediate Driver Installation</A>.</P>

<P>The following are examples of n-to-one MUX intermediate drivers:

<UL>
	<LI>Windows ATM LAN Emulation is an intermediate driver that emulates Ethernet over an ATM network. This driver is similar in structure to the MUX sample. This driver is included in Windows&nbsp;2000 and later versions of the operating system.</LI>

	<LI>802 and proprietary virtual LANs are technologies that could be implemented as intermediate drivers similar to the MUX sample. </LI>

	<LI>The MUX Intermediate Driver Sample is an n-to-one MUX intermediate driver. MUX creates multiple virtual miniports layered above a single underlying miniport. </LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS%20MUX%20Intermediate%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
