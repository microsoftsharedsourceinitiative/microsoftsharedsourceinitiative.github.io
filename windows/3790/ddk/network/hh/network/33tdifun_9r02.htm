<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiProviderReady</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiProviderReady">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdiproviderready_nr"></A>TdiProviderReady</H1>

<P>The <B>TdiProviderReady</B> function notifies TDI clients that a particular transport has established bindings to one or more underlying NICs and is now available to send and receive data over the network. </P>

<PRE class=syntax><B>NTSTATUS</B>
  <B>TdiProviderReady(
</B>    <B>IN HANDLE</B>  <I>ProviderHandle</I>
    <B>);</B></PRE>

<H4>Parameter</H4>

<DL>
<DT><I>ProviderHandle</I></DT>

<DD>Specifies the handle that the transport obtained from <B>TdiRegisterProvider</B>. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>TdiProviderReady</B> returns STATUS_SUCCESS when it has notified all currently bound clients of the transport's readiness to transfer data over the network. Otherwise, it can return STATUS_INSUFFICIENT_RESOURCES. (Because the availability of system resources is dynamic, a subsequent call from the same transport can succeed.) </P>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>A TDI transport calls <B>TdiProviderReady</B> after all of the following operations are complete:

<UL>
	<LI>The <I>ProtocolBindAdapter</I> function of the lowest driver in the transport stack (or of the monolithic transport) has successfully established a binding to one or more underlying NDIS miniport drivers, so these miniport drivers' NICs are initialized and capable of transferring data over the network.</LI>

	<LI>NDIS has called the <I>ProtocolPnPEvent</I> function at the bottom of the transport stack with an input NET_PNP_EVENT of type <B>NetEventBindsComplete</B>. </LI>

	<LI>Any intermediate drivers in the transport stack have allocated and initialized whatever state they need to track network transfers on these newly established transport-to-NIC bindings. </LI>

	<LI>The TDI transport driver also has allocated and initialized whatever state it needs to track its clients' network transfers on these newly established transport-to-NIC bindings. For example, the transport has called <B>TdiRegisterDeviceObject</B> one or more times with the name of the device object that it created to represent the target of its clients' network I/O operations on each such binding. The transport also might have called <B>TdiRegisterNetAddress</B> one or more times on its just established bindings. </LI>
</UL>

<P>The transport's call to <B>TdiProviderReady</B> accomplishes one or both of the following:

<UL>
	<LI>TDI calls the registered ClientPnPBindingChange routines of this transport's clients with the input <I>PnPOpcode</I> value TDI_PNP_OP_PROVIDERREADY, thereby notifying its clients that the underlying transport stack is ready to send and/or receive data over the network through this newly established transport-to-NIC binding. </LI>

	<LI>TDI calls the registered ClientPnPBindingChange routines of every transports' clients if this is the last possible transport-to-NIC binding to be established and the last possible transport-ready indication given to TDI, according to the network configuration information stored in the registry on this machine. In effect, TDI notifies all registered clients when system initialization-time binding operations are done by calling each registered ClientPnPBindingChange routine with a NULL <I>DeviceName</I> pointer and the <I>PnPOpcode</I> value TDI_PNP_OP_NETREADY. </LI>
</UL>

<P>For more information about how to create device objects with <A HREF="JavaScript:hhobj_1.Click()"><B>IoCreateDevice</B></A>. </P>

<P>Callers of <B>TdiProviderReader</B> must be running at IRQL &lt; DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="35tdicli_3k36.htm"><B>ClientPnPBindingChange</B></A>, <A HREF="104tdlow_2bqq.htm"><B>ProtocolBindAdapter</B></A>, <A HREF="33tdifun_2d0y.htm"><B>TdiRegisterDeviceObject</B></A>, <A HREF="33tdifun_6uia.htm"><B>TdiRegisterNetAddress</B></A>, <A HREF="33tdifun_99te.htm"><B>TdiRegisterProvider</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiProviderReady"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
