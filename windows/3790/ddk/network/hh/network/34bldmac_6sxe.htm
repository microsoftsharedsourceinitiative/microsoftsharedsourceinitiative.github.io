<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiBuildSetEventHandler</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiBuildSetEventHandler">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdibuildseteventhandler_nr"></A>TdiBuildSetEventHandler</H1>

<P><B>TdiBuildSetEventHandler</B> sets up an internal device control IRP for a TDI_SET_EVENT_HANDLER request to the underlying transport in which the local-node client has already opened a file object representing an address.</P>

<PRE class=syntax><B>VOID 
</B>  <B>TdiBuildSetEventHandler(
</B>    <B>IN PIRP</B>  <I>Irp</I><B>,
</B>    <B>IN PDEVICE_OBJECT</B>  <I>DevObj</I><B>,
</B>    <B>IN PFILE_OBJECT</B>  <I>FileObj</I><B>,
</B>    <B>IN PVOID</B>  <I>CompRoutine</I><B>,
</B>    <B>IN PVOID</B>  <I>Contxt</I><B>,
</B>    <B>IN LONG</B>  <I>InEventType</I><B>,
</B>    <B>IN PVOID</B>  <I>InEventHandler</I><B>,
</B>    <B>IN PVOID</B>  <I>InEventContext
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Pointer to a client-supplied IRP, either originating in a higher level network component or, more commonly, allocated with <B>TdiBuildInternalDeviceControlIrp</B>. </DD>

<DT><I>DevObj</I></DT>

<DD>Pointer to the device object created by the underlying TDI transport driver.</DD>

<DT><I>FileObj</I></DT>

<DD>Pointer to a file object representing an address. </DD>

<DT><I>CompRoutine</I></DT>

<DD>Specifies the entry point of a client-supplied IoCompletion routine or NULL. The I/O Manager calls this routine when the given IRP is completed, unless the client sets this parameter to NULL. </DD>

<DT><I>Contxt</I></DT>

<DD>Pointer to a client-determined context. This client-supplied pointer is passed in to the IoCompletion routine when it is called with the completed IRP. <I>Contxt</I> is NULL if <I>CompRoutine</I> is NULL.</DD>

<DT><I>InEventType</I></DT>

<DD>Specifies the type of event handler being registered as one of the following:

<DL>
<DT>TDI_EVENT_CONNECT</DT>

<DD>Register the given <A HREF="35tdicli_56r6.htm">ClientEventConnect</A> handler to be called when an endpoint-to-endpoint connection is offered by a remote-node peer. </DD>

<DT>TDI_EVENT_DISCONNECT</DT>

<DD>Register the given <A HREF="35tdicli_2rg2.htm">ClientEventDisconnect</A> handler to be called when an established endpoint-to-endpoint connection is being closed by the remote-node peer. </DD>

<DT>TDI_EVENT_RECEIVE</DT>

<DD>Register the given <A HREF="35tdicli_7yeq.htm">ClientEventReceive</A> handler to be called when a normal receive comes in on an endpoint-to-endpoint connection from the remote node and the client will be given the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE</DT>

<DD>Register the given <A HREF="35tdicli_4qnm.htm">ClientEventChainedReceive</A> handler to be called when a normal receive comes in on an endpoint-to-endpoint connection from the remote node and the client will be given read-only access to the buffered full TSDU until it calls <B>TdiReturnChainedReceives</B>. </DD>

<DT>TDI_EVENT_RECEIVE_EXPEDITED</DT>

<DD>Register the given <A HREF="35tdicli_7jea.htm">ClientEventReceiveExpedited</A> handler to be called when an expedited receive comes in on an endpoint-to-endpoint connection from the remote node and the client will be given the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE_EXPEDITED</DT>

<DD>Register the given <A HREF="35tdicli_57n6.htm">ClientEventChainedReceiveExpedited</A> handler to be called when an expedited receive comes in on an endpoint-to-endpoint connection from the remote node and the client will be given read-only access to the buffered full TSDU until it calls <B>TdiReturnChainedReceives</B>. </DD>

<DT>TDI_EVENT_RECEIVE_DATAGRAM</DT>

<DD>Register the given <A HREF="35tdicli_82nm.htm">ClientEventReceiveDatagram</A> handler to be called when a datagram comes in from a remote node and the client will be given the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE_DATAGRAM</DT>

<DD>Register the given <A HREF="35tdicli_0jci.htm">ClientEventChainedReceiveDatagram</A> handler to be called when a datagram comes in from a remote node and the client will be given read-only access to the buffered full TSDU until it calls <B>TdiReturnChainedReceives</B>. </DD>

<DT>TDI_EVENT_SEND_POSSIBLE</DT>

<DD>Register the given <A HREF="35tdicli_1wc2.htm">ClientEventSendPossible</A> handler to be called when the underlying transport, which previously returned a submitted send request with STATUS_DEVICE_NOT_READY, again has internal buffer space available into which it can copy the resubmitted client-supplied data to be sent. </DD>

<DT>TDI_EVENT_ERROR</DT>

<DD>Register the given <A HREF="35tdicli_98tu.htm">ClientEventError</A> handler to be called if an error occurs in an underlying driver such that network I/O on this local-node address has become unreliable or impossible. </DD>

<DT>TDI_EVENT_ERROR_EX</DT>

<DD>Register the given <A HREF="35tdicli_0quq.htm">ClientEventErrorEx</A> handler to be called if an error occurs such that network I/O on this local-node address has become unreliable or impossible. If it supports these indications, the underlying transport supplies additional buffered information about such an error to ClientEventErrorEx than to ClientEventError. </DD>
</DL>


<P>In addition to the preceding system-defined events, a transport can extend this interface to support transport-specific notifications of events to its clients. Such a transport must define TDI_EVENT_<I>XXX</I> codes in which the most significant bit is set. 
</DD>

<DT><I>InEventHandler</I></DT>

<DD>Specifies the entry point of the ClientEvent<I>Xxx</I> handler being registered. The client can set this parameter to NULL to disable notifications to a previously registered event handler. </DD>

<DT><I>InEventContext</I></DT>

<DD>Pointer to caller-determined context to be passed in to the ClientEvent<I>Xxx</I> routine when it is called by the transport. This parameter must be NULL if <I>InEventHandler</I> is NULL. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>When its client first opens a file object that represents an address, the underlying transport initializes all event handlers to NULL.</P>

<P><B>TdiBuildSetEventHandler</B> sets IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B> and TDI_SET_EVENT_HANDLER as the <B>MinorFunction</B> codes in the transport's I/O stack location of the given IRP.</P>

<P>With each IRP set up by <B>TdiBuildSetEventHandler</B> and submitted to the underlying transport with <B>IoCallDriver</B>, the client registers one event handler for a given event type that can occur on a particular transport address. Indications from lower level NDIS drivers that are forwarded by the transport to ClientEvent<I>Xxx</I> routines usually occur at IRQL = DISPATCH_LEVEL. For these client-supplied event handlers, the caller should allocate the area at <I>InEventContext</I> from nonpaged pool. </P>

<P>A client can register its ClientEvent(Chained)ReceiveDatagram and ClientEventError(Ex) handlers as soon as it has opened a file object representing an address with a successful call to <B>ZwCreateFile</B>. It can register its ClientEventConnect handler as soon as it has opened file objects representing an address and a connection endpoint and made a successful associate-address request to the underlying transport. </P>

<P>For some <I>InEventType</I> values, the address represented by the given file object should be associated with a connection endpoint by the client before it registers certain ClientEvent<I>Xxx</I> handlers. In particular, a client should associate a connection endpoint with a local-node address before it registers its ClientEvent(Chained)Receive(Expedited), ClientEventDisconnect, and/or ClientEventSendPossible handlers for network transfers that are made on a connection-specific basis. Unless its transport supports delayed-connection acceptances, the client should assume that an endpoint-to-endpoint connection, already associated with the open file object representing the address, is active when it makes the set-event-handler request to register any of these event handlers. </P>

<P>Only clients of transports that buffer send data internally can register a ClientEventSendPossible handler. </P>

<P>In general, a TDI transport can indicate an event to a client while an event of the same kind is in progress. In other words, ClientEventXxx handlers are re-entrant. The transport also can call ClientEvent(Chained)Receive(Expedited) or ClientEvent(Chained)Receive(Datagram) before the client's set-event-handler IRP to register one of these routines is fully completed. Consequently, the client must be prepared to handle receives as soon as it requests the registration of a ClientEvent(Chained)Receive(<I>Xxx</I>) handler. </P>

<P>Calls to registered ClientEvent(Chained)Receive(<I>Xxx</I>) handlers are disabled whenever the client submits a receive or receive-datagram IRP set up with <B>TdiBuildReceive</B> or <B>TdiBuildReceiveDatagram</B> to the underlying transport. After it is called with such an IRP, the underlying transport carries out all operations necessary to complete that IRP before it resumes calling registered ClientEvent(Chained)Receive(<I>Xxx</I>) routine(s) with incoming receive indications. </P>

<P>A client can disable any registered event handler by making another set-event-handler request with the same <I>InEventType</I> but specifying NULL as the <I>InEventHandler</I> and <I>InEventContext</I> parameters to <B>TdiBuildSetEventHandler</B>. </P>

<P>To register its ClientPnP<I>Xxx</I> handlers for Plug-and-Play and power-state-change notifications, a client calls <B>TdiRegisterPnPHandlers</B> rather than <B>TdiBuildSetEventHandler</B> followed by <B>IoCallDriver</B>. </P>

<H4>See Also</H4>

<P><A HREF="35tdicli_56r6.htm"><B>ClientEventConnect</B></A>, <A HREF="35tdicli_4qnm.htm"><B>ClientEventChainedReceive</B></A>, <A HREF="35tdicli_0jci.htm"><B>ClientEventChainedReceiveDatagram</B></A>, <A HREF="35tdicli_57n6.htm"><B>ClientEventChainedReceiveExpedited</B></A>, <A HREF="35tdicli_2rg2.htm"><B>ClientEventDisconnect</B></A>, <A HREF="35tdicli_98tu.htm"><B>ClientEventError</B></A>, <A HREF="35tdicli_0quq.htm"><B>ClientEventErrorEx</B></A>, <A HREF="35tdicli_7yeq.htm"><B>ClientEventReceive</B></A>, <A HREF="35tdicli_82nm.htm"><B>ClientEventReceiveDatagram</B></A>, <A HREF="35tdicli_7jea.htm"><B>ClientEventReceiveExpedited</B></A>, <A HREF="35tdicli_1wc2.htm"><B>ClientEventSendPossible</B></A>, <A HREF="34bldmac_2voy.htm"><B>TdiBuildAccept</B></A>, <A HREF="34bldmac_72ia.htm"><B>TdiBuildAssociateAddress</B></A>, <A HREF="34bldmac_99pu.htm"><B>TdiBuildConnect</B></A>, <A HREF="34bldmac_4eeq.htm"><B>TdiBuildDisconnect</B></A>, <A HREF="34bldmac_6cc2.htm"><B>TdiBuildListen</B></A>, <A HREF="34bldmac_8df6.htm"><B>TdiBuildInternalDeviceControlIrp</B></A>, <A HREF="34bldmac_21de.htm"><B>TdiBuildReceive</B></A>, <A HREF="34bldmac_0aya.htm"><B>TdiBuildReceiveDatagram</B></A>, <A HREF="33tdifun_5boy.htm"><B>TdiRegisterPnPHandlers</B></A>, <A HREF="32ioctl_4hde.htm"><B>TDI_SET_EVENT_HANDLER</B></A>, <A HREF="33tdifun_67aq.htm"><B>TdiReturnChainedReceives</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiBuildSetEventHandler"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
