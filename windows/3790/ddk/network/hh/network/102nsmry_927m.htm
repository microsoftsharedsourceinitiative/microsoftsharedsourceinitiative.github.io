<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS Library Functions Used by Protocol Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS Library Functions Used by Protocol Drivers">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_summary_of_kernel_mode_support_routines_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_library_functions_used_by_protocol_drivers_nr"></A>NDIS Library Functions Used by Protocol Drivers</H1>

<P>In addition to the <B>Ndis</B><I>Xxx</I> listed here, highest-level NDIS protocol drivers that are Windows®&nbsp;2000 and later transport protocols call the <B>Tdi</B><I>Xxx</I> functions described later. 

<DL>
<DT><A HREF="103ndisx_9r3m.htm"><B>NdisAcquireReadWriteLock</B></A></DT>

<DD>Acquires a lock that the caller uses for either write or read access to the resources that are shared among driver threads.</DD>

<DT><A HREF="103ndisx_896a.htm"><B>NdisAcquireSpinLock</B></A> </DT>

<DD>Acquires a spin lock so the caller can synchronize access to resources shared among nonISR driver routines in a multiprocessor-safe way. </DD>

<DT><A HREF="103ndisx_2pki.htm"><B>NdisAdjustBufferLength</B></A> </DT>

<DD>Modifies the length specified in a given buffer descriptor that was allocated or copied by the caller. </DD>

<DT><A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A> </DT>

<DD>Creates a buffer descriptor describing a specified virtual (sub)range within an already allocated, nonpaged memory block, given a handle returned by <B>NdisAllocateBufferPool</B> or <B>NdisAllocateMemoryWithTag</B>. </DD>

<DT><A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A> </DT>

<DD>Returns a handle with which the caller can allocate buffer descriptors with <B>NdisAllocateBuffer</B>. </DD>

<DT><A HREF="103ndisx_08he.htm"><B>NdisAllocateFromBlockPool</B></A></DT>

<DD>Allocates memory from a block of memory pool.</DD>

<DT><A HREF="103ndisx_72wi.htm"><B>NdisAllocateFromNPagedLookasideList</B></A></DT>

<DD>Removes the first entry from the given lookaside list head. If the lookaside list currently is empty, an entry is allocated from nonpaged pool.</DD>

<DT><A HREF="103ndisx_9xwy.htm"><B>NdisAllocateMemory</B></A> </DT>

<DD>This function is obsolete. Use <B>NdisAllocateMemoryWithTag</B>. </DD>

<DT><A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A></DT>

<DD>Allocates resident (nonpaged) system-space memory.</DD>

<DT><A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A> </DT>

<DD>Allocates a packet descriptor, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A> </DT>

<DD>Allocates and initializes a block of nonpaged packet pool, given the number of packet descriptors and how many bytes each fixed-size packet descriptor should contain. </DD>

<DT><A HREF="103ndisx_390y.htm"><B>NdisAllocatePacketPoolEx</B></A></DT>

<DD>Allocates and initializes a block of storage for a pool of packet descriptors.</DD>

<DT><A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A> </DT>

<DD>Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to data shared among driver routines. An initialized spin lock, for which the caller supplies resident storage, is a required parameter to the <B>Ndis..SpinLock</B> and <B>NdisInterlocked</B><I>Xxx</I> functions. </DD>

<DT><A HREF="103ndisx_6ynm.htm"><B>NdisAnsiStringToUnicodeString</B></A> </DT>

<DD>Converts a given counted ANSI string into a counted Unicode string. </DD>

<DT><A HREF="103ndisx_0bn6.htm"><B>NdisBufferLength</B></A></DT>

<DD>Returns the length in bytes of a given mapped buffer.</DD>

<DT><A HREF="103ndisx_61v6.htm">NDIS_BUFFER_LINKAGE</A> </DT>

<DD>Returns a pointer to a linked buffer, given a pointer to an NDIS buffer descriptor.</DD>

<DT><A HREF="103ndisx_62uq.htm"><B>NdisBufferVirtualAddress</B></A></DT>

<DD>Returns the base virtual address for the buffer mapped by a given buffer descriptor. It maps the physical pages described by the given buffer descriptor onto system space, if they are not already mapped to system space. Drivers should call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>. NDIS 5.1 miniport drivers must call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>.</DD>

<DT><A HREF="103ndisx_0pki.htm"><B>NdisBufferVirtualAddressSafe</B></A></DT>

<DD><B>NdisBufferVirtualAddressSafe</B> is the safe version of <B>NdisBufferVirtualAddress</B>. Unlike <B>NdisBufferVirtualAddress</B>, <B>NdisBufferVirtualAddressSafe</B> will not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>.</DD>

<DT><A HREF="103ndisx_3r76.htm"><B>NdisCancelTimer</B></A> </DT>

<DD>Cancels the immediately preceding call to <A HREF="103ndisx_8wdu.htm"><B>NdisSetTimer</B></A> if the interval given to <B>NdisSetTimer</B> has not yet expired.</DD>

<DT><A HREF="103ndisx_990y.htm"><B>NdisChainBufferAtBack</B></A> </DT>

<DD>Links a given buffer descriptor at the end of the chain of buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_3c36.htm"><B>NdisChainBufferAtFront</B></A> </DT>

<DD>Links a given buffer descriptor at the start of the chain of buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_5fua.htm"><B>NdisClAddParty</B></A> </DT>

<DD>Adds a party on a connection-oriented client's multipoint virtual circuit (VC). </DD>

<DT><A HREF="103ndisx_108i.htm"><B>NdisClCloseAddressFamily</B></A> </DT>

<DD>Releases the association between a connection-oriented client and a call manager's registered address family for a particular NIC to which the client is bound. </DD>

<DT><A HREF="103ndisx_7rsi.htm"><B>NdisClCloseCall</B></A> </DT>

<DD>Requests that a connection-oriented client's call be torn down. </DD>

<DT><A HREF="103ndisx_8lwy.htm"><B>NdisClDeregisterSap</B></A> </DT>

<DD>Releases a connection-oriented client's registered SAP on which it could receive offers of incoming calls. </DD>

<DT><A HREF="103ndisx_2tf6.htm"><B>NdisClDropParty</B></A> </DT>

<DD>Removes a party from a connection-oriented client's multipoint VC. </DD>

<DT><A HREF="103ndisx_9jw2.htm"><B>NdisClGetProtocolVcContextFromTapiCallId</B></A> </DT>

<DD>Retrieves the client context for a virtual connection (VC) identified by a TAPI Call ID string. </DD>

<DT><A HREF="103ndisx_3n5e.htm"><B>NdisClIncomingCallComplete</B></A> </DT>

<DD>Returns a connection-oriented client's acceptance or rejection of an offered incoming call for which the client previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_7mr6.htm"><B>NdisClMakeCall</B></A> </DT>

<DD>Sets up an <I>outgoing</I> call on a VC created by a connection-oriented client.</DD>

<DT><A HREF="103ndisx_7jhu.htm"><B>NdisClModifyCallQoS</B></A> </DT>

<DD>Requests a client-initiated change in the quality of service on an active VC. </DD>

<DT><A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A> </DT>

<DD>Registers a set of client-supplied functions for connection-oriented communications through a NIC to which the client is bound, using the specified address family registered by a particular call manager. </DD>

<DT><A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A> </DT>

<DD>Releases the binding set up with <B>NdisOpenAdapter</B>, given the binding handle that it previously returned. </DD>

<DT><A HREF="103ndisx_54ky.htm"><B>NdisCloseConfiguration</B></A> </DT>

<DD>Releases the handle returned by <B>NdisOpenProtocolConfiguration</B> after the caller has retrieved configuration information and/or, possibly, stored additional information about itself in the registry.</DD>

<DT><A HREF="103ndisx_22nm.htm"><B>NdisClRegisterSap</B></A> </DT>

<DD>Registers a SAP on which a connection-oriented client can receive incoming calls from a remote node. </DD>

<DT><A HREF="103ndisx_3zzm.htm"><B>NdisCmActivateVc</B></A> </DT>

<DD>Passes the call parameters, including media parameters, for a particular VC down to the underlying connection-oriented NIC driver so it can set up its NIC for transfers.</DD>

<DT><A HREF="103ndisx_2ynm.htm"><B>NdisCmAddPartyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to add a party on an active multipoint VC. </DD>

<DT><A HREF="103ndisx_2h9u.htm"><B>NdisCmCloseAddressFamilyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to close the CM's address family. </DD>

<DT><A HREF="103ndisx_18tu.htm"><B>NdisCmCloseCallComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to tear down a call.</DD>

<DT><A HREF="103ndisx_5g4y.htm"><B>NdisCmDeactivateVc</B></A> </DT>

<DD>Notifies NDIS and the underlying connection-oriented NIC driver to expect no further transfers on a particular VC. </DD>

<DT><A HREF="103ndisx_1pma.htm"><B>NdisCmDeregisterSapComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to release a previously registered SAP on which the client could receive incoming call notifications. </DD>

<DT><A HREF="103ndisx_9uk2.htm"><B>NdisCmDispatchCallConnected</B></A> </DT>

<DD>Notifies NDIS and the connection-oriented client that data transfers can begin on a VC that the call manager created for an <I>incoming</I> call initiated on a remote node. </DD>

<DT><A HREF="103ndisx_2v76.htm"><B>NdisCmDispatchIncomingCall</B></A> </DT>

<DD>Notifies the connection-oriented client of an incoming call offer on a SAP previously registered by that client with the call manager. </DD>

<DT><A HREF="103ndisx_98xe.htm"><B>NdisCmDispatchIncomingCallQoSChange</B></A> </DT>

<DD>Notifies the connection-oriented client that a request to change the quality of service on that client's active connection has been received over the network. </DD>

<DT><A HREF="103ndisx_5w8i.htm"><B>NdisCmDispatchIncomingCloseCall</B></A> </DT>

<DD>Tells a connection-oriented client to tear down an active or offered call, usually because the call manager has received a request from the network to close the connection. </DD>

<DT><A HREF="103ndisx_0xv6.htm"><B>NdisCmDispatchIncomingDropParty</B></A> </DT>

<DD>Notifies a connection-oriented client that it should remove a particular party on the given mulipoint VC, usually because the call manager has received a close-call request that was initiated at the remote node.</DD>

<DT><A HREF="103ndisx_7rsj.htm"><B>NdisCmDropPartyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to remove a party from an active multipoint VC.</DD>

<DT><A HREF="103ndisx_460i.htm"><B>NdisCmMakeCallComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to make an outgoing call. </DD>

<DT><A HREF="103ndisx_2zn6.htm"><B>NdisCmModifyCallQoSComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to change the quality of service on an active VC. </DD>

<DT><A HREF="103ndisx_1bw2.htm"><B>NdisCmOpenAddressFamilyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to open the CM's address family.</DD>

<DT><A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A> </DT>

<DD>Registers a set of call manager-supplied functions for connection-oriented communications using the specified address family and underlying NIC driver identified by the given <I>NdisBindingHandle</I>. </DD>

<DT><A HREF="103ndisx_4xgy.htm"><B>NdisCmRegisterSapComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the call manager previously returned NDIS_STATUS_PENDING, to register a SAP on which to receive offers of incoming calls from the network. </DD>

<DT><A HREF="103ndisx_6c8i.htm"><B>NdisCoAssignInstanceName</B></A></DT>

<DD>Assigns an instance name to a VC and causes NDIS to register a GUID (globally unique identifier) for the assigned name with Windows Management Instrumentation (WMI).</DD>

<DT><A HREF="103ndisx_3qia.htm"><B>NdisCoCreateVc</B></A> </DT>

<DD>Sets up a connection-oriented endpoint (virtual circuit) from which a client can make outgoing calls or on which a call manager can dispatch incoming calls. </DD>

<DT><A HREF="103ndisx_920i.htm"><B>NdisCoDeleteVc</B></A> </DT>

<DD>Destroys a caller-created VC.</DD>

<DT><A HREF="103ndisx_1aia.htm"><B>NdisCoGetTapiCallId</B></A> </DT>

<DD>Retrieves a string that TAPI applications can use to identify a particular NDIS virtual connection (VC). </DD>

<DT><A HREF="103ndisx_0vaq.htm"><B>NdisCompletePnPEvent</B></A></DT>

<DD>Completes a protocol's response to a Plug and Play or Power Management event for which the protocol's PnPEventHandler function previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_2vzm.htm"><B>NdisConvertStringToAtmAddress</B></A></DT>

<DD>Converts a Unicode string that contains an ATM address into a ATM_ADDRESS structure that a connection-oriented client can include in a set of call parameters.</DD>

<DT><A HREF="103ndisx_9hf6.htm"><B>NdisCopyLookaheadData</B></A></DT>

<DD>Safely copies receive data indicated in a lookahead buffer to the transport protocol by the underlying NDIS driver.</DD>

<DT><A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A> </DT>

<DD>Issues an OID_GEN_CO_<I>XXX</I> or medium-specific OID_<I>XXX</I> request from a client to a call manager or vice versa and/or from either protocol to the underlying connection-oriented NIC miniport driver to which both are bound. </DD>

<DT><A HREF="103ndisx_93oy.htm"><B>NdisCoRequestComplete</B></A> </DT>

<DD>Returns the final status of an OID_GEN_CO_<I>XXX</I> request, for which the client or call manager previously returned NDIS_STATUS_PENDING, to the protocol that originally issued the request. </DD>

<DT><A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A> </DT>

<DD>Forwards a multipacket send on a particular VC to the underlying connection-oriented NIC miniport driver for transmission over the network. </DD>

<DT><A HREF="103ndisx_2w6q.htm"><B>NdisCompleteBindAdapter</B></A> </DT>

<DD>Completes a binding operation when the driver returned NDIS_STATUS_PENDING from its <I>ProtocolBindAdapter</I> function. </DD>

<DT><A HREF="103ndisx_7pma.htm"><B>NdisCompleteUnbindAdapter</B></A> </DT>

<DD>Completes a close-adapter operation when the driver returned NDIS_STATUS_PENDING from its <I>ProtocolUnbindAdapter</I> function. </DD>

<DT><A HREF="103ndisx_1n5e.htm"><B>NdisCopyBuffer</B></A> </DT>

<DD>Creates a buffer descriptor for a specified virtual (sub)range, given a handle for a block of already allocated memory and a pointer to the memory descriptor for the block.</DD>

<DT><A HREF="103ndisx_2ak2.htm"><B>NdisCopyFromPacketToPacket</B></A> </DT>

<DD>Copies a specified number of bytes of data from one packet to another, starting at a specified offset in a given source packets data and copying the data to a specified offset in the target packet. Returns the number of bytes actually copied, which can be less than the requested number, depending on the source packet and specified starting offset for the copy operation. </DD>

<DT><A HREF="103ndisx_59iq.htm"><B>NdisCreateBlockPool</B></A></DT>

<DD>Returns the handle to a block of memory pool.</DD>

<DT><A HREF="103ndisx_2fw2.htm"><B>NdisDeleteNPagedLookasideList</B></A></DT>

<DD>Removes a nonpaged lookaside list from the system.</DD>

<DT><A HREF="103ndisx_9ucy.htm"><B>NdisDeregisterProtocol</B></A> </DT>

<DD>Releases the resources allocated when the driver called <B>NdisRegisterProtocol</B>, given the protocol handle it returned at initialization. </DD>

<DT><A HREF="103ndisx_8b5e.htm"><B>NdisDestroyBlockPool</B></A></DT>

<DD>Releases resources for a block of memory pool.</DD>

<DT><A HREF="103ndisx_7otu.htm"><B>NdisDprAllocatePacket</B></A> </DT>

<DD>Allocates and initializes a packet descriptor when the caller is running at IRQL = DISPATCH_LEVEL, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_3zhu.htm"><B>NdisDprAllocatePacketNonInterlocked</B></A> </DT>

<DD>Allocates a packet descriptor when the caller is running at IRQL = DISPATCH_LEVEL and that caller provides internal synchronization for accessing packet pool, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_9ucz.htm"><B>NdisDprFreePacket</B></A> </DT>

<DD>Releases a driver-allocated packet descriptor and returns it to the free list when the caller is running at IRQL = DISPATCH_LEVEL. </DD>

<DT><A HREF="103ndisx_3f8y.htm"><B>NdisDprFreePacketNonInterlocked</B></A> </DT>

<DD>Releases a packet descriptor that was allocated with <B>NdisDprAllocatePacketNonInterlocked</B> and returns it to the free list. </DD>

<DT><A HREF="103ndisx_2dte.htm"><B>NdisEqualAnsiString</B></A></DT>

<DD>Compares two ANSI strings and returns whether they are equal.</DD>

<DT><A HREF="103ndisx_019u.htm"><B>NdisEqualMemory</B></A></DT>

<DD>Compares a specified number of characters in one block of memory with the same number of characters in a second block of memory.</DD>

<DT><A HREF="103ndisx_59ma.htm"><B>NdisEqualString</B></A> </DT>

<DD>Compares two strings to determine whether they are equal. </DD>

<DT><A HREF="103ndisx_1yb6.htm"><B>NdisEqualUnicodeString</B></A></DT>

<DD>Compares two Unicode strings and returns whether they are equal.</DD>

<DT><A HREF="103ndisx_6esy.htm"><B>NdisFillMemory</B></A></DT>

<DD>Fills a caller-supplied buffer with the given character.</DD>

<DT><A HREF="103ndisx_044y.htm"><B>NdisFreeBuffer</B></A> </DT>

<DD>Releases a buffer descriptor obtained in a preceding call to <B>NdisAllocateBuffer</B> or <B>NdisCopyBuffer</B>. </DD>

<DT><A HREF="103ndisx_0auq.htm"><B>NdisFreeBufferPool</B></A> </DT>

<DD>Releases a handle obtained in a preceding call to <B>NdisAllocateBufferPool</B>.</DD>

<DT><A HREF="103ndisx_6sc2.htm"><B>NdisFreeMemory</B></A> </DT>

<DD>Releases a handle that was obtained in a preceding call to <B>NdisAllocateMemoryWithTag</B>. </DD>

<DT><A HREF="103ndisx_47le.htm"><B>NdisFreePacket</B></A> </DT>

<DD>Releases a packet descriptor that was allocated from packet pool with <B>NdisAllocatePacket</B> and returns it to the free list.</DD>

<DT><A HREF="103ndisx_59f6.htm"><B>NdisFreePacketPool</B></A> </DT>

<DD>Releases a handle to a block of packet pool that was allocated with <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_4pv6.htm"><B>NdisFreeSpinLock</B></A> </DT>

<DD>Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock, </B>usually when a driver is unloading. </DD>

<DT><A HREF="103ndisx_20oi.htm"><B>NdisFreeString</B></A> </DT>

<DD>Frees the storage for a buffered string. </DD>

<DT><A HREF="103ndisx_7joy.htm"><B>NdisFreeToBlockPool</B></A></DT>

<DD>Releases memory back to a block of memory pool.</DD>

<DT><A HREF="103ndisx_0kc2.htm"><B>NdisFreeToNPagedLookasideList</B></A></DT>

<DD>Returns an entry to the given lookaside list.</DD>

<DT><A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A> </DT>

<DD>Returns the number of physical discontiguities in a buffer, given the buffer descriptor. </DD>

<DT><A HREF="103ndisx_5qpe.htm"><B>NdisGetCurrentProcessorCounts</B></A></DT>

<DD>Returns counts for the current processor that the driver can use to determine CPU utilization for a particular time interval.</DD>

<DT><A HREF="103ndisx_9g8i.htm"><B>NdisGetCurrentProcessorCpuUsage</B></A> </DT>

<DD>Returns how busy the current processor is as a percentage. </DD>

<DT><A HREF="103ndisx_6m42.htm"><B>NdisGetCurrentSystemTime</B></A> </DT>

<DD>Returns the current system time, suitable for use as a timestamp. </DD>

<DT><A HREF="103ndisx_6qcy.htm"><B>NdisGetDriverHandle</B></A> </DT>

<DD>Retrieves a handle to the NIC miniport driver that owns a bound adapter port, given a handle to the adapter port.</DD>

<DT><A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A> </DT>

<DD>Returns pointers to the buffer descriptor and base virtual address for the initial buffer chained to a given packet, along with the sizes of the initial buffer and full buffer, in case the buffer is fragmented. Drivers should call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>. NDIS 5.1 miniports must call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>.</DD>

<DT><A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A></DT>

<DD><B>NdisGetFirstBufferFromPacketSafe</B> is the safe version of <B>NdisGetFirstBufferFromPacket</B>. Unlike <B>NdisGetFirstBufferFromPacket</B>, <B>NdisGetFirstBufferFromPacketSafe</B> does not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>.</DD>

<DT><A HREF="103ndisx_2j5e.htm"><B>NdisGetNextBuffer</B></A> </DT>

<DD>Returns the next buffer descriptor in a chain, given the current buffer descriptor. </DD>

<DT><A HREF="103ndisx_7xma.htm">NDIS_GET_ORIGINAL_PACKET</A> </DT>

<DD>Returns a pointer to a packet descriptor that the lowest-level driver in a layered stack of NDIS drivers indicated. The calling driver should access the out-of-band (OOB) data block from this original packet rather than the packet that the driver below the calling driver indicated. If the calling driver is not part of a layered stack, the returned packet descriptor will be identical to the packet that the driver below the calling driver indicated. </DD>

<DT><A HREF="103ndisx_3k36.htm"><B>NdisGetPacketCancelId</B></A></DT>

<DD>Returns the cancellation identifier assigned to a packet.</DD>

<DT><A HREF="103ndisx_67si.htm"><B>NdisGetPacketFlags</B></A> </DT>

<DD>Returns the flags, if any, set by a higher-level protocol driver in a given packet. </DD>

<DT><A HREF="103ndisx_6oz6.htm">NDIS_GET_PACKET_HEADER_SIZE</A> </DT>

<DD>Returns the number of bytes in a received net packet header from the <B>HeaderSize</B> set in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a given packet descriptor by the indicating miniport driver.</DD>

<DT><A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A> </DT>

<DD>Returns a pointer to buffered out-of-band information, such as packet priority, and the number of bytes in the buffer from the <B>MediaSpecificInformation</B> and <B>SizeMediaSpecificInfo</B> set in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a given packet descriptor by the indicating miniport driver. </DD>

<DT><A HREF="103ndisx_3q0i.htm">NDIS_GET_PACKET_TIME_RECEIVED</A> </DT>

<DD>Returns the <B>TimeReceived</B> timestamp from the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with an indicated receive packet. </DD>

<DT><A HREF="103ndisx_11iq.htm">NDIS_GET_PACKET_TIME_SENT</A> </DT>

<DD>Returns the <B>TimeSent</B> timestamp from the associated <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with an indicated receive packet. </DD>

<DT><A HREF="103ndisx_4faq.htm"><B>NdisGetReceivedPacket</B></A> </DT>

<DD>Retrieves a packet that was received from the underlying driver. </DD>

<DT><A HREF="103ndisx_5jaq.htm"><B>NdisGetRoutineAddress</B></A></DT>

<DD>Returns the address of a routine given the routine's name. </DD>

<DT><A HREF="103ndisx_1p4i.htm"><B>NdisGetSystemUpTime</B></A></DT>

<DD>Returns the number of milliseconds that have elapsed since the system was booted.</DD>

<DT><A HREF="103ndisx_1gfm.htm"><B>NdisGetVersion</B></A></DT>

<DD>Returns the version number of NDIS.</DD>

<DT><A HREF="103ndisx_1q7m.htm"><B>NdisIMDeInitializeDeviceInstance</B></A></DT>

<DD>Calls an NDIS intermediate driver's <I>MiniportHalt</I> function to tear down the driver's virtual NIC.</DD>

<DT><A HREF="103ndisx_6y5u.htm"><B>NdisIMGetBindingContext</B></A></DT>

<DD>Allows an NDIS protocol to access the device context area, created by an underlying intermediate driver, for a virtual NIC to which the higher level protocol is bound.</DD>

<DT><A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A> </DT>

<DD>Calls an NDIS intermediate drivers <I>MiniportInitialize</I> function to set up the drivers virtual NIC for I/O operations bound for an underlying NIC driver to which the intermediate driver is bound. </DD>

<DT><A HREF="103ndisx_0jn6.htm"><B>NdisIMInitializeDeviceInstanceEx</B></A></DT>

<DD>Calls an NDIS intermediate drivers <I>MiniportInitialize</I> function to initialize the driver's virtual NIC and optionally to set up state information about the drivers virtual NIC for subsequently bound protocols. </DD>

<DT><A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A> </DT>

<DD>Registers an NDIS intermediate drivers Miniport<I>Xxx</I> entry points and name with the NDIS library when the driver initializes.</DD>

<DT><A HREF="103ndisx_2wvm.htm"><B>NdisInitAnsiString</B></A> </DT>

<DD>Initializes a counted ANSI string. </DD>

<DT><A HREF="103ndisx_1qia.htm">NDIS_INIT_FUNCTION</A> </DT>

<DD>Marks a given driver function as initialization-only code to be discarded after the function has run once. </DD>

<DT><A HREF="103ndisx_2rqq.htm"><B>NdisInitializeEvent</B></A> </DT>

<DD>Sets up an event object during driver initialization to be used subsequently as a synchronization mechanism. </DD>

<DT><A HREF="103ndisx_5r02.htm"><B>NdisInitializeListHead</B></A> </DT>

<DD>Sets up a queue header for a drivers internal queue, given a pointer to driver-supplied resident storage for the queue header and queue. Then, entries (usually packets) can be added to and removed from the doubly-linked queue with the <B>NdisInterlocked..List</B> functions. </DD>

<DT><A HREF="103ndisx_352q.htm"><B>NdisInitializeNPagedLookasideList</B></A></DT>

<DD>Initializes a lookaside list. After a successful initialization, nonpaged fixed-size blocks can be allocated from and freed to the lookaside list.</DD>

<DT><A HREF="103ndisx_2tiq.htm"><B>NdisInitializeReadWriteLock</B></A></DT>

<DD>Initializes a variable of type <B>NDIS_RW_LOCK</B>. An <B>NDIS_RW_LOCK</B> variable is used to limit write access to shared resources to one nonISR-driver thread at a time. This <B>NDIS_RW_LOCK</B> can allow multiple nonISR-driver threads concurrent read access to those resources. Such read access is not permitted during a write access. </DD>

<DT><A HREF="103ndisx_708i.htm"><B>NdisInitializeSListHead</B></A></DT>

<DD>Initializes the head of a sequenced, interlocked, singly linked list.</DD>

<DT><A HREF="103ndisx_9ieq.htm"><B>NdisInitializeString</B></A> </DT>

<DD>Allocates a buffer for and initializes a counted string in the system-default character set, given a source string and a NULL pointer. </DD>

<DT><A HREF="103ndisx_0oky.htm"><B>NdisInitializeTimer</B></A> </DT>

<DD>Initializes a timer object associated with a drivers timer function. </DD>

<DT><A HREF="103ndisx_581e.htm"><B>NdisInitUnicodeString</B></A> </DT>

<DD>Initializes a counted Unicode string. </DD>

<DT><A HREF="103ndisx_5jw2.htm"><B>NdisInitializeWorkItem</B></A></DT>

<DD>Initializes a work-queue item with a caller-supplied context and callback routine to be queued for execution when a system worker thread is given control.</DD>

<DT><A HREF="103ndisx_6xde.htm"><B>NdisInterlockedAddLargeStatistic</B></A></DT>

<DD>Adds a ULONG increment value to a LARGE_INTEGER addend value.</DD>

<DT><A HREF="103ndisx_76ya.htm"><B>NdisInterlockedAddUlong</B></A> </DT>

<DD>Adds an unsigned long value to a given unsigned integer as an atomic operation, using a caller-supplied and initialized spin lock.</DD>

<DT><A HREF="103ndisx_5f8y.htm"><B>NdisInterlockedDecrement</B></A></DT>

<DD>Decrements a caller supplied variable of type LONG as an atomic operation.</DD>

<DT><A HREF="103ndisx_7rhu.htm"><B>NdisInterlockedIncrement</B></A></DT>

<DD>Increments a caller supplied variable as an atomic operation. </DD>

<DT><A HREF="103ndisx_9pte.htm"><B>NdisInterlockedInsertHeadList</B></A> </DT>

<DD>Inserts an entry, usually a packet, at the head of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among driver functions. </DD>

<DT><A HREF="103ndisx_7j02.htm"><B>NdisInterlockedInsertTailList</B></A> </DT>

<DD>Inserts an entry, usually a packet, at the end of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among driver functions. </DD>

<DT><A HREF="103ndisx_5raq.htm"><B>NdisInterlockedPopEntrySList</B></A></DT>

<DD>removes the first entry from a sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_9b3m.htm"><B>NdisInterlockedPushEntrySList</B></A></DT>

<DD>Inserts an entry at the head of a sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_02cy.htm"><B>NdisInterlockedRemoveHeadList</B></A> </DT>

<DD>Removes an entry, usually a packet, from the head of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among driver functions. </DD>

<DT><A HREF="103ndisx_87le.htm"><B>NdisMoveMemory</B></A> </DT>

<DD>Copies a specified number of bytes from one caller-supplied location to another. </DD>

<DT><A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A> </DT>

<DD>Informs the NDIS library about significant features of an intermediate drivers virtual NIC and prevents NDIS from timing out sends and requests in the intermediate driver.  </DD>

<DT><A HREF="103ndisx_43qq.htm">NDIS_OOB_DATA_FROM_PACKET</A> </DT>

<DD>Returns a pointer to the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a given packet descriptor. </DD>

<DT><A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> </DT>

<DD>Sets up a binding between the caller and an underlying NIC driver, given an array of medium types that the protocol driver supports, the number of elements in the supplied array, the handle already returned by <B>NdisRegisterProtocol</B>, a handle to a protocol-supplied context area to be passed back to the protocol in subsequent receive indications, the name of the NIC to be opened, a mask set with the callers preferred open options, and, possibly, a pointer to some caller-supplied addressing information, as well as four caller-specified locations at which <B>NdisOpenAdapter</B> returns values. If the call succeeds, <B>NdisOpenAdapter</B> returns a binding handle for the protocol to use in subsequent <B>Ndis</B><I>Xxx</I> calls that forward device I/O requests to the NIC driver, an index specifying the NIC drivers preferred medium type, and NDIS_STATUS_SUCCESS; otherwise, it returns both a general failure status and an informational error status. </DD>

<DT><A HREF="103ndisx_1e2a.htm"><B>NdisOpenConfigurationKeyByIndex</B></A></DT>

<DD>Opens a subkey of a given open registry key designated by a caller-supplied handle.</DD>

<DT><A HREF="103ndisx_1k6q.htm"><B>NdisOpenConfigurationKeyByName</B></A></DT>

<DD>Opens a named subkey of a given open registry key designated by a caller-supplied handle.</DD>

<DT><A HREF="103ndisx_6yr6.htm"><B>NdisOpenProtocolConfiguration</B></A> </DT>

<DD>Returns a handle for the registry key in which a protocol driver's per-adapter information is stored. This handle is a required parameter to other <B>Ndis</B><I>Xxx</I> configuration functions. </DD>

<DT><A HREF="103ndisx_6pyq.htm">NDIS_PACKET_EXTENSION_FROM_PACKET</A></DT>

<DD>Returns a pointer to the NDIS_PACKET_EXTENSION structure associated with a packet descriptor.</DD>

<DT><A HREF="103ndisx_3b3m.htm"><B>NdisPacketPoolUsage</B></A></DT>

<DD>Returns the number of packet descriptors currently allocated from a packet pool.</DD>

<DT><A HREF="103ndisx_559u.htm"><B>NdisPacketSize</B></A></DT>

<DD>Returns the size, in bytes, of packet descriptors that are allocated with the given size that is reserved for protocols.</DD>

<DT><A HREF="103ndisx_5svm.htm">NDIS_PAGEABLE_FUNCTION</A> </DT>

<DD>Marks a driver function as pageable code. </DD>

<DT><A HREF="103ndisx_0bjm.htm">NDIS_PER_PACKET_INFO_FROM_PACKET</A> </DT>

<DD>Returns a pointer to a specific type of per-packet information associated with a packet descriptor. </DD>

<DT><A HREF="103ndisx_4lbm.htm"><B>NdisPrintString</B></A> </DT>

<DD>Displays a given string in the debugging window.</DD>

<DT><A HREF="103ndisx_8s4y.htm"><B>NdisQueryAdapterInstanceName</B></A> </DT>

<DD>Retrieves the friendly name of a physical NIC or a virtual adapter to which the calling protocol is bound.</DD>

<DT><A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A> </DT>

<DD>Retrieves the size of the range, and optionally its base virtual address, specified in a given buffer descriptor. Drivers should call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>.</DD>

<DT><A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A> </DT>

<DD>Retrieves the base virtual address of the range specified in a given buffer descriptor. </DD>

<DT><A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A></DT>

<DD><B>NdisQueryBufferSafe</B> is the safe version of <B>NdisQueryBuffer</B>. Unlike <B>NdisQueryBuffer</B>, <B>NdisQueryBufferSafe</B> does not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>.</DD>

<DT><A HREF="103ndisx_9fua.htm"><B>NdisQueryDepthSList</B></A></DT>

<DD>Returns the current number of entries in a given sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A> </DT>

<DD>Returns any or all of the following information about a given packet descriptor: a count of buffer descriptors chained to the packet descriptor, the total number of bytes in all buffers mapped by the buffer descriptor chained to the packet descriptor, the total number of physically discontiguous blocks for all such buffers, and a pointer to the initial buffer descriptor in the chain. </DD>

<DT><A HREF="103ndisx_65pu.htm"><B>NdisQueryPacketLength</B></A></DT>

<DD>Returns the number of bytes of data that are specified by the buffer descriptors that are chained to a given packet. </DD>

<DT><A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A> </DT>

<DD>Reads the value of a named entry of the specified type, given the registry handle returned by <B>NdisOpenProtocolConfiguration</B>. </DD>

<DT><A HREF="103ndisx_51iq.htm"><B>NdisRecalculatePacketCounts</B></A> </DT>

<DD>Resets the valid counts of chained buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A> </DT>

<DD>Registers a protocol drivers upper-edge entry points (Protocol<I>Xxx</I>) and name with the NDIS library, given a pointer to the NDIS_PROTOCOL_CHARACTERISTICS structure set up by the caller and the size in bytes of this structure. NDIS returns the status of the registration attempt and, if the call is successful, a protocol handle representing the driver, which can be passed in a subsequent call to <B>NdisOpenAdapter</B>. </DD>

<DT><A HREF="103ndisx_87hu.htm"><B>NdisReinitializePacket</B></A> </DT>

<DD>Sets to NULL the queue head for any chained buffers in a given packet descriptor and reinitializes it for reuse. </DD>

<DT><A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A></DT>

<DD>Releases a lock that was acquired in a preceding call to <B>NdisAcquireReadWriteLock</B>. </DD>

<DT><A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A> </DT>

<DD>Releases a spin lock that was acquired in a preceding call to <B>NdisAcquireSpinLock</B>. </DD>

<DT><A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> </DT>

<DD>Forwards a caller-initialized NDIS_REQUEST-type query or set request to the underlying NIC driver, given the binding handle previously returned by <B>NdisOpenAdapter</B>. </DD>

<DT><A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> </DT>

<DD>Forwards a reset request to the underlying NIC driver, given the binding handle and a pointer to a variable in which the status of the reset operation is returned. </DD>

<DT><A HREF="103ndisx_12lu.htm"><B>NdisResetEvent</B></A> </DT>

<DD>Clears the Signaled state of a given event. </DD>

<DT><A HREF="103ndisx_20he.htm"><B>NdisRetrieveUlong</B></A> </DT>

<DD>Retrieves a ULONG value from the source address, avoiding alignment faults. </DD>

<DT><A HREF="103ndisx_61de.htm"><B>NdisReturnPackets</B></A> </DT>

<DD>Releases ownership of one or more receive packets after a protocol driver has consumed the receive data. </DD>

<DT><A HREF="103ndisx_20ky.htm"><B>NdisScheduleWorkItem</B></A></DT>

<DD>Inserts a given work item into a queue from which a system worker thread removes the item and gives control to the callback function that the driver previously supplied to <B>NdisInitializeWorkItem</B>.</DD>

<DT><A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> </DT>

<DD>Forwards a packet to the NIC driver for transmission over the wire, given the binding handle, a pointer to the packet to be sent, and a pointer to a variable in which the status of the send is returned. </DD>

<DT><A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> </DT>

<DD>Forwards a multipacket send request, possibly specifying out-of-band information for each packet in the array, such as packet priority, to the underlying driver. </DD>

<DT><A HREF="103ndisx_0zjm.htm"><B>NdisSetEvent</B></A> </DT>

<DD>Sets a given event to the Signaled state if it was not already Signaled, thereby causing waits on the event to be satisfied. </DD>

<DT><A HREF="103ndisx_08oj.htm"><B>NdisSetPacketCancelId</B></A></DT>

<DD>Marks a packet with a cancellation identifier that a driver can later use to cancel the pending transmission of the packet. </DD>

<DT><A HREF="103ndisx_5sdu.htm"><B>NdisSetPacketFlags</B></A> </DT>

<DD>Sets the <B>Flags</B> member in a given packet descriptor to the given value, before the protocol calls <B>NdisSendPackets</B> or <B>NdisSend</B>. </DD>

<DT><A HREF="103ndisx_6rxu.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A> </DT>

<DD>Sets the <B>MediaSpecificInformation</B> and <B>SizeMediaSpecificInfo</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block, specifying out-of-band information associated with a protocol-allocated packet descriptor for a send request. </DD>

<DT><A HREF="103ndisx_4dir.htm"><B>NdisSetPacketPoolProtocolId</B></A></DT>

<DD>Associates a packet pool with a protocol. </DD>

<DT><A HREF="103ndisx_9l6a.htm"><B>NdisSetPacketStatus</B></A></DT>

<DD>Sets status for a packet.</DD>

<DT><A HREF="103ndisx_9fg2.htm">NDIS_SET_PACKET_TIME_TO_SEND</A> </DT>

<DD>Sets the <B>TimeToSend</B> timestamp in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a protocol-allocated packet descriptor, specifying when the underlying driver should transmit the packet data over the wire. </DD>

<DT><B>NdisSetSendFlags</B> </DT>

<DD>See <A HREF="103ndisx_5sdu.htm"><B>NdisSetPacketFlags</B></A>. </DD>

<DT><A HREF="103ndisx_8wdu.htm"><B>NdisSetTimer</B></A> </DT>

<DD>Sets a timer object to fire after a specified interval, thereby running an associated timer function after the timer fires.</DD>

<DT><A HREF="103ndisx_4ueq.htm"><B>NdisSetTimerEx</B></A> </DT>

<DD>Sets a timer object to fire after a specified interval, thereby passing a context to and running an associated timer function after the timer fires.</DD>

<DT><A HREF="103ndisx_1boy.htm"><B>NdisStoreUlong</B></A> </DT>

<DD>Stores a ULONG value at a particular address, avoiding alignment faults.</DD>

<DT><A HREF="103ndisx_6bci.htm"><B>NdisTransferData</B></A> </DT>

<DD>Forwards a request that the underlying NIC driver transfer (copy) received data to a supplied packet, given the binding handle, the receive-context handle passed to the protocol when the receive was indicated, the byte offset in the indication at which to start the transfer and the number of bytes to transfer, and pointers to variables in which the status of the completed transfer operation and the number of bytes actually transferred are returned. </DD>

<DT><A HREF="103ndisx_9vci.htm"><B>NdisUnchainBufferAtBack</B></A> </DT>

<DD>Removes a given buffer descriptor at the end of the chain of buffer descriptors for a given packet descriptor and returns a pointer to the buffer descriptor. </DD>

<DT><A HREF="103ndisx_30mq.htm"><B>NdisUnchainBufferAtFront</B></A> </DT>

<DD>Removes a given buffer descriptor at the start of the chain of buffer descriptors for a given packet descriptor and returns a pointer to the buffer descriptor. </DD>

<DT><A HREF="103ndisx_07zm.htm"><B>NdisUnicodeStringToAnsiString</B></A> </DT>

<DD>Converts a given counted Unicode string into a counted ANSI string. </DD>

<DT><A HREF="103ndisx_0lpu.htm"><B>NdisUpcaseUnicodeString</B></A></DT>

<DD>Converts a copy of a given Unicode string to upper case and returns the converted string.</DD>

<DT><A HREF="103ndisx_7uyb.htm"><B>NdisWaitEvent</B></A> </DT>

<DD>Puts the caller into a wait state until the given event is set to the Signaled state or the wait times out. </DD>

<DT><A HREF="103ndisx_5kaa.htm"><B>NdisWriteConfiguration</B></A> </DT>

<DD>Writes a caller-supplied value entry in the registry, given the handle returned by <B>NdisOpenProtocolConfiguration</B>. </DD>

<DT><A HREF="103ndisx_71pu.htm"><B>NdisWriteErrorLogEntry</B></A> </DT>

<DD>Allocates an error-log record, fills it in, and writes it to the I/O error log, given a binding handle for the underlying NIC, an NDIS_<I>XXX</I> error code, a count of caller-supplied error values, and a corresponding number of ULONGs specifying additional information about the I/O error or configuration error. </DD>

<DT><A HREF="103ndisx_8prm.htm"><B>NdisWriteEventLogEntry</B></A></DT>

<DD>Logs an event to the Win32 event log.</DD>

<DT><A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A> </DT>

<DD>Fills a block of memory with zeros, given a pointer to the block and the length in bytes to be filled. 
</DD>
</DL>

<P>Highest-level NDIS drivers that export only the lower-edge Protocol<I>Xxx </I>functions also can call support routines exported by other kernel-mode components. For more information about these support routines, see <A HREF="JavaScript:hhobj_1.Click()">Summary of Kernel-Mode Support Routines</A>. </P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS%20Library%20Functions%20Used%20by%20Protocol%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
