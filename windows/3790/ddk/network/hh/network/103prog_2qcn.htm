<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Asynchronous I/O and Completion Functions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Asynchronous I/O and Completion Functions">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_asynchronous_i_o_and_completion_functions_ng"></A>Asynchronous I/O and Completion Functions</H1>

<P>Latency is inherent in some network operations. Because of this, many of the upper-edge functions provided by a NIC driver and the lower-edge functions of a protocol driver are designed to support asynchronous operation. Rather than wasting CPU cycles waiting in a loop for some time-consuming task to finish or a hardware event to signal, network drivers rely on the ability to handle most operations asynchronously. </P>

<P>Asynchronous network I/O is supported by using a <I>completion</I> function. The following example illustrates using a completion function for a network <I>send</I> operation, but this same mechanism exists for many other operations performed by a protocol or NIC driver. </P>

<P>When a protocol driver calls NDIS to send a packet, resulting in a call to the NIC driver’s <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> function, the NIC driver can try to complete this request immediately and return an appropriate status value as a result. For synchronous operation, the possible responses are NDIS_STATUS_SUCCESS for successful completion of the send, NDIS_STATUS_RESOURCES, and NDIS_STATUS_FAILURE indicating a failure of some kind. </P>

<P>But a send operation can take some time to complete while the NIC driver (or NDIS) queues the packet and waits for the NIC to indicate the result of the send operation. The NIC driver <I>MiniportSend</I> function can handle this operation asynchronously by returning a status value of NDIS_STATUS_PENDING. When the NIC driver completes the send operation, it calls the completion function, <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, passing a pointer to the packet descriptor that was sent. This information is passed to the protocol driver, signaling completion. </P>

<P>Most driver operations that can require an extended time to complete support asynchronous operation with a similar completion function. Such functions have names of the form <B>NdisM</B><I>Xxx</I><B>Complete</B>. </P>

<P>Completion functions are also provided for:

<UL>
	<LI>setting and querying configuration.</LI>

	<LI>resetting hardware.</LI>

	<LI>indicating status.</LI>

	<LI>indicating received data.</LI>

	<LI>transferring received data.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Asynchronous%20I%2FO%20and%20Completion%20Functions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
