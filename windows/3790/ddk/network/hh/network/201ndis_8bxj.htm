<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Network Interface Card Support</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Network Interface Card Support">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_network_interface_card_support_ng"></A>Network Interface Card Support</H1>

<P>Windows®&nbsp;2000 and later versions of the operating system support the following types of network interface cards:

<UL>
	<LI>Ethernet (802.3)</LI>

	<LI>Token Ring (802.5)</LI>

	<LI>FDDI</LI>

	<LI>LocalTalk</LI>

	<LI>Raw ARCNET (ARCNET encapsulated in Ethernet)</LI>

	<LI>ARCNET 878.2</LI>

	<LI>WAN (point-to-point and WAN cards)</LI>

	<LI>Connection-oriented WAN</LI>

	<LI>Wireless</LI>

	<LI>ATM</LI>

	<LI>IrDA</LI>
</UL>

<P>When NDIS calls a NIC driver's <I>MiniportInitialize</I> function, it passes an array of NDIS-supported mediums. If the NIC driver supports only one medium type, it selects the medium that it supports. Or, if the NIC driver supports more than one medium type, it selects the one that it <I>prefers</I> and returns its choice to NDIS. </P>

<P>When a higher level NDIS protocol driver calls <B>NdisOpenAdapter</B> to bind to a specified NIC, it provides a list of medium types on which it can operate. NDIS uses the information from the NIC driver and from the protocol driver to bind them appropriately. This binding provides the path by which packets are passed down the stack and sent out over the network and by which received packets are passed up the stack to higher level drivers.</P>

<P>The NDIS medium type defined for ARCNET is <B>NdisMediumArcnet878_2</B>. This medium type definition provides full compatibility with Novell’s ARCNET specification for Raw ARCNET.</P>

<P>The Raw ARCNET format, defined in the <I>ARCNET Packet Header Definition Standard</I> published by Novell, is used by NetWare. A transport driver that supports this format is responsible for selecting from three different frame formats (<I>short, long, </I>or<I> exception</I>), depending on the length of the data it wishes to send. The transport driver is then responsible for performing the necessary actions related to the use of this standard, including fragmenting, padding, and setting the <I>split flag</I> and <I>sequence number</I>.</P>

<P>The <B>NdisMediumArcnet878_2</B> format informs a transport driver that it is running over ARCNET, without having to deal with the details of fragmenting and unfragmenting. With <B>NdisMediumArcnet878_2</B>, the on-the-wire format is the same as the Raw ARCNET format. However, the transport driver is shielded from most of the details of the frame format. The NIC driver is responsible for fragmenting the frame, selecting the appropriate frame format, and inserting the padding, split flag, sequence number, and other related fields.</P>

<P>The NDIS Library also supports Ethernet over ARCNET. NDIS performs 802.3-to-ARCNET encapsulation on packets to be sent and deencapsulation on packets received from ARCNET miniport drivers.</P>

<P>The <I>Tcpip</I> and <I>Nwlink</I> transport drivers for Windows®&nbsp;2000 and later versions  use <B>NdisMediumArcnet878_2</B>. </P>

<P>A NIC driver that supports the <B>NdisMediumAtm</B> format can use NDIS 5.0's native support for ATM.</P>

<P>A NIC driver that supports the <B>NdisMediumIrda</B> format can use NDIS 5.0's native support for infrared devices.</P>

<H4>Types of NICs</H4>

<P>The <B>Ndis</B><I>Xxx</I> functions that a miniport driver calls to initialize its adapter and to send and receive packets depend on the features of its NIC, as follows. 

<UL>
	<LI>Bus-master DMA NICs 
<P>These NICs can directly access host memory through an on-board DMA controller that manages the transfer of data between the network and host memory without using the host CPU. 

<P>To send, the miniport driver sets up the NIC to map the outgoing buffers. The miniport driver then causes the device to start its transfer from this memory. The NIC DMA controller transfers the data from shared system memory onto the network and interrupts the CPU when the send is complete. To receive, the DMA controller transfers incoming data to host memory before notifying the host with an interrupt. 

<P>A bus-master DMA NIC typically has an onboard ring buffer that the miniport driver maps to a set of buffers in system memory. Typically, the NIC can be programmed to efficiently handle several packets. A miniport driver that manages such a NIC usually supports multipacket sends and receives since the NIC can efficiently handle several packets and thereby improve its I/O throughput. 
</LI>

	<LI>Nonbusmaster DMA NICs
<P>These include three general types of NICs:

<OL>
	<LI>NICs that contain onboard shared memory 
<P>A miniport driver that manages such a NIC must map the NIC's shared memory to host memory, and then copy outgoing packets to the NIC memory or copy incoming frames from NIC memory to buffers supplied by upper layer protocol drivers or other drivers. Such a miniport driver generally cannot improve its performance by supporting multipacket sends and receives. 
</LI>

	<LI>Slave DMA NICs 
<P>A miniport driver that manages such a NIC uses the system DMA controller to manage the transfer of packet data to and from the network. Transfer of the data requires the cooperation of the host CPU. 
</LI>

	<LI>NICs that use programmed I/O
<P>The miniport driver that manages a PIO device uses NDIS functions to move outgoing frames byte by byte, word by word, or long by long to device registers, and then causes the device to send the data. The driver for such a device does not benefit from NDIS support for multipacket sends and receives. Miniport drivers for this type of NIC should implement single packet sends and receives, as described in <A HREF="204trnsf_5p0n.htm">Transferring Data</A>.
</LI>
</OL>
</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Network%20Interface%20Card%20Support"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
