<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Initializing the NIC</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Initializing the NIC">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_initializing_the_nic_ng"></A>Initializing the NIC</H3>

<P>After the miniport driver has read the information it needs to describe the characteristics of the NIC and stored the information as required in its miniport driver adapter context, the miniport driver calls <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>. In this call, the miniport driver does the following:

<UL>
	<LI>Passes the miniport driver adapter handle that NDIS supplied to the miniport driver's <I>MiniportInitialize</I> function</LI>

	<LI>Passes a handle to the miniport driver adapter context. NDIS will pass the handle to this adapter-specific context area back to the miniport driver when it calls any <I>MiniportXxx</I> function. </LI>

	<LI>Specifies whether its NIC is a bus-master DMA device</LI>

	<LI>Specifies the I/O bus interface type of the caller's NIC</LI>
</UL>

<P>The miniport driver can also set one or more of the following attribute flags when calling <B>NdisMSetAttributesEx</B>:

<DL>
<DT>NDIS_ATTRIBUTE_BUS_MASTER </DT>

<DD>Set if the caller's NIC is a bus-master DMA device. </DD>

<DT>NDIS_ATTRIBUTE_DESERIALIZE </DT>

<DD>Set if the caller is a deserialized miniport driver. </DD>

<DT>NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT </DT>

<DD>Set if NDIS should not attempt to time-out pending send packets that it holds queued to the caller. Intermediate drivers should set this flag, but miniport drivers should not. </DD>

<DT>NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT </DT>

<DD>Set if NDIS should not attempt to time-out pending query and set requests that it holds queued to the caller. Intermediate drivers should set this flag, but miniport drivers should not. </DD>

<DT>NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER </DT>

<DD>Set if the caller is an intermediate driver. </DD>

<DT>NDIS_ATTRIBUTE_IGNORE_TOKEN_RING_ERRORS </DT>

<DD>Set if NDIS should not call a Token Ring NIC driver's <I>MiniportReset</I> function if Token Ring errors are indicated. </DD>

<DT>NDIS_ATTRIBUTE_NO_HALT_ON_SUSPEND </DT>

<DD>Set if NDIS should not call a driver's <I>MiniportHalt</I> function before the system transitions to a low-power (sleeping) state. An intermediate driver must set this flag. A legacy miniport driver that manages a non-PM-aware NIC can set this flag to prevent NDIS from halting the miniport driver before the system transitions to the sleeping (D3) state. A legacy miniport driver should set this flag only if it saves all hardware context that it may require, can put its NIC in an appropriate state for the sleeping state (D3), and can reactivate the NIC to the working state (D0). Drivers that rely on hardware-maintained state should not set this flag. </DD>

<DT>NDIS_ATTRIBUTE_SURPRISE_REMOVE_OK </DT>

<DD>Set if the driver can handle removal of its NIC without user notification. Such a driver exports a <I>MiniportPnPEventNotify</I> function. System support for NDIS_ATTRIBUTE_SURPRISE_REMOVE_OK is available in Windows XP and later operating systems. </DD>

<DT>NDIS_ATTRIBUTE_NOT_CO_NDIS </DT>

<DD>Set by a driver that can support both connection-oriented and connectionless devices to indicate that the device is a connectionless device. System support for NDIS_ATTRIBUTE_NOT_CO_NDIS is available in Windows XP and later operating systems. </DD>

<DT>NDIS_ATTRIBUTE_USES_SAFE_BUFFER_APIS </DT>

<DD>Set by a driver that uses <B>NdisBufferVirtualAddressSafe</B>, <B>NdisGetFirstBufferFromPacketSafe</B>, and <B>NdisQueryBufferSafe</B> exclusively to access system virtual addresses for send packet buffers. NDIS_ATTRIBUTE_USES_SAFE_BUFFER_APIS is also set by a driver that exclusively uses physical addresses to access such buffers. Setting NDIS_ATTRIBUTE_USES_SAFE_BUFFER_APIS can improve performance since the operating system will not have to map send packet buffers to system virtual addresses. System support for NDIS_ATTRIBUTE_USES_SAFE_BUFFER_APIS is available in Windows XP and later OS versions. </DD>

<DT>NDIS_ATTRIBUTE_DO_NOT_BIND_TO_ALL_CO</DT>

<DD>Set by a CoNDIS miniport driver that does not provide TAPI services. Setting NDIS_ATTRIBUTE_DO_NOT_BIND_TO_ALL_CO prevents NDIS from binding the miniport driver to the NDIS TAPI proxy driver (NDPROXY). By default, NDIS binds NDPROXY to all CoNDIS miniport drivers. 
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Initializing%20the%20NIC"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
