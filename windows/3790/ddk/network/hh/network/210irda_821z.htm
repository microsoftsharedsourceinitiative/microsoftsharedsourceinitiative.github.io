<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>About IrDA Miniport Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="About IrDA Miniport Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_about_irda_miniport_drivers_ng"></A>About IrDA Miniport Drivers</H1>

<P>The interface between IrDA hardware (infrared transceivers) and the core IrDA protocol stack is through Network Driver Interface Specification (NDIS) and IrDA miniport drivers<I>. </I>The IrDA protocol stack expects that IrDA hardware and IrDA miniport drivers handle framing, transparency, error detection, and support commands for sensing media activity and changing speed. IrDA miniport drivers are responsible for discarding incoming frames that contain bad cyclic redundancy checks (CRC); these frames must never be forwarded to the IrDA protocol stack.</P>

<P>The operating system supplies an implementation of the core IrDA protocol stack. The IrDA protocol stack is loaded dynamically by the Plug and Play system when an IrDA miniport driver is installed. The IrDA Tiny Transport Protocol (TinyTP) layer of the IrDA protocol stack is exposed to applications through Windows® Sockets (WinSock) with the support of the user-space component <I>wshirda.dll</I>. Applications can only use WinSock to communicate with IrDA miniport drivers. For more information on programming IrDA with WinSock, refer to the Platform SDK documentation. </P>

<P>For most purposes, the operating system treats IrDA miniport drivers as miniport drivers that bind only to the IrDA protocol stack. An IrDA co-installer displays these drivers to the user as <I>IrDA adapters</I> and handles IrDA-specific user interface and setup issues.</P>

<P>Unlike NDIS drivers for other media, an IrDA miniport driver is never simultaneously bound to more than one protocol, and it is always bound to the same protocol. This is because, unlike other NDIS media, the IrDA protocol stack implements part of the media-control algorithm. This algorithm precludes multiple protocols. </P>

<P>System-supplied and vendor-supplied INF files are used to install IrDA miniport drivers and the IrDA protocol stack. These INF files must adhere to the Net INF and IrDA INF conventions. </P>

<P>The operating system supplies one IrDA miniport driver, <I>irsir.sys</I>, which is used to communicate with existing external Universal Asynchronous Receiver/Transmitter (UART)-attached SIR adapters and internal SIR IrDA adapters. Vendors should ensure that their SIR hardware is supported correctly through <I>irsir.sys</I>.</P>

<P>High-quality IrDA miniport drivers and INFs can be included with the operating system. This practice is encouraged because it improves the user IrDA installation experience. </P>

<P>The IrDA protocol stack can support multiple IrDA NICs concurrently. Vendors who wish to exploit this feature should expose multiple IrDA NICs through their IrDA miniport driver. Each exposed NIC should represent a unique transceiver and supporting hardware, capable of running a separate infrared connection.</P>

<P>There are a number of Plug and Play issues that must be considered when implementing IrDA miniport drivers for various IrDA hardware configurations. The <A HREF="210irda_15yf.htm">Plug and Play</A> section explores these issues.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: About%20IrDA%20Miniport%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
