<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Call Line Shutdown</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Call Line Shutdown">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_call_line_shutdown_ng"></A>Call Line Shutdown</H2>

<P>A session begins when an NDIS WAN miniport driver successfully completes an <A HREF="29tpioid_5ng2.htm">OID_TAPI_PROVIDER_INITIALIZE</A> request. Within a session, one or more lines can be opened with an <A HREF="29tpioid_9jhu.htm">OID_TAPI_OPEN</A> request, and on a line, one or more calls can be established by <A HREF="29tpioid_83jm.htm">OID_TAPI_MAKE_CALL</A>, <A HREF="29tpioid_66b6.htm">OID_TAPI_DIAL</A>, or <A HREF="29tpioid_5jsi.htm">OID_TAPI_ANSWER</A> requests. During the time a line is up, many calls can be established and then closed or dropped. During a session, one or more lines can go through transitions from open to closed many times. How a miniport driver handles such transitions is described here.</P>

<H4>Closing a Call</H4>

<P>An in-process call can be closed either by the local node or by the remote node. The call can be closed on the local node, either because the last application with a handle to the call has closed the handle, or perhaps because the miniport driver’s <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> or <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> has been called. If the remote node hangs up an in-process call, the miniport driver must indicate this status change to upper layers.</P>

<P>If an application on the local node closes the call, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> will be called either with an <A HREF="29tpioid_9376.htm">OID_TAPI_DROP</A> request followed by an <A HREF="29tpioid_844y.htm">OID_TAPI_CLOSE_CALL</A>, or it will simply be called with an OID_TAPI_CLOSE_CALL.</P>

<P>If the miniport driver receives an OID_TAPI_DROP request, the driver must:

<OL>
	<LI>Drop the call.</LI>

	<LI>Change the status of the call to LINECALLSTATE_IDLE</LI>

	<LI>Report the state change by calling <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>. </LI>
</OL>

<P>The handles for the dropped call, <B>htCall</B> and <B>hdCall</B> remain valid. The miniport driver must not deallocate, reuse, or otherwise modify the state associated with the <B>hdCall</B> that it created for the call instance, since the miniport driver can receive queries related to the call, for example, a request for statistics related to the call. If <I>MiniportHalt</I> or <I>MiniportReset</I> is called, the miniport driver should disconnect the call but retain the state maintained for the call instance until the miniport driver receives an OID_TAPI_CLOSE_CALL request.</P>

<P><I>MiniportSetInformation</I> can also receive an OID_TAPI_CLOSE_CALL request when the last application with an open handle to the call instance closes the handle. The miniport driver <I>cannot</I> fail this close call request. After <I>MiniportSetInformation</I> returns after processing this request, <B>htCall</B> is no longer valid.</P>

<P>A miniport driver must be prepared to handle timing issues involving such occurrences as getting an OID_TAPI_CLOSE_CALL before getting an OID_TAPI_DROP. If the miniport driver gets an OID_TAPI_CLOSE_CALL without a preceding OID_TAPI_DROP, it should behave as if it had received both a drop and a close call request. If the miniport driver receives a drop after a close call request has already closed the referenced call, the call handle is no longer valid and the miniport driver should return an appropriate error message. </P>

<P>If the miniport driver detects that the remote node has dropped the call, the miniport driver should change the call state to LINECALLSTATE_DISCONNECTED and indicate the change by calling <B>NdisMIndicateStatus</B> passing the <B>htCall</B> for this call instance. After the state change is propagated to the connected application on the local node, the miniport driver will receive an OID_TAPI_DROP followed by an OID_TAPI_CLOSE_CALL, or perhaps just the OID_TAPI_CLOSE_CALL request. The miniport driver should handle the drop and close call requests as described earlier. </P>

<H4>Closing a Line</H4>

<P>A line is closed when the last application with an open handle to the line has closed the handle. When the miniport driver subsequently receives an <A HREF="29tpioid_1enm.htm">OID_TAPI_CLOSE</A>, it should tear down the line instance, that is, any state related to the line maintained by the miniport driver can be reused or deallocated because the information is no longer valid. </P>

<P>An OID_TAPI_CLOSE call <I>must</I> succeed if the line handle, <B>htLine</B>, passed in the call exists and is still valid. A miniport driver will never receive an OID_TAPI_CLOSE request for a line if there are calls on the line. All existing calls on a line will be closed with an <A HREF="29tpioid_844y.htm">OID_TAPI_CLOSE_CALL</A> request before the line-close request is made. </P>

<P>Existing calls must be closed when a line is closed; the miniport driver should drop those calls and clean up their state. The miniport driver should also change the state of the line to idle. Any handle that the miniport driver has for the line is no longer valid. If the miniport driver receives any requests which pass the <B>htLine</B> handle or any <B>htCall</B> after the close request is received, such request(s) must be failed with an appropriate status.</P>

<H4>Closing a Session</H4>

<P>Session termination can be initiated by either the upper layers or a WAN miniport driver. When the last client process has detached from the higher-level Telephony module, the NDISTAPI driver will be informed that it needs to terminate its session with each of the registered adapters. The NDISTAPI driver does this by calling <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> specifying <A HREF="29tpioid_4xki.htm">OID_TAPI_PROVIDER_SHUTDOWN</A>. Upon receiving this request, NDISWAN will call the miniport driver’s <I>MiniportSetInformation</I> function, which should terminate any related activities it has in progress on the specified adapter and release any relevant resources.</P>

<P>Driver-initiated session termination can occur when the miniport driver is being unloaded in its <I>MiniportHalt</I> function. Typically, the miniport driver would complete any outstanding NDISTAPI driver requests and notify the NDISWAN that its line devices are going off-line by calling <B>NdisMIndicateStatus</B>. NDISWAN would, in turn, call the NDISTAPI driver to deregister the adapter. If the miniport driver were reloaded again later, it would go through the same initialization process described previously.</P>

<P>The NDIS WAN miniport driver might also initiate session termination if it underwent some dynamic reconfiguration that necessitated a complete reinitialization of all clients and drivers. For example, if an adapter’s line-device modeling (for example, the number of line devices supported) was changed on the fly, the miniport driver would call <B>NdisMIndicateStatus</B> with a LINE_LINEDEVSTATE event and the LINEDEVSTATE_REINIT flag set.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Call%20Line%20Shutdown"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
