<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMInitializeTimer</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMInitializeTimer">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisminitializetimer_nr"></A>NdisMInitializeTimer</H1>

<P><B>NdisMInitializeTimer</B> initializes a timer object associated with a driver’s <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function. </P>

<PRE class=syntax><B>VOID 
  NdisMInitializeTimer(
    IN OUT PNDIS_MINIPORT_TIMER</B>  <I>Timer</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B><I>
    </I><B>IN PNDIS_TIMER_FUNCTION</B>  <I>TimerFunction</I><B>,</B><I>
    </I><B>IN PVOID</B>  <I>FunctionContext
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Timer</I></DT>

<DD>Pointer to caller-supplied, resident storage for a timer object. The timer object is opaque to the caller, but, when it has been initialized, this pointer is a required parameter to the <B>NdisM..Timer</B> functions. </DD>

<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>TimerFunction</I></DT>

<DD>Specifies the entry point of a caller-supplied <I>MiniportTimer</I> function.</DD>

<DT><I>FunctionContext</I></DT>

<DD>Pointer to a caller-supplied context area to be passed to the given <I>MiniportTimer</I> function when it is called.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>After calling <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A><B> </B>or <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, a miniport driver’s <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function can call <B>NdisMInitializeTimer</B> to set up <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function(s). <I>MiniportInitialize</I> must call <B>NdisMInitializeTimer</B> before the driver passes the <I>MiniportTimer</I> pointer to any other <B>NdisM..Timer</B> function. </P>

<P>Drivers of NICs that do not generate interrupts initialize at least one timer object for a polling <I>MiniportTimer</I> function that monitors the NIC state for incoming receives and for send completions. </P>

<P>Calls to the <B>NdisMSet..Timer</B> functions insert the timer object in the system timer queue. Calls to <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A> dequeue the timer object if it is currently queued. Only one instantiation of a particular timer object can be queued at any given moment. </P>

<P>When a driver calls <A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A>, the timer object at <I>Timer</I> is queued until the interval specified in the call expires. When it does, the timer object is dequeued and the caller-supplied <I>TimerFunction</I> is run once at IRQL = DISPATCH_LEVEL as soon as a processor becomes available. When a driver calls <A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A>, the timer object is dequeued and the caller-supplied <I>TimerFunction</I> is run when the given interval expires, but the timer object is automatically requeued for the same fixed interval so the <I>MiniportTimer</I> function runs periodically, also at IRQL = DISPATCH_LEVEL. </P>

<P><I>MiniportInitialize</I> can call <B>NdisMInitializeTimer</B> more than once to initialize more than one timer object, each associated with a distinct <I>MiniportTimer</I> function. For example, a NIC driver might have one <I>MiniportTimer</I> function that polls the NIC state periodically and another that the miniport driver uses only to time-out a particular operation on its NIC. Each such <I>MiniportTimer</I> function has different functionality, and each such function should be associated with a different timer object by calling <B>NdisMInitializeTimer</B> from <I>MiniportInitialize</I>. </P>

<P>Callers of <B>NdisMInitializeTimer</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A>, <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A>, <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, <A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A>, <A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMInitializeTimer"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
