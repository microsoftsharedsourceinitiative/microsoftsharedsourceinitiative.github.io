<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MUX and Filter Intermediate Driver Differences</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MUX and Filter Intermediate Driver Differences">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_mux_and_filter_intermediate_driver_differences_ng"></A>MUX and Filter Intermediate Driver Differences</H2>

<P>There are significant differences between filter intermediate drivers and MUX intermediate drivers. These differences are summarized as follows:

<UL>
	<LI>Filter intermediate drivers must always have a one-to-one relationship between virtual miniport instances and underlying miniports. MUX intermediate drivers can have one-to-n, n-to-one, or m-to-n relationships between virtual miniport instances and underlying miniports. This configuration flexibility results in complicated internal bindings and data paths in MUX intermediate drivers.</LI>

	<LI>MUX intermediate drivers require a notify object DLL for configuration. Filter intermediate drivers can have a notify object DLL, but it is not required.</LI>

	<LI>For filter intermediate drivers, the protocol device class is <B>NetService</B>. For MUX intermediate drivers, the protocol device class is <B>NetTrans</B>.</LI>

	<LI>For filter intermediate drivers, you must set the NCF_FILTER (0x1) flag in the <B>Characteristics</B> entry of the driver’s protocol INF file. The <B>Characteristics</B> entry is in the <I>DDInstall</I> section.</LI>

	<LI>The <B>UpperBindings</B> registry key identifies the device instance for a filter intermediate driver's virtual miniport. The notify object DLL manages device instance information for a MUX intermediate driver. The <B>UpperBindings</B> registry key holds a list of virtual miniport device identifiers for a MUX intermediate driver.</LI>

	<LI>For filter intermediate drivers, you set the <B>UpperRange</B> INF entry to <B>noupper</B> and the <B>LowerRange</B> INF entry to <B>nolower</B>. Filter intermediate drivers must have a <B>FilterMediaTypes</B> INF file entry. During Initialization, a filter intermediate driver inserts itself into all existing protocol-to-miniport bindings, as appropriate to the media types listed in <B>FilterMediaTypes</B>. For a MUX intermediate driver, you set the <B>UpperRange</B> INF entry for the protocol lower edge to <B>noupper</B> and the <B>LowerRange</B> INF entry for the virtual miniport to <B>nolower</B>. The MUX intermediate driver virtual miniport <B>UpperRange</B> and protocol lower edge <B>LowerRange</B> are established just as with any miniport driver or protocol driver.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MUX%20and%20Filter%20Intermediate%20Driver%20Differences"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
