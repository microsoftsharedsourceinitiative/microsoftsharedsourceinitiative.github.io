<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisAcquireReadWriteLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisAcquireReadWriteLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisacquirereadwritelock_nr"></A>NdisAcquireReadWriteLock</H1>

<P><B>NdisAcquireReadWriteLock</B> acquires a lock that the caller uses for either write or read access to the resources that are shared among driver threads.</P>

<PRE class=syntax><B>VOID
  NdisAcquireReadWriteLock(</B>
    <B>IN PNDIS_RW_LOCK</B>  <I>Lock</I><B>,</B>
    <B>IN BOOLEAN</B>  <I>fWrite</I><B>,</B>
    <B>IN PLOCK_STATE</B>  <I>LockState</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Lock</I></DT>

<DD>Pointer to an opaque variable that represents a lock. The caller can use this lock to access shared resources.</DD>

<DT><I>fWrite</I></DT>

<DD>Specifies a Boolean value. If the value is TRUE, this function is provided with write access to shared resources; if the value is FALSE, this function is provided with read access.</DD>

<DT><I>LockState</I></DT>

<DD>Pointer to an opaque variable that tracks the state of the lock. This variable exists in the interval between the time the caller acquires and releases the lock. The caller must use a different variable of type LOCK_STATE for each attempt it makes to acquire the lock from the same non-ISR-driver thread.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>The driver must initialize a variable of type NDIS_RW_LOCK using <A HREF="103ndisx_2tiq.htm"><B>NdisInitializeReadWriteLock</B></A> before the driver calls any other <B>Ndis</B><I>Xxx</I><B>ReadWriteLock</B> function. The driver must provide resident storage for the locks it uses. </P>

<P>After acquiring a lock by using <B>NdisAcquireReadWriteLock</B>, the caller must release that lock by calling <A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A>. To decrement the reference count of the lock, a driver must call <B>NdisReleaseReadWriteLock</B> once for each call to <B>NdisAcquireReadWriteLock</B>. </P>

<P>To modify resources shared among driver threads, a driver thread must acquire a write lock. To simply monitor those resources, a driver thread must acquire a read-only lock. Read access does not require interlocked operations or contention for spin locks. Using read-only access helps to maintain good operating system and driver performance. </P>

<P>A driver thread should never hold a write lock for more than 25 microseconds. Holding a write lock for a prolonged period degrades both operating system and driver performance.</P>

<P>The driver cannot use a lock to protect resources from read or write access that its other functions share with the <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> and/or <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A> functions. Instead, the driver must call <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A> so that its <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A> function accesses such shared resources at the same DIRQL at which its <I>MiniportISR</I> and/or <I>MiniportDisableInterrupt</I> functions do.</P>

<P>Callers of <B>NdisAcquireReadWriteLock</B> run at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A>, <A HREF="103ndisx_2tiq.htm"><B>NdisInitializeReadWriteLock</B></A>, <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A>, <A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisAcquireReadWriteLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
