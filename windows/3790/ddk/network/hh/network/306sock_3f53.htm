<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Communicating with a WSH DLL</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Communicating with a WSH DLL">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_communicating_with_a_wsh_dll_ng"></A>Communicating with a WSH DLL</H1>

<P>Each transport that supports Windows Sockets applications supplies a user-mode Windows Sockets helper dynamic-link library to interpret network addresses and to process socket options in the architecture as outlined in <A HREF="306sock_1o13.htm">Windows Sockets Helper DLL Architecture</A>. </P>

<P>For example, when any application calls <B>socket</B>, it specifies an address family, a socket type, and a protocol. These three arguments must uniquely identify a transport driver to support the socket. Windows Sockets searches for a match between these application-supplied arguments and the standardized configuration information stored in the registry for WSH DLLs. If it finds a match, Windows Sockets subsequently calls down through MSAFD to the <B>WSH</B><I>Xxx</I> functions exported by the WSH DLL as necessary. Otherwise, the application's call to <B>socket</B> fails. </P>

<P>When a match is found, Windows Sockets calls <B>LoadLibrary</B> on the WSH DLL, and then calls <B>GetProcAddress </B>to retrieve the entry point for each exported <B>WSH</B><I>Xxx</I> function. These <B>WSH</B><I>Xxx</I> functions are called whenever necessary to query for protocols supported by the helper DLL, to translate addresses, and to process WSH-supported options as <B>getsockopt</B> and <B>setsockopt</B> calls occur. For example, when an application passes an option to <B>setsockopt </B>that is not explicitly supported by Windows Sockets, the appropriate WSH DLL is called to process the option. The WSH DLL takes any necessary action to support each such option the corresponding transport supports. </P>

<P>The following conventions permit mechanical transformations between socket addresses, application-specified as SOCKADDR<B> </B>structures, and the TDI-defined addresses used by underlying transport drivers.

<UL>
	<LI>TDI address types, specified as values in the <B>AddressType</B> member of <A HREF="36tdstrc_8b8y.htm">TA_ADDRESS</A> structures, are identical to the address family values of socket address structures. </LI>

	<LI>The <B>Address[ ] </B>array of a TA_ADDRESS<B> </B>structure has exactly the same format as the data following <B>sa_family</B><I> </I>in a socket address structure for a given address type.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Communicating%20with%20a%20WSH%20DLL"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
