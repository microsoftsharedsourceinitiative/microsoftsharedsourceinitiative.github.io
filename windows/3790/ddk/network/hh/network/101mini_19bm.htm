<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportSendPackets</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportSendPackets">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportsendpackets_nr"></A>MiniportSendPackets</H1>

<P>The <I>MiniportSendPackets</I> function is required for drivers that do not have a <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, or <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> function. <I>MiniportSendPackets</I> transfers some number of packets, specified as an array of packet pointers, over the network. </P>

<PRE class=syntax><B>VOID</B>
  <B>MiniportSendPackets(</B>
    <B>IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I><B>,</B>
    <B>IN</B> <B>PPNDIS_PACKET</B>  <I>PacketArray</I><B>,</B>
    <B>IN</B> <B>UINT</B>  <I>NumberOfPackets</I>
    <B>);</B> </PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. </DD>

<DT><I>PacketArray</I></DT>

<DD>Pointer to the initial element in a packet array, with each element specifying the address of a packet descriptor for a packet to be transmitted, along with an associated out-of-band data block containing information such as the packet priority, an optional timestamp, and the per-packet status to be set by <I>MiniportSendPackets</I>. </DD>

<DT><I>NumberOfPackets</I></DT>

<DD>Specifies the number of pointers to packet descriptors at <I>PacketArray</I>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>If a driver registers both <I>MiniportSendPackets</I> and <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> functions when it initializes, NDIS always calls its <I>MiniportSendPackets</I> function. If a driver registers both <I>MiniportSendPackets</I> and <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> functions, NDIS calls its <I>MiniportCoSendPackets</I> function when any bound protocol calls <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A>. </P>

<P>The input packet descriptor pointers have been ordered according to the order in which the packets should be sent over the network by the protocol driver that set up the packet array. The NDIS library preserves the protocol-determined ordering when it submits each packet array to <I>MiniportSendPackets</I>. </P>

<P>Consequently, <I>MiniportSendPackets</I> should transmit each packet in any given array sequentially. <I>MiniportSendPackets</I> can call <A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A> to extract information, such as the number of buffer descriptors chained to the packet and the total size in bytes of the requested transfer. It can call <A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A>, <A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A>, <A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A>, <A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A>, or <A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A> to extract information about individual buffers containing the data to be transmitted. </P>

<P><I>MiniportSendPackets</I> can retrieve any protocol-supplied out-of-band information associated with each packet by using the relevant <A HREF="103ndisx_0iuq.htm">NDIS_GET_PACKET_TIME_TO_SEND</A> and <A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A> macros.</P>

<P>Each protocol driver must set up packet arrays with packet descriptors that are fully set up to be passed by the underlying driver’s <I>MiniportSendPackets</I> function to its NIC. That is, the protocol is responsible for determining what is required, based on the medium type selected by the miniport driver to which the protocol bound itself. However, a protocol can supply packets shorter than the minimum for the selected medium, which <I>MiniportSendPackets</I> must pad if its medium imposes a minimum-length requirement on transmits.</P>

<P>Any NDIS intermediate driver that layers itself between a higher-level protocol and an underlying NIC driver has the same responsibility as any protocol driver to set up packets according to the requirements of the underlying miniport driver and its selected medium. Such an intermediate driver must repackage each incoming send packet in a fresh packet descriptor that was allocated by the intermediate driver. </P>

<P><I>MiniportSendPackets</I> can use only the eight-byte area at <B>MiniportReserved</B> within the <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A> structure for its own purposes. Consequently, an NDIS intermediate driver that forwards send requests to an underlying NIC driver must repackage the packets given to its <I>MiniportSendPackets</I> function in fresh packet descriptors, which the intermediate driver allocates from packet pool, so that the underlying miniport driver has a <B>MiniportReserved</B> area it can use. </P>

<P>If the underlying driver’s <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function set the NDIS_MAC_OPTION_NO_LOOPBACK flag when the NDIS library queried the <A HREF="22genoid_499u.htm">OID_GEN_MAC_OPTIONS</A>, the miniport driver must not attempt to loop back any packets. The NDIS library provides software loopback support for such a driver. </P>

<P>Whether the driver is serialized or deserialized determines how its <I>MiniportSendPackets</I> function handles the completion of input packet descriptor(s) when this driver function is called.</P>

<H4>Serialized Miniports</H4>

<P>The <I>MiniportSendPackets</I> function of a serialized driver sets one of the following values in the <B>Status</B> member of the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with an input packet descriptor:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The driver (or its NIC) has accepted the packet data for transmission, so <I>MiniportSendPackets</I> is returning the packet and the associated out-of-band data, which NDIS will return to the protocol that made this request. </DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>The driver will complete the transmit operation asynchronously with <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The serialized miniport driver currently cannot set up the transmit operation due to resource constraints, so NDIS should queue this packet and all remaining packets in the given array for resubmission to <I>MiniportSendPackets</I> when the driver next calls <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A> or <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>. 

<P>When <I>MiniportSendPackets</I> sets this value for a packet in the input array, the NDIS library assumes all remaining packets in the array have the same status set, so NDIS requeues the associated packets in the same order, which preserves the protocol-determined ordering of the packet array. NDIS reflects this status to the protocol as NDIS_STATUS_PENDING for this packet and for all remaining packets in the given array.
</DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>The given packet was invalid or unacceptable to the NIC. Setting this status or any other driver-determined NDIS_STATUS_<I>XXX</I> error value for a packet effectively completes the packet, which NDIS returns to the allocating protocol as a failed send request. 
</DD>
</DL>

<P>When <I>MiniportSendPackets</I> returns control, a serialized driver can no longer access anything in the given packet array with the following exceptions:

<UL>
	<LI>If <I>MiniportSendPackets</I> set the <B>Status</B> for a packet to NDIS_STATUS_PENDING, the miniport driver can access the packet descriptor and any media-specific information in the associated out-of-band data block. <I>MiniportSendPackets</I> can use the buffer descriptors chained to that packet descriptor, as well. 
<P>After the driver calls <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A> with the final status of the transmit operation, ownership of the given packet descriptor, out-of-band data block, and associated buffers reverts to the allocating protocol. A miniport driver should <I>never</I> return NDIS_STATUS_RESOURCES for a packet it passes to <B>NdisMSendComplete</B>. 
</LI>

	<LI>If <I>MiniportSendPackets</I> set the <B>Status</B> for a packet to NDIS_STATUS_RESOURCES, the miniport driver can access the packet descriptor, its associated out-of-band data block, and the buffer descriptors chained to that packet when NDIS resubmits the send request, along with subsequent elements of the packet array, to <I>MiniportSendPackets</I>. </LI>
</UL>

<P>Setting NDIS_STATUS_RESOURCES for an incoming packet causes NDIS to requeue the associated packet and those specified by all remaining array elements for subsequent resubmission to the <I>MiniportSendPackets</I> function of a serialized driver. NDIS assumes that a subsequent call to <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A> or <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, whichever occurs first, indicates that such a driver's <I>MiniportSendPackets</I> function is ready to accept more packets for transmission. NDIS preserves the original ordering of returned array elements when it resubmits them as a packet array to <I>MiniportSendPackets</I>.</P>

<P>The <I>MiniportSendPackets</I> function of a serialized miniport driver runs at IRQL = DISPATCH_LEVEL.</P>

<H4>Deserialized Miniports</H4>

<P>The NDIS library ignores the OOB block in all packet descriptors it submits to the <I>MiniportSendPackets</I> functions of deserialized drivers and assumes that all deserialized miniports will complete each packet descriptor input to their <I>MiniportSendPackets</I> functions asynchronously with <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>. Consequently, such a deserialized driver's <I>MiniportSendPackets</I> function usually ignores the <B>Status</B> member of the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block, but it can set this member to the same status as it subsequently passes to <B>NdisMSendComplete</B>.  </P>

<P>Rather than relying on NDIS to queue and resubmit send packets whenever <I>MiniportSendPackets</I> has insufficient resources to transmit the given packets, a deserialized miniport driver manages its own internal packet queuing. Such a driver is responsible for holding incoming send packets in its internal queue until they can be transmitted over the network and for preserving the protocol-determined ordering of packet descriptors incoming to its <I>MiniportSendPackets</I> function. A deserialized miniport driver must complete each incoming send packet with <B>NdisMSendComplete</B>, and it cannot call <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A>. </P>

<P>A deserialized miniport driver should <I>never</I> pass STATUS_INSUFFICIENT_RESOURCES to <B>NdisMSendComplete</B> with a protocol-allocated packet descriptor that was originally submitted to its <I>MiniportSendPackets</I> function. Such a returned status effectively fails the send operation requested by the protocol, and NDIS would return the packet descriptor and all associated resources to the protocol that originally allocated it. </P>

<P>The <I>MiniportSendPackets</I> function of a deserialized miniport driver can be called at any IRQL &lt;= DISPATCH_LEVEL. The <I>MiniportSendPackets</I> function of a deserialized driver is responsible for synchronizing access to its internal queues of packet descriptors with the driver's other <I>MiniportXxx</I> functions that also access the same queues. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A>, <A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A>, <A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A>, <A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A>, <A HREF="103ndisx_2j5e.htm"><B>NdisGetNextBuffer</B></A>, <A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A>, <A HREF="103ndisx_0iuq.htm">NDIS_GET_PACKET_TIME_TO_SEND</A>, <A HREF="103ndisx_87le.htm"><B>NdisMoveMemory</B></A>, <A HREF="103ndisx_97qq.htm"><B>NdisMoveToMappedMemory</B></A>, <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A>, <A HREF="103ndisx_38mq.htm"><B>NdisMSetupDmaTransfer</B></A>, <A HREF="103ndisx_3a42.htm"><B>NdisMStartBufferPhysicalMapping</B></A>, <A HREF="103ndisx_43qq.htm">NDIS_OOB_DATA_FROM_PACKET</A>, <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A>, <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A>, <A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A>, <A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A>, <A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A>, <A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A>, <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A>  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportSendPackets"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
