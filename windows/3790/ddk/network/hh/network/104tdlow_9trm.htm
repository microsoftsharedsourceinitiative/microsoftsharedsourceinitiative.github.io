<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolCmAddParty</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolCmAddParty">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolcmaddparty_nr"></A>ProtocolCmAddParty</H1>

<P>The <I>ProtocolCmAddParty</I> function is a required function. <I>ProtocolCmAddParty</I> sets up the media-specific parameters to add a party to an existing multipoint call, stores state data for the new party, and causes the party to be added to the call.</P>

<PRE class=syntax><B>NDIS_STATUS 
</B>  <B>ProtocolCmAddParty(</B>
    <B>IN NDIS_HANDLE</B>  <I>CallMgrVcContext</I><B>,</B>
    <B>IN OUT PCO_CALL_PARAMETERS</B>  <I>CallParameters</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisPartyHandle</I><B>,</B>
    <B>OUT PNDIS_HANDLE</B>  <I>CallMgrPartyContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>CallMgrVcContext</I></DT>

<DD>Specifies the handle to a call manager-allocated context area in which the call manager maintains its per-VC state. The call manager supplied this handle to NDIS from its <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function.</DD>

<DT><I>CallParameters</I></DT>

<DD>Pointer to a <A HREF="105nstru_3raq.htm">CO_CALL_PARAMETERS</A> structure that contains the parameters, specified by a connection-oriented client, for the party that is being added to an existing call.</DD>

<DT><I>NdisPartyHandle</I></DT>

<DD>Specifies a handle, supplied by NDIS, that uniquely identifies a multipoint party that is to be added to an existing virtual connection. This handle is opaque to the call manager and reserved for NDIS library use.</DD>

<DT><I>CallMgrPartyContext</I></DT>

<DD>Specifies, on return, a handle to a call manager-supplied context area in which the call manager maintains state about this party for the multipoint call.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>ProtocolCmAddParty</I> returns the status of its operation(s) as one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the call manager successfully allocated the necessary resources to maintain state about the party and successfully added the party to the call.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the call manager will complete the request to add a party asynchronously. When the call manager has completed all operations for adding the party, it must call <A HREF="103ndisx_2ynm.htm"><B>NdisCmAddPartyComplete</B></A> to signal NDIS that this operation has been completed.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>Indicates that the call manager was unable to allocate and/or initialize its resources for adding a party to the connection.</DD>

<DT>NDIS_STATUS_NOT_SUPPORTED</DT>

<DD>Indicates that the call manager was unable to add the party to the multipoint call because the caller requested invalid or unavailable features in the call parameters at <I>CallParameters</I> or else that the media type supported by this call manager does not support multipoint calls.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><I>ProtocolCmAddParty</I> performs any necessary allocations of dynamic resources and structures that the call manager requires to maintain state information about the party, specified by <I>NdisPartyHandle</I>, to be added to a multipoint call. Such resources could include, but are not limited to, memory buffers, data structures, events, and other similar resources. Call managers should also initialize relevant per-party structures in this function.</P>

<P>In the per-party state area that the call manager allocates, the call manager <I>must</I> store the handle specified by <I>NdisPartyHandle</I> for reference in future calls. After the call manager has allocated and finish initializing its per-party state area, the address of the state buffer should be set as the <I>CallMgrPartyContext</I> handle before returning control to NDIS. To do this, dereference the handle and store a pointer to the state buffer as the value of the handle. For example:</P>

<PRE>*CallMgrPartyContext = SomeBuffer;</PRE>

<P>Call managers perform any necessary communication with their network hardware or other media-specific actors, as necessary, to add the party specified by the call parameters at <I>CallParameters<B> </B></I>to an existing multipoint call.</P>

<P><I>ProtocolCmAddParty</I> must be written so that it can run at IRQL = DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="103ndisx_5fua.htm"><B>NdisClAddParty</B></A>, <A HREF="104tdlow_2j5e.htm"><I>ProtocolClAddPartyComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolCmAddParty"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
