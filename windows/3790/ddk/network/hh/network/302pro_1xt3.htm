<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registering as a Connection-Oriented Client</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registering as a Connection-Oriented Client">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_registering_as_a_connection_oriented_client_ng"></A>Registering as a Connection-Oriented Client</H3>

<P>A connection-oriented client driver must register a set of <I>ProtocolXxx</I> functions to communicate with underlying connection-oriented drivers. A call manager or a miniport call manager (MCM) calls <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A> or <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A> to register an address family (AF). After such a call, NDIS calls the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> function of all protocol drivers on the binding. For more information about registering an address family, see <A HREF="401condis_4grr.htm">Registering and Opening an Address Family</A>.</P>

<P>If <I>ProtocolCoAfRegisterNotify</I> determines that the client driver can use the services of the call manager or MCM that registered the AF , it allocates a per-AF context area for the client and calls <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>. With the call to <B>NdisClOpenAddressFamily</B>, a protocol driver registers a set of client-supplied functions.</P>

<P>Before calling <B>NdisClOpenAddressFamily</B>, the protocol driver must:

<OL>
	<LI>Zero a structure of type NDIS_CLIENT_CHARACTERISTICS to pass to the <I>ClCharacteristics</I> parameter of <B>NdisClOpenAddressFamily</B>. </LI>

	<LI>Set the appropriate version information in the structure. </LI>

	<LI>Store the addresses of the <I>ProtocolXxx</I> client functions. </LI>
</OL>

<P>The handle that <B>NdisClOpenAddressFamily</B> returns at <I>NdisAfHandle</I> is opaque to a protocol driver. The protocol driver must retain this handle and provide it as an input parameter in future calls to NDIS — for instance, to register a SAP with <A HREF="103ndisx_22nm.htm"><B>NdisClRegisterSap</B></A>.</P>

<P>The following table lists the entry points and their respective client functions that a protocol driver must register with <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=52%>Entry point</TH>
<TH align=left width=48%>ProtocolXxx function</TH>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClCreateVcHandler</B></TD>
<TD width=48%><A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClDeleteVcHandler</B></TD>
<TD width=48%><A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClRequestHandler</B></TD>
<TD width=48%><A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClRequestCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClOpenAfCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_4f76.htm"><I>ProtocolClOpenAfComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClCloseAfCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_89gy.htm"><I>ProtocolClCloseAfComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClRegisterSapCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_2faq.htm"><I>ProtocolClRegisterSapComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClDeregisterSapCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_21o2.htm"><I>ProtocolClDeregisterSapComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClMakeCallCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_3qia.htm"><I>ProtocolClMakeCallComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClModifyCallQoSCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_3boy.htm"><I>ProtocolClModifyCallQoSComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClCloseCallCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_3ofm.htm"><I>ProtocolClCloseCallComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClAddPartyCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_2j5e.htm"><I>ProtocolClAddPartyComplete</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClDropPartyCompleteHandler</B></TD>
<TD width=48%><A HREF="104tdlow_07ea.htm"><I>ProtocolClDropPartyComplete</I></A></TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClIncomingCallHandler</B></TD>
<TD width=48%><A HREF="104tdlow_8a9e.htm"><I>ProtocolClIncomingCall</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClIncomingCallQoSChangeHandler</B></TD>
<TD width=48%><A HREF="104tdlow_6vzm.htm"><I>ProtocolClIncomingCallQoSChange</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClIncomingCloseCallHandler</B></TD>
<TD width=48%><A HREF="104tdlow_3nqq.htm"><I>ProtocolClIncomingCloseCall</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClIncomingDropPartyHandler</B></TD>
<TD width=48%><A HREF="104tdlow_8pde.htm"><I>ProtocolClIncomingDropParty</I></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=52%><B>ClCallConnectedHandler</B></TD>
<TD width=48%><A HREF="104tdlow_6mia.htm"><I>ProtocolClCallConnected</I></A> </TD>
</TR>
</TABLE><BR>

<P class=note><B>Note</B>&nbsp;&nbsp;The protocol driver must set every <B>Cl</B><I>Xxx</I> member in the NDIS_CLIENT_CHARACTERISTICS structure to a caller-supplied <I>ProtocolXxx</I> function when it calls <B>NdisClOpenAddressFamily</B>, even if it does not support incoming calls, outgoing calls, or point-to-multipoint connections. For whatever subset of connection-oriented functionality that such a protocol driver does not support, its <I>ProtocolXxx </I>functions simply return NDIS_STATUS_NOT_SUPPORTED.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registering%20as%20a%20Connection-Oriented%20Client"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
