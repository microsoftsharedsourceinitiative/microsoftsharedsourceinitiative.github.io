<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI Driver Dispatch Routines</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI Driver Dispatch Routines">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_driver_dispatch_routines_ng"></A>TDI Driver Dispatch Routines</H1>

<P>I/O requests are formatted as IRPs either by the I/O Manager or explicitly by a TDI client and submitted to the transport driver by calling <B>IoCallDriver</B>. Completed IRPs are returned to the caller when the transport driver calls <B>IoCompleteRequest</B> or <B>TdiCompleteRequest</B>. Any kernel-mode TDI client can set its IoCompletion routine for an IRP before it calls <B>IoCallDriver</B>.</P>

<P>There are five IRP_MJ_<I>XXX</I> codes used to send I/O requests to TDI transport drivers. These transports handle incoming IRPs in which the <B>MajorFunctionCode</B> is one of the following: 

<DL>
<DT><B>IRP_MJ_CREATE</B></DT>

<DD>Opens a named device object created by the transport and, subsequently, opens a transport address, connection endpoint, or control channel in the underlying transport. 

<P>This request originates in a client's call to <B>ZwCreateFile</B>. 
</DD>

<DT><B>IRP_MJ_INTERNAL_DEVICE_CONTROL</B></DT>

<DD>Specifies kernel-mode client requests (TDI IOCTLs), for which internal transport functions handle operations other than opening and closing file objects. 

<P>This request usually originates in a client's call to a <B>TdiBuild</B><I>Xxx</I> macro followed by its call to <B>IoCallDriver</B>. 
</DD>

<DT><B>IRP_MJ_DEVICE_CONTROL</B></DT>

<DD>Specifies user-mode-visible IOCTL requests issued by a transport-dedicated application. Except for any transport-defined "private" IOCTLs, such requests usually are forwarded to the same internal driver functions that handle internal-device control requests.

<P>This request originates in a call by a transport-dedicated user-mode application to <B>DeviceIoControl</B>.
</DD>

<DT><B>IRP_MJ_CLEANUP</B></DT>

<DD>Closes an open address, connection endpoint, or control channel when the NT executive is closing the last handle for the corresponding file object.

<P>This request originates in a client's call to <B>ZwClose</B>. 
</DD>

<DT><B>IRP_MJ_CLOSE</B></DT>

<DD>Closes an address, connection endpoint, or control channel if the executive is removing its last reference to the file object handle. When no outstanding file object handles are open, closes a transport-created device object.

<P>This request follows an IRP_MJ_CLEANUP request on the same file object. 

</DD>
</DL>

<P>The entry points in the TDI driver are one or more Dispatch routines that handle these IRP_MJ_<I>XXX</I> requests. Because a TDI client communicates with the driver only through IRPs, the driver has one or more TdiDispatch<I>Xxx</I> routines that determine what operation to carry out. Usually, these TdiDispatchXxx routines pass the client requests to appropriate internal driver functions for further processing.</P>

<P>A TDI transport driver exports all its TdiDispatch<I>Xxx</I> entry points by setting them in the driver object passed in to its <B>DriverEntry</B> routine. The I/O Manager calls a TdiDispatch<I>Xxx</I> routine whenever a client makes an I/O request. A transport driver can have a separate TdiDispatch<I>Xxx</I> to handle each of the possible IRP_MJ_<I>XXX</I> opcodes, a single TdiDispatch routine that processes IRPs with all possible IRP_MJ_<I>XXX</I> opcodes, or a number of TdiDispatch<I>Xxx</I> that handle discrete subsets of the IRP_MJ_<I>XXX</I> opcodes. </P>

<P>Since all Dispatch entry points are exported by address in the driver object, not by name, a TDI transport driver writer can name these routines anything. In this TDI documentation, TdiDispatch<I>Xxx</I> routines have the following metanames, each describing their basic functionality, to correspond to the preceding IRP_MJ_<I>XXX</I>:

<DL>
<DT><B>IRP_MJ_CREATE</B></DT>

<DD><A HREF="31tddisp_6foy.htm">TdiDispatchCreate</A> </DD>

<DT><B>IRP_MJ_DEVICE_INTERNAL_CONTROL</B></DT>

<DD><A HREF="31tddisp_2sfm.htm">TdiDispatchInternalDeviceControl</A> </DD>

<DT><B>IRP_MJ_DEVICE_CONTROL</B></DT>

<DD><A HREF="31tddisp_9pwy.htm">TdiDispatchDeviceControl</A> </DD>

<DT><B>IRP_MJ_CLEANUP</B></DT>

<DD><A HREF="31tddisp_3vn6.htm">TdiDispatchCleanup</A> </DD>

<DT><B>IRP_MJ_CLOSE</B></DT>

<DD><A HREF="31tddisp_7t9u.htm">TdiDispatchClose</A> 
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI%20Driver%20Dispatch%20Routines"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
