<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisInitializeReadWriteLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisInitializeReadWriteLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisinitializereadwritelock_nr"></A>NdisInitializeReadWriteLock</H1>

<P><B>NdisInitializeReadWriteLock</B> initializes a variable of type <B>NDIS_RW_LOCK</B>. An <B>NDIS_RW_LOCK</B> variable is used to limit write access to shared resources to one nonISR-driver thread at a time. This <B>NDIS_RW_LOCK</B> can allow multiple nonISR-driver threads concurrent read access to those resources. Such read access is not permitted during a write access. </P>

<PRE class=syntax><B>VOID</B>
<B>  NdisInitializeReadWriteLock(</B>
    <B>IN PNDIS_RW_LOCK</B>  <I>Lock</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Lock</I></DT>

<DD>Pointer to an opaque variable that represents a lock. The caller can use this lock to gain write or read access to resources that are shared among nonISR-driver threads.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>The <I>Lock</I> pointer that is passed to <B>NdisInitializeReadWriteLock</B> is a required parameter for all other <B>Ndis..ReadWriteLock</B> functions. </P>

<P>Before a driver calls <A HREF="103ndisx_9r3m.htm"><B>NdisAcquireReadWriteLock</B></A> to obtain write or read access to a resource, the driver must call <B>NdisInitializeReadWriteLock</B> to initialize the lock that is associated with that resource. The caller must provide nonpaged storage for the variable at <I>Lock</I>. </P>

<P>After calling <B>NdisInitializeReadWriteLock</B>, the driver can call <B>NdisAcquireReadWriteLock</B> to obtain either write or read access to the resource. Only one nonISR-driver thread at a time can obtain write access to the resource. When one nonISR thread has write access, all read and write accesses by other nonISR threads must wait until the write-access holder releases the lock. However, if a nonISR thread has read access, other nonISR threads can concurrently acquire read access. </P>

<P>Initialize and use this type of lock for resources that are frequently accessed for reading and infrequently accessed for writing. </P>

<P>Once resource access is complete, the driver calls <A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A>. </P>

<P>Each lock that a driver initializes does one of the following:

<UL>
	<LI>protects a discrete set of shared resources from simultaneous write and read access by driver threads that run at IRQL &lt;= DISPATCH_LEVEL.  </LI>

	<LI>exposes a discrete set of shared resources to simultaneous read access by driver threads that run at IRQL &lt;= DISPATCH_LEVEL </LI>
</UL>

<P>Callers of <B>NdisInitializeReadWriteLock</B> can run at any IRQL. Usually a caller is running at IRQL = PASSIVE_LEVEL during initialization. </P>

<H4>See Also</H4>

<P><A HREF="103ndisx_9r3m.htm"><B>NdisAcquireReadWriteLock</B></A>, <A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisInitializeReadWriteLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
