<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Line-Up Indication</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Line-Up Indication">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_line_up_indication_ng"></A>Line-Up Indication</H2>

<P>From the telephony standpoint, the life of a call is a series of state transitions. For outgoing calls, a typical sequence of states might be: dialing, proceeding, ringing, connected, disconnected, and finally, idle. For an incoming call, this sequence might look as follows: offering, ringing, connected, disconnected, and finally, idle. In either case, the transition to the connected state is of particular interest, since this is the state in which data can flow across the wire.</P>

<P>An NDIS WAN miniport driver calls <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A> with a <I>GeneralStatus</I> value of NDIS_STATUS_WAN_LINE_UP to indicate that a new data channel has become active. The buffer at <I>StatusBuffer</I> is formatted as an <A HREF="105nstru_4agi.htm">NDIS_MAC_LINE_UP</A> structure. Prior to indicating a line up, the adapter will accept frames and can let them succeed or fail, but it is unlikely that such packets will actually be received by any remote system. Before a line-up indication, protocols are encouraged to reduce their timers and retry counts so that any outgoing connection attempts quickly fail. </P>

<P>An NDIS_STATUS_WAN_LINE_UP status must be completed prior to returning from the <A HREF="29tpioid_5rsi.htm">OID_TAPI_GET_ID</A> request. The <B>NdisLinkContext</B> returned from the NDIS_STATUS_WAN_LINE_UP indication is passed back in the NDIS_TAPI_GET_ID structure as the <B>DeviceID</B>.</P>

<P>The NDIS_STATUS_WAN_LINE_UP must also be completed prior to indicating the LINECALLSTATE_CONNECTED to NDISWAN. Otherwise, the user-mode client of the connection might attempt to send data on a connection before NDISWAN is aware of the line. </P>

<P>When the line-up indication completes, NDISWAN and the miniport driver have exchanged handles, one that NDISWAN uses to subsequently direct send packets onto a data channel and the other that the miniport driver uses to identify the correct data channel for sends and in any status indications it makes to NDISWAN. Before NDISWAN gets a line-up indication and establishes a data channel for a particular call instance, it will not pass send packets on to the miniport driver’s <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> function. </P>

<P>A miniport driver indicates a line-up status in the context of an OID_TAPI_GET_ID request if either of the following occurs:

<UL>
	<LI>The <B>ulSelect</B> member of NDIS_TAPI_GET_ID structure is set to LINECALLSELECT_CALL, and </LI>

	<LI>This request is the first OID_TAPI_GET_ID request for the <B>hdCall</B> member of the NDIS_TAPI_GET_ID structure </LI>
</UL>

<P>or

<UL>
	<LI>The <B>ulSelect</B> member of NDIS_TAPI_GET_ID structure is set to LINECALLSELECT_CALL, and </LI>

	<LI>This request is <I>not</I> the first OID_TAPI_GET_ID request for the <B>hdCall</B> member of the NDIS_TAPI_GET_ID structure, but the <B>DeviceClass</B> is different from any previous get-id request for this call instance, and</LI>

	<LI>The miniport driver supports separate data channels for different device classes.</LI>
</UL>

<P>The <I>StatusBuffer</I> passed to <B>NdisMIndicateStatus</B> should point to a buffer of type NDIS_MAC_LINE_UP. This structure has the following definition:</P>

<PRE class=syntax>typedef struct _NDIS_MAC_LINE_UP {
  IN ULONG  LinkSpeed;
  IN NDIS_WAN_QUALITY  Quality;
  IN USHORT  SendWindow;
  IN NDIS_HANDLE  ConnectionWrapperID;
  IN NDIS_HANDLE  NdisLinkHandle;
  IN OUT NDIS_HANDLE  NdisLinkContext;
} NDIS_MAC_LINE_UP, *PNDIS_MAC_LINE_UP;
</PRE>

<P>The NDIS WAN miniport driver should set the value of the <B>ConnectionWrapperID</B> member in the NDIS_MAC_LINE_UP structure to that of the <B>htCall</B> (the TAPI call handle) associated with the call because it is guaranteed to be unique across all telephony-capable miniport drivers. The <B>ConnectionWrapperID</B> is valid until the miniport driver issues a line-down indication.</P>

<P>The <B>NdisLinkHandle</B> represents the miniport driver’s handle for this data channel on this call instance. Typically it references the state the miniport driver maintains for this call. NDISWAN will retain this handle and return it to the miniport driver on any sends on this data channel. The <B>NdisLinkContext</B> is set to NULL when the miniport driver calls <B>NdisMIndicateStatus</B>. It will be set to a value supplied by NDISWAN before returning from <B>NdisMIndicateStatus</B>. This opaque handle must be retained by the miniport driver and supplied in subsequent calls to NDISWAN regarding this link, for example, to <A HREF="103ndisx_9jaq.htm"><B>NdisMWanIndicateReceive</B></A>. </P>

<P>The <B>NdisLinkContext</B> <I>must</I> be returned in the <B>DeviceID</B> member of NDIS_TAPI_GET_ID when <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> returns from the OID_TAPI_GET_ID request. This context binds the call connection and the device class as seen by NDISTAPI with a handle that NDISWAN recognizes and has tied to a particular data channel. NDISWAN uses this handle to ensure that packets from a TAPI client are directed by NDISWAN to the correct miniport driver data channel.</P>

<H4>Changing the Send Window</H4>

<P>The <B>SendWindow</B> member of the NDIS_MAC_LINE_UP structure specified in a line-up indication acts as a throttle, controlling how many packets NDISWAN passes to a <I>MiniportWanSend</I> function for a particular line before it starts queuing packets. The <B>MaxTransmit</B> member of NDIS_WAN_INFO returned in response to the <A HREF="28wanoid_3302.htm">OID_WAN_GET_INFO</A> request during driver initialization represents a default value for this window for all lines supported by an adapter. The miniport driver can reset the send window value on a per-line basis when it makes the first line-up indication for a new line. It can also change this send window value for a line dynamically by making a subsequent line-up indication to NDISWAN with a new nonzero <B>SendWindow</B>. That is, the miniport driver does not have to wait for an incoming or outgoing call to generate a line-up indication. If a miniport driver specifies a <B>SendWindow</B> of zero, NDISWAN will revert to using the default <B>MaxTransmit</B> value as the send window.</P>

<P>If the miniport driver makes a line-up indication to change the <B>SendWindow</B>, it must fill in both the <B>NdisLinkHandle</B> and <B>NdisLinkContext</B> members with the values that apply to the data channel on which the send window is to be changed. <B>LinkSpeed</B> and <B>Quality</B> are set to zero or possibly to new values. Both <B>LinkSpeed</B> and <B>Quality</B> can also be changed dynamically and independently by making a line-up indication and resetting the value(s).</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Line-Up%20Indication"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
