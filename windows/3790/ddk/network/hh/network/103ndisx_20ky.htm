<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisScheduleWorkItem</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisScheduleWorkItem">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisscheduleworkitem_nr"></A>NdisScheduleWorkItem</H1>

<P><B>NdisScheduleWorkItem</B> inserts a given work item into a queue from which a system worker thread removes the item and gives control to the callback function that the driver previously supplied to <A HREF="103ndisx_5jw2.htm"><B>NdisInitializeWorkItem</B></A>.</P>

<PRE class=syntax><B>NDIS_STATUS
  NdisScheduleWorkItem(
    IN PNDIS_WORK_ITEM</B>  <I>WorkItem</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>WorkItem</I></DT>

<DD>Pointer to the work item that was set up by a preceding call to <B>NdisInitializeWorkItem</B>.</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisScheduleWorkItem</B> always succeeds and therefore always returns NDIS_STATUS_SUCCESS.</P>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A call to <B>NdisScheduleWorkItem</B> allows an NDIS driver to defer some driver-determined operation that could or should be done at a lower IRQL than the raised IRQL at which it is currently running to its worker-thread callback function. </P>

<P>The driver's callback is run within a system thread context at IRQL = PASSIVE_LEVEL later. This caller-supplied function is responsible for reclaiming the storage that the driver allocated for <I>WorkItem</I>. For example, if the driver called <B>NdisAllocateMemoryWithTag</B> to provide a context area to <B>NdisInitializeWorkItem</B>, its callback function should make the reciprocal call to <B>NdisFreeMemory</B> with <I>WorkItem</I> before it returns control. </P>

<P>A driver must not wait for its callback routine to complete an operation if it is already holding one synchronization object and might attempt to acquire another. For example, a NDIS driver should release any currently held spin lock(s), and so forth <I>before</I> it calls <B>NdisScheduleWorkItem</B>. A highest level NDIS protocol driver also must release any currently held semaphores, mutexes, resource variables, and so forth before it calls <B>NdisScheduleWorkItem</B>. Releasing all synchronization resources before queuing a synchronous worker-thread operation prevents deadlocks.</P>

<P>A serialized miniport driver should <I>never</I> attempt to queue a worker-thread callback routine, because there is no way for such a driver to synchronize access to its NIC context area(s) with a worker-thread callback. Consequently, such a serialized NDIS driver cannot share anything in its per-adapter context area with a worker-thread callback function without causing intermittent system crashes. </P>

<P>Callers of <B>NdisScheduleWorkItem</B> must be running at IRQL &lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A>, <A HREF="103ndisx_6sc2.htm"><B>NdisFreeMemory</B></A>, <A HREF="103ndisx_5jw2.htm"><B>NdisInitializeWorkItem</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisScheduleWorkItem"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
