<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMWanSendComplete</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMWanSendComplete">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismwansendcomplete_nr"></A>NdisMWanSendComplete</H1>

<P><B>NdisMWanSendComplete</B> returns the packet and final status of a completed send request for which the miniport driver previously returned NDIS_STATUS_PENDING.</P>

<PRE class=syntax><B>VOID</B>
<B>  NdisMWanSendComplete(</B>
    <B>IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN PNDIS_WAN_PACKET</B>  <I>Packet</I><B>,</B>
    <B>IN NDIS_STATUS</B>  <I>Status</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle originally input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>Packet</I></DT>

<DD>Pointer to the protocol-supplied packet originally passed in to the <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> function.</DD>

<DT><I>Status</I></DT>

<DD>Specifies the NDIS_STATUS_<I>XXX</I> code describing the outcome of the completed send operation, either NDIS_STATUS_SUCCESS or a miniport driver-determined error status value.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Whenever the <I>MiniportWanSend</I> function returns NDIS_STATUS_PENDING for an incoming packet, the miniport driver must eventually call <B>NdisMWanSendComplete</B> with a pointer to that packet. When <I>MiniportWanSend</I> returns any NDIS_STATUS_<I>XXX</I> except NDIS_STATUS_PENDING for a given packet, that packet is considered completed as soon as <I>MiniportWanSend</I> returns control. </P>

<P>Calling <B>NdisMWanSendComplete</B> does not necessarily imply that the packet has been transmitted over the network, although usually it has before a miniport driver calls this function. However, a miniport driver might call <B>NdisMWanSendComplete</B> as soon as it has successfully programmed its NIC for the transmit operation, particularly if its NIC is a so-called intelligent network card. </P>

<P><B>NdisMWanSendComplete</B> forwards the completed packet to the <A HREF="104tdlow_6qr6.htm"><I>ProtocolSendComplete</I></A> function of the driver that initiated the original send operation. Then, the protocol regains ownership of the packet and all buffers that it allocated for the send. </P>

<P>Serialized callers of <B>NdisMWanSendComplete</B> must run at IRQL = DISPATCH_LEVEL. Deserialized callers of <B>NdisMWanSendComplete</B> can run at IRQL &lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, <A HREF="104tdlow_6qr6.htm"><I>ProtocolSendComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMWanSendComplete"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
