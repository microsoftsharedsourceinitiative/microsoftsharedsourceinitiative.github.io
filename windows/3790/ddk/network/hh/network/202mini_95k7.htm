<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS-Supplied Synchronization Functions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS-Supplied Synchronization Functions">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_ndis_supplied_synchronization_functions_ng"></A>NDIS-Supplied Synchronization Functions</H2>

<P>The timer functions allow the miniport driver to implement an operation that occurs at a driver-requested interval. For instance, a driver can use a timer to poll its NIC. Events can be used to synchronize operations between two threads, at least one of which is running at IRQL = PASSIVE_LEVEL. Spin locks are used to synchronize access to shared resources.</P>

<P>The following table describes the synchronization functions supplied by the NDIS Library for miniport drivers.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Function</TH>
<TH align=left width=77%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Cancels a timer that was previously set with <B>NdisMSetTimer</B>. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_87aq.htm"><B>NdisMInitializeTimer</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Initializes a timer object and associates a <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function with the object.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%> </TD>
<TD width=77%>Sets a timer to go off after a specified interval.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Sets a timer to go off at a specified interval or until canceled with a call to <B>NdisMCancelTimer</B>. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_3lv6.htm"><B>NdisMSleep</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Causes the caller’s thread to block for the specified interval. A driver calls <B>NdisMSleep</B> during initialization or when halting the adapter; for instance, while waiting for the NIC to complete initialization. <B>NdisMSleep</B> is only called at IRQL = PASSIVE_LEVEL.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_0xo2.htm"><B>NdisStallExecution</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Causes the caller’s thread to stall for a specified interval not to exceed 50 milliseconds. <B>NdisStallExecution</B> is only called at raised IRQL when <B>NdisMSleep</B> cannot be used.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_2rqq.htm"><B>NdisInitializeEvent</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Creates and initializes an event which can be used to synchronize driver operations.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_0zjm.htm"><B>NdisSetEvent</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Signals the specified event.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_12lu.htm"><B>NdisResetEvent</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Resets the specified event to the unsignaled state. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_7uyb.htm"><B>NdisWaitEvent</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Causes the caller to wait until the specified event is signaled or the specified time interval expires.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to resources shared among nonISR driver functions. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_4pv6.htm"><B>NdisFreeSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock</B>. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_896a.htm"><B>NdisAcquireSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Acquires a spin lock to protect access to shared resources between nonISR driver functions in an SMP-safe way. Miniport drivers that are running at IRQL &lt; DISPATCH_LEVEL call this function to acquire a spin lock.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Releases a spin lock previously acquired by calling <B>NdisAcquireSpinLock</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_8z1u.htm"><B>NdisDprAcquireSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Acquires a spin lock at IRQL = DISPATCH_LEVEL. Protects access to shared resources between nonISR driver functions in an SMP-safe way. Faster than calling <B>NdisAcquireSpinLock </B>for driver functions running at IRQL = DISPATCH_LEVEL.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_8ktu.htm"><B>NdisDprReleaseSpinLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Releases a spin lock previously acquired by calling <B>NdisDprAcquireSpinLock</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_2tiq.htm"><B>NdisInitializeReadWriteLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Initializes a variable of type NDIS_RW_LOCK. An NDIS_RW_LOCK variable is used to limit write access to shared resources to one nonISR-driver thread at a time. This NDIS_RW_LOCK can allow multiple nonISR-driver threads concurrent read access to those resources. Such read access is not permitted during a write access. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_9r3m.htm"><B>NdisAcquireReadWriteLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Acquires a lock that the caller uses for either write or read access to the resources that are shared among driver threads. Miniport drivers that are running at IRQL &lt; DISPATCH_LEVEL call this function to acquire a read-write lock. Read-write locks are used for resources that are frequently accessed for reading and infrequently accessed for writing. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Releases a read-write lock that was acquired in a preceding call to <B>NdisAcquireReadWriteLock</B>. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%><A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>&nbsp;</TD>
<TD width=77%>Any NIC driver function that shares resources with the <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> or <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A> functions must synchronize access to resources with these two functions to prevent race conditions. Functions that must synchronize with <I>MiniportISR</I> and <I>MiniportDisableInterrupt</I> do so by calling <B>NdisMSynchronizeWithInterrupt</B> with a <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A> function that also runs at DIRQL while it accesses the shared resource. </TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS-Supplied%20Synchronization%20Functions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
