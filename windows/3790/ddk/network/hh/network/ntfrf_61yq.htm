<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>INetCfg</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="INetCfg">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_inetcfg_nr"></A>INetCfg</H1>

<P>The <B>INetCfg</B> interface is the root of all networking configuration and installation. The <B>INetCfg</B> interface provides methods that load into memory basic networking information, apply changes to network configuration, and retrieve network components and binding paths.</P>

<P>The interface identifier (IID) for this interface is IID_INetCfg.</P>

<H4>When to Implement</H4>

<P>It is not necessary to implement the methods of this interface. They are implemented in <I>Netcfgx.dll</I>.</P>

<H4>When to Use</H4>

<P>Use this interface to retrieve network components and binding paths.</P>

<H4>Methods </H4>

<P>The following methods are listed in Vtable order:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=34%>IUnknown method</TH>
<TH align=left width=66%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=34%><B>QueryInterface</B></TD>
<TD width=66%>Returns pointers to supported interfaces.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>AddRef</B></TD>
<TD width=66%>Increments the reference count.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Release</B></TD>
<TD width=66%>Decrements the reference count.</TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TH align=left width=34%>INetCfg method</TH>
<TH align=left width=66%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_1h0y.htm"><B>Initialize</B></A></TD>
<TD width=66%>Initializes network configuration by loading into memory all basic networking information.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_1iwi.htm"><B>Uninitialize</B></A></TD>
<TD width=66%>Unloads from memory all basic networking information.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_50xe.htm"><B>Apply</B></A></TD>
<TD width=66%>Applies all changes made to the configuration state of the network to the registry.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_2oz6.htm"><B>Cancel</B></A></TD>
<TD width=66%>Disregards any proposed changes to the configuration state of the network.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_3dde.htm"><B>EnumComponents</B></A></TD>
<TD width=66%>Retrieves an enumeration containing a collection of network components of a particular type.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_1xte.htm"><B>FindComponent</B></A></TD>
<TD width=66%>Retrieves the first network component that matches the specified component identifier.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><A HREF="ntfrf_56cy.htm"><B>QueryNetCfgClass</B></A></TD>
<TD width=66%>Retrieves a pointer to a specific class of network component.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Defined in <I>Netcfgx.h</I>. Include <I>Netcfgx.h</I>.</P>

<H4>Comments</H4>

<P>The <B>INetCfg</B> interface is the only network configuration interface that applications can receive after they call the COM <B>CoCreateInstance</B> function to create a network configuration object. Applications must obtain all other network configuration interfaces from <B>INetCfg</B> by either enumerating the interfaces or by calling methods that return the interfaces. </P>

<P>When notify objects initialize, they receive a pointer to <B>INetCfg</B> that represents the current networking configuration. Notify objects can use <B>INetCfg</B> to access all aspects of networking configuration. </P>

<P>After an application creates a network configuration object, the application should call <B>Initialize</B> to initialize network configuration. After the application finishes with the network configuration object, the application should call <B>Uninitialize</B> before releasing the network configuration object. </P>

<H4>Example</H4>

<P>The following example creates a network configuration object, accesses a specific network component, and, finally, releases the network configuration object. This example shows a typical sequence of operations. </P>

<PRE>INetCfg *pnetcfg = NULL;
INetCfgLock *pncfglock = NULL;
INetCfgComponent *pncfgcomp = NULL;
HRESULT hr = S_OK;
LPWSTR *ppszwrClient = NULL;
 
hr = CoCreateInstance(CLSID_CNetCfg, NULL, CLSCTX_SERVER, 
                      IID_INetCfg, (LPVOID*)&amp;pnetcfg);
hr = pnetcfg-&gt;QueryInterface(IID_INetCfgLock, (LPVOID*)&amp;pncfglock);
hr = pncfglock-&gt;AcquireWriteLock(5, TEXT("MY CLIENT"), &amp;ppszwrClient);
hr = pnetcfg-&gt;Initialize(NULL);
 
hr = pnetcfg-&gt;FindComponent(TEXT("MS_TCPIP"), &amp;pncfgcomp);
// Call various methods on pncfgcomp here.
pncfgcomp-&gt;Release();
 
hr = pnetcfg-&gt;Apply();
hr = pnetcfg-&gt;Uninitialize();
hr = pncfglock-&gt;ReleaseWriteLock();
pnetcfg-&gt;Release();
 </PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: INetCfg"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
