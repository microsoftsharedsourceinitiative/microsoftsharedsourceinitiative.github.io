<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMRegisterUnloadHandler</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMRegisterUnloadHandler">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismregisterunloadhandler_nr"></A>NdisMRegisterUnloadHandler</H1>

<P>The <B>NdisMRegisterUnloadHandler</B> function registers an unload handler for a driver.</P>

<PRE class=syntax><B>VOID
</B>  <B>NdisMRegisterUnloadHandler(</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisWrapperHandle</I>,
    <B>IN PDRIVER_UNLOAD</B>  <I>UnloadHandler</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>NdisWrapperHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>.</DD>

<DT><I>UnloadHandler</I></DT>

<DD>Specifies the entry point for the driver's unload routine. An unload routine is declared as follows:

<PRE>VOID
(*PDRIVER_UNLOAD) (
    IN struct _DRIVER_OBJECT *DriverObject
    );</PRE>

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A driver calls <B>NdisMRegisterUnloadHandler</B> from its <B>DriverEntry</B> function after <B>DriverEntry</B> has called <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A> or <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>. <B>NdisMRegisterUnloadHandler</B> registers an unload handler for the driver. </P>

<P>The functionality of the unload handler is driver-specific. For example, an intermediate driver should register an unload handler that calls <A HREF="103ndisx_9ucy.htm"><B>NdisDeregisterProtocol</B></A> to deregister the protocol portion of the intermediate driver. The unload handler should also perform any necessary cleanup operations, such as deallocating resources used by the protocol portion of the driver.</P>

<P>A miniport driver, such as a load-balancing miniport driver, that monitors more than one miniport driver instance should register an unload handler that cleans up state information and deallocates resources after the miniport driver instances that it monitors are halted. Note that an unload handler differs from a <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function: the unload handler has a more global scope, whereas the scope of the MiniportHalt function is restricted to a particular miniport driver instance.</P>

<P>Callers of <B>NdisMRegisterUnloadHandler</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0quq.htm"><B>DriverEntry of NDIS Miniport Drivers</B></A>, <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="103ndisx_9ucy.htm"><B>NdisDeregisterProtocol</B></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMRegisterUnloadHandler"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
