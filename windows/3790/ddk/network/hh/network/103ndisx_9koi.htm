<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisOpenAdapter</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisOpenAdapter">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ansi_string_kr">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisopenadapter_nr"></A>NdisOpenAdapter</H1>

<P><B>NdisOpenAdapter</B> sets up a binding between the calling protocol and a particular underlying NIC driver or NDIS intermediate driver. </P>

<PRE class=syntax><B>VOID
  NdisOpenAdapter(
    OUT PNDIS_STATUS</B>  <I>Status</I><B>,</B>
    <B>OUT PNDIS_STATUS</B>  <I>OpenErrorStatus</I><B>,</B>
    <B>OUT PNDIS_HANDLE</B>  <I>NdisBindingHandle</I><B>,</B>
    <B>OUT PUINT</B>  <I>SelectedMediumIndex</I><B>,</B>
    <B>IN PNDIS_MEDIUM</B>  <I>MediumArray</I><B>,</B>
    <B>IN UINT</B>  <I>MediumArraySize</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisProtocolHandle</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>ProtocolBindingContext</I><B>,</B>
    <B>IN PNDIS_STRING</B>  <I>AdapterName</I><B>,</B>
    <B>IN UINT</B>  <I>OpenOptions</I><B>,</B>
    <B>IN PSTRING</B>  <I>AddressingInformation</I>  <B>OPTIONAL,</B>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Status</I></DT>

<DD>Pointer to a caller-supplied variable that can be one of the following values on return from this function: 

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>The requested binding is now set up so the caller can use the values returned at <I>NdisBindingHandle</I> and <I>SelectedMediumIndex</I> in subsequent calls to <B>Ndis</B><I>Xxx</I>. </DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>The requested operation is being handled asynchronously, and the caller’s <A HREF="104tdlow_9xbm.htm"><I>ProtocolOpenAdapterComplete</I></A> function will be called when the open is completed. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The requested operation failed because NDIS could not allocate sufficient memory or initialize state it uses to track an open binding.</DD>

<DT>NDIS_STATUS_ADAPTER_NOT_FOUND</DT>

<DD>The requested operation failed because the name at <I>AdapterName</I> could not be found in the system object namespace. </DD>

<DT>NDIS_STATUS_UNSUPPORTED_MEDIA</DT>

<DD>The array at <I>MediumArray</I> did not specify any medium that is supported by NDIS or by the underlying driver. </DD>

<DT>NDIS_STATUS_CLOSING</DT>

<DD>Either the caller or the physical or virtual device designated at <I>AdapterName</I> is being closed. </DD>

<DT>NDIS_STATUS_OPEN_FAILED</DT>

<DD>The open attempt failed for none of the preceding specific reasons. For example, possibly NDIS could not initialize the filter package for the selected medium.</DD>
</DL>
</DD>

<DT><I>OpenErrorStatus</I></DT>

<DD>Pointer to a caller-supplied variable that can contain an NDIS_STATUS_<I>XXX</I> error supplying more information if <B>NdisOpenAdapter</B> returns an error at <I>Status</I>. For example, the driver of a Token Ring NIC might return a ring error in this variable. </DD>

<DT><I>NdisBindingHandle</I></DT>

<DD>Pointer to a caller-supplied variable in which NDIS returns a handle representing a successful binding between the caller and the given physical or virtual NIC specified at <I>AdapterName</I>. </DD>

<DT><I>SelectedMediumIndex</I></DT>

<DD>Pointer to a caller-supplied variable in which NDIS returns the index of the array element that specifies the type of media the underlying NDIS driver uses. </DD>

<DT><I>MediumArray</I></DT>

<DD>Pointer to an array of NDIS_MEDIUM-type values specifying the types of media the caller can support. Possible elements include any proper subset of the following:

<DL>
<DT><B>NdisMedium802_3</B></DT>

<DD>Specifies an Ethernet (802.3) network. </DD>

<DT><B>NdisMedium802_5</B></DT>

<DD>Specifies a Token Ring (802.5) network.</DD>

<DT><B>NdisMediumFddi</B></DT>

<DD>Specifies a Fiber Distributed Data Interface (FDDI) network. </DD>

<DT><B>NdisMediumWan</B></DT>

<DD>Specifies a wide area network. This type covers various forms of point-to-point and WAN NICs, as well as variant address/header formats that must be negotiated between the protocol driver and the underlying driver after the binding is established. </DD>

<DT><B>NdisMediumLocalTalk</B></DT>

<DD>Specifies a LocalTalk network. </DD>

<DT><B>NdisMediumDix</B></DT>

<DD>Specifies an Ethernet network for which the drivers use the DIX Ethernet header format. </DD>

<DT><B>NdisMediumArcnetRaw</B></DT>

<DD>Specifies an ARCNET network. </DD>

<DT><B>NdisMediumArcnet878_2</B></DT>

<DD>Specifies an ARCNET (878.2) network. </DD>

<DT><B>NdisMediumAtm</B></DT>

<DD>Specifies an ATM network. Connection-oriented client protocols can bind themselves to an underlying miniport driver that returns this value. Otherwise, legacy protocols bind themselves to the system-supplied LanE intermediate driver, which reports its medium type as either of <B>NdisMedium802_3</B> or <B>NdisMedium802_5</B>, depending on how the LanE driver is configured by the network administrator. </DD>

<DT><B>NdisMediumWirelessWan</B></DT>

<DD>Specifies a wireless network. This type covers various wireless media that do not include the infrared wireless types designated by <B>NdisMediumIrda</B>.</DD>

<DT><B>NdisMediumIrda</B></DT>

<DD>Specifies an infrared (IrDA) network. </DD>

<DT><B>NdisMediumCoWan</B> </DT>

<DD>Specifies a wide area network in a connection-oriented environment. </DD>

<DT><B>NdisMedium1394</B></DT>

<DD>Specifies an IEEE 1394 (fire wire) network. </DD>
</DL>
</DD>

<DT><I>MediumArraySize</I></DT>

<DD>Specifies the number of elements at <I>MediumArray</I>. </DD>

<DT><I>NdisProtocolHandle</I></DT>

<DD>Specifies the handle returned by <B>NdisRegisterProtocol</B>. </DD>

<DT><I>ProtocolBindingContext</I></DT>

<DD>Specifies the handle for a caller-supplied resident context area in which the protocol maintains state about this binding after it has been established. </DD>

<DT><I>AdapterName</I></DT>

<DD>Pointer to an NDIS_STRING type containing a counted string, specified in the system-default character set, naming the NIC or the virtual adapter of an underlying NDIS driver. This driver exports a set of upper-edge (<I>MiniportXxx</I>) functions. For Windows&nbsp;2000 and later drivers, this counted string contains Unicode characters. That is, for Windows 2000 and later, NDIS defines the NDIS_STRING type as a <A HREF="JavaScript:hhobj_1.Click()">UNICODE_STRING</A> type. </DD>

<DT><I>OpenOptions</I></DT>

<DD>Specifies a bitmask containing flags the caller passes to the next-lower driver, assumed to be a NIC driver. Currently, this parameter is reserved for system use. </DD>

<DT><I>AddressingInformation</I></DT>

<DD>Pointer to an optional variable-length counted string containing information specific to the underlying NIC that the NIC driver can use to program the netcard. This pointer can be NULL. 

<P>If it is supplied, the addressing information must remain valid until the open operation completes. An underlying NIC driver that supports an asynchronous modem can use this information for dialing.

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A protocol driver calls <B>NdisOpenAdapter</B> from its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function. NDIS no longer supports calling <B>NdisOpenAdapter</B> from the <B>DriverEntry</B> function, which was an option available to legacy (V3.0) protocols. NDIS no longer supports V3.0 protocols. NDIS fails any attempt to call <B>NdisOpenAdapter</B> outside the context of <I>ProtocolBindAdapter</I>.</P>

<P>The string at <I>AdapterName</I> remains valid only until <B>NdisOpenAdapter</B> returns control, even if it returns NDIS_STATUS_PENDING at <I>Status</I>. </P>

<P>The variables at <I>NdisBindingHandle</I> and <I>SelectedMediumIndex</I> should be ignored until the <A HREF="104tdlow_9xbm.htm"><I>ProtocolOpenAdapterComplete</I></A><I> </I>function is called if <B>NdisOpenAdapter</B> returns NDIS_STATUS_PENDING. Because these variables can remain invalid until <I>ProtocolOpenAdapterComplete</I> is called, they cannot be on the stack. Usually, these variables reside in the <I>ProtocolBindingContext</I> area since this handle is an input parameter to <I>ProtocolOpenAdapterComplete</I>. </P>

<P>A protocol driver should keep the handle returned at <I>NdisProtocolHandle</I>. It is a required parameter to other <B>Ndis</B><I>Xxx</I> functions that the driver calls subsequently. The supplied <I>ProtocolBindingContext</I> is an input parameter to the caller’s <I>ProtocolXxx</I> functions, so protocols usually pass an <I>NdisProtocolHandle</I> pointer to a variable somewhere in the caller-allocated context area in their calls to <B>NdisOpenAdapter</B>.</P>

<P>The caller uses the value returned at <I>SelectedMediumIndex</I> in subsequent calls to <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> and/or <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>. The OIDs it sets in the request packet depend on the returned <B>NdisMedium</B><I>Xxx</I>. For example, if <B>NdisMediumAtm</B> is returned at <I>SelectedMediumIndex</I>, the protocol driver calls <B>NdisCoRequest</B> when specifying OID_ATM_<I>XXX</I> or OID_CO_<I>XXX</I> codes, and <B>NdisRequest</B> when specifying OID_GEN_<I>XXX</I> codes. </P>

<P>If <B>NdisMediumWan</B> is returned at <I>SelectedMediumIndex</I>, the protocol driver calls <B>NdisRequest</B> specifying <A HREF="28wanoid_89ki.htm">OID_WAN_MEDIUM_SUBTYPE</A> in a query to determine which of the WAN media types the underlying driver uses. </P>

<P>If a previously issued global query of OID_NETWORK_TYPE for wireless media indicates that the driver and underlying NIC support more than one <B>NdisMediumWirelessWan</B>-type medium, the protocol must select one of the supported media as soon as NDIS has set up the binding and before the protocol selects the header format. </P>

<P>For more information about the general and medium-specific OIDs that protocol drivers use to negotiate with a just-bound NDIS driver, see <A HREF="21oidovw_8q9e.htm">NDIS Object Identifiers</A>. </P>

<P>Callers of <B>NdisOpenAdapter</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="JavaScript:hhobj_2.Click()">ANSI_STRING</A>, <A HREF="104tdlow_9raq.htm"><B>DriverEntry of NDIS Protocol Drivers</B></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A>, <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>, <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>, <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A>, <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A>, <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>, <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="104tdlow_9xbm.htm"><I>ProtocolOpenAdapterComplete</I></A>, <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A>, <A HREF="JavaScript:hhobj_3.Click()">UNICODE_STRING</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisOpenAdapter"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
