<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiBuildInternalDeviceControlIrp</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiBuildInternalDeviceControlIrp">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocalldriver_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdibuildinternaldevicecontrolirp_nr"></A>TdiBuildInternalDeviceControlIrp</H1>

<P><B>TdiBuildInternalDeviceControlIrp</B> allocates an IRP for a client-initiated internal device control request. After it returns, the client calls another <B>TdiBuild</B><I>Xxx</I> macro with the returned IRP to set up the I/O stack location of the underlying transport driver before making the request with <B>IoCallDriver</B>.</P>

<PRE class=syntax><B>PIRP 
</B>  <B>TdiBuildInternalDeviceControlIrp(
</B>    <B>IN CCHAR</B>  <I>IrpSubFunction</I><B>,
</B>    <B>IN PDEVICE_OBJECT</B>  <I>DeviceObject</I><B>,
</B>    <B>IN PFILE_OBJECT</B>  <I>FileObject</I><B>,
</B>    <B>IN PKEVENT</B>  <I>Event</I><B>,
</B>    <B>IN PIO_STATUS_BLOCK</B>  <I>IoStatusBlock
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>IrpSubFunction</I></DT>

<DD>Specifies the TDI_<I>XXX </I>code that will be set in a subsequent call to a <B>TdiBuild</B><I>Xxx</I> macro as the <B>MinorFunction</B> for the returned IRP. This parameter can be one of the following:

<DL>
<DT>TDI_ASSOCIATE_ADDRESS</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_72ia.htm"><B>TdiBuildAssociateAddress</B></A>.</DD>

<DT>TDI_DISASSOCIATE_ADDRESS</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_1376.htm"><B>TdiBuildDisassociateAddress</B></A>. </DD>

<DT>TDI_CONNECT</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_99pu.htm"><B>TdiBuildConnect</B></A>. </DD>

<DT>TDI_LISTEN</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_6cc2.htm"><B>TdiBuildListen</B></A>. </DD>

<DT>TDI_ACCEPT</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_2voy.htm"><B>TdiBuildAccept</B></A>. </DD>

<DT>TDI_DISCONNECT</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_4eeq.htm"><B>TdiBuildDisconnect</B></A>. </DD>

<DT>TDI_SEND</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_3w4y.htm"><B>TdiBuildSend</B></A>.</DD>

<DT>TDI_RECEIVE</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_21de.htm"><B>TdiBuildReceive</B></A>.</DD>

<DT>TDI_SEND_DATAGRAM</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_3rhu.htm"><B>TdiBuildSendDatagram</B></A>. </DD>

<DT>TDI_RECEIVE_DATAGRAM</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_0aya.htm"><B>TdiBuildReceiveDatagram</B></A>. </DD>

<DT>TDI_SET_EVENT_HANDLER</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A>. </DD>

<DT>TDI_QUERY_INFORMATION</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_3f5e.htm"><B>TdiBuildQueryInformation</B></A>. </DD>

<DT>TDI_SET_INFORMATION</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_0s1e.htm"><B>TdiBuildSetInformation</B></A>. </DD>

<DT>TDI_ACTION</DT>

<DD>The caller will pass the returned IRP to <A HREF="34bldmac_2jxu.htm"><B>TdiBuildAction</B></A>. </DD>
</DL>
</DD>

<DT><I>DeviceObject</I></DT>

<DD>Pointer to the device object created by the underlying TDI transport driver.</DD>

<DT><I>FileObject</I></DT>

<DD>Pointer to a file object representing an address, connection endpoint, or control channel, depending on the given <I>IrpSubFunction</I>. </DD>

<DT><I>Event</I></DT>

<DD>Pointer to an initialized event object for which the caller provides the storage. </DD>

<DT><I>IoStatusBlock</I></DT>

<DD>Pointer to a caller-supplied variable of type IO_STATUS_BLOCK. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>TdiBuildInternalDeviceControlIrp</B> returns a pointer to the IRP it allocated, or it returns NULL if the allocation attempt failed.</P>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>Kernel-mode clients of TDI transports frequently pass IRPs sent down by still higher level network components directly to <B>TdiBuild</B><I>Xxx</I> macros without calling <B>TdiBuildInternalDeviceControlIrp</B>. </P>

<P>However, such a client should never hijack an incoming IRP and reuse it to make an internal device control request to the underlying transport on its own behalf. Instead the client can call <B>TdiBuildInternalDeviceControlIrp</B> to get an IRP of its own with which to make such requests. </P>

<P>After <B>TdiBuildInternalDeviceControlIrp</B> returns a pointer to an IRP, the client must pass the IRP to the appropriate <B>TdiBuild</B><I>Xxx</I> macro, along with the additional parameters the TDI_<I>XXX</I> requires, before it passes the IRP on to the transport with <B>IoCallDriver</B>. <B>TdiBuildInternalDeviceControlIrp</B> partially sets up the I/O stack location of the underlying transport in the IRP it allocates. However, it does not format the I/O stack location according to a TDI transport's expectations for a TDI_<I>XXX</I> request as the <B>TdiBuild</B><I>Xxx</I> macros do.  </P>

<P>See <A HREF="JavaScript:hhobj_1.Click()"><B>IoCallDriver</B></A> for more information. </P>

<P>If the client supplies an <I>Event</I> pointer when it calls <B>TdiBuildInternalDeviceControlIrp</B>, the I/O Manager will set the event to the Signaled state when the IRP is completed by lower drivers. However, the client cannot wait on that event for completion of its IRP unless it waits at IRQL = PASSIVE_LEVEL in an appropriate thread context, either that of a client-created thread or, possibly, that of the thread in which it was executing when it made this call. </P>

<P>Callers of <B>TdiBuildInternalDeviceControlIrp</B> must be running at IRQL = PASSIVE_LEVEL. Consequently, a client should preallocate a few IRPs with this function so the client can use them to submit TDI_<I>XXX</I> requests when it is running at a higher IRQL. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiBuildInternalDeviceControlIrp"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
