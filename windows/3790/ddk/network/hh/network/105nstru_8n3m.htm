<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS_WAN_PACKET</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS_WAN_PACKET">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_wan_packet_nr"></A>NDIS_WAN_PACKET</H1>

<P>The NDIS_WAN_PACKET structure defines the packet passed to the <I>MiniportWanSend</I> functions of WAN drivers.</P>

<PRE class=syntax>typedef struct _NDIS_WAN_PACKET {
  LIST_ENTRY  WanPacketQueue;
  PUCHAR  CurrentBuffer;
  ULONG  CurrentLength;
  PUCHAR  StartBuffer;
  PUCHAR  EndBuffer;
  PVOID  ProtocolReserved1;
  PVOID  ProtocolReserved2;
  PVOID  ProtocolReserved3;
  PVOID  ProtocolReserved4;
  PVOID  MacReserved1;
  PVOID  MacReserved2;
  PVOID  MacReserved3;
  PVOID  MacReserved4;
} NDIS_WAN_PACKET, *PNDIS_WAN_PACKET;</PRE>

<H4>Members</H4>

<DL>
<DT><B>WanPacketQueue</B></DT>

<DD>Specifies the head of the send packet queue, used by <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> while the miniport driver is processing this packet.</DD>

<DT><B>CurrentBuffer</B></DT>

<DD>Specifies a pointer that is the base virtual address within the given buffer at which the net packet to be transmitted starts.  </DD>

<DT><B>CurrentLength</B></DT>

<DD>Specifies the number of bytes of network packet data. </DD>

<DT><B>StartBuffer</B></DT>

<DD>Specifies a pointer that is the base virtual address for the given buffer, including padding. </DD>

<DT><B>EndBuffer</B></DT>

<DD>Specifies a pointer that is the virtual address for the end of the given buffer, including padding. </DD>

<DT><B>ProtocolReserved1</B></DT>

<DD>Reserved for use by protocol drivers. </DD>

<DT><B>ProtocolReserved2</B></DT>

<DD>Reserved for use by protocol drivers.</DD>

<DT><B>ProtocolReserved3</B></DT>

<DD>Reserved for use by protocol drivers.</DD>

<DT><B>ProtocolReserved4</B></DT>

<DD>Reserved for use by protocol drivers.</DD>

<DT><B>MacReserved1</B></DT>

<DD>Reserved for use by miniport drivers.</DD>

<DT><B>MacReserved2</B></DT>

<DD>Reserved for use by miniport drivers.</DD>

<DT><B>MacReserved3</B></DT>

<DD>Reserved for use by miniport drivers.</DD>

<DT><B>MacReserved4</B></DT>

<DD>Reserved for use by miniport drivers.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ndis.h</I>. Include <I>ndis.h</I>.</P>

<H4>Comments</H4>

<P>When a protocol calls <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> with an <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A>-type transmit request for an underlying WAN NIC driver, NDISWAN transforms the given packet into a packet formatted as this structure before calling the underlying driver’s <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> function. </P>

<P>The <B>StartBuffer</B> and <B>EndBuffer</B> pointers specify a discrete virtual range. <B>CurrentBuffer</B> and <B>CurrentLength</B> specify a proper subrange of the range specified by <B>StartBuffer</B> and <B>EndBuffer</B>. Consequently, one of the following formulas yields the number of bytes of header or tail padding, if any, for the buffer passed in this structure to <I>MiniportWanSend</I>:

<UL>
	<LI><I>HeaderPadding</I>  =  <B>CurrentBuffer</B> - <B>StartBuffer</B></LI>

	<LI><I>TailPadding</I>  =  <B>EndBuffer</B> - (<B>CurrentBuffer</B> + <B>CurrentLength</B>)</LI>
</UL>

<P>NDISWAN always gives the underlying NIC driver at least as much header and tail padding as the driver returned in response to the <A HREF="28wanoid_3302.htm">OID_WAN_GET_INFO</A> query during initialization. </P>

<P><I>MiniportWanSend</I> can manipulate the buffer data in any manner. Until it completes a given send packet, either by returning a status other than NDIS_STATUS_PENDING from <I>MiniportWanSend</I> or by calling <A HREF="103ndisx_7x0y.htm"><B>NdisMWanSendComplete</B></A>, the NIC driver retains ownership of the given packet and of everything it specifies except the <B>ProtocolReserved</B><I>X</I> members. </P>

<P>For more information about WAN-specific OIDs and all system-defined OIDs, see <A HREF="21oidovw_9sdu.htm">NDIS Objects</A>.</P>

<H4>See Also</H4>

<P><A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, <A HREF="103ndisx_7x0y.htm"><B>NdisMWanSendComplete</B></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS_WAN_PACKET"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
