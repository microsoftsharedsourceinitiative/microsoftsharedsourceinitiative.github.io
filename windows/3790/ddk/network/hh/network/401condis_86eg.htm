<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Reset</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Reset">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_reset_ng"></A>Reset</H2>

<P>A protocol bound to a connection-oriented miniport driver or MCM driver can call <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> to cause the underlying miniport driver or MCM driver to reset its NIC. NDIS itself can call the miniport driver's or MCM driver's <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> function to reset the NIC.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;AF, SAP, and VC handles that are active and valid before a reset are active and valid after the reset.</P>

<P>The following figure shows a client issuing a reset request to a miniport driver.</P>

<P><IMG SRC="images/cm_27.gif" ALT="" BORDER=0></P>

<P><B>Resetting a NIC Through a Miniport Driver</B></P>

<P>The next figure shows a client issuing a reset request to an MCM driver.</P>

<P><IMG SRC="images/fig1_26.gif" ALT="" BORDER=0></P>

<P><B>Resetting a NIC Through an MCM Driver</B></P>

<P>When an underlying connection-oriented driver is resetting its NIC, NDIS notifies each bound protocol by calling the protocol's <A HREF="104tdlow_3khe.htm"><I>ProtocolCoStatus</I></A> function with NDIS_STATUS_RESET_START. NDIS then call's the protocol’s <A HREF="104tdlow_3lrm.htm"><I>ProtocolStatusComplete</I></A> function. </P>

<P>NDIS will not accept protocol-initiated sends and requests to a miniport driver or MCM driver while the miniport driver's or MCM driver's NIC is being reset. While a reset is in progress, a protocol driver must not attempt to send packets to the miniport driver with <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A> or request information from the miniport driver with <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>.</P>

<P><I>MiniportReset</I> performs any device-dependent actions that are required to reset the NIC. <I>MiniportReset</I> can complete synchronously, or it can complete asynchronously with a call to <A HREF="103ndisx_4m0j.htm"><B>NdisMResetComplete</B></A>:

<UL>
	<LI>If the reset completes synchronously, NDIS calls each bound protocol's <I>ProtocolCoStatus</I> function with NDIS_STATUS_RESET_END. NDIS then calls the protocol’s <I>ProtocolStatusComplete</I> function.</LI>

	<LI>If the reset completes asynchronously, NDIS calls each bound protocol's <I>ProtocolCoStatus</I> function with NDIS_STATUS_RESET_END. NDIS then calls the protocol’s <I>ProtocolStatusComplete</I> function. If the reset was initiated by a bound protocol, NDIS also calls the <A HREF="104tdlow_0yya.htm"><I>ProtocolResetComplete</I></A> function of that protocol.</LI>
</UL>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Reset"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
