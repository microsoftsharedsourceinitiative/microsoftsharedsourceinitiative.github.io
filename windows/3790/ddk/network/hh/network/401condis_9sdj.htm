<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Querying or Setting Information</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Querying or Setting Information">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_querying_or_setting_information_ng"></A>Querying or Setting Information</H3>

<P>A connection-oriented client or call manager calls <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A> to query or set information maintained by another protocol driver on a binding or by the underlying miniport driver.</P>

<P>Before it calls <B>NdisCoRequest</B>, a client or call manager allocates a buffer for its request and initializes an <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A> structure. This structure specifies the type of request (query or set), identifies the information (OID) being queried or set, and points to buffers used for passing OID data.</P>

<P>If the connection-oriented client or call manager passes a valid <I>NdisAfHandle</I> (see<A HREF="401condis_5z6v.htm"> Address Families</A>), NDIS calls the <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> function of each protocol driver on the binding (see the following figure).</P>

<P><IMG SRC="images/cm_23.gif" ALT="" BORDER=0></P>

<P><B>Query or Set of Client or Call Manager Information</B></P>

<P>If the underlying miniport driver is an MCM driver, NDIS calls the <I>ProtocolCoRequest</I> function of the MCM driver (see the following figure):</P>

<P><IMG SRC="images/fig1_23.gif" ALT="" BORDER=0></P>

<P><B>Query or Set of an MCM Driver's Call Manager Information</B></P>

<P>If the connection-oriented client or call manager passes a NULL address family handle, NDIS calls the <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function of the underlying miniport driver or MCM driver.</P>

<P>The following figure shows a client or a call manager querying or setting miniport driver information.</P>

<P><IMG SRC="images/cm_24.gif" ALT="" BORDER=0></P>

<P><B>Query or Set of Miniport Driver Information</B></P>

<P>The next figure shows a client querying or setting an MCM driver's miniport driver information.</P>

<P><IMG SRC="images/fig1_25.gif" ALT="" BORDER=0></P>

<P><B>Query or Set of an MCM Driver's Miniport Driver Information</B></P>

<P>To query or set information maintained by its clients, an MCM driver calls <A HREF="103ndisx_1pbm.htm"><B>NdisMCmRequest</B></A> (see the following figure).</P>

<P><IMG SRC="images/fig1_24.gif" ALT="" BORDER=0></P>

<P><B>MCM Driver-Iniatiated Query of Client Information</B></P>

<P>The caller of <B>NdisCoRequest</B> or <B>NdisMCmRequest</B> can narrow the scope of the request by specifying a VC handle that identifies a VC, or a party handle that identifies a party on a multipoint VC. Passing a NULL <I>NdisVcHandle</I> makes such a request global in nature, whether the request is directed to the client, call manager, miniport driver, or MCM driver.</P>

<P><I>ProtocolCoRequest </I>or <I>MiniportCoRequest</I> can complete synchronously, or these functions can complete asynchronously with <A HREF="103ndisx_93oy.htm"><B>NdisCoRequestComplete</B></A>. The call to <B>NdisCoRequestComplete</B> causes NDIS to call the <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> function of the driver that called <B>NdisCoRequest</B>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Querying%20or%20Setting%20Information"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
