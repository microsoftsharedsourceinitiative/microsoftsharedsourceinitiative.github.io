<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMCmCreateVc</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMCmCreateVc">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismcmcreatevc_nr"></A>NdisMCmCreateVc</H1>

<P><B>NdisMCmCreateVc</B> sets up a connection endpoint on which an MCM driver can dispatch an incoming-call offer to a client. </P>

<PRE class=syntax><B>NDIS_STATUS
  NdisMCmCreateVc(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisAfHandle</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>MiniportVcContext</I><B>,</B>
    <B>OUT PNDIS_HANDLE</B>  <I>NdisVcHandle</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the NDIS-supplied handle originally input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>NdisAfHandle</I></DT>

<DD>Specifies the handle that identifies the client that is the target of an incoming call. The MCM driver obtained this handle as an input parameter to its <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function. </DD>

<DT><I>MiniportVcContext</I></DT>

<DD>Specifies the handle to a caller-supplied resident context area in which the MCM driver maintains state for this VC. NDIS passes this handle back to the MCM driver in all subsequent calls concerning this VC if the call to <B>NdisMCmCreateVc</B> succeeds.</DD>

<DT><I>NdisVcHandle</I></DT>

<DD>Pointer to a caller-supplied variable that must be initialized to NULL before <B>NdisMCmCreateVc</B> is called. On return from a successful call, this variable has been set to a NDIS-supplied handle for the newly created VC. The caller must save this handle for subsequent calls to connection-oriented <B>Ndis</B><I>Xxx</I><B> </B>functions concerning this VC. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisMCmCreateVc</B> can return one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>NDIS created the VC successfully.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>NDIS could not allocate sufficient memory to set up the VC.</DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>The given <I>NdisAfHandle</I> is invalid.</DD>

<DT>NDIS_STATUS_<I>XXX</I></DT>

<DD>The client failed the creation of the VC for some reason, and NDIS has propagated the error status returned by its <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function to the MCM driver.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>An MCM driver creates a VC with <B>NdisMCmCreateVc</B> to represent an incoming offer of a connection from a remote node directed to a SAP that has already been registered with the MCM driver. </P>

<P>In the process of VC creation, NDIS supplies an <I>NdisVcHandle</I> to the client and the MCM driver. This handle identifies the virtual connection for the client and miniport driver to which subsequent requests concerning the given VC are directed. Each driver must treat this VC handle as an opaque variable, passing it unmodified and uninterpreted in subsequent calls to certain connection-oriented NDIS library functions. </P>

<P>Usually<I>,</I> callers of <B>NdisMCmCreateVc</B> store the returned <I>NdisVcHandle </I>in the caller-allocated state area at <I>MiniportVcContext</I>. NDIS passes an <I>NdisVcHandle</I> as an input parameter to the <I>ProtocolCoCreateVc</I> function of the appropriate client whenever an MCM driver creates a VC. </P>

<P>When an MCM driver processes the offer of an incoming call directed to one of its registered SAPs, it must call <B>NdisMCmCreateVc</B> first. As a synchronous operation, NDIS calls the client's <I>ProtocolCoCreateVc</I> function before <B>NdisMCmCreateVc</B> returns control. If its call to <B>NdisMCmCreateVc</B> succeeds, the MCM driver can proceed in notifying the appropriate client, passing the returned value at <I>NdisVcHandle</I> to <A HREF="103ndisx_5zoy.htm"><B>NdisMCmDispatchIncomingCall</B></A>.</P>

<P>The driver writer determines whether an MCM driver has an (internal) <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> function that the driver calls in the context of setting up connections for outgoing and incoming calls. </P>

<P>Only connection-oriented NIC drivers that provide integrated call-management support can call <B>NdisMCmCreateVc</B>. Stand-alone call managers and clients, which register themselves with NDIS as protocols, call <B>NdisCoCreateVc</B> instead. </P>

<P>Callers of <B>NdisMCmCreateVc</B> can be running at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A>, <A HREF="103ndisx_72wi.htm"><B>NdisAllocateFromNPagedLookasideList</B></A>, <A HREF="103ndisx_7mr6.htm"><B>NdisClMakeCall</B></A>, <A HREF="103ndisx_3qia.htm"><B>NdisCoCreateVc</B></A>, <A HREF="103ndisx_6qur.htm"><B>NdisMCmDeleteVc</B></A>, <A HREF="103ndisx_5zoy.htm"><B>NdisMCmDispatchIncomingCall</B></A>, <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMCmCreateVc"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
