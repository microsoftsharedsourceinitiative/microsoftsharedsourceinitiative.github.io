<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example DMA Transfers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Example DMA Transfers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_example_dma_transfers"></A>Example DMA Transfers</H3>

<P>To illustrate these two strategies, consider the example of a fax board in an MS-DOS environment. The controlling application creates an image of the fax in application memory. It then programs the DMA controller to move the fax image to the memory on the fax board. The application then sends a command to the fax board (through an I/O port operation or other means) telling it to receive the DMA transfer and start sending the fax. In an NT-based environment, the unmodified MS-DOS application running under VDM requests the DMA and then signals the fax board to receive the DMA and begin sending the fax. However, there are two differences:

<OL>
	<LI>The DMA controller has not really been programmed because the VDM intercepted the DMA request, although the application has no way of knowing this.</LI>

	<LI>The command to the fax board has been intercepted by the VDD. So now, the VDD must move the data specified by the DMA request to the board.</LI>
</OL>

<P>Using the double-buffer strategy described in <A HREF="vdd_3jqq.htm">Double-Buffer DMA Transfer</A>, the VDD calls <B>VDDRequestDMA</B> to move the data from the application’s buffer to the VDD buffer. This call does not actually use the DMA controller, but performs the equivalent data transfer by other means. The VDD then calls the kernel-mode driver to move the data to the device. Finally, the VDD relays the <B>send fax</B> command to the kernel-mode driver.</P>

<P>Using the single-buffer strategy described in <A HREF="vdd_3ub6.htm">Single Buffer DMA Transfer</A>, the VDD calls <B>VDDQueryDMA</B> to determine the parameters for the DMA request. The VDD then sends these parameters to the kernel-mode driver and enables the driver to control the data transfer directly from the application’s buffer to the device. When the driver has transferred the data, the VDD calls <B>VDDSetDMA</B> to update the DMA state. Finally, the VDD relays the <B>send fax</B> command to the kernel-mode driver.</P>

<P>The following functions are used for memory accesses:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=40%>Function</TH>
<TH align=left width=60%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=40%><B>FlushVDMPointer</B></TD>
<TD width=60%>Flushes data associated with a memory range.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>FreeVDMPointer</B></TD>
<TD width=60%>Releases a pointer returned by <B>GetVDMPointer</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>GetVDMPointer</B></TD>
<TD width=60%>Returns a linear address for an <I>x</I>86 address.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDAllocMem</B></TD>
<TD width=60%>Allocates memory at a given virtual address.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDFreeMem</B></TD>
<TD width=60%>Releases previously allocated memory.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDDeInstallMemoryHook</B></TD>
<TD width=60%>Releases a range of memory-mapped I/O addresses.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDIncludeMem</B></TD>
<TD width=60%>Includes a particular memory range for use as a UMB.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDInstallMemoryHook</B></TD>
<TD width=60%>Releases memory-mapped addresses.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDQueryDMA</B></TD>
<TD width=60%>Gathers all DMA data.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDRequestDMA</B></TD>
<TD width=60%>Requests a DMA transfer from a VDD.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>VDDSetDMA</B></TD>
<TD width=60%>Resets the state of the virtual DMA controller.</TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Example%20DMA%20Transfers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
