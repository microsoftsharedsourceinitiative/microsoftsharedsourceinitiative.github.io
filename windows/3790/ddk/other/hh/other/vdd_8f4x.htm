<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DMA</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DMA">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_dma"></A>DMA</H2>

<P>In the MS-DOS environment, applications can use DMA to directly transfer data between application memory and the memory on a device. In the NT-based environment, applications cannot use DMA to directly access physical memory. If they could, they would subvert the memory protection afforded by the memory manager. Therefore, the VDM controls all the DMA ports used by MS-DOS applications. Requests for DMA service from MS-DOS applications do not actually result in the DMA controller being programmed. Instead, the VDM traps the parameters to the request and does not actually transfer the data. It is up to the VDD to pick up the DMA transfer request and complete the operation. Because the VDM keeps track of DMA requests on a per-channel basis, more than one VDD in the same VDM can use DMA as long as they use different channels.</P>

<P>Unlike the callback mechanisms for I/O port access and memory-mapped accesses, the VDD is not notified directly that a DMA transfer has been requested. Instead, the VDD determines the application has requested a DMA operation when the VDD receives a command from the application through the normal I/O port channels on its board. The application and the device must use some sort of synchronization technique to coordinate DMA transfers. Because all possible synchronization messages between an MS-DOS application and its device must pass through the VDD, the VDD is notified whenever a DMA transfer is requested. At that point, the VDD must do something to actually transfer the data.</P>

<P>There are two strategies for handling DMA from a VDD. The first strategy involves the least programming work, but it requires two buffer-copy operations and is inherently inefficient. The second strategy is harder to implement but more efficient because it only requires a single buffer-copy operation. These two strategies are described in the following sections.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DMA"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
