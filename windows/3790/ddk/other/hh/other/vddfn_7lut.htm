<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VdmFlushCache</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="VdmFlushCache">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_vdmflushcache"></A>VdmFlushCache</H1>

<P><B>VdmFlushCache</B> flushes any data associated with a given VDM memory range that a CPU emulator might have cached. </P>

<PRE class=syntax><B>BOOL 
  VdmFlushCache(</B>
<B>    IN USHORT </B> <I>Segment</I>,
<B>    IN ULONG </B> <I>Offset</I>,
<B>    IN ULONG </B> <I>Size</I>,
<B>    IN VDM_MODE</B>  <I>Mode</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Segment</I></DT>

<DD>The segment or selector, depending on the value of <I>Mode</I>, of the x86 address.</DD>

<DT><I>Offset</I></DT>

<DD>The offset of the x86 address.</DD>

<DT><I>Size</I></DT>

<DD>The number of bytes in the range to be flushed, starting at <I>Offset</I>.</DD>

<DT><I>Mode</I></DT>

<DD>Either <B>VDM_PM</B> or <B>VDM_V86</B>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>VdmFlushCache</B> returns TRUE if the given range was successfully flushed.</P>

<H4>Comments</H4>

<P>VDDs should use this function to ensure that a RISC-based CPU emulator gets a chance to flush any data associated with a memory range. In particular, such a RISC-based CPU emulator will typically cache portions of 16-bit code in a "native instruction cache" to improve performance. If a VDD modifies a piece of code without calling <B>VdmFlushCache</B>, it is possible that the emulator will execute the cached original instructions instead of such a VDM-modified instruction stream. Thus, failure to call <B>VdmFlushCache</B> can cause unpredictable operation of the VDM in which such a VDD is running on RISC-based platforms and inconsistent operation of the VDD between CISC-based and RISC-based platforms.</P>

<P>On x86-based platforms, a call to <B>VdmFlushCache</B> is a NOOP because a VDD's 16-bit code executes in the CPU. Nonetheless, all VDDs that modify an instruction stream should call <B>VdmFlushCache</B> at appropriate locations in their code to ensure their portability across RISC-based and CISC-based platforms. </P>

<H4>See Also</H4>

<P><A HREF="vddfn_77ec.htm"><B>VdmMapFlat</B></A>, <A HREF="vddfn_6vxw.htm"><B>VdmUnmapFlat</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VdmFlushCache"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
