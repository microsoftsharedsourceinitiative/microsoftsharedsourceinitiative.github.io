<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Layered Driver Architecture</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Layered Driver Architecture">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_windows_2000_and_later_network_architecture_and_the_osi_model_ng">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_display_architecture_gg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Getting&nbsp;Started&nbsp;with&nbsp;Windows&nbsp;Drivers:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_layered_driver_architecture_pg"></A>Layered Driver Architecture</H1>

<P>Windows® operating systems support a layered driver architecture. Every device is serviced by a chain of drivers, typically called a <I>driver stack</I>. Each driver in the stack isolates some hardware-dependent features from the drivers above it. </P>

<P>The following figure shows the types of drivers that could potentially be in a driver stack for a hypothetical device. In reality, few (if any) driver stacks contain all these types of drivers.  </P>

<P><B><IMG SRC="images/gsdrvlyr.gif" ALT="" BORDER=0></B></P>

<P><B>Layered Driver Architecture</B></P>

<P>As the preceding figure shows:

<OL>
	<LI>Above the driver stack is an application. The application handles requests from users and other applications, and calls either the Win32® API or a routine that is exposed by the user-mode client driver. </LI>

	<LI>A user-mode client driver handles requests from applications or from the Win32 API. For requests that require kernel-mode services, the user-mode client driver calls the Win32 API, which calls the appropriate kernel-mode client or support routine to carry out the request. User-mode client drivers are usually implemented as dynamic-link libraries (DLL). Printers support many operations that can be performed in user mode, and so typically have user-mode clients; disks and other storage devices, networks, and input devices do not.</LI>

	<LI>A kernel-mode client driver handles requests similar to those handled by the user-mode client, except that these requests are carried out in kernel mode, rather than in user mode.</LI>

	<LI>A device class and miniclass driver pair provides the bulk of the device-specific support. The <I>class driver</I> supplies system-required but hardware-independent support for a particular class of device. Class drivers are typically supplied by Microsoft. 
<P>A <I>miniclass driver</I> handles operations for a specific type of device of a particular class. For example, the battery class driver supports common operations for any battery, while a miniclass driver for a vendor's UPS device handles details unique to that particular device. Miniclass drivers are typically supplied by hardware vendors.  
</LI>

	<LI>A corresponding <I>port driver</I> (for some devices, this is a<I> host controller </I>or<I> host adapter </I>driver) supports required I/O operations on an underlying port, hub, or other physical device through which the device attaches. Whether any such drivers are present depends on the type of device and the bus to which it eventually connects. 
<P>All driver stacks for storage devices have a port driver. For example, the SCSI port driver provides support for I/O over the SCSI bus. 

<P>For USB devices, a <I>hub</I> and <I>host controller</I> driver pair perform the duties of the port driver. These drivers handle I/O between the devices on the USB bus and the bus itself. 

<P>A corresponding <I>miniport driver</I> handles device-specific operations for the port driver. For most types of devices, the port driver is supplied with the operating system, and the miniport driver is supplied by the device vendor.
</LI>

	<LI>At the bottom of the figure is the <I>hardware bus drive</I>r. Microsoft supplies bus drivers for all the major buses as part of the operating system. You should not attempt to replace these drivers.</LI>
</OL>

<P>Network drivers have their own unique terminology, defined in <A HREF="JavaScript:hhobj_1.Click()">Windows&nbsp;2000 and Later Network Architecture and the OSI Model</A>. Nevertheless, network drivers are similarly layered, and each layer isolates device-specific or protocol-specific functionality from the layer above it. </P>

<P>Exactly which drivers are present, and what they are called, depends on the type of device and the bus to which it connects. </P>

<P>Graphics cards, for example, require a display driver, a video port driver, and a video miniport driver. The display driver is analogous to the kernel-mode client driver in the previous figure. It provides general drawing capabilities and can often work with more than one graphics card. The video port driver supports device-independent graphics operations. It works in tandem with the video miniport driver, which provides functionality that is specific to one graphics card (or a family of graphics cards). The paired video port/miniport drivers are analogous to the port/miniport drivers in the figure, and no class/miniclass drivers are present. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Display Architecture</A>.</P>

<P>For simplicity, <I>filter drivers</I> are not shown in the previous figure. However, a filter driver can fit in at any layer of the driver stack above the hardware bus driver. A filter driver adds value to an existing driver by "filtering" — intercepting and manipulating device I/O. As a general rule, filter drivers do not operate the hardware directly, but work only on data and I/O requests passed to them from the next-higher or next-lower driver. </P>

<P>DirectShow®, the Microsoft software for video capture, includes system-supplied filter drivers that run in user mode. These filters act as clients of the kernel-mode stream class driver to expose the underlying video capture technology. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Layered%20Driver%20Architecture"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
