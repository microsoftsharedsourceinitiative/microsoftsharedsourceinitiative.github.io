<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Macros and Keywords for AMD64</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Macros and Keywords for AMD64">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_macros_and_keywords_for_amd64_kg"></A>Macros and Keywords for AMD64</H3>

<P>The following macros and keywords are used as defined with the compiler for AMD64:</P>

<H4>Macros</H4>

<DL>
<DT>_MSC_VER</DT>

<DD>Set to 1400 to indicate version 14 and indicate no point release for the compiler.
</DD>
</DL>

<H4>Keywords</H4>

<DL>
<DT><B>__ptr64</B> and <B>__ptr32</B></DT>

<DD>Use <B>__ptr64</B> to specify the size of a pointer as 64 bits. If you currently compile on a 32-bit platform, use <B>__ptr64</B> to simulate 64-bit conditions.

<PRE>int * __ptr64 pPtr64;</PRE>


<P>Similarly, the <B>__ptr32</B> keyword simulates 32-bit conditions on a 64-bit platform:


<PRE>int * __ptr32 pPtr32;</PRE>
</DD>

<DT><B>__alignof(type) operator</B></DT>

<DD><B>__alignof</B> returns a value of type <B>size_t</B> that is the alignment requirement of the type.

<P>The following expressions return the indicated values:


<PRE>__alignof(char) 1
__alignof(short) 2
__alignof(int) 4
__alignof(__int64) 8
__alignof(float) 4
__alignof(double) 8
__alignof(char*) 8</PRE>


<P>The <B>__alignof</B> value is the same as the value for <B>sizeof</B> for basic types. The following two examples demonstrate this:


<PRE>typedef struct { int a; double b; } S; 
// __alignof(S) == 8 </PRE>


<P>In this case, the <B>__alignof</B> value is the alignment requirement of the largest element in the structure.


<PRE>typedef __declspec(align32)) struct { int a; } S;</PRE>


<P>In the preceding example, <B>__alignof(S)</B> is equal to 32.


<P>One use for <B>__alignof</B> is as a parameter to one of your own memory allocation routines. For example, given the following structure S, you can call a memory allocation routine named <B>aligned_malloc</B> to allocate memory on a particular alignment boundary:


<PRE>typedef __declspec(align(32)) struct { int a; double b; } S; 
int n = 50; // array size 
S* p = (S*)aligned_malloc(n * sizeof(S), __alignof(S)); </PRE>

</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Macros%20and%20Keywords%20for%20AMD64"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
