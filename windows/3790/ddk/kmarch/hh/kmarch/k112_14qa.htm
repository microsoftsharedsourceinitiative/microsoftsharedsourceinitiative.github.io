<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PCI_COMMON_CONFIG</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PCI_COMMON_CONFIG">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_pci_common_config_kr"></A>PCI_COMMON_CONFIG</H1>

<P>The PCI_COMMON_CONFIG structure defines standard PCI configuration information returned by <B>HalGetBusData</B> or<B> HalGetBusDataByOffset</B> for the input <I>BusDataType</I> <B>PCIConfiguration</B>, assuming the caller-allocated <I>Buffer</I> is of sufficient <I>Length</I>.</P>

<PRE class=syntax>typedef struct _PCI_COMMON_CONFIG {
  USHORT  VendorID;
  USHORT  DeviceID;
  USHORT  Command;
  USHORT  Status;
  UCHAR  RevisionID;
  UCHAR  ProgIf;
  UCHAR  SubClass;
  UCHAR  BaseClass;
  UCHAR  CacheLineSize;
  UCHAR  LatencyTimer;
  UCHAR  HeaderType;
  UCHAR  BIST;
 
  union {
     struct _PCI_HEADER_TYPE_0 {
       ULONG  BaseAddresses[PCI_TYPE0_ADDRESSES];
       ULONG  Reserved1[2];
       ULONG  ROMBaseAddress;
       ULONG  Reserved2[2];
       UCHAR  InterruptLine;
       UCHAR  InterruptPin;
       UCHAR  MinimumGrant;
       UCHAR  MaximumLatency;
     } type0;
   } u;
   UCHAR  DeviceSpecific[192];
} PCI_COMMON_CONFIG, *PPCI_COMMON_CONFIG;</PRE>

<H4>Members</H4>

<DL>
<DT><B>VendorID</B></DT>

<DD>Identifies the manufacturer of the device. This must be a value allocated by the PCI SIG.</DD>

<DT><B>DeviceID</B></DT>

<DD>Identifies the particular device. This value is assigned by the manufacturer.</DD>

<DT><B>Command</B></DT>

<DD>Accesses the PCI device’s control register. Writing a zero to this register renders the device logically disconnected from the PCI bus except for configuration access. Otherwise, the functionality of the register is device-dependent. Possible system-defined bit encodings for this member include:

<P>PCI_ENABLE_IO_SPACE<BR>
PCI_ENABLE_MEMORY_SPACE<BR>
PCI_ENABLE_BUS_MASTER<BR>
PCI_ENABLE_SPECIAL_CYCLES<BR>
PCI_ENABLE_WRITE_AND_VALIDATE<BR>
PCI_ENABLE_VGA_COMPATIBLE_PALETTE<BR>
PCI_ENABLE_PARITY<BR>
PCI_ENABLE_WAIT_CYCLE<BR>
PCI_ENABLE_SERR<BR>
PCI_ENABLE_FAST_BACK_TO_BACK
</DD>

<DT><B>Status</B></DT>

<DD>Accesses the PCI device’s status register. The functionality of this register is device-dependent. Possible system-defined bit encodings for this member include:

<P>PCI_STATUS_FAST_BACK_TO_BACK             // read-only<BR>
PCI_STATUS_DATA_PARITY_DETECTED<BR>
PCI_STATUS_DEVSEL                                      // 2 bits wide<BR>
PCI_STATUS_SIGNALED_TARGET_ABORT<BR>
PCI_STATUS_RECEIVED_TARGET_ABORT<BR>
PCI_STATUS_RECEIVED_MASTER_ABORT<BR>
PCI_STATUS_SIGNALED_SYSTEM_ERROR<BR>
PCI_STATUS_DETECTED_PARITY_ERROR
</DD>

<DT><B>RevisionID</B></DT>

<DD>Specifies the revision level of the device described by the <B>DeviceID</B> member. This value is assigned by the manufacturer.</DD>

<DT><B>ProgIf</B></DT>

<DD>Identifies the register-level programming interface, if any, for the device, according to the PCI classification scheme.</DD>

<DT><B>SubClass</B></DT>

<DD>Identifies the subtype, if any, of the device, according to the PCI classification scheme.</DD>

<DT><B>BaseClass</B></DT>

<DD>Identifies type of the device, according to the PCI classification scheme.</DD>

<DT><B>CacheLineSize</B></DT>

<DD>Contains the system cache line size in 32-bit units. This member is relevant only for PCI bus-master devices. The system determines this value during the boot process.</DD>

<DT><B>LatencyTimer</B></DT>

<DD>Contains the value of the latency timer in units of PCI bus clocks. This member is relevant only for PCI bus-master devices. The system determines this value during the boot process.</DD>

<DT><B>HeaderType</B></DT>

<DD>The system ORs the value of this member with PCI_MULTIFUNCTION, if appropriate to the device. The value of this member indicates the PCI_HEADER_TYPE_0 layout that follows.</DD>

<DT><B>BIST</B></DT>

<DD>Zero indicates that the device does not support built-in self test. Otherwise, the device supports built-in self test according to the PCI standard.</DD>

<DT><B>u.type0</B></DT>

<DD>Drivers call <B>HalAssignSlotResources</B> to configure these values and to get back the bus-relative values passed to other configuration routines.</DD>

<DT><B>DeviceSpecific</B></DT>

<DD>Contains any device-specific initialization information that is available.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>Certain members of this structure have read-only values, so attempts to reset them are ignored. These members include the following: <B>VendorID</B>, <B>DeviceID</B>, <B>RevisionID</B>, <B>ProgIf</B>, <B>SubClass</B>, <B>BaseClass</B>, <B>HeaderType</B>, <B>InterruptPin</B>, <B>MinimumGrant</B>, and <B>MaximumLatency</B>.</P>

<P>Other members are provisionally read-only: that is, the system initializes them to their correct values, so drivers can safely treat them as read-only. However, they can be reset if a bus-master driver finds it necessary. These members include the following: <B>CacheLineSize</B> and <B>LatencyTimer</B>.</P>

<H4>See Also</H4>

<P><A HREF="k103_34fm.htm"><B>HalAssignSlotResources</B></A>, <A HREF="k103_3o6q.htm"><B>HalGetBusData</B></A>, <A HREF="k103_5waa.htm"><B>HalGetBusDataByOffset</B></A>, <A HREF="k103_8fg2.htm"><B>HalSetBusData</B></A>, <A HREF="k103_3m7m.htm"><B>HalSetBusDataByOffset</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PCI_COMMON_CONFIG"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
