<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoMakeAssociatedIrp</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoMakeAssociatedIrp">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iomakeassociatedirp_kr"></A>IoMakeAssociatedIrp</H1>

<P>The <B>IoMakeAssociatedIrp</B> routine allocates and initializes an IRP to be associated with a master IRP sent to a highest-level driver, allowing the caller to split the original request and send associated IRPs on to lower-level drivers.</P>

<PRE class=syntax><B>PIRP 
</B>  <B>IoMakeAssociatedIrp(</B>
<B>    IN PIRP</B>  <I>Irp</I><B>,</B>
<B>    IN CCHAR</B>  <I>StackSize</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Pointer to the master IRP that was input to a highest-level driver’s Dispatch routine.</DD>

<DT><I>StackSize</I></DT>

<DD>Specifies the number of stack locations to be allocated for the associated IRP. The value must be at least equal to the <B>StackSize</B> of the next-lower driver’s device object, but the associated IRP can have an additional stack location for the caller.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoMakeAssociatedIrp</B> returns a pointer to the associated IRP or returns a NULL pointer if an IRP cannot be allocated.</P>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I>. Include <I>ntddk.h.</I></P>

<H4>Comments</H4>

<P>Only a highest-level driver can call this routine.</P>

<P>The I/O Manager completes the master IRP automatically when lower drivers have completed all associated IRPs as long as the caller has not set its <I>IoCompletion</I> routine in an associated IRP and returned STATUS_MORE_PROCESSING_REQUIRED from its <I>IoCompletion</I> routine. In these circumstances, the caller must explicitly complete the master IRP when that driver has determined that all associated IRPs were completed.</P>

<P>Only the master IRP is associated with a thread; associated IRPs are not. For this reason, the I/O Manager cannot call Cancel routines for associated IRPs when a thread exits. When the master IRP's thread exits, the I/O Manager calls the master IRP's cancel routine. The Cancel routine is responsible for tracking down all associated IRPs and calling <B>IoCancelIrp</B> to cancel them. </P>

<P>Callers of <B>IoMakeAssociatedIrp</B> must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k104_42pe.htm"><B>IoAllocateIrp</B></A>, <A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A>, <A HREF="k104_8ble.htm"><B>IoBuildDeviceIoControlRequest</B></A>, <A HREF="k104_61pu.htm"><B>IoBuildSynchronousFsdRequest</B></A>, <A HREF="k104_1agi.htm"><B>IoCallDriver</B></A>, <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A>, <A HREF="k112_3z5e.htm">IRP</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoMakeAssociatedIrp"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
