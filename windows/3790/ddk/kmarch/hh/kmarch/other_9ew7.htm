<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Errors in Referencing User-Space Addresses</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Errors in Referencing User-Space Addresses">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_errors_in_referencing_user_space_addresses_kg"></A>Errors in Referencing User-Space Addresses</H2>

<P>Any driver, whether supporting IRPs or fast I/O operations, should validate any address in user space before trying to use it. The I/O Manager does not validate such addresses, nor does it validate pointers that are embedded in buffers passed to drivers.</P>

<H4>Failure to Validate Addresses Passed in METHOD_NEITHER IOCTLs and FSCTLs</H4>

<P>The I/O Manager does no validation whatsoever for METHOD_NEITHER IOCTLs and FSCTLs. To ensure that user-space addresses are valid, the driver must use the <A HREF="k102_49bm.htm"><B>ProbeForRead</B></A> and <A HREF="k102_16lu.htm"><B>ProbeForWrite</B></A> routines, enclosing all buffer references in <B>try</B>/<B>except</B> blocks. </P>

<P>In the following example, the driver assumes that the value passed in the <B>Type3InputBuffer</B> represents a valid address.</P>

<PRE>   case IOCTL_GET_HANDLER: {
      PULONG EntryPoint;

      <span style="color:#ff0000"><B>EntryPoint =
         IrpSp-&gt;Parameters.DeviceIoControl.Type3InputBuffer;
      *EntryPoint = (ULONG) DriverEntryPoint;</B></span> </PRE>

<P>The following code avoids this problem:</P>

<PRE>   case IOCTL_GET_HANDLER: {
      PULONG_PTR EntryPoint;

      EntryPoint =
         IrpSp-&gt;Parameters.DeviceIoControl.Type3InputBuffer;
                 
 <span style="color:#ff0000"><B>try</B> </span>{                 
   if (Irp-&gt;RequestorMode != KernelMode) { 
       <span style="color:#ff0000"><B>ProbeForWrite</B></span>( EntryPoint,
                      sizeof( ULONG_PTR ),
                      TYPE_ALIGNMENT( ULONG_PTR ));
   }
   *EntryPoint = (ULONG_PTR)DriverEntryPoint;

 } <span style="color:#ff0000"><B>except( EXCEPTION_EXECUTE_HANDLER )</B></span> {
…</PRE>

<P>Note also that the correct code casts <B>DriverEntryPoint</B> to a ULONG_PTR, instead of a ULONG. This change allows for use in a 64-bit Windows environment. </P>

<H4>Failure to validate pointers embedded in buffered I/O requests</H4>

<P>Often drivers embed pointers within buffered requests, as in the following example: </P>

<PRE>   struct ret_buf {
      void   *arg; // Pointer embedded in request
      int     rval;
   };

   pBuf = Irp-&gt;AssociatedIrp.SystemBuffer;
   ...
   <span style="color:#ff0000"><B>arg = pBuf-&gt;arg;</B></span> // Fetch the embedded pointer
   ...
   // If the pointer is invalid, 
   //this statement can corrupt the system.
   <span style="color:#ff0000"><B>RtlMoveMemory(arg, &amp;info, sizeof(info))</B></span>;</PRE>

<P>In this example, the driver should validate the embedded pointer by using the <B>ProbeXxx</B> routines enclosed in a <B>try</B>/<B>except</B> block in the same way as for the METHOD_NEITHER IOCTLs described earlier. Although embedding a pointer allows a driver to return extra information, a driver can more efficiently achieve the same result by using a relative offset or a variable length buffer. </P>

<P>For more information about using <B>try/except</B> blocks to handle invalid addresses, see <A HREF="other_23zb.htm">Handling Exceptions</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Errors%20in%20Referencing%20User-Space%20Addresses"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
