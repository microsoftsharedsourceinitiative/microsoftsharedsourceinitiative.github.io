<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP_MN_WAIT_WAKE</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP_MN_WAIT_WAKE">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_mn_wait_wake_dr"></A>IRP_MN_WAIT_WAKE</H1>

<H4>Major Code</H4>

<P><A HREF="k113_7jjm.htm">IRP_MJ_POWER</A></P>

<H4>When Sent</H4>

<P>A driver that owns power policy targets this IRP to its PDO to enable its device to awaken in response to an external event, such as an incoming phone call. A driver must call <B>PoRequestPowerIrp</B> to send this IRP.</P>

<P>As a general rule, a driver should send this IRP as soon as it determines that its device should be enabled for wake-up. Consequently, drivers for most such devices send this IRP after powering on their devices and before completing the IRP_MN_START_DEVICE request. </P>

<P>However, a driver can send the IRP any time the device is in the working state (<B>PowerDeviceD0</B>). The device stack must not be in transition; that is, a driver should not send an IRP_MN_WAIT_WAKE while any other power IRP is active in its device stack. </P>

<P>A wait/wake IRP does not change the power state of the device or of the system. It simply enables a wake-up signal from the device. When the wake-up signal arrives, the policy owner must call <B>PoRequestPowerIrp</B> to send a set-power IRP to return its device to D0.</P>

<P>The driver must be running at IRQL&nbsp;= PASSIVE_LEVEL to send this IRP. However, the IRP can be completed at IRQL&nbsp;= DISPATCH_LEVEL.    </P>

<H4>Input</H4>

<DL>
<DT><B>Parameters.WaitWake.PowerState</B> contains the lowest (least-powered) system power state from which the device should be allowed to awaken the system. </DT>
</DL>

<H4>Output</H4>

<P>None.</P>

<H4>I/O Status Block</H4>

<P>A driver sets <B>Irp-&gt;IoStatus.Status</B> to one of the following:

<DL>
<DT>STATUS_PENDING </DT>

<DD>The driver received the IRP and is waiting for the device to signal wake-up.</DD>

<DT>STATUS_INVALID_DEVICE_STATE </DT>

<DD>The device is in a less-powered state than the <B>DeviceWake</B> state specified in the DEVICE_CAPABILITIES structure for the device, or the device cannot awaken the system from the <B>SystemWake</B> state passed in the IRP.</DD>

<DT>STATUS_NOT_SUPPORTED </DT>

<DD>The device does not support wake-up. </DD>

<DT>STATUS_DEVICE_BUSY </DT>

<DD>An IRP_MN_WAIT_WAKE request is already pending and must be completed or canceled before another IRP_MN_WAIT_WAKE request can be issued. </DD>

<DT>STATUS_SUCCESS</DT>

<DD>The device has signaled a wake event.</DD>

<DT>STATUS_CANCELLED</DT>

<DD>The IRP has been canceled.
</DD>
</DL>

<P>If a driver must fail this IRP, it completes the IRP immediately and does not pass the IRP to the next-lower driver.</P>

<H4>Operation</H4>

<P>A driver sends IRP_MN_WAIT_WAKE for either of two reasons:

<OL>
	<LI>To enable its device to awaken a sleeping system in response to an external wake-up signal.</LI>

	<LI>To enable its device to awaken from a device sleep state in response to an external wake-up signal.</LI>
</OL>

<P>The IRP must be passed down the device stack to the bus driver for the device, which calls <B>IoMarkIrpPending </B>and returns STATUS_PENDING from its <I>DispatchPower</I> routine. The IRP remains pending until a wake-up signal occurs or until the driver that sent the IRP cancels it.</P>

<P>Only one wait/wake IRP can be held pending for a PDO at any given time. If a driver already holds a wait/wake IRP for a PDO, it must fail any additional such IRPs with STATUS_DEVICE_BUSY. A driver that enumerates more than one child PDO can have a wait/wake IRP pending for each such PDO. </P>

<P>Each driver sets an <I>IoCompletion</I> routine as the IRP travels down the device stack. When the device signals a wake-up event, the bus driver services the wake-up signal and completes the IRP, returning STATUS_SUCCESS. The I/O Manager then calls the <I>IoCompletion</I> routine of the next higher driver, and so on up the device stack.</P>

<P>When a driver sends a wait/wake IRP, it should specify a callback routine in the <B>PoRequestPowerIrp</B> call. In the callback routine, the driver typically services the device. For example, the power policy owner for the device must call <B>PoRequestPowerIrp</B> to send an IRP_MN_SET_POWER for device state D0. </P>

<P>A driver that acts as the bus driver for one device and the policy owner for a parent device requests an IRP_MN_WAIT_WAKE IRP for the parent's device stack when it receives a IRP_MN_WAIT_WAKE request from a child PDO. If the driver enumerates more than one child PDO, it should request only one wait/wake IRP for the parent's device stack no matter how many child PDOs send wait/wake requests. Instead, such a driver should keep an internal count of wait/wake IRPs, incrementing the count each time it receives a request and decrementing the count each time it completes a request. If the count is nonzero after it has completed a wait/wake IRP, the driver should send another wait/wake IRP to its device stack to "rearm" itself for wake-up. For more information, see <A HREF="pwrmgmt_8vjb.htm">Understanding the Path of Wait/Wake IRPs Through a Device Tree</A>.</P>

<P>To cancel an IRP_MN_WAIT_WAKE, a driver calls <B>IoCancelIrp</B>. Only the driver that originated the IRP can cancel it. A driver cancels a pending IRP_MN_WAIT_WAKE when any of the following occurs:

<UL>
	<LI>The driver receives a PnP IRP that stops or removes the device.</LI>

	<LI>The system is going to sleep and the device wake signal must not awaken it.</LI>
</UL>

<H4>See Also</H4>

<P><A HREF="portn_55gy.htm"><B>PoRequestPowerIrp</B></A> </P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP_MN_WAIT_WAKE"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
