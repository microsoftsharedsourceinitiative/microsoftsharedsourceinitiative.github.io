<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_kr"></A>IRP</H1>

<P>The IRP structure represents an <I>I/O request packet</I>. Drivers can use the following members of the IRP structure.</P>

<PRE class=syntax>typedef struct _IRP {
  .
  .
  PMDL  MdlAddress;
  ULONG  Flags;
  union {
    struct _IRP  *MasterIrp;
    .
    .
    PVOID  SystemBuffer;
  } AssociatedIrp;
  .
  .
  IO_STATUS_BLOCK  IoStatus;
  KPROCESSOR_MODE  RequestorMode;
  BOOLEAN PendingReturned;
  .
  .
  BOOLEAN  Cancel;
  KIRQL  CancelIrql;
  .
  .
  PDRIVER_CANCEL  CancelRoutine;
  PVOID UserBuffer;
  union {
    struct {
    .
    .
    union {
      KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
      struct {
        PVOID  DriverContext[4];
      };
    };
    .
    .
    PETHREAD  Thread;
    .
    .
    LIST_ENTRY  ListEntry;
    .
    .
    } Overlay;
  .
  .
  } Tail;
} IRP, *PIRP;</PRE>

<H4>Members</H4>

<DL>
<DT><B>MdlAddress</B></DT>

<DD>Pointer to an MDL describing a user buffer, if the driver is using <A HREF="iputoput_3m07.htm#ddk_direct_i_o_kg">direct I/O</A>, and the IRP major function code is one of the following:

<DL>
<DT><A HREF="k113_7fhu.htm">IRP_MJ_READ</A> </DT>

<DD>The MDL describes an empty buffer that the device or driver fills in.</DD>

<DT><A HREF="k113_45o2.htm">IRP_MJ_WRITE</A> </DT>

<DD>The MDL describes a buffer that contains data for the device or driver.</DD>

<DT><A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> or <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> </DT>

<DD>If the IOCTL code specifies the METHOD_IN_DIRECT transfer type, the MDL describes a buffer that contains data for the device or driver.

<P>If the IOCTL code specifies the METHOD_OUT_DIRECT transfer type, the MDL describes an empty buffer that the device or driver fills in.


<P>For more information about the buffers that are associated with METHOD_IN_DIRECT and METHOD_OUT_DIRECT transfer types in IOCTL codes, see <A HREF="irps_7j53.htm">Buffer Descriptions for I/O Control Codes</A>.
</DD>
</DL>


<P>If the driver is not using direct I/O, this pointer is NULL.
</DD>

<DT><B>Flags</B></DT>

<DD>File system drivers use this field, which is read-only for all drivers. Network and, possibly, highest-level device drivers also might read this field, which can be set with one or more of the following system-defined masks:

<P>IRP_NOCACHE<BR>
IRP_PAGING_IO<BR>
IRP_MOUNT_COMPLETION<BR>
IRP_SYNCHRONOUS_API<BR>
IRP_ASSOCIATED_IRP<BR>
IRP_BUFFERED_IO<BR>
IRP_DEALLOCATE_BUFFER<BR>
IRP_INPUT_OPERATION<BR>
IRP_SYNCHRONOUS_PAGING_IO<BR>
IRP_CREATE_OPERATION<BR>
IRP_READ_OPERATION<BR>
IRP_WRITE_OPERATION<BR>
IRP_CLOSE_OPERATION<BR>
IRP_DEFER_IO_COMPLETION
</DD>

<DT><B>AssociatedIrp.MasterIrp</B></DT>

<DD>Pointer to the master IRP in an IRP that was created by a highest-level driver’s call to <A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A>.</DD>

<DT><B>AssociatedIrp.SystemBuffer</B></DT>

<DD>Pointer to a system-space buffer.

<P>If the driver is using <A HREF="iputoput_3m07.htm#ddk_buffered_i_o_kg">buffered I/O</A>, the buffer's purpose is determined by the IRP major function code, as follows:


<DL>
<DT><A HREF="k113_7fhu.htm">IRP_MJ_READ</A> </DT>

<DD>The buffer receives data from the device or driver. The buffer's length is specified by <B>Parameters.Read.Length</B> in the driver's <A HREF="k112_49bm.htm">IO_STACK_LOCATION</A> structure.</DD>

<DT><A HREF="k113_45o2.htm">IRP_MJ_WRITE</A> </DT>

<DD>The buffer supplies data for the device or driver. The buffer's length is specified by <B>Parameters.Write.Length</B> in the driver's IO_STACK_LOCATION structure.</DD>

<DT><A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> or <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> </DT>

<DD>The buffer represents both the input and output buffers that are supplied to <B>DeviceIoControl</B> and <B>IoBuildDeviceIoControlRequest</B>. Output data overwrites input data.

<P>For input, the buffer's length is specified by <B>Parameters.DeviceIoControl.InputBufferLength</B> in the driver's IO_STACK_LOCATION structure.


<P>For output, the buffer's length is specified by <B>Parameters.DeviceIoControl.OutputBufferLength</B> in the driver's IO_STACK_LOCATION structure.


<P>For more information, see <A HREF="irps_7j53.htm">Buffer Descriptions for I/O Control Codes</A>.

</DD>
</DL>


<P>If the driver is using <A HREF="iputoput_3m07.htm#ddk_direct_i_o_kg">direct I/O</A>, the buffer's purpose is determined by the IRP major function code, as follows:


<DL>
<DT><A HREF="k113_7fhu.htm">IRP_MJ_READ</A> </DT>

<DD>NULL.</DD>

<DT><A HREF="k113_45o2.htm">IRP_MJ_WRITE</A> </DT>

<DD>NULL.</DD>

<DT><A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A>  or <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> </DT>

<DD>The buffer represents the input buffer that is supplied to <B>DeviceIoControl</B> and <B>IoBuildDeviceIoControlRequest</B>.

<P>The buffer's length is specified by <B>Parameters.DeviceIoControl.InputBufferLength</B> in the driver's IO_STACK_LOCATION structure.


<P>For more information, see <A HREF="irps_7j53.htm">Buffer Descriptions for I/O Control Codes</A>.
</DD>
</DL>

</DD>

<DT><B>IoStatus</B></DT>

<DD>Contains the <A HREF="k112_08qa.htm">IO_STATUS_BLOCK</A> structure in which a driver stores status and information before calling <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A>.</DD>

<DT><B>RequestorMode</B></DT>

<DD>Indicates the execution mode of the original requester of the operation, one of <B>UserMode</B> or <B>KernelMode</B>.  </DD>

<DT><B>PendingReturned</B></DT>

<DD>If set to TRUE, a driver has marked the IRP pending. Each <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine should check the value of this flag. If the flag is TRUE, and if the <I>IoCompletion</I> routine will not return STATUS_MORE_PROCESSING_REQUIRED, the routine should call <A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> to propagate the pending status to drivers above it in the device stack. </DD>

<DT><B>Cancel</B></DT>

<DD>If set to TRUE, the IRP either is or should be canceled.</DD>

<DT><B>CancelIrql</B></DT>

<DD>Contains the IRQL at which a driver is running when <A HREF="k104_9fw2.htm"><B>IoAcquireCancelSpinLock</B></A> is called. </DD>

<DT><B>CancelRoutine</B></DT>

<DD>Contains the entry point for a driver-supplied <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine to be called if the IRP is canceled. NULL indicates that the IRP is not currently cancelable.</DD>

<DT><B>UserBuffer</B></DT>

<DD>Contains the address of an output buffer if the major function code in the I/O stack location is <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> or <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> and the I/O control code was defined with METHOD_NEITHER.</DD>

<DT><B>Tail.Overlay.DeviceQueueEntry</B></DT>

<DD>If IRPs are queued in the device queue associated with the driver’s device object, this field links IRPs in the device queue. These links can be used only while the driver is processing the IRP.</DD>

<DT><B>Tail.Overlay.DriverContext</B></DT>

<DD>If IRPs are not queued in the device queue associated with the driver’s device object, this field can be used by the driver to store up to four pointers. This field can be used only while the driver owns the IRP.</DD>

<DT><B>Tail.Overlay.Thread</B></DT>

<DD>Is a pointer to the caller’s thread control block. Higher-level drivers that allocate IRPs for lower-level removable-media drivers must set this field in the IRPs they allocate. Otherwise, the FSD cannot determine which thread to notify if the underlying device driver indicates that the media requires verification.</DD>

<DT><B>Tail.Overlay.ListEntry</B></DT>

<DD>If a driver manages its own internal queues of IRPs, it uses this field to link one IRP to the next. These links can be used only while the driver is holding the IRP in its queue or is processing the IRP.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>Undocumented members of the IRP structure are reserved, used only by the I/O Manager or, in some cases, by FSDs.</P>

<P>An IRP is the basic I/O Manager structure used to communicate with drivers and to allow drivers to communicate with each other. A packet consists of two different parts:

<UL>
	<LI><I>Header</I>, or <I>fixed part of the packet</I> – This is used by the I/O Manager to store information about the original request, such as the caller’s device-independent parameters, the address of the device object upon which a file is open, and so on. It is also used by drivers to store information such as the final status of the request. </LI>

	<LI><I>I/O stack locations</I> – Following the header is a set of <A HREF="irps_8lgn.htm">I/O stack locations</A>, one per driver in the chain of layered drivers for which the request is bound. Each stack location contains the parameters, function codes, and context used by the corresponding driver to determine what it is supposed to be doing. For more information, see the <A HREF="k112_49bm.htm">IO_STACK_LOCATION</A> structure.</LI>
</UL>

<P>While a higher-level driver might check the value of the <B>Cancel</B> Boolean in an IRP, that driver cannot assume the IRP will be completed with STATUS_CANCELLED by a lower-level driver even if the value is TRUE.</P>

<H4>See Also</H4>

<P><A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A>, <A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A>, <A HREF="k104_6u5u.htm"><B>IoGetNextIrpStackLocation</B></A>, <A HREF="k104_6hiq.htm"><B>IoSetCancelRoutine</B></A>, <A HREF="k104_5qr6.htm"><B>IoSetNextIrpStackLocation</B></A>, <A HREF="k112_49bm.htm">IO_STACK_LOCATION</A>, <A HREF="k112_08qa.htm">IO_STATUS_BLOCK</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
