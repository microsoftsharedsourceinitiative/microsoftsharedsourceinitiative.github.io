<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Locking Pageable Code or Data</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Locking Pageable Code or Data">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_locking_pageable_code_or_data_kg"></A>Locking Pageable Code or Data</H3>

<P>Certain drivers, such as the serial and parallel drivers, need not be resident unless the devices they manage are open. However, as long as there is an active connection or port, some part of the driver code that manages that port must be resident to service the device. When the port or connection is not in use, the driver code is not required. In contrast, a driver for a disk that contains system code, application code, or the system paging file must always be memory-resident because the driver constantly transfers data between its device and the system.</P>

<P>A driver for a sporadically used device (such as a modem) can free system space when the device it manages is not active. If you place in a single section the code that must be resident to service an active device, and if your driver locks the code in memory while the device is in use, that section can be designated as pageable. When the driver's device is opened, the operating system brings the pageable section into memory and the driver locks it there until no longer needed. </P>

<P>The system CD audio driver code uses this technique. Code for the driver is grouped into pageable sections according to the manufacturer of CD device. Certain brands might never be present on a given system. Furthermore, even if a CD-ROM exists on a system, it might be accessed infrequently, so grouping code into pageable sections by CD type ensures that code for devices that do not exist on a particular machine will never be loaded. However, when the device is accessed, the system loads the code for the appropriate CD device. Then the driver calls <A HREF="k106_2dde.htm"><B>MmLockPagableCodeSection</B></A>, as described below, to lock its code into memory while its device is in use.</P>

<P>To isolate the pageable code into a named section, mark it with the following compiler directive:</P>

<P><B>#pragma</B> <B>alloc_text(PAGE</B><I>Xxxx</I><B>,</B> <I>RoutineName</I><B>)</B> </P>

<P>The section name must start with PAGE and must be followed by one to four characters that uniquely identify the driver's pageable section. The section name is case sensitive; that is, PAGE must be capitalized. The <I>RoutineName </I>identifies an entry point to be included in the pageable section. </P>

<P>For example, the following identifies RdrCreateConnection as an entry point within the PAGELK section:</P>

<PRE>#ifdef  ALLOC_PRAGMA 
#pragma alloc_text(PAGELK, RdrCreateConnection) 
#endif </PRE>

<P>To make pageable driver code resident and locked, a driver calls <A HREF="k106_2dde.htm"><B>MmLockPagableCodeSection</B></A>, passing an address — usually the entry point of a driver routine — that is in the pageable code section. <B>MmLockPagableCodeSection</B> locks in the entire contents of the section that contains the routine referenced in the call. In other words, it makes resident and locks every routine associated with the same PAGE<I>Xxxx </I>identifier.</P>

<P><B>MmLockPagableCodeSection</B> returns a handle to be used when unlocking the section (<A HREF="k106_5jxu.htm"><B>MmUnlockPagableImageSection</B></A>) or when the driver must lock the section from additional places in its code. </P>

<P>A driver can also treat seldom-used data as pageable so that it, too, can be paged out until the device it supports is active. For example, the system mixer driver uses pageable data. The mixer device has no asynchronous I/O associated with it, so this driver can make its data pageable.</P>

<P>To create a pageable data section, use the following compiler directive at the beginning of the data module:</P>

<P><B>#pragma data_seg ("PAGE")</B></P>

<P>At the end of the module, use the following directive:</P>

<P><B>#pragma data_seg ()</B> </P>

<P>The keyword <B>PAGE</B> is case sensitive, so it must be capitalized.</P>

<P>To make resident and lock the data section, a driver calls <A HREF="k106_6xbm.htm"><B>MmLockPagableDataSection</B></A>, passing a data item that appears in the pageable data section. <B>MmLockPagableDataSection</B> returns a handle to be used in subsequent locking or unlocking requests.</P>

<P>To restore a locked section's pageable status, call <A HREF="k106_5jxu.htm"><B>MmUnlockPagableImageSection</B></A>, passing the handle value returned by <A HREF="k106_2dde.htm"><B>MmLockPagableCodeSection</B></A> or <A HREF="k106_6xbm.htm"><B>MmLockPagableDataSection</B></A>, as appropriate. A driver's Unload routine must call <B>MmUnlockPagableImageSection</B> to release each handle it has obtained for lockable code and data sections.</P>

<P>Locking a section is an expensive operation because the Memory Manager must search its loaded module list before locking the pages into memory. If a driver locks a section from many places in its code, it should use the more efficient <A HREF="k106_5vea.htm"><B>MmLockPagableSectionByHandle</B></A> after its initial call to <B>MmLockPagableXxxxSection</B>.</P>

<P>The handle passed to <B>MmLockPagableSectionByHandle</B> is the handle returned by the earlier call to <B>MmLockPagableCodeSection</B> or <B>MmLockPagableDataSection</B>.</P>

<P>The Memory Manager maintains a count for each section handle and increments this count each time a driver calls <B>MmLockPagableXxx</B> for that section. A call to <B>MmUnlockPagableImageSection</B> decrements the count. While the counter for any section handle is nonzero, that section remains locked in memory.</P>

<P>The handle to a section is valid as long as its driver is loaded. Therefore, a driver should call <B>MmLockPagableXxxxSection</B> only once. If the driver requires additional locking calls, it should use <B>MmLockPagableSectionByHandle</B>.</P>

<P>If a driver calls any <B>MmLockPagableXxxx</B> routine for a section that is already locked, the Memory Manager simply increments the reference count for the section. If the section is paged out when the lock routine is called, the Memory Manager pages in the section and sets its reference count to one.</P>

<P>Using this technique minimizes the driver's impact on system resources. When the driver runs, it can lock into memory the code and data that need to be resident. When there are no outstanding I/O requests for its device, (that is, when the device is closed or if the device was never opened), the driver can unlock the same code or data, making it available to be paged out.</P>

<P>However, after a driver has connected interrupts, any driver code that can be called during interrupt processing always must be memory resident. While some device drivers can be made pageable or locked into memory on demand, some core set of such a driver's code and data must be permanently resident in system space.</P>

<P>Consider the following implementation guidelines for locking a code or data section.

<UL>
	<LI>The primary use of the <B>Mm(Un)LockXxx</B> routines is to allow normally nonpaged code or data to be made pageable and brought in as nonpaged code or data. Drivers such as the serial driver and the parallel driver are good examples: if there are no open handles to a device such a driver manages, portions of code are not needed and can remain paged out. The redirector and server are also good examples of drivers that can use this technique. When there are no active connections, both of these components can be paged out.</LI>

	<LI>The entire pageable section is locked into memory.</LI>

	<LI>One section for code and one for data per driver is efficient. Many named, pageable sections are generally inefficient.</LI>

	<LI>Keep purely pageable sections and paged but locked-on-demand sections separate.</LI>

	<LI>Keep in mind that <B>MmLockPagableCodeSection</B> and <B>MmLockPagableDataSection</B> should not be called frequently. These routines can cause heavy I/O activity when the Memory Manager loads the section. If a driver must lock a section from several places in its code, it should use <B>MmLockPagableSectionByHandle</B>. </LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Locking%20Pageable%20Code%20or%20Data"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
