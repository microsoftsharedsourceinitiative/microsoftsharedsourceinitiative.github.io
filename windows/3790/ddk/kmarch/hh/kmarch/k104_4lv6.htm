<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoGetDeviceInterfaceAlias</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoGetDeviceInterfaceAlias">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iogetdeviceinterfacealias_kr"></A>IoGetDeviceInterfaceAlias</H1>

<P>The <B>IoGetDeviceInterfaceAlias</B> routine returns the alias device interface of the specified device interface instance, if the alias exists. </P>

<PRE class=syntax><B>NTSTATUS
</B>  <B>IoGetDeviceInterfaceAlias(</B>
    <B>IN PUNICODE_STRING</B>  <I>SymbolicLinkName</I><B>,</B>
    <B>IN CONST GUID</B>  *<I>AliasInterfaceClassGuid</I><B>,</B>
    <B>OUT PUNICODE_STRING </B> <I>AliasSymbolicLinkName</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SymbolicLinkName</I></DT>

<DD>Pointer to the name of the device interface instance for which to retrieve an alias. The caller typically received this string from a call to <A HREF="k104_24vm.htm"><B>IoGetDeviceInterfaces</B></A> or in a PnP notification structure.</DD>

<DT><I>AliasInterfaceClassGuid</I></DT>

<DD>Pointer to a GUID specifying the interface class of the alias to retrieve.</DD>

<DT><I>AliasSymbolicLinkName</I></DT>

<DD>Specifies a pointer to a NULL Unicode string. On successful return, <I>AliasSymbolicLinkName</I><B>.Buffer</B> points to a string containing the name of the alias. The caller must free the Unicode string with <A HREF="k109_0koi.htm"><B>RtlFreeUnicodeString</B></A> when it is no longer needed.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoGetDeviceInterfaceAlias</B> returns STATUS_SUCCESS if the call was successful. Possible error return values are described following.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=52%>Error Status</TH>
<TH align=left width=48%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=52%>STATUS_OBJECT_NAME_NOT_FOUND</TD>
<TD width=48%>Possibly indicates that there is no alias of the specified interface class. </TD>
</TR>

<TR VALIGN="top">
<TD width=52%>STATUS_OBJECT_PATH_NOT_FOUND</TD>
<TD width=48%>Possibly indicates that there is no alias of the specified interface class. </TD>
</TR>

<TR VALIGN="top">
<TD width=52%>STATUS_INVALID_HANDLE</TD>
<TD width=48%>Possibly indicates an invalid <I>SymbolicLinkName</I> or an invalid <I>AliasClassGuid</I>.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Device interfaces are considered aliases if they are exposed by the same underlying device and have identical interface reference strings, but are of different interface classes.</P>

<P>The <I>SymbolicLinkName</I> parameter specifies a device interface instance for a particular device, belonging to a particular interface class, with a particular reference string. <B>IoGetDeviceInterfaceAlias</B> returns another device interface instance for the same device and reference string, but of a different interface class, if it exists.</P>

<P>For example, the function driver for a fault-tolerant volume could register and set two device interfaces, one of the fault-tolerant-volume interface class and one of the volume interface class. Another driver could call <B>IoGetDeviceInterfaceAlias</B> with the symbolic link for one of the interfaces and ask whether the other interface exists by specifying its interface class. </P>

<P>Two device interfaces with NULL reference strings are aliases if they are exposed by the same underlying device and have different interface class GUIDs.</P>

<P>Callers of <B>IoGetDeviceInterfaceAlias</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL in the context of a system thread.</P>

<H4>See Also</H4>

<P><A HREF="k104_27n6.htm"><B>IoRegisterDeviceInterface</B></A>, <B>RtlFreeUnicodeString</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoGetDeviceInterfaceAlias"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
