<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Introduction to Driver Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Introduction to Driver Objects">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_introduction_to_driver_objects_kg"></A>Introduction to Driver Objects</H1>

<P>The I/O manager creates a <I>driver object</I> for each driver that has been installed and loaded. Driver objects are defined using <A HREF="k112_6jaq.htm">DRIVER_OBJECT</A> structures.</P>

<P>When the I/O manager calls a driver's <A HREF="drvrrtns_6r76.htm"><B>DriverEntry</B></A> routine, it supplies the address of the driver's driver object. The driver object contains storage for entry points to many of a driver's standard routines. The driver is responsible for filling in these entry points.</P>

<P>The following figure illustrates a driver object, with the set of system-defined standard routines that lowest-level and higher-level drivers can or must have.  </P>

<P>Each standard routine with an asterisk beside its name receives an I/O request packet (IRP) as input. Each of these standard routines also receives a pointer to the target device object for the I/O request.</P>



<P><A NAME="ddk__bmc_24drvobj.wmf__kg"></A><B><IMG SRC="images/24drvobj.gif" ALT="" BORDER=0></B></P>

<P><B>Driver Object</B></P>

<P>The I/O Manager defines the driver object type and uses driver objects to register and track information about the loaded images of drivers. Note that the dispatch entry points (<B>DDDispatch<I>Xxx</I></B> through <B>DDDispatch<I>Yyy</I></B>) in the driver object correspond to the major function codes (IRP_MJ_<I>XXX</I>) that are passed in the I/O stack locations of IRPs.  </P>

<P>The I/O Manager routes each IRP first to a driver-supplied dispatch routine. A lowest-level driver's dispatch routine usually calls an I/O support routine (<A HREF="k104_1nsi.htm"><B>IoStartPacket</B></A>) to queue (or pass on) each IRP that has valid arguments to the driver's <I>StartIo</I> routine. The <I>StartIo</I> routine starts the requested I/O operation on a particular device. Higher-level drivers usually do not have <I>StartIo</I> routines, but they can.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Introduction%20to%20Driver%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
