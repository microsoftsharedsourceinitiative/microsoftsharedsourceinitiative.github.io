<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Objects and Resources</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Objects and Resources">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_objects_and_resources_kr"></A>Objects and Resources</H2>

<DL>
<DT><A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> </DT>

<DD>Initializes a device object, which represents a physical, virtual, or logical device for which the driver is being loaded into the system. Then it allocates space for the driver-defined device extension associated with the device object. </DD>

<DT><A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A> </DT>

<DD>Removes a device object from the system when the underlying device is removed from the system.</DD>

<DT><A HREF="k104_1os2.htm"><B>IoGetDeviceObjectPointer</B></A> </DT>

<DD>Requests access to a named device object and returns a pointer that device object if the requested access is granted. Also returns a pointer to the file object referenced by the named device object. In effect, this routine establishes a connection between the caller and the next-lower-level driver. </DD>

<DT><A HREF="k104_9tiq.htm"><B>IoAttachDeviceToDeviceStack</B></A> </DT>

<DD>Attaches the caller's device object to the highest device object in a chain of drivers and returns a pointer to the previously highest device object. I/O requests bound for the target device are routed first to the caller.</DD>

<DT><A HREF="k104_0kz6.htm"><B>IoGetAttachedDeviceReference</B></A> </DT>

<DD>Returns a pointer to the highest level device object in a driver stack and increments the reference count on that object.</DD>

<DT><A HREF="k104_4s36.htm"><B>IoDetachDevice</B></A> </DT>

<DD>Releases an attachment between the caller's device object and a target driver's device object.</DD>

<DT><A HREF="k104_1po2.htm"><B>IoAllocateDriverObjectExtension</B></A> </DT>

<DD>Allocates a per-driver context area with a given unique identifier.</DD>

<DT><A HREF="k104_6tgy.htm"><B>IoGetDriverObjectExtension</B></A> </DT>

<DD>Retrieves a previously allocated per-driver context area.</DD>

<DT><A HREF="k104_27n6.htm"><B>IoRegisterDeviceInterface</B></A> </DT>

<DD>Registers device functionality (a device interface) that a driver will enable for use by applications or other system components. The I/O Manager creates a registry key for the device interface. Drivers can access persistent storage under this key by calling <A HREF="k104_8kz6.htm"><B>IoOpenDeviceInterfaceRegistryKey</B></A>.</DD>

<DT><A HREF="k104_0wmq.htm"><B>IoIsWdmVersionAvailable</B></A> </DT>

<DD>Checks whether a given WDM version is supported by the operating system.</DD>

<DT><A HREF="k104_8xbm.htm"><B>IoDeleteSymbolicLink</B></A> </DT>

<DD>Releases a symbolic link between a device object name and a user-visible name.</DD>

<DT><A HREF="k104_60c2.htm"><B>IoAssignArcName</B></A> </DT>

<DD>Sets up a symbolic link between a named device object (such as a tape, floppy, or CD-ROM) and the corresponding ARC name for the device.</DD>

<DT><A HREF="k104_16pe.htm"><B>IoDeassignArcName</B></A> </DT>

<DD>Releases the symbolic link created by calling <B>IoAssignArcName</B>.</DD>

<DT><A HREF="k104_28c2.htm"><B>IoSetShareAccess</B></A> </DT>

<DD>Sets the access allowed to a given file object that represents a device. (Only highest-level drivers can call this routine.)</DD>

<DT><A HREF="k104_7h9u.htm"><B>IoConnectInterrupt</B></A> </DT>

<DD>Registers a driver's ISR according to the parameters supplied in the <A HREF="pnp-irps_1gqa.htm">IRP_MN_START_DEVICE</A> request. Returns a pointer to a set of allocated, initialized, and connected interrupt objects that is used as an argument to <B>KeSynchronizeExecution</B>.</DD>

<DT><A HREF="k104_51yq.htm"><B>IoDisconnectInterrupt</B></A> </DT>

<DD>Releases a driver's interrupt objects when the driver unloads.</DD>

<DT><A HREF="k104_6q0i.htm"><B>IoInitializeDpcRequest</B></A> </DT>

<DD>Associates a driver-supplied <A HREF="drvrrtns_9ycy.htm"><I>DpcForIsr</I></A> routine with a given device object, so that the <I>DpcForIsr</I> routinecan complete interrupt-driven I/O operations.</DD>

<DT><A HREF="k104_9yuq.htm"><B>IoReadPartitionTable</B></A> </DT>

<DD>Returns a list of partitions on a disk with a given sector size.</DD>

<DT><A HREF="k104_8y7m.htm"><B>IoSetPartitionInformation</B></A> </DT>

<DD>Sets the partition type and number for a (disk) partition.</DD>

<DT><A HREF="k104_0joy.htm"><B>IoWritePartitionTable</B></A> </DT>

<DD>Writes partition tables for a disk, given the device object that represents the disk, the sector size, and a pointer to a buffer containing the drive layout structure.</DD>

<DT><A HREF="k104_7zqq.htm"><B>IoCreateController</B></A> </DT>

<DD>Initializes a controller object representing a physical device controller that is shared by two or more similar devices that have the same driver, and specifies the size of the controller extension.</DD>

<DT><A HREF="k104_1yd0.htm"><B>IoDeleteController</B></A> </DT>

<DD>Removes a controller object from the system.</DD>

<DT><A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A> </DT>

<DD>Initializes a variable of type KSPIN_LOCK.</DD>

<DT><A HREF="k105_9d0y.htm"><B>KeInitializeDpc</B></A> </DT>

<DD>Initializes a DPC object, setting up a driver-supplied <A HREF="drvrrtns_3tbm.htm"><I>CustomDPC</I></A> routine that can be called with a given context.</DD>

<DT><A HREF="k105_6g4y.htm"><B>KeInitializeTimer</B></A> </DT>

<DD>Initializes a notification timer object to the Not-Signaled state.</DD>

<DT><A HREF="k105_15pu.htm"><B>KeInitializeTimerEx</B></A> </DT>

<DD>Initializes a notification or synchronization timer object to the Not-Signaled state.</DD>

<DT><A HREF="k105_8jaq.htm"><B>KeInitializeEvent</B></A> </DT>

<DD>Initializes an event object as a synchronization (single waiter) or notification (multiple waiters) type event and sets up its initial state (Signaled or Not-Signaled).</DD>

<DT><A HREF="k102_2o8i.htm"><B>ExInitializeFastMutex</B></A> </DT>

<DD>Initializes a fast mutex variable that is used to synchronize mutually exclusive access to a shared resource by a set of threads. </DD>

<DT><A HREF="k105_9hgy.htm"><B>KeInitializeMutex</B></A> </DT>

<DD>Initializes a mutex object at a given level number as set to the Signaled state.</DD>

<DT><A HREF="k105_4zhu.htm"><B>KeInitializeSemaphore</B></A> </DT>

<DD>Initializes a semaphore object to a given count and specifies an upper bound for the count.</DD>

<DT><A HREF="k104_7bg2.htm"><B>IoCreateNotificationEvent</B></A> </DT>

<DD>Initializes a named notification event to be used to synchronize access between two or more components. Notification events are not automatically reset.</DD>

<DT><A HREF="k104_8che.htm"><B>IoCreateSynchronizationEvent</B></A> </DT>

<DD>Initializes a named synchronization event to be used to serialize access to hardware between two otherwise unrelated drivers.</DD>

<DT><A HREF="k108_0q42.htm"><B>PsCreateSystemThread</B></A> </DT>

<DD>Creates a kernel-mode thread that is associated with a given process object or with the default system process. Returns a handle for the thread.</DD>

<DT><A HREF="k108_44aa.htm"><B>PsTerminateSystemThread</B></A> </DT>

<DD>Terminates the current thread and satisfies as many waits as possible for the current thread object.</DD>

<DT><A HREF="k105_2hbm.htm"><B>KeSetBasePriorityThread</B></A> </DT>

<DD>Sets up the run-time priority, relative to the system process, for a driver-created thread.</DD>

<DT><A HREF="k105_4zoy.htm"><B>KeSetPriorityThread</B></A> </DT>

<DD>Sets up the run-time priority for a driver-created thread with a real-time priority attribute.</DD>

<DT><A HREF="k106_1m42.htm"><B>MmIsThisAnNtAsSystem</B></A> </DT>

<DD>Returns TRUE if the current platform is a server, indicating that more resources are likely to be necessary to process I/O requests than if the machine were a client.</DD>

<DT><A HREF="k106_4bhu.htm"><B>MmQuerySystemSize</B></A> </DT>

<DD>Returns an estimate (small, medium, or large) of the amount of memory available on the current platform.</DD>

<DT><A HREF="k102_1b1u.htm"><B>ExInitializeNPagedLookasideList</B></A> </DT>

<DD>Initializes a lookaside list of nonpaged memory. After a successful initialization, fixed-size blocks can be allocated from and freed to the lookaside list.</DD>

<DT><A HREF="k102_4pma.htm"><B>ExInitializePagedLookasideList</B></A> </DT>

<DD>Initializes a lookaside list of paged memory. After a successful initialization, fixed-size blocks can be allocated from and freed to the lookaside list.</DD>

<DT><A HREF="k102_9vhu.htm"><B>ExInitializeResourceLite</B></A> </DT>

<DD>Initializes a resource, for which the caller provides the storage, to be used for synchronization by a set of threads.</DD>

<DT><A HREF="k102_5ik2.htm"><B>ExReinitializeResourceLite</B></A></DT>

<DD>Reinitializes an existing resource variable.</DD>

<DT><A HREF="k102_2dv6.htm"><B>ExDeleteResourceLite</B></A> </DT>

<DD>Deletes a caller-initialized resource from the system's resource list.</DD>

<DT><A HREF="k107_54qa.htm"><B>ObReferenceObjectByHandle</B></A> </DT>

<DD>Returns a pointer to the object body and handle information (attributes and granted access rights), given the handle for an object, the object's type, and a mask. Specifies the desired access to the object and the preferred access mode. A successful call increments the reference count for the object.</DD>

<DT><A HREF="k107_4b76.htm"><B>ObReferenceObjectByPointer</B></A> </DT>

<DD>Increments the reference count for an object so the caller can ensure that the object is not removed from the system while the caller is using it.</DD>

<DT><A HREF="k107_0tyq.htm"><B>ObReferenceObject</B></A> </DT>

<DD>Increments the reference count for an object, given a pointer to the object. </DD>

<DT><A HREF="k107_6vg2.htm"><B>ObDereferenceObject</B></A> </DT>

<DD>Releases a reference to an object (decrements the reference count), given a pointer to the object body.</DD>

<DT><A HREF="k109_8lrm.htm"><B>RtlInitString</B></A> </DT>

<DD>Initializes a counted string in a buffer.</DD>

<DT><A HREF="k109_9smq.htm"><B>RtlInitAnsiString</B></A> </DT>

<DD>Initializes a counted ANSI string in a buffer.</DD>

<DT><A HREF="k109_6x4i.htm"><B>RtlInitUnicodeString</B></A> </DT>

<DD>Initializes a counted Unicode string in a buffer.</DD>

<DT><A HREF="k109_66uq.htm"><B>InitializeObjectAttributes</B></A> </DT>

<DD>Initializes a parameter of type OBJECT_ATTRIBUTES for a subsequent call to a <B>ZwCreate</B><I>Xxx</I> or <B>ZwOpen</B><I>Xxx</I> routine.</DD>

<DT><A HREF="k111_1cfm.htm"><B>ZwCreateDirectoryObject</B></A> </DT>

<DD>Creates or opens a directory object with a specified set of object attributes and requests one or more types of access for the caller. Returns a handle for the directory object.</DD>

<DT><A HREF="k111_9dte.htm"><B>ZwCreateFile</B></A> </DT>

<DD>Creates or opens a file object that represents a physical, logical, or virtual device, a directory, a data file, or a volume. Returns a handle for the file object.</DD>

<DT><A HREF="k111_4omq.htm"><B>ZwCreateKey</B></A> </DT>

<DD>Creates or opens a key object in the registry and returns a handle for the key object.</DD>

<DT><A HREF="k111_550y.htm"><B>ZwDeleteKey</B></A> </DT>

<DD>Deletes an existing, open key in the registry after the last handle for the key is closed.</DD>

<DT><A HREF="k111_4oc2.htm"><B>ZwMakeTemporaryObject</B></A> </DT>

<DD>Resets the "permanent" attribute of an opened object, so that the object and its name can be deleted when the reference count for the object becomes zero.</DD>

<DT><A HREF="k111_03aq.htm"><B>ZwClose</B></A> </DT>

<DD>Releases the handle for an opened object, causing the handle to become invalid, and decrements the reference count of the object handle.</DD>

<DT><A HREF="k108_5z5e.htm"><B>PsGetVersion</B></A> </DT>

<DD>Indicates whether the driver is running on a free or checked build, and optionally supplies information about the operating system version and build number.  </DD>

<DT><A HREF="k107_5j1u.htm"><B>ObGetObjectSecurity</B></A> </DT>

<DD>Returns a buffered security descriptor for a given object. </DD>

<DT><A HREF="k107_5kj6.htm"><B>ObReleaseObjectSecurity</B></A> </DT>

<DD>Releases the security descriptor returned by <B>ObGetObjectSecurity</B>.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Objects%20and%20Resources"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
