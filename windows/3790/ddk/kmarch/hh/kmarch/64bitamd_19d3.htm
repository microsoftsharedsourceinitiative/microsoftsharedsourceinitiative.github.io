<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Koenig Lookup Supported</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_koenig_lookup_supported_kg"></A>Koenig Lookup Supported</H4>

<P>Argument-dependent lookup (Koenig Lookup) is supported. In the following example, the run time does not call <B>f</B> within the <B>g</B> implementation:</P>

<PRE>namespace N {
    class X {};
    void f(X *pX){};    // Called. 
}
void f(void *pv){};    // Not called.
void g(N::X *pX) {
    f(pX);    
}</PRE>

<P>A workaround is to cast the parameter <B>pX</B> to a void before calling <B>f</B>. Then the global <B>f</B> is called when using the compiler for AMD64 as well as earlier versions. Other solutions might be to rename one of the functions, or to use the <B>::</B> operator to specify either the namespace or the global scope.</P>

<PRE>namespace N {
    class X {};
    void f(X *pX){};
}
void f(void *pv){};
void g(N::X *pX) {
    f((void*)pX);    // Calls global f. 
    ::f(pX);         // Calls global f.
    N::f(pX);        // Calls N::f.
}</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Koenig%20Lookup%20Supported"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
