<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Packet-Driven I/O with Reusable IRPs</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Packet-Driven I/O with Reusable IRPs">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_packet_driven_i_o_with_reusable_irps_kg"></A>Packet-Driven I/O with Reusable IRPs</H2>

<P>The I/O Manager's chief job is to accept I/O requests (usually originating from user-mode applications), to create <I>I/O request packets</I> (IRP) to represent them, to route the IRPs to the appropriate drivers, to track them until they are completed, and to return status to the original requester of each I/O operation. The I/O Manager, Plug and Play Manager, and Power Manager use IRPs to communicate with kernel-mode drivers, including WDM drivers, and to allow drivers to communicate with each other.</P>

<P>An IRP might be routed to more than one driver. For example, a request to open a file on a disk might go first to a file system driver, through an intermediate mirror driver, and ultimately to a disk driver and, possibly, to a PnP hardware bus driver.</P>

<P>Therefore, each IRP has a <I>fixed part</I> and one or more driver-specific <I>I/O</I> <I>stack locations</I>:

<UL>
	<LI>In the fixed part (or <I>header</I>), the I/O Manager maintains information about the original request, such as the caller's thread ID and parameters, the address of the device object on which a file is open, and so forth. The fixed part also contains an <I>I/O status block</I>, in which drivers set information about the status of the requested I/O operation.</LI>

	<LI>In the highest level driver's I/O stack location, the I/O Manager, Plug and Play Manager, or Power Manager sets driver-specific parameters, such as the particular operation requested (represented as a function code) and context used by the corresponding driver to determine what it is supposed to be doing. In turn, each higher level driver sets up the I/O stack location of the next lower driver, if any.</LI>
</UL>

<P>As a given IRP is processed through each driver's set of standard routines, each standard routine can access that driver's I/O stack location in the IRP, thereby reusing the IRP at each stage of the driver's operations. In addition, higher level drivers can create (or reuse) IRPs to send requests down to still lower drivers.</P>

<P>For a detailed discussion of IRPs, see <A HREF="irps_0uuf.htm">Handling IRPs</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Packet-Driven%20I%2FO%20with%20Reusable%20IRPs"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
