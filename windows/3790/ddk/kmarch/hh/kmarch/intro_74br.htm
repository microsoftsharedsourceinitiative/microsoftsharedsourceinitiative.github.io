<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Object-Based</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Object-Based">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_file_object_kg_gly">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_object_kg_gly">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_driver_object_kg_gly">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_isr_kg_gly">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_interrupt_object_kg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_object_based_kg"></A>Object-Based</H2>

<P>The NT-based operating system is object-based. Various components in the executive define one or more object types. Each component exports kernel-mode-only support routines that manipulate instances of its object types when these routines are called. No component is allowed to access any instance of another component's object types directly. Each component must call the exported support routines in order to use another component's objects.</P>

<P>Strict adherence to these conventions allows the operating system to be both portable and flexible. For example, a future release of the operating system could contain a wholly or partially recoded Kernel component that defines the same object types, possibly with entirely different internal structures, and exports a set of support routines with the same names and parameters as the existing set. This hypothetical recoded version of the Kernel would have no effect on the portability of any other executive component in the existing system. In other words, operating system components do not practice back-door communication, and drivers also must shun this practice to remain portable and configurable.</P>

<P>Like the operating system, drivers and their devices are also object-based. To all other components in the system, including user-mode code, a connection to a device is represented as an open operation of one of the I/O Manager's <A HREF="JavaScript:hhobj_1.Click()">file objects</A>. Within the I/O system, each driver's logical, virtual, and/or physical devices are represented as <A HREF="JavaScript:hhobj_2.Click()">device objects</A>. Within the I/O Manager, each driver's load image is represented as a <A HREF="JavaScript:hhobj_3.Click()">driver object</A>. The I/O Manager defines the object types for file objects, device objects, and driver objects.</P>

<P>Like any other executive component, drivers use objects by calling kernel-mode support routines exported by the I/O Manager and other system components. Kernel-mode support routines generally have names that identify the specific object each manipulates and the operation each performs on that object. These support routine names have the form:</P>

<P class=indent1><I>PrefixOperationObject</I></P>

<P class=indent1>where</P>

<P class=indent2><I>Prefix</I><BR>
Identifies the kernel-mode component that exports the support routine and, usually, the component that defined the object type. Most prefixes have two letters.</P>

<P class=indent2><I>Operation</I><BR>
Describes what is done to the object.</P>

<P class=indent2><I>Object</I><BR>
Identifies the type of object.</P>

<P>For example, <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A>, which each kernel-mode driver calls one or more times during device initialization, creates a device object to represent a physical, logical, or virtual device as the target of I/O requests.</P>

<P>For convenience, one system component can export routines that call another component's support routines. The I/O Manager, in particular, exports certain routines that make it easier to develop drivers. For example, <A HREF="k104_7h9u.htm"><B>IoConnectInterrupt</B></A>, which lowest-level drivers call to register their <A HREF="JavaScript:hhobj_4.Click()">ISRs</A>, calls the Kernel's support routines for <A HREF="JavaScript:hhobj_5.Click()">interrupt objects</A>.</P>



<H4><A NAME="ddk_object_opacity_kg"></A>Object Opacity</H4>

<P>Some system-defined objects are <I>opaque</I>: only the defining system component "knows" an object type's internal structure and can directly access all the data an object contains. The system component that defines an object usually exports support routines that drivers and other kernel-mode components can call to manipulate that object. For example, the system's Kernel component exports support routines that the I/O Manager calls to initialize and connect interrupt objects when a lowest-level driver registers its ISR.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;To maintain driver portability, d<I>rivers must use the system-supplied support routines to manipulate system-defined objects</I>. The defining system component can change the internal structure of its object types at any time.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Object-Based"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
