<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registering and Enabling an IoTimer Routine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registering and Enabling an IoTimer Routine">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_registering_and_enabling_an_iotimer_routine_kg"></A>Registering and Enabling an <I>IoTimer</I> Routine</H3>

<P>Any driver can register an <A HREF="drvrrtns_7h9u.htm"><I>IoTimer</I></A> routine, after it creates one or more device objects, by calling <A HREF="k104_4hf6.htm"><B>IoInitializeTimer</B></A>. The driver can then start the timer by calling <A HREF="k104_6m5u.htm"><B>IoStartTimer</B></A>. The following figure illustrates these calls.</P>

<P><B><IMG SRC="images/3iotmer.gif" ALT="" BORDER=0></B></P>

<P><B>Using an <I>IoTimer</I> Routine</B></P>

<P>After calling <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> to create device objects, a driver can call <B>IoInitializeTimer</B> with the entry point of its <I>IoTimer</I> routine, along with pointers to a driver-created device object and a context area in which the driver maintains whatever context its <I>IoTimer</I> routine uses. The I/O Manager associates the device object with a kernel-allocated timer object and sets up the timer object to time out every second.</P>

<P>After the driver calls <B>IoStartTimer</B>, its <I>IoTimer</I> routine is called once per second until the driver calls <A HREF="k104_09wy.htm"><B>IoStopTimer</B></A>. A driver can reenable calls to its <I>IoTimer</I> routine with <B>IoStartTimer</B>. (Frequently, when a driver calls <B>IoStartTimer</B>, it supplies the device object pointer obtained from the I/O stack location of the current IRP.)</P>

<P>On entry, the <I>IoTimer</I> routine is passed the device object pointer<I>, </I>along with the context pointer that the driver supplied when it called <B>IoInitializeTimer</B>.</P>

<P>Drivers must not call <B>IoStopTimer</B> from within an <I>IoTimer</I> routine.</P>

<P>The I/O Manager unregisters the timer routine for a specified device object and frees its associated context when the driver calls <A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registering%20and%20Enabling%20an%20IoTimer%20Routine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
