<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Spin Locks and Interlocks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Spin Locks and Interlocks">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_spin_locks_and_interlocks_kr"></A>Spin Locks and Interlocks</H2>

<DL>
<DT><A HREF="k104_9fw2.htm"><B>IoAcquireCancelSpinLock</B></A> </DT>

<DD>Synchronizes cancelable state transitions for IRPs in a multiprocessor-safe manner.</DD>

<DT><A HREF="k104_6hiq.htm"><B>IoSetCancelRoutine</B></A> </DT>

<DD>Sets or clears the <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine in an IRP during a cancelable state transition. Setting a <I>Cancel</I> routine makes an IRP cancelable.</DD>

<DT><A HREF="k104_5po2.htm"><B>IoReleaseCancelSpinLock</B></A> </DT>

<DD>Releases the cancel spin lock when the driver has changed the cancelable state of an IRP or releases the cancel spin lock from the driver's <I>Cancel</I> routine.</DD>

<DT><A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A> </DT>

<DD>Initializes a variable of type KSPIN_LOCK, used to synchronize access to data shared among nonISR routines. An initialized spin lock also is a required parameter to the <B>ExInterlocked</B><I>Xxx</I> routines.</DD>

<DT><A HREF="k105_40qa.htm"><B>KeAcquireSpinLock</B></A> </DT>

<DD>Acquires a spin lock so the caller can synchronize access to shared data safely on multiprocessor platforms. </DD>

<DT><A HREF="k105_3c8i.htm"><B>KeAcquireSpinLockRaiseToDpc</B></A> </DT>

<DD>Acquires a spin lock so the caller can synchronize access to shared data safely on multiprocessor platforms.</DD>

<DT><A HREF="k105_3mia.htm"><B>KeReleaseSpinLock</B></A> </DT>

<DD>Releases a spin lock that was acquired by calling <B>KeAcquireSpinLock</B> and restores the original IRQL at which the caller was running.</DD>

<DT><A HREF="k105_9vaq.htm"><B>KeAcquireSpinLockAtDpcLevel</B></A> </DT>

<DD>Acquires a spin lock, provided that the caller is already running at IRQL DISPATCH_LEVEL.</DD>

<DT><A HREF="k105_122a.htm"><B>KeTryToAcquireSpinLockAtDpcLevel</B></A> </DT>

<DD>Acquires a spin lock that is not already held, provided that the caller is already running at IRQL DISPATCH_LEVEL.</DD>

<DT><A HREF="k105_5ar6.htm"><B>KeReleaseSpinLockFromDpcLevel</B></A> </DT>

<DD>Releases a spin lock that was acquired by calling <B>KeAcquireSpinLockAtDpcLevel</B>.</DD>

<DT><A HREF="k105_427m.htm"><B>KeAcquireInStackQueuedSpinLock</B></A></DT>

<DD>Acquires a queued spin lock so the caller can synchronize access to shared data safely on multiprocessor platforms. </DD>

<DT><A HREF="k105_23zm.htm"><B>KeReleaseInStackQueuedSpinLock</B></A></DT>

<DD>Releases a queued spin lock that was acquired by calling <B>KeAcquireInStackQueuedSpinLock</B>.</DD>

<DT><A HREF="k105_5u42.htm"><B>KeAcquireInStackQueuedSpinLockAtDpcLevel</B></A></DT>

<DD>Acquires a queued spin lock, provided that the caller is already running at IRQL DISPATCH_LEVEL.</DD>

<DT><A HREF="k105_4w8i.htm"><B>KeReleaseInStackQueuedSpinLockFromDpcLevel</B></A></DT>

<DD>Releases a queued spin lock that was acquired by calling <B>KeAcquireInStackQueuedSpinLockAtDpcLevel</B>.</DD>

<DT><A HREF="k105_7pgy.htm"><B>KeAcquireInterruptSpinLock</B></A> </DT>

<DD>Acquires the spin lock that synchronizes access with an interrupt's ISR.</DD>

<DT><A HREF="k105_1b8y.htm"><B>KeReleaseInterruptSpinLock</B></A> </DT>

<DD>Release the spin lock that synchronized access with an interrupt's ISR.</DD>

<DT><B>ExInterlocked<I>Xxx</I>List</B></DT>

<DD>Insert and remove IRPs in a driver-managed internal queue, which is protected by an initialized spin lock for which the driver provides the storage.</DD>

<DT><A HREF="k105_09te.htm"><B>Ke<I>Xxx</I>DeviceQueue</B></A></DT>

<DD>Insert and remove IRPs in a driver-allocated and managed internal device queue object, which is protected by a built-in spin lock.</DD>

<DT><A HREF="k102_9b5e.htm"><B>ExInterlockedAddUlong</B></A> </DT>

<DD>Adds a value to a variable of type ULONG as an atomic operation, using a spin lock to ensure multiprocessor-safe access to the variable; returns the value of the variable before the call occurred.</DD>

<DT><A HREF="k102_7rci.htm"><B>ExInterlockedAddLargeInteger</B></A> </DT>

<DD>Adds a value to a variable of type LARGE_INTEGER as an atomic operation, using a spin lock to ensure multiprocessor-safe access to the variable; returns the value of the variable before the call occurred.</DD>

<DT><A HREF="k102_2cs2.htm"><B>InterlockedIncrement</B></A> </DT>

<DD>Increments a variable of type LONG as an atomic operation. The sign of the return value is the sign of the result of the operation.</DD>

<DT><A HREF="k102_00j6.htm"><B>InterlockedDecrement</B></A> </DT>

<DD>Decrements a variable of type LONG as an atomic operation. The sign of the return value is the sign of the result of the operation. </DD>

<DT><A HREF="k102_0lgy.htm"><B>InterlockedExchange</B></A> </DT>

<DD>Sets a variable of type LONG to a specified value as an atomic operation; returns the value of the variable before the call occurred.</DD>

<DT><A HREF="k102_5esy.htm"><B>InterlockedExchangeAdd</B></A> </DT>

<DD>Adds a value to a given integer variable as an atomic operation; returns the value of the variable before the call occurred.</DD>

<DT><A HREF="k102_1mlu.htm"><B>InterlockedCompareExchange</B></A> </DT>

<DD>Compares the values referenced by two pointers. If the values are equal, resets one of the values to a caller-supplied value in an atomic operation. </DD>

<DT><A HREF="k102_6boy.htm"><B>InterlockedCompareExchangePointer</B></A></DT>

<DD>Compares the pointers referenced by two pointers. If the pointer values are equal, resets one of the values to a caller-supplied value in an atomic operation.</DD>

<DT><A HREF="k102_38z6.htm"><B>ExInterlockedCompareExchange64</B></A> </DT>

<DD>Compares one integer variable to another and, if they are equal, resets the first variable to a caller-supplied ULONGLONG-type value as an atomic operation. </DD>

<DT><A HREF="k105_627m.htm"><B>KeGetCurrentProcessorNumber</B></A> </DT>

<DD>Returns the current processor number when debugging spin lock usage in SMP machines.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Spin%20Locks%20and%20Interlocks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
