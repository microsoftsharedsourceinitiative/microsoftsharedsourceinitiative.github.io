<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Preventing Errors and Deadlocks While Using Spin Locks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Preventing Errors and Deadlocks While Using Spin Locks">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_preventing_errors_and_deadlocks_while_using_spin_locks_kg"></A>Preventing Errors and Deadlocks While Using Spin Locks</H2>

<P>While a driver routine holds a spin lock, it cannot cause a hardware exception or raise a software exception without bringing down the system. In other words, a driver’s ISR and any <I>SynchCritSection</I> routine that the driver supplies in a call to <A HREF="k105_99rm.htm"><B>KeSynchronizeExecution</B></A> must not cause a fault or trap, such as a page fault or an arithmetic exception, and cannot raise a software exception. A routine that calls <A HREF="k105_40qa.htm"><B>KeAcquireSpinLock</B></A> or <B>KeAcquireInStackQueuedSpinLock</B> also cannot cause a hardware exception or raise a software exception until it has released its executive spin lock and is no longer running at IRQL DISPATCH_LEVEL. </P>

<H4>Pageable Data and Support Routines</H4>

<P>While holding a spin lock, drivers must not call routines that access pageable data. Remember that drivers can call certain support routines that access pageable data if and only if their calls occur while executing at an IRQL strictly less than DISPATCH_LEVEL. This IRQL restriction precludes calling these support routines while holding a spin lock. For IRQL requirements for any specific support routine, see the routine's reference page.</P>

<H4>Recursion</H4>

<P>Attempting to acquire a spin lock recursively is guaranteed to cause a deadlock: the holding instantiation of a recursive routine cannot release the spin lock while a second instantiation spins, trying to acquire the same spin lock. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>Follow these guidelines concerning spin lock usage with recursive routines: </B>

<UL>
	<LI>The recursive routine must not call itself while holding a spin lock, or must not attempt to acquire the same spin lock on subsequent calls. </LI>

	<LI>While the recursive routine holds a spin lock, another driver routine must not call the recursive routine if recursion might cause a deadlock or could cause the caller to hold the spin lock for longer than 25 microseconds. </LI>
</UL>

<P>For more information about recursive driver routines, see also <A HREF="memmgmt_5esn.htm">Using the Kernel Stack</A>. </P>

<H4>Nested Spin Lock Acquisitions</H4>

<P>Attempting to acquire a second spin lock while holding another spin lock also can cause deadlocks or poor driver performance. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>Follow these implementation guidelines in drivers holding a spin lock: </B>

<UL>
	<LI>The driver must not call a support routine that uses a spin lock unless a deadlock cannot occur. </LI>

	<LI>Even if a deadlock cannot occur, the driver should not call a support routine that uses a spin lock unless alternate coding techniques cannot provide comparable driver performance and functionality. </LI>

	<LI>If a driver makes nested calls to acquire spin locks, it must release those spin locks in inverse order: that is, if a driver acquires spin lock A before acquiring spin lock B, it must release spin lock B before it releases spin lock A. </LI>
</UL>

<P>In general, avoid using nested spin locks to protect overlapping subsets or discrete sets of shared data and resources. Consider what can happen if a driver uses two executive spin locks to protect discrete resources, such as a pair of timer objects that might be set individually and collectively by various driver routines. The driver would deadlock intermittently in an SMP machine, whenever either of two routines, each holding one spin lock, tried to acquire the other spin lock. </P>

<P>Even if a deadlock-proof driver can be designed to use nested spin locks, it could be difficult to implement successfully. Nested spin locks are difficult to debug and to test adequately in an SMP machine. Moreover, using nested spin locks can severely degrade both driver and system performance. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Preventing%20Errors%20and%20Deadlocks%20While%20Using%20Spin%20Locks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
