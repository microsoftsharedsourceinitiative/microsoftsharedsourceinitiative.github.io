<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing IRPs</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Processing IRPs">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_processing_irps_kr"></A>Processing IRPs</H2>

<DL>
<DT><A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A> </DT>

<DD>Returns a pointer to the caller's I/O stack location in a given IRP.</DD>

<DT><A HREF="k104_6u5u.htm"><B>IoGetNextIrpStackLocation</B></A> </DT>

<DD>Returns a pointer to the next-lower-level driver's I/O stack location in a given IRP.</DD>

<DT><A HREF="k104_4fqq.htm"><B>IoCopyCurrentIrpStackLocationToNext</B></A> </DT>

<DD>Copies the IRP stack parameters from the current stack location to the stack location of the next-lower driver and allows the current driver to set an I/O completion routine.</DD>

<DT><A HREF="k104_1ohe.htm"><B>IoSkipCurrentIrpStackLocation</B></A> </DT>

<DD>Copies the IRP stack parameters from the current stack location to the stack location of the next-lower driver and does not allow the current driver to set an I/O completion routine.</DD>

<DT><A HREF="k104_75f7.htm"><B>IoGetRelatedDeviceObject</B></A> </DT>

<DD>Returns a pointer to the device object represented by a given file object.</DD>

<DT><A HREF="k104_67n6.htm"><B>IoGetFunctionCodeFromCtlCode</B></A> </DT>

<DD>Returns the value of the function field within a given IOCTL_<I>XXX</I> or FSCTL_<I>XXX</I> code.</DD>

<DT><A HREF="k104_3oz6.htm"><B>IoValidateDeviceIoControlAccess</B></A> </DT>

<DD>Verifies that the sender of an <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> or <A HREF="k113_51de.htm">IRP_MJ_FILE_SYSTEM_CONTROL</A> IRP has the access specified.</DD>

<DT><A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> </DT>

<DD>Registers a driver-supplied <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine for an IRP, so the <I>IoCompletion</I> routine is called when the next-lower-level driver has completed the requested operation in one or more of the following ways: successfully, with an error, or by canceling the IRP.</DD>

<DT><A HREF="k104_17zm.htm"><B>IoSetCompletionRoutineEx</B></A></DT>

<DD>Same as <B>IoSetCompletionRoutine</B>, except that it guarantees a non-Plug and Play driver is not unloaded before the <I>IoCompletion</I> routine exits.</DD>

<DT><A HREF="k104_1agi.htm"><B>IoCallDriver</B></A> </DT>

<DD>Sends an IRP to a lower-level driver.</DD>

<DT><A HREF="portn_7tki.htm"><B>PoCallDriver</B></A></DT>

<DD>Sends an IRP with major function code <A HREF="k113_7jjm.htm">IRP_MJ_POWER</A> to the next-lower driver.</DD>

<DT><A HREF="k104_90vm.htm"><B>IoForwardIrpSynchronously</B></A> </DT>

<DD>Sends an IRP to a lower-level driver synchronously.</DD>

<DT><A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> </DT>

<DD>Marks a given IRP indicating that STATUS_PENDING was returned because further processing is required by another driver routine or by a lower-level driver.</DD>

<DT><A HREF="k104_1nsi.htm"><B>IoStartPacket</B></A> </DT>

<DD>Calls the driver's <A HREF="drvrrtns_6isy.htm"><I>StartIo</I></A> routine with the given IRP for the given device object or inserts the IRP into the device queue if the device is already busy, specifying whether the IRP is cancelable.</DD>

<DT><A HREF="k104_48tu.htm"><B>IoSetStartIoAttributes</B></A></DT>

<DD>Sets attributes for when the driver's <I>StartIo</I> routine will execute.</DD>

<DT><A HREF="k104_9fw2.htm"><B>IoAcquireCancelSpinLock</B></A> </DT>

<DD>Synchronizes cancelable state transitions for IRPs in a multiprocessor-safe manner.</DD>

<DT><A HREF="k104_6hiq.htm"><B>IoSetCancelRoutine</B></A> </DT>

<DD>Sets or clears the <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine in an IRP. Setting a Cancel routine makes an IRP cancelable.</DD>

<DT><A HREF="k104_5po2.htm"><B>IoReleaseCancelSpinLock</B></A> </DT>

<DD>Releases the cancel spin lock when the driver has changed the cancelable state of an IRP or releases the cancel spin lock from the driver's <I>Cancel</I> routine.</DD>

<DT><A HREF="k104_1j8y.htm"><B>IoCancelIrp</B></A> </DT>

<DD>Marks an IRP as canceled.</DD>

<DT><A HREF="k104_9yuq.htm"><B>IoReadPartitionTable</B></A> </DT>

<DD>Returns a list of partitions on a disk with a given sector size.</DD>

<DT><A HREF="k104_8y7m.htm"><B>IoSetPartitionInformation</B></A> </DT>

<DD>Sets the partition type and number for a (disk) partition.</DD>

<DT><A HREF="k104_0joy.htm"><B>IoWritePartitionTable</B></A> </DT>

<DD>Writes partition tables for a disk, given the device object representing the disk, the sector size, and a pointer to a buffer containing the drive geometry.</DD>

<DT><A HREF="k104_0m9e.htm"><B>IoAllocateErrorLogEntry</B></A> </DT>

<DD>Allocates and initializes an error log packet; returns a pointer so that the caller can supply error-log data and call <B>IoWriteErrorLogEntry</B> with the packet.</DD>

<DT><A HREF="k104_0p82.htm"><B>IoWriteErrorLogEntry</B></A> </DT>

<DD>Queues a previously allocated and filled-in error log packet to the system error logging thread.</DD>

<DT><A HREF="k104_350y.htm"><B>IoIsErrorUserInduced</B></A> </DT>

<DD>Returns a Boolean value indicating whether an I/O request failed due to one of the following conditions: STATUS_IO_TIMEOUT, STATUS_DEVICE_NOT_READY, STATUS_UNRECOGNIZED_MEDIA, STATUS_VERIFY_REQUIRED, STATUS_WRONG_VOLUME, STATUS_MEDIA_WRITE_PROTECTED, or STATUS_NO_MEDIA_IN_DEVICE. If the result is TRUE, a removable-media driver must call <B>IoSetHardErrorOrVerifyDevice</B> before completing the IRP.</DD>

<DT><A HREF="k104_4aia.htm"><B>IoSetHardErrorOrVerifyDevice</B></A> </DT>

<DD>Supplies the device object for which the given IRP was failed due to a user-induced error, such as supplying the incorrect media for the requested operation or changing the media before the requested operation was completed. A file system driver uses the associated device object to notify the user, who can then correct the error or retry the operation.</DD>

<DT><A HREF="k104_4wtu.htm"><B>IoGetDeviceToVerify</B></A> </DT>

<DD>Returns a pointer to the device object, representing a removable-media device that is the target of the given thread's I/O request. Useful only to file systems or other highest-level drivers.</DD>

<DT><A HREF="k104_4w1e.htm"><B>IoRaiseHardError</B></A> </DT>

<DD>Notifies the user that the given IRP was failed on the given device object for an optional VPB, so that the user can correct the error or retry the operation.</DD>

<DT><A HREF="k104_1cxe.htm"><B>IoRaiseInformationalHardError</B></A> </DT>

<DD>Notifies the user of an error, providing an I/O error status and an optional string supplying more information.</DD>

<DT><A HREF="k102_6ipe.htm"><B>ExRaiseStatus</B></A> </DT>

<DD>Raises an error status and causes a caller-supplied structured exception handler to be called. Useful only to highest-level drivers that supply exception handlers, in particular to file systems.</DD>

<DT><A HREF="k104_7eb6.htm"><B>IoStartNextPacket</B></A> </DT>

<DD>Dequeues the next IRP for a given device object, specifies whether the IRP is cancelable, and calls the driver's <I>StartIo</I> routine.</DD>

<DT><A HREF="k104_2hte.htm"><B>IoStartNextPacketByKey</B></A> </DT>

<DD>Dequeues the next IRP for a device object according to a specified sort-key value, specifies whether the IRP is cancelable, and calls the driver's <I>StartIo</I> routine.</DD>

<DT><A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A> </DT>

<DD>Completes an I/O request, giving a priority boost to the original caller and returning a given IRP to the I/O system for disposal: either to call any <I>IoCompletion</I> routines supplied by higher-level drivers, or to return status to the original requester of the operation.</DD>

<DT><A HREF="k104_48c2.htm"><B>IoGetCurrentProcess</B></A> </DT>

<DD>Returns a pointer to the current process. Useful only to highest-level drivers.</DD>

<DT><A HREF="k104_2rle.htm"><B>IoGetInitialStack</B></A> </DT>

<DD>Returns the initial base address of the current thread's stack. Useful only to highest-level drivers.</DD>

<DT><A HREF="k104_8wmq.htm"><B>IoGetRemainingStackSize</B></A> </DT>

<DD>Returns the amount of available stack space. Useful only to highest-level drivers.</DD>

<DT><A HREF="k104_7foy.htm"><B>IoGetStackLimits</B></A> </DT>

<DD>Returns the boundaries of the current thread's stack frame. Useful only to highest-level drivers.</DD>

<DT><A HREF="k104_1lbm.htm"><B>IoCsqInitialize</B></A></DT>

<DD>Initializes the dispatch table for a driver's cancel-safe IRP queue.</DD>

<DT><A HREF="k104_1bxu.htm"><B>IoCsqInsertIrp</B></A></DT>

<DD>Inserts an IRP into a driver's cancel-safe IRP queue.</DD>

<DT><A HREF="k104_39de.htm"><B>IoCsqRemoveIrp</B></A></DT>

<DD>Removes the specified IRP from a driver's cancel-safe IRP queue.</DD>

<DT><A HREF="k104_7fw2.htm"><B>IoCsqRemoveNextIrp</B></A></DT>

<DD>Removes the next IRP from a driver's cancel-safe IRP queue.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Processing%20IRPs"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
