<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DispatchReadWrite Using Direct I/O</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DispatchReadWrite Using Direct I/O">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_dispatchreadwrite_using_direct_i_o_kg"></A><I>DispatchReadWrite</I> Using Direct I/O</H3>

<P>Any lower-level device driver that sets up its device objects for direct I/O satisfies a read request by returning data transferred from its device to system physical memory, which is described by the MDL at <B>Irp-&gt;MdlAddress</B>. It satisfies a write request by transferring data from system physical memory out to its device. </P>

<P>Lower-level drivers must handle read/write requests asynchronously. Therefore, every lower-level driver’s <I>DispatchReadWrite</I> routine <I>must</I> pass IRP_MJ_READ and IRP_MJ_WRITE IRPs with valid parameters on to other driver routines, as described in <A HREF="irps_1oh3.htm">Passing IRPs Down the Driver Stack</A>.</P>

<P>For read/write IRPs sent to lower-level drivers, the paged physical memory described by the MDL at <B>Irp-&gt;MdlAddress</B> has already been probed for the correct access rights to carry out the requested transfer and has already been locked down by the highest-level driver in the chain or by the I/O Manager. Any intermediate or lowest-level driver that sets up its device objects for direct I/O <I>should not</I> call <A HREF="k106_8ble.htm"><B>MmProbeAndLockPages</B></A> because this has already been done. A lowest-level driver calls <A HREF="k106_0nqq.htm"><B>MmGetSystemAddressForMdlSafe</B></A>. (Drivers for Windows 98 call <A HREF="k106_4o4y.htm"><B>MmGetSystemAddressForMdl</B></A> instead.  Drivers for Windows Me, Windows 2000 and later operating systems should use <B>MmGetSystemAddressForMdlSafe</B>.)</P>

<P>Any intermediate or lowest-level device driver’s <I>DispatchReadWrite</I> routine should validate the parameters in its I/O stack location of read/write IRPs if it cannot trust a higher-level driver to pass down only IRPs with valid parameters. If the <I>DispatchReadWrite</I> routine finds a parameter error, it should complete the IRP with an appropriate error STATUS_<I>XXX</I> value as already described in <A HREF="irps_6crr.htm">Completing IRPs</A>. If parameters are valid, an intermediate driver's <I>DispatchReadWrite</I> routine must pass the request on for further processing, according to the guidelines in <A HREF="drvcomps_24vb.htm"><I>DispatchReadWrite</I> in Higher Level Drivers</A>.</P>

<P>A lowest-level device driver’s <I>DispatchReadWrite</I> routine must call <A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> with the transfer request, pass the IRP on for further processing by other driver routines, and return STATUS_PENDING, as described in <A HREF="irps_1oh3.htm">Passing IRPs Down the Driver Stack</A>.</P>

<P>Note that a device driver’s <I>DispatchReadWrite</I> routine can control the order in which IRPs are queued to its device for faster I/O throughput by calling <A HREF="k104_1nsi.htm"><B>IoStartPacket</B></A> with a driver-determined <I>Key</I> value. Another routine in the driver dequeues the IRP later, determines whether the requested length must be split into partial-transfer operations, and programs the device to transfer data. </P>

<P>In general, a device driver that must split up large transfer requests to suit the limitations of its device should postpone these operations until just before setting up the device for a given transfer request. Such a device driver’s <I>DispatchReadWrite</I> routine should not check the I/O stack location of incoming IRPs for any device-specific transfer constraints, nor attempt to calculate partial-transfer ranges, when the driver can postpone these checks until just before its <I>StartIo</I> (or other driver routine) programs the device for a transfer operation. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DispatchReadWrite%20Using%20Direct%20I%2FO"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
