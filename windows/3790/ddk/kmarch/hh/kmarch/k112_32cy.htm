<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DEVICE_OBJECT</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DEVICE_OBJECT">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_video_miniport_drivers_gg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_scsi_miniport_drivers_kg">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ndis_miniport_drivers_ng1">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_device_object_kr"></A>DEVICE_OBJECT</H1>

<P>A device object represents a logical, virtual, or physical device for which a driver handles I/O requests.</P>

<H4>Accessible Members</H4>

<DL>
<DT><B>PDRIVER_OBJECT DriverObject</B></DT>

<DD>Pointer to the driver object, representing the driver’s loaded image, that was input to the <A HREF="drvrrtns_6r76.htm"><B>DriverEntry</B></A> and <I>AddDevice</I> routines.</DD>

<DT><B>PDEVICE_OBJECT NextDevice</B></DT>

<DD>Pointer to the next device object, if any, created by the same driver. The I/O Manager updates this list at each successful call to <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> or <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A>.  A driver that is being unloaded must walk the list of its device objects and delete them. A driver that recreates its device objects dynamically also uses this field.</DD>

<DT><B>PIRP CurrentIrp</B></DT>

<DD>Pointer to the current IRP if the driver has a <A HREF="drvrrtns_6isy.htm"><I>StartIo</I></A> routine whose entry point was set in the driver object and if the driver is currently processing IRP(s). Otherwise, this field is NULL.</DD>

<DT><B>ULONG Flags</B></DT>

<DD>Device drivers OR this field in their newly created device objects with one or more of the following system-defined values: 

<DL>
<DT>DO_BUFFERED_IO or DO_DIRECT_IO</DT>

<DD>Higher-level drivers OR the field with the same value as the next-lower driver, except possibly for highest-level drivers.</DD>

<DT>DO_BUS_ENUMERATED_DEVICE</DT>

<DD>The system sets this flag in each PDO. Drivers must not modify this flag. </DD>

<DT>DO_DEVICE_INITIALIZING</DT>

<DD>The I/O Manager sets this flag when it creates the device object. 

<P>A device function or filter driver clears the flag in its <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routine, after attaching the device object to the device stack, establishing the device power state, and ORing the field with one of the power flags (if necessary). The PnP Manager checks that the flag is clear after return from AddDevice.
</DD>

<DT>DO_POWER_INRUSH</DT>

<DD>Drivers of devices that require inrush current when powering on must set this flag. A driver cannot set both this flag and DO_POWER_PAGABLE.</DD>

<DT>DO_POWER_PAGABLE </DT>

<DD>Windows®&nbsp;2000 and later drivers that are pageable, are not part of the paging path, and do not require inrush current must set this flag. The system calls such drivers at IRQL PASSIVE_LEVEL. Drivers cannot set both this flag and DO_POWER_INRUSH.

<P>All WDM, Windows 98, and Windows Me drivers must set DO_POWER_PAGABLE. 
</DD>

<DT>DO_VERIFY_VOLUME</DT>

<DD>Removable-media drivers set this flag while processing transfer requests. Such drivers should also check for this flag in the target for a transfer request before transferring any data. See the <A HREF="other_5ag7.htm">Supporting Removable Media</A> for details.
</DD>
</DL>


<P>For more information about setting the <B>Flags</B> field, see <A HREF="devobjts_8zdz.htm">Initializing a Device Object</A>.
</DD>

<DT><B>ULONG Characteristics</B></DT>

<DD>Specifies one or more system-defined constants, ORed together, that provide additional information about the driver's device. The constants include:

<DL>
<DT>FILE_AUTOGENERATED_DEVICE_NAME</DT>

<DD>Directs the I/O Manager to generate a name for the device, instead of the caller specifying a <I>DeviceName</I> when calling this routine. The I/O Manager ensures that the name is unique. This characteristic is typically specified by a PnP bus driver to generate a name for a physical device object (PDO) for a child device on its bus. This characteristic is new for Windows&nbsp;2000 and Windows&nbsp;98.</DD>

<DT>FILE_CHARACTERISTIC_PNP_DEVICE</DT>

<DD>Indicates that the device object is part of a Plug and Play stack. This flag is required if a bus driver (or bus filter driver) registers WMI support for a device object that has not yet received the IRP_MN_START_DEVICE request. It is also required if a function or filter driver registers for WMI <I>before</I> attaching to its device stack.</DD>

<DT>FILE_DEVICE_IS_MOUNTED</DT>

<DD>Indicates that a file system is mounted on the device. Drivers should not set this characteristic.</DD>

<DT>FILE_DEVICE_SECURE_OPEN</DT>

<DD>(Windows&nbsp;NT® 4.0 SP5 and later)

<P>Directs the I/O Manager to apply the security descriptor of the device object to relative opens and trailing file name opens on the device. For more information, see <A HREF="devobjts_7mav.htm">Controlling Device Namespace Access</A>. 
</DD>

<DT>FILE_FLOPPY_DISKETTE</DT>

<DD>Indicates that the device is a floppy disk device.</DD>

<DT>FILE_READ_ONLY_DEVICE</DT>

<DD>Indicates that the device cannot be written to.</DD>

<DT>FILE_REMOTE_DEVICE</DT>

<DD>Indicates that the device is remote.</DD>

<DT>FILE_REMOVABLE_MEDIA</DT>

<DD>Indicates that the storage device supports removable media.

<P>Note that this characteristic indicates removable <I>media</I>, not a removable <I>device</I>. For example, drivers for JAZ drive devices should specify this characteristic, but drivers for PCMCIA flash disks should not.
</DD>

<DT>FILE_VIRTUAL_VOLUME</DT>

<DD>Indicates that the volume is virtual. Drivers should not set this characteristic.</DD>

<DT>FILE_WRITE_ONCE_MEDIA</DT>

<DD>Indicates that the device supports write-once media.
</DD>
</DL>
</DD>
</DL>

<P>Drivers do not set this member directly.  For more information about setting device characteristics, see <A HREF="devobjts_7usn.htm">Specifying Device Characteristics</A>.

<DL>
<DT><B>PVOID DeviceExtension</B></DT>

<DD>Pointer to the device extension. The structure and contents of the device extension are driver-defined. The size is driver-determined, specified in the driver’s call to <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> or <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A>.  For more information about device extensions, see <A HREF="devobjts_1gdj.htm">Device Extensions</A>.  </DD>

<DT><B>DEVICE_TYPE DeviceType</B></DT>

<DD>Set by <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A>, using the value specified for that routine's <I>DeviceType</I> parameter. For more information, see <A HREF="devobjts_5hnr.htm">Specifying Device Types</A>.</DD>

<DT><B>CCHAR StackSize</B></DT>

<DD>Specifies the minimum number of stack locations in IRPs to be sent to this driver. <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> and <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A> sets this field to one in newly created device objects; lowest-level drivers can therefore ignore this field. The I/O manager automatically sets the <B>StackSize</B> field in a higher-level driver’s device object to the appropriate value if the driver calls <A HREF="k104_3zci.htm"><B>IoAttachDevice</B></A> or <A HREF="k104_9tiq.htm"><B>IoAttachDeviceToDeviceStack</B></A>. Only a higher-level driver that chains itself over another driver with <B>IoGetDeviceObjectPointer</B> must explicitly set the value of <B>StackSize</B> in its own device object(s) to (1 + the <B>StackSize</B> value of the next-lower driver’s device object).</DD>

<DT><B>ULONG AlignmentRequirement</B></DT>

<DD>Specifies the device's address alignment requirement for data transfers. The value must be one of the FILE_<I>XXX</I>_ALIGNMENT values defined in <I>wdm.h</I> and <I>ntddk.h</I>. For more information, see <A HREF="devobjts_8zdz.htm">Initializing a Device Object</A>. Also see <A HREF="kdma_186q.htm"><B>GetDmaAlignment</B></A> and <A HREF="k111_9pyq.htm"><B>ZwQueryInformationFile</B></A>.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>The operating system represents devices by device objects.  For more information, see <A HREF="devobjts_678n.htm">Device Objects and Device Stacks</A>.  </P>

<P>Drivers create device objects by using the <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A> and <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A> routines.  For more information on creating device objects, see <A HREF="devobjts_3y93.htm">Creating a Device Object</A>.</P>

<P>A device object is partially opaque.  Drivers do not set members of the device object directly, unless otherwise documented.  For information on the members that drivers can modify directly, see <A HREF="devobjts_8zdz.htm">Initializing a Device Object</A>.  For other device object properties, see <A HREF="devobjts_2cyv.htm">Properties of Device Objects</A>.</P>

<P>Undocumented members within a device object must be considered inaccessible. Drivers with dependencies on object member locations or access to undocumented members might not remain portable and interoperable with other drivers over time.</P>

<P>The system-supplied video port driver sets up the fields of the device objects it creates on behalf of <A HREF="JavaScript:hhobj_1.Click()">video miniport drivers</A>.</P>

<P>The system-supplied SCSI port driver sets up the fields of the device objects it creates on behalf of <A HREF="JavaScript:hhobj_2.Click()">SCSI miniport drivers</A>.</P>

<P>The system-supplied NDIS library sets up the fields of the device objects it creates on behalf of <A HREF="JavaScript:hhobj_3.Click()">NDIS miniport drivers</A>.</P>

<H4>See Also</H4>

<P><A HREF="k112_6jaq.htm">DRIVER_OBJECT</A>, <A HREF="k104_3zci.htm"><B>IoAttachDevice</B></A>, <A HREF="k104_9tiq.htm"><B>IoAttachDeviceToDeviceStack</B></A>, <A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A>, <A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A>, <A HREF="k104_1os2.htm"><B>IoGetDeviceObjectPointer</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DEVICE_OBJECT"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
