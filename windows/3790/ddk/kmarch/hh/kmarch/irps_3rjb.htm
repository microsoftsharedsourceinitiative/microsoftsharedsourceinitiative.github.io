<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Synchronizing Cancellation in Higher-Level Drivers without Cancel Routines</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Synchronizing Cancellation in Higher-Level Drivers without Cancel Routines">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_synchronizing_cancellation_in_higher_level_drivers_without_cancel_routines_kg"></A>Synchronizing Cancellation in Higher-Level Drivers without <I>Cancel</I> Routines</H3>

<P>A higher-level driver can make no assumptions about whether or how existing lower-level drivers handle cancelable IRPs. As soon as any higher-level driver calls <A HREF="k104_1agi.htm"><B>IoCallDriver</B></A> for an IRP, it no longer owns that IRP and it can neither ascertain nor control processing of the IRP by lower-level drivers.</P>

<P>However, any higher-level driver can set an <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine for an IRP by calling <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> before it calls <B>IoCallDriver</B>. The higher-level driver can determine whether any pending IRP is canceled in a lower driver by calling <B>IoSetCompletionRoutine</B> with the <I>InvokeOnCancel</I> parameter set to TRUE before it passes the IRP on to lower drivers. Doing so ensures that the driver's <I>IoCompletion</I> routine will be called whether the IRP is canceled or completed. </P>

<P>A higher-level driver can call <A HREF="k104_1j8y.htm"><B>IoCancelIrp</B></A> with any pending IRP that the driver has allocated. However, making this call does not ensure that the driver-allocated IRP will be completed with its I/O status block set to STATUS_CANCELLED; another thread might already be completing the IRP. To check whether the IRP was canceled, the higher-level driver must call <B>IoSetCompletionRoutine</B> with the <I>InvokeOnCancel</I> parameter set to TRUE before passing the IRP on to the next lower driver. See <A HREF="irps_6crr.htm">Completing IRPs</A> for more information about completion routines.</P>

<P>A higher-level driver must not call <B>IoCancelIrp</B> with an IRP that it did not allocate.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Synchronizing%20Cancellation%20in%20Higher-Level%20Drivers%20without%20Cancel%20Routines"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
