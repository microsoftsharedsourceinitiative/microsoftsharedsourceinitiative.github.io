<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ObReferenceObjectByHandle</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ObReferenceObjectByHandle">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_obreferenceobjectbyhandle_kr"></A>ObReferenceObjectByHandle</H1>

<P>The <B>ObReferenceObjectByHandle</B> routine provides access validation on the object handle, and, if access can be granted, returns the corresponding pointer to the object’s body.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>ObReferenceObjectByHandle(</B>
    <B>IN HANDLE</B>  <I>Handle</I><B>,</B>
    <B>IN ACCESS_MASK</B>  <I>DesiredAccess</I><B>,</B>
    <B>IN POBJECT_TYPE</B>  <I>ObjectType</I>  <B>OPTIONAL,</B>
    <B>IN KPROCESSOR_MODE</B>  <I>AccessMode</I><B>,</B>
    <B>OUT PVOID</B>  <B>*</B><I>Object</I><B>,</B>
    <B>OUT POBJECT_HANDLE_INFORMATION</B>  <I>HandleInformation</I>  <B>OPTIONAL</B>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Handle</I></DT>

<DD>Specifies an open handle for an object.</DD>

<DT><I>DesiredAccess</I></DT>

<DD>Specifies the requested types of access to the object. The interpretation of this field is dependent on the object type.</DD>

<DT><I>ObjectType</I></DT>

<DD>Pointer to the object type. <I>ObjectType</I> can be either <B>*IoFileObjectType</B> or <B>*ExEventObjectType</B>. This parameter can also be NULL if <I>AccessMode</I> is <B>KernelMode</B>. </DD>

<DT><I>AccessMode</I></DT>

<DD>Specifies the access mode to use for the access check. It must be either <B>UserMode</B> or <B>KernelMode</B>. Lower-level drivers should specify <B>KernelMode</B>.</DD>

<DT><I>Object</I></DT>

<DD>Pointer to a variable that receives a pointer to the object’s body.</DD>

<DT><I>HandleInformation</I></DT>

<DD>Drivers set this to NULL.  
</DD>
</DL>

<H4>Return Value</H4>

<P><B>ObReferenceObjectByHandle</B> returns an NTSTATUS value. The possible return values include:</P>

<P class=indent1>STATUS_SUCCESS<BR>
STATUS_OBJECT_TYPE_MISMATCH<BR>
STATUS_ACCESS_DENIED<BR>
STATUS_INVALID_HANDLE</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>A pointer to the object body is retrieved from the object table entry and returned to the caller by means of the <I>Object</I> parameter.</P>

<P>If the <I>AccessMode</I> parameter is <B>KernelMode</B>, the requested access is always allowed. If <I>AccessMode</I> is <B>UserMode</B>, the requested access is compared to the granted access for the object. Only highest-level drivers can safely specify <B>UserMode</B> for the input <I>AccessMode</I>.</P>

<P>If the call succeeds, a pointer to the object body is returned to the caller and the pointer reference count is incremented. Incrementing this count prevents the object from being deleted while the pointer is being referenced. The caller must decrement the reference count with <A HREF="k107_6vg2.htm"><B>ObDereferenceObject</B></A> as soon as it is done with the object. </P>

<P>Callers of <B>ObReferenceObjectByHandle</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k107_6vg2.htm"><B>ObDereferenceObject</B></A>, <A HREF="k107_0tyq.htm"><B>ObReferenceObject</B></A>, <A HREF="k107_4b76.htm"><B>ObReferenceObjectByPointer</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ObReferenceObjectByHandle"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
