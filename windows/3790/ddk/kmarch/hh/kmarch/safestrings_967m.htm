<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCchCatN</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCchCatN">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcchcatn_kr"></A>RtlStringCchCatN</H1>

<P>The <B>RtlStringCchCatNW</B> and <B>RtlStringCchCatNA</B> functions concatenate two character-counted strings while limiting the size of the appended string. </P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCchCatNW(
    IN OUT LPWSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cchDest</I><B>,</B>
<B>    IN LPCWSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cchMaxAppend</I>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCchCatNA(</B>
<B>    IN OUT LPSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cchDest</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cchMaxAppend</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Caller-supplied pointer to a buffer which, on input, contains a null-terminated string to which <I>pszSrc</I> will be concatenated. On output, this is the destination buffer that contains the entire resultant string. The string at <I>pszSrc</I>, up to <I>cchMaxAppend</I> characters, is added to the end of the string at <I>pszDest</I> and terminated with a NULL character.</DD>

<DT><I>cchDest</I> </DT>

<DD>Supplies the size of the destination buffer, in characters. The maximum number of characters allowed is STRSAFE_MAX_CCH. </DD>

<DT><I>pszSrc</I> </DT>

<DD>Caller-supplied pointer to a null-terminated string. This string will be concatenated to the end of the string that is contained in the buffer at <I>pszDest</I>. </DD>

<DT><I>cchMaxAppend</I> </DT>

<DD>Supplies the maximum number of characters to append to the string that is contained in the buffer at <I>pszDest</I>.</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=50%>Return Value</TH>
<TH align=left width=50%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_SUCCESS</TD>
<TD width=50%>This <I>success</I> status means source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=50%>This <I>warning</I> status means the concatenation operation did not complete due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_INVALID_PARAMETER</TD>
<TD width=50%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER value when:

<UL>
	<LI>The value in <I>cchDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present.</LI>

	<LI>The destination buffer's length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCchCatNW</B> and <B>RtlStringCchCatNA</B> should be used instead of the following functions: 

<UL>
	<LI><B>strncat</B> </LI>

	<LI><B>wcsncat</B></LI>
</UL>

<P>The size, in characters, of the destination buffer is provided to the function to ensure that <B>RtlStringCchCatNW</B> and <B>RtlStringCchCatNA</B> do not write past the end of the buffer.</P>

<P>Use <B>RtlStringCchCatNW</B> to handle Unicode strings and <B>RtlStringCchCatNA</B> to handle ANSI strings. The form you use depends on your data, as shown in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=33%>String Data Type</TH>
<TH align=left width=26%>String Literal</TH>
<TH align=left width=41%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=33%>WCHAR</TD>
<TD width=26%>L"string"</TD>
<TD width=41%><B>RtlStringCchCatNW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>char</B></TD>
<TD width=26%>"string"</TD>
<TD width=41%><B>RtlStringCchCatNA</B></TD>
</TR>
</TABLE><BR>

<P>If  <I>pszSrc</I> and <I>pszDest</I> point to overlapping strings, the behavior of the function is undefined.</P>

<P>Neither <I>pszSrc</I> nor <I>pszDest</I> can be NULL. If you need to handle null string pointer values, use <A HREF="safestrings_9t4i.htm"><B>RtlStringCchCatNEx</B></A>.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_7s4y.htm"><B>RtlStringCbCatN</B></A>, <A HREF="safestrings_9t4i.htm"><B>RtlStringCchCatNEx</B></A>, <A HREF="safestrings_1t82.htm"><B>RtlStringCchCat</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCchCatN"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
