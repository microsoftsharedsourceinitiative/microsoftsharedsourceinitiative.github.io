<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MmProbeAndLockPages</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MmProbeAndLockPages">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_mmprobeandlockpages_kr"></A>MmProbeAndLockPages</H1>

<P>The <B>MmProbeAndLockPages</B> routine probes the specified virtual memory pages, makes them resident, and locks them in memory.</P>

<PRE class=syntax><B>VOID 
</B>  <B>MmProbeAndLockPages(</B>
<B>    IN OUT PMDL </B> <I>MemoryDescriptorList</I><B>,</B>
<B>    IN KPROCESSOR_MODE</B>  <I>AccessMode</I><B>,</B>
<B>    IN LOCK_OPERATION</B>  <I>Operation</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MemoryDescriptorList</I></DT>

<DD>Pointer to an MDL that specifies a virtual memory buffer. If the routine successfully locks the pages in memory, the MDL is updated to describe the underlying physical pages. </DD>

<DT><I>AccessMode</I></DT>

<DD>Specifies the access mode in which to probe the arguments, either <B>KernelMode</B> or <B>UserMode</B>.</DD>

<DT><I>Operation</I></DT>

<DD>Specifies the type of operation for which the caller wants the access rights probed and the pages locked, one of <B>IoReadAccess</B>, <B>IoWriteAccess</B>, or <B>IoModifyAccess</B>.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>The highest-level driver in a chain of layered drivers that use direct I/O calls this routine. Drivers that use buffered I/O never call <B>MmProbeAndLockPages</B>.</P>

<P><B>MmProbeAndLockPages</B> performs the following operations:

<OL>
	<LI>If the specified memory range is paged to disk, <B>MmProbeAndLockPages</B> makes it resident.</LI>

	<LI>The routine then confirms that the pages permit the operation specified by the <I>Operation</I> parameter.</LI>

	<LI>If the memory range permits the specified operation, the routine locks the pages in memory so that they cannot be paged out. Use <B>MmUnlockPages</B> to unlock the pages.</LI>
</OL>

<P><B>MmProbeAndLockPages</B> can be called multiple times for the same page. Each successful call to <B>MmProbeAndLockPages</B> for an MDL must be matched by a call to <A HREF="k106_0l6a.htm"><B>MmUnlockPages</B></A> for the same MDL.</P>

<P>Calls to <B>MmProbeAndLockPages</B> must be enclosed in a <B>try/except</B> block. If the pages do not support the specified operation, the routine raises the STATUS_ACCESS_VIOLATION exception. For more information, see <A HREF="other_23zb.htm">Handling Exceptions</A>.</P>

<P>Callers of <B>MmProbeAndLockPages</B> must be running at IRQL&nbsp;&lt; DISPATCH_LEVEL for pageable addresses, or at IRQL&nbsp;&lt;= DISPATCH_LEVEL for nonpageable addresses.</P>

<H4>See Also</H4>

<P><A HREF="k106_0l6a.htm"><B>MmUnlockPages</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MmProbeAndLockPages"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
