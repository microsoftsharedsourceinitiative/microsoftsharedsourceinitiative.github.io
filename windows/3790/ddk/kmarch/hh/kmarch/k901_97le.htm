<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP_MN_ENABLE_COLLECTION</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP_MN_ENABLE_COLLECTION">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_mn_enable_collection_kr"></A>IRP_MN_ENABLE_COLLECTION</H1>

<P>Any WMI driver that registers one or more of its data blocks as expensive to collect must handle this IRP. </P>

<H4>Major Code</H4>

<P><A HREF="k113_8hwy.htm">IRP_MJ_SYSTEM_CONTROL</A> </P>

<H4>When Sent</H4>

<P>WMI sends this IRP to request the driver to start accumulating data for a data block that the driver registered as expensive to collect. </P>

<P>WMI sends this IRP at IRQL = PASSIVE_LEVEL in an arbitrary thread context.</P>

<H4>Input</H4>

<P><B>Parameters.WMI.ProviderId</B> points to the device object of the driver that should respond to the request. This pointer is located in the driver's I/O stack location in the IRP.</P>

<P><B>Parameters.WMI.DataPath</B> points to a GUID that identifies the data block for which data is accumulated. </P>

<H4>Output </H4>

<P>None.</P>

<H4>I/O Status Block</H4>

<P>If the driver handles the IRP by calling <A HREF="k902_4r3m.htm"><B>WmiSystemControl</B></A>, WMI sets <B>Irp-&gt;IoStatus.Status</B> and <B>Irp-&gt;IoStatus.Information</B> in the I/O status block.</P>

<P>Otherwise, the driver sets <B>Irp-&gt;IoStatus.Status</B> to STATUS_SUCCESS or to an appropriate error status such as the following:</P>

<P class=indent1>STATUS_WMI_GUID_NOT_FOUND</P>

<P class=indent1>STATUS_INVALID_DEVICE_REQUEST</P>

<P>On success, a driver sets <B>Irp-&gt;IoStatus.Information</B> to zero.</P>

<H4>Operation</H4>

<P>A driver registers a data block as expensive to collect by setting WMIREG_FLAG_EXPENSIVE in the <B>Flags</B> member of the <A HREF="k112_3ulu.htm">WMIREGGUID</A> or WMIGUIDREGINFO structure. The driver passes these structures to WMI when it registers or updates the data block. A driver need not accumulate data for such a block until it receives an explicit request to start data collection.</P>

<P>A driver can handle WMI IRPs either by calling <A HREF="k902_4r3m.htm"><B>WmiSystemControl</B></A> or by handling the IRP itself, as described in <A HREF="wmi_9d47.htm">Handling WMI Requests</A>.</P>

<P>If a driver handles WMI IRPs by calling <A HREF="k902_4r3m.htm"><B>WmiSystemControl</B></A>, that routine calls the driver's <A HREF="k903_11rm.htm"><I>DpWmiFunctionControl</I></A> routine, or returns STATUS_SUCCESS if the driver does not define the routine. </P>

<P>If a driver handles an IRP_MN_ENABLE_COLLECTION request itself, it should do so only if <B>Parameters.WMI.ProviderId</B> points to the same device object as the pointer that the driver passed to <A HREF="k104_5dbm.htm"><B>IoWMIRegistrationControl</B></A>. Otherwise, the driver must forward the request to the next-lower driver.</P>

<P>Before handling a request, the driver should make sure that <B>Parameters.WMI.DataPath</B> points to a GUID that the driver supports. If it does not, the driver should fail the IRP and return STATUS_WMI_GUID_NOT_FOUND. If the data block is valid but was not registered with WMIREG_FLAG_EXPENSIVE, the driver can return STATUS_SUCCESS and take no further action.</P>

<P>If the block is valid and was registered with WMIREG_FLAG_EXPENSIVE, the driver enables data collection for all instances of that data block. </P>

<P>It is unnecessary for the driver to check whether data collection is already enabled for the data block. WMI sends only a single request to enable a data block after the first data consumer enables the block. WMI will not send another request to enable without an intervening disable request. </P>

<H4>See Also</H4>

<P><A HREF="k903_11rm.htm"><I>DpWmiFunctionControl</I></A>, <A HREF="k104_5dbm.htm"><B>IoWMIRegistrationControl</B></A>, <A HREF="k901_0xf6.htm">IRP_MN_DISABLE_COLLECTION</A>, <A HREF="k112_16sy.htm">WMILIB_CONTEXT</A>, <A HREF="k112_3ulu.htm">WMIREGGUID</A>, <A HREF="k902_4r3m.htm"><B>WmiSystemControl</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP_MN_ENABLE_COLLECTION"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
