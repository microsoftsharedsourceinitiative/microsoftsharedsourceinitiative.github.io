<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MmSecureVirtualMemory</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MmSecureVirtualMemory">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_mmsecurevirtualmemory_kr"></A>MmSecureVirtualMemory</H1>

<P>The <B>MmSecureVirtualMemory</B> routine secures a memory address range so that it cannot be freed and its protection type cannot be made more restrictive.</P>

<PRE class=syntax><B>NTKERNELAPI
PVOID
MmSecureVirtualMemory (
    IN PVOID  </B><I>Address</I><B>,</B>
<B>    IN SIZE_T  </B><I>Size</I><B>,</B>
<B>    IN ULONG  </B><I>ProbeMode</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Address</I></DT>

<DD>Specifies the beginning of the virtual address range to secure.</DD>

<DT><I>Size</I></DT>

<DD>Specifies the size, in bytes, of the virtual address range to secure.</DD>

<DT><I>ProbeMode</I></DT>

<DD>Specifies the most restrictive protection type allowed. Use PAGE_READWRITE to specify that address range must remain both readable and writeable, or use PAGE_READONLY to specify the address range must only remain readable.
</DD>
</DL>

<H4>Return Value</H4>

<P>On success, <B>MmSecureVirtualMemory</B> returns an opaque pointer value that the driver passes to the <A HREF="k106_0d6a.htm"><B>MmUnsecureVirtualMemory</B></A> routine to unsecure the memory address range. If the routine is unable to secure the memory address range, it returns NULL.</P>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I>. Include <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>This routine is not available on Windows&nbsp;98/Me.</P>

<P><B>MmSecureVirtualMemory</B> can be used to avoid certain race conditions on user-mode buffers. For example, if a driver checks to see if the buffer is writeable, but then the originating user-mode process changes the buffer to be read-only before the driver can read from the buffer, then a race condition can result. A driver that uses <B>MmSecureVirtualMemory</B> is guaranteed that if the requested protection mode is available, it cannot be changed until the driver calls <A HREF="k106_0d6a.htm"><B>MmUnsecureVirtualMemory</B></A>. The routine also protects against the originating user-mode process freeing the buffer.</P>

<P>While calling <B>MmSecureVirtualMemory</B> on an address range prevents the address range from being freed or from having its protection changed, it does not protect against other types of raised exceptions. (For example, it does not protect against an exception raised when the system finds a bad disk block in the page file.)  Therefore, drivers must still wrap any memory accesses in a <B>try</B>/<B>except</B> block.  For more information, see <A HREF="other_23zb.htm">Handling Exceptions</A>.</P>

<P>Callers of this routine must be at IRQL&nbsp;&lt;= APC_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k106_0d6a.htm"><B>MmUnsecureVirtualMemory</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MmSecureVirtualMemory"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
