<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>End-User I/O Requests and File Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="End-User I/O Requests and File Objects">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_end_user_i_o_requests_and_file_objects_kg"></A>End-User I/O Requests and File Objects</H1>

<P>Kernel-mode drivers are hidden from end users by a protected subsystem that implements an already familiar programming interface, such as Windows or POSIX. Devices are visible to user-mode code, which includes protected subsystems, only as named file objects controlled by the I/O Manager.</P>



<P><A NAME="ddk_figure_2..1_kg"></A>The following figure illustrates this relationship between an end user, a subsystem, and the I/O Manager. </P>

<P><B><IMG SRC="images/2grsover.gif" ALT="" BORDER=0></B></P>

<P><B>File Objects Represent Files, Volumes, and Devices</B></P>

<P>A protected subsystem, such as the Win32® subsystem, passes I/O requests to the appropriate kernel-mode driver through the I/O system services. The subsystem shown in the previous figure depends on support from the display, video adapter, keyboard, and mouse device drivers.</P>

<P>A protected subsystem insulates its end users and applications from having to know anything about kernel-mode components, including drivers. In turn, the I/O Manager insulates protected subsystems from having to know anything about machine-specific device configurations or about drivers' implementations.</P>

<P>The I/O Manager's layered approach also insulates most drivers from having to know anything about the following:

<UL>
	<LI>Whether an I/O request originated in any particular protected subsystem, such as Win32 or POSIX</LI>

	<LI>Whether a given protected subsystem has particular kinds of user-mode drivers</LI>

	<LI>What any protected subsystem's I/O model and interface to drivers is</LI>
</UL>

<P>The I/O Manager supplies drivers with a single I/O model, a set of kernel-mode support routines that drivers can use to carry out I/O operations, and a consistent interface between the originator of an I/O request and the drivers that must respond to it.</P>

<P>As shown in the previous figure, a subsystem and its native applications can access a driver's device or a file on a mass-storage device only through file object handles supplied by the I/O Manager. To open such a file object or to obtain a handle for I/O to a device or a data file, a subsystem calls the I/O system services with a request to open a named file. The named file can have a subsystem-specific alias (symbolic link) to the kernel-mode name for the file object.</P>

<P>The I/O Manager, which exports these system services, is then responsible for locating or creating the file object that represents the device or data file and for locating the appropriate driver(s).</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: End-User%20I%2FO%20Requests%20and%20File%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
