<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing IRPs in a Lowest-Level Driver</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Processing IRPs in a Lowest-Level Driver">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_processing_irps_in_a_lowest_level_driver_kg"></A>Processing IRPs in a Lowest-Level Driver</H2>

<P>Lowest-level physical drivers have certain standard routines that higher-level drivers do not need. The set of standard routines for lowest-level drivers also varies according to the following criteria:

<UL>
	<LI>The nature of the device each driver controls</LI>

	<LI>Whether the driver sets up its device objects for direct or buffered I/O</LI>

	<LI>The design of the individual driver </LI>
</UL>

<P>To illustrate the roles of the standard driver routines, the following figure shows the path a sample IRP might take as it is processed by a lowest-level mass-storage device driver. The driver in the figure has the following characteristics: 

<UL>
	<LI>The device generates interrupts at the end of each I/O operation, so this driver has ISR and <I>DpcForIsr</I> routines. </LI>

	<LI>The driver has a <I>StartIo </I>routine, rather than setting up internal queues for IRPs and managing its own queuing. </LI>

	<LI>The driver uses system DMA, so it sets its device objects’ <B>Flags</B> for direct I/O, and has an <I>AdapterControl</I> routine. </LI>
</UL>



<P><A NAME="ddk__bmc_4loddirp.wmf__kg"></A><IMG SRC="images/4loddirp.gif" ALT="" BORDER=0></P>

<P><B>IRP Path Through Lowest-Level Driver Routines </B></P>

<P>As the previous figure shows, the I/O manager creates an IRP and sends it to the driver’s dispatch routine for the given major function code. Assuming the function code is either IRP_MJ_READ or IRP_MJ_WRITE, the dispatch routine is <B>DDDispatchReadWrite</B>.</P>

<H4>Calling IoGetCurrentIrpStackLocation</H4>

<P>Any driver routine that requires IRP parameters must call <A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A> to obtain the driver's <A HREF="irps_8lgn.htm">I/O stack location</A>. Such routines include dispatch routines that handle more than one major I/O function code (IRP_MJ_<I>XXX</I>), handle a function that supports minor functions (IRP_MN_<I>XXX</I>), or handle device I/O control requests (IRP_MJ_DEVICE_CONTROL and/or IRP_MJ_INTERNAL_DEVICE_CONTROL), along with every other driver routine that processes an IRP. </P>

<P>This driver’s I/O stack location is the lowest one, with an indefinite number of higher-level drivers’ I/O stack locations shown shaded. For simplicity, calls to <B>IoGetCurrentIrpStackLocation</B> from the <I>DispatchReadWrite</I>, <I>StartIo</I>, <I>AdapterControl</I>, and <I>DpcForIsr</I> routines are not shown in the previous figure. </P>

<H4>Calling IoMarkIrpPending and IoStartPacket</H4>

<P>The sample driver does not complete the IRP in its dispatch routine, but instead processes the IRP in its <I>StartIo </I>routine. Before it can do so, the dispatch routine calls <A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> to indicate that the IRP is not yet completed. Then it calls <A HREF="k104_1nsi.htm"><B>IoStartPacket</B></A> to queue the IRP for further processing by the driver’s <I>StartIo </I>routine. The dispatch routine also returns the NTSTATUS value STATUS_PENDING. </P>

<P>The following figure illustrates the call to <B>IoStartPacket</B>.</P>

<P><IMG SRC="images/4strtpak.gif" ALT="" BORDER=0></P>

<P><B>Calling IoStartPacket</B></P>

<P>If the driver is busy processing another IRP on the device, <B>IoStartPacket</B> inserts the IRP into the device queue associated with the device object. The driver can optionally supply a <I>Key</I> value as a parameter to <B>IoStartPacket</B> to impose a driver-determined order on IRPs in the device queue.</P>

<P>If the driver is not busy and the device queue is empty, the I/O Manager immediately calls its <I>StartIo </I>routine, passing the input IRP.</P>

<P>For mass-storage devices, the lowest-level driver does not need to supply a <I>Cancel </I>routine when it calls <B>IoStartPacket</B> for two reasons:

<OL>
	<LI>A file system layered over such a driver typically handles the cancellation of file I/O requests. </LI>

	<LI>Mass-storage device drivers process IRPs quickly. </LI>
</OL>

<P>Usually, the highest-level driver in a chain of layered drivers handles the cancellation of IRPs. </P>

<H4>Calling AllocateAdapterChannel and MapTransfer</H4>

<P>Assuming the <I>StartIo </I>routine, shown in the figure illustrating an <A HREF="#ddk__bmc_4loddirp.wmf__kg">IRP path through the lowest-level driver routines</A>, determines that the transfer request can be done by a single DMA operation, the <I>StartIo </I>routine calls <A HREF="kdma_92r6.htm"><B>AllocateAdapterChannel</B></A> with the entry point of the driver’s <I>AdapterControl</I> routine and the IRP. </P>

<P>When the system DMA controller is available, the I/O Manager calls the driver's <I>AdapterControl</I> routine to set up the transfer operation. The <I>AdapterControl</I> routine calls <A HREF="kdma_1hv6.htm"><B>MapTransfer</B></A> to set up the system DMA controller. Then the driver programs its device for the DMA operation and returns. (For more information about using DMA and adapter objects, see <A HREF="iputoput_92cn.htm">Input/Output Techniques</A>.) </P>

<H4>Calling IoRequestDpc from the Driver’s ISR</H4>

<P>When the device interrupts to indicate its transfer operation is complete, the driver’s ISR stops the device from generating interrupts and calls <A HREF="k104_3mb6.htm"><B>IoRequestDpc</B></A>, as shown in the figure illustrating an <A HREF="#ddk__bmc_4loddirp.wmf__kg">IRP path through the lowest-level driver routines</A>. </P>

<P>This call queues the driver’s <I>DpcForIsr</I> routine to complete as much of the transfer operation as possible at a lower hardware priority (IRQL). </P>

<H4>Calling IoStartNextPacket and IoCompleteRequest</H4>

<P>When the <I>DpcForIsr</I> routine has finished processing the transfer, it calls <A HREF="k104_7eb6.htm"><B>IoStartNextPacket</B></A> promptly so that the driver’s <I>StartIo </I>routine will be called with the next IRP in the device queue, if any are queued. The <I>DpcForIsr</I> routine also sets the just-completed IRP’s I/O status block and then calls <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A> for the IRP. </P>

<P>The following figure illustrates this driver’s calls to <B>IoStartNextPacket</B> and <B>IoCompleteRequest</B>. </P>

<P><IMG SRC="images/4snxtpak.gif" ALT="" BORDER=0></P>

<P><B>Calling IoStartNextPacket and IoCompleteRequest</B></P>

<P>Drivers should call <B>IoStartNextPacket</B> or <A HREF="k104_2hte.htm"><B>IoStartNextPacketByKey</B></A> to begin the next requested I/O operation as soon as possible, preferably before they call <B>IoCompleteRequest</B>. </P>

<P>If any IRPs are queued for the device, <B>IoStartNextPacket </B>calls <A HREF="k105_01iq.htm"><B>KeRemoveDeviceQueue</B></A> to remove the next IRP from the queue. The I/O Manager then calls the driver's <I>StartIo </I>routine, passing the dequeued IRP. If no IRPs are currently in the device queue, <B>IoStartNextPacket</B> merely returns to the caller. </P>



<H4><A NAME="ddk_setting_the_i_o_status_block_in_an_irp_kg"></A>Setting the I/O Status Block in an IRP</H4>

<P>Every lowest-level driver must set the IRP's <A HREF="irps_0ofb.htm">I/O status block</A> (in the previous figure, the second shaded area denotes the status block) before calling <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A>. The I/O status block supplies information to higher-level drivers and, ultimately, to the original requester of the I/O operation. Any higher-level driver layered above the driver in the previous figure might have set up an <I>IoCompletion</I> routine that reads the I/O status block set by this driver. Higher-level drivers usually do not modify the I/O status block in an IRP that has been completed by a device driver, unless the higher-level driver is retrying the IRP, in which case it reinitializes the I/O status block. </P>

<P>Every higher-level driver that completes an IRP without sending it on to the next lower driver also must set the I/O status block in that IRP before calling <B>IoCompleteRequest</B>. For good overall I/O throughput, a higher-level driver should check the parameters in its own I/O stack location of each IRP and, if the parameters are invalid, should set the I/O status block and complete the request itself. Whenever possible, a driver should avoid passing an invalid request on to lower drivers in the chain. </P>

<P>Assuming the transfer operation in the previous figure is successful, the <I>DpcForIsr</I> routine, shown in the figure illustrating an <A HREF="#ddk__bmc_4loddirp.wmf__kg">IRP path through the lowest-level driver routines</A>, sets STATUS_SUCCESS in <B>Status</B> and the number of bytes transferred in <B>Information</B> for the IRP’s I/O status block. </P>

<P>Many of the standard driver routines also return NTSTATUS-type values. For more information about NTSTATUS constants like STATUS_SUCCESS, see <A HREF="other_92jr.htm">Logging Errors</A>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Processing%20IRPs%20in%20a%20Lowest-Level%20Driver"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
