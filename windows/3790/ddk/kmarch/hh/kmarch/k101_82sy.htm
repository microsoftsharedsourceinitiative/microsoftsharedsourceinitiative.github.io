<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Driver Threads Dispatcher Objects and Resources</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Driver Threads Dispatcher Objects and Resources">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_driver_threads_dispatcher_objects_and_resources_kr"></A>Driver Threads, Dispatcher Objects, and Resources</H2>

<DL>
<DT><A HREF="k105_7epe.htm"><B>KeDelayExecutionThread</B></A> </DT>

<DD>Puts the current thread into an alertable or nonalertable wait state for a given interval.</DD>

<DT><A HREF="k102_9vhu.htm"><B>ExInitializeResourceLite</B></A> </DT>

<DD>Initializes a resource, for which the caller provides the storage, to be used for synchronization by a set of threads (shared readers, exclusive writers). </DD>

<DT><A HREF="k102_5ik2.htm"><B>ExReinitializeResourceLite</B></A></DT>

<DD>Reinitializes an existing resource variable.</DD>

<DT><A HREF="k102_5xo2.htm"><B>ExAcquireResourceExclusiveLite</B></A> </DT>

<DD>Acquires an initialized resource for exclusive access by the calling thread and optionally waits for the resource to be acquired.</DD>

<DT><A HREF="k102_61bm.htm"><B>ExTryToAcquireResourceExclusiveLite</B></A> </DT>

<DD>Either acquires a given resource for exclusive access immediately, or returns FALSE. </DD>

<DT><A HREF="k102_1u0i.htm"><B>ExAcquireResourceSharedLite</B></A> </DT>

<DD>Acquires an initialized resource for shared access by the calling thread and optionally waits for the resource to be acquired. </DD>

<DT><A HREF="k102_316a.htm"><B>ExAcquireSharedStarveExclusive</B></A> </DT>

<DD>Acquires a given resource for shared access without waiting for any pending attempts to acquire exclusive access to the same resource.</DD>

<DT><A HREF="k102_8ape.htm"><B>ExAcquireSharedWaitForExclusive</B></A> </DT>

<DD>Acquires a given resource for shared access, optionally waiting for any pending exclusive waiters to acquire and release the resource first. </DD>

<DT><A HREF="k102_2g4y.htm"><B>ExIsResourceAcquiredExclusiveLite</B></A> </DT>

<DD>Returns whether the calling thread has exclusive access to a given resource.</DD>

<DT><A HREF="k102_4pte.htm"><B>ExIsResourceAcquiredSharedLite</B></A> </DT>

<DD>Returns how many times the calling thread has acquired shared access to a given resource.</DD>

<DT><A HREF="k102_4fua.htm"><B>ExGetExclusiveWaiterCount</B></A> </DT>

<DD>Returns the number of threads currently waiting to acquire a given resource for exclusive access. </DD>

<DT><A HREF="k102_03aq.htm"><B>ExGetSharedWaiterCount</B></A> </DT>

<DD>Returns the number of threads currently waiting to acquire a given resource for shared access. </DD>

<DT><A HREF="k102_6b02.htm"><B>ExConvertExclusiveToSharedLite</B></A> </DT>

<DD>Converts a given resource from acquired for exclusive access to acquired for shared access.</DD>

<DT><A HREF="k102_6z76.htm"><B>ExGetCurrentResourceThread</B></A> </DT>

<DD>Returns the thread ID of the current thread.</DD>

<DT><A HREF="k102_7rjm.htm"><B>ExReleaseResourceForThreadLite</B></A> </DT>

<DD>Releases a given resource that was acquired by the given thread.</DD>

<DT><A HREF="k102_2dv6.htm"><B>ExDeleteResourceLite</B></A> </DT>

<DD>Deletes a caller-initialized resource from the system's resource list.</DD>

<DT><A HREF="k104_6ecy.htm"><B>IoQueueWorkItem</B></A> </DT>

<DD>Queues an initialized work queue item so the driver-supplied routine will be called when a system worker thread is given control.</DD>

<DT><A HREF="k105_9mlu.htm"><B>KeSetTimer</B></A> </DT>

<DD>Sets the absolute or relative interval at which a timer object will be set to the Signaled state, and optionally supplies a timer DPC to be executed when the interval expires.</DD>

<DT><A HREF="k105_57aq.htm"><B>KeSetTimerEx</B></A> </DT>

<DD>Sets the absolute or relative interval at which a timer object will be set to the Signaled state. Optionally supplies a timer DPC to be executed when the interval expires and a recurring interval for the timer.</DD>

<DT><A HREF="k105_6xf6.htm"><B>KeCancelTimer</B></A> </DT>

<DD>Cancels a timer object before the interval passed to <B>KeSetTimer</B> expires. Dequeues a timer DPC before the timer interval (if any) expires.</DD>

<DT><A HREF="k105_6asz.htm"><B>KeReadStateTimer</B></A> </DT>

<DD>Returns TRUE if a given timer object is set to the Signaled state.</DD>

<DT><A HREF="k105_1prm.htm"><B>KeSetEvent</B></A> </DT>

<DD>Returns the previous state of a given event object and sets the event (if not already Signaled) to the Signaled state.</DD>

<DT><A HREF="k105_47g2.htm"><B>KeClearEvent</B></A> </DT>

<DD>Resets an event to the Not-Signaled state. </DD>

<DT><A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A> </DT>

<DD>Returns the previous state of an event object and resets the event to the Not-Signaled state.</DD>

<DT><A HREF="k105_8dyq.htm"><B>KeReadStateEvent</B></A> </DT>

<DD>Returns the current state (nonzero for Signaled or zero for Not-Signaled) of a given event object.</DD>

<DT><A HREF="k102_0m9e.htm"><B>ExAcquireFastMutex</B></A> </DT>

<DD>Acquires an initialized fast mutex, possibly after putting the caller into a wait state until it is acquired, and gives the calling thread ownership with APCs disabled. </DD>

<DT><A HREF="k102_3b8y.htm"><B>ExTryToAcquireFastMutex</B></A> </DT>

<DD>Acquires the given fast mutex immediately for the caller with APCs disabled, or returns FALSE. </DD>

<DT><A HREF="k102_5c1e.htm"><B>ExReleaseFastMutex</B></A> </DT>

<DD>Releases ownership of a fast mutex that was acquired with <B>ExAcquireFastMutex</B> or <B>ExTryToAcquireFastMutex</B>. </DD>

<DT><A HREF="k102_1ueq.htm"><B>ExAcquireFastMutexUnsafe</B></A> </DT>

<DD>Acquires an initialized fast mutex, possibly after putting the caller into a wait state until it is acquired. </DD>

<DT><A HREF="k102_386q.htm"><B>ExReleaseFastMutexUnsafe</B></A> </DT>

<DD>Releases ownership of a fast mutex that was acquired with <B>ExAcquireFastMutexUnsafe</B>. </DD>

<DT><A HREF="k105_44du.htm"><B>KeReleaseMutex</B></A> </DT>

<DD>Releases a given mutex object, specifying whether the caller will call one of the <B>KeWait</B><I>Xxx</I> routines as soon as <B>KeReleaseMutex</B> returns the previous value of the mutex state (a zero for Signaled; otherwise, Not-Signaled).</DD>

<DT><A HREF="k105_9c4y.htm"><B>KeReadStateMutex</B></A> </DT>

<DD>Returns the current state (one for Signaled or any other value for Not-Signaled) of a given mutex object.</DD>

<DT><A HREF="k105_1cmq.htm"><B>KeReleaseSemaphore</B></A> </DT>

<DD>Releases a given semaphore object. Supplies a (run-time) priority boost for waiting threads if the release sets the semaphore to the Signaled state. Augments the semaphore count by a given value and specifies whether the caller will call one of the <B>KeWait</B><I>Xxx</I> routines as soon as <B>KeReleaseSemaphore</B> returns.</DD>

<DT><A HREF="k105_1i5u.htm"><B>KeReadStateSemaphore</B></A> </DT>

<DD>Returns the current state (zero for Not-Signaled or a positive value for Signaled) of a given semaphore object.</DD>

<DT><A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> </DT>

<DD>Puts the current thread into an alertable or nonalertable wait state until a given dispatcher object is set to the Signaled state or (optionally) until the wait times out.</DD>

<DT><A HREF="k105_2kvm.htm"><B>KeWaitForMutexObject</B></A> </DT>

<DD>Puts the current thread into an alertable or nonalertable wait state until a given mutex is set to the Signaled state or (optionally) until the wait times out.</DD>

<DT><A HREF="k105_18oi.htm"><B>KeWaitForMultipleObjects</B></A> </DT>

<DD>Puts the current thread into an alertable or nonalertable wait state until any one or all of a number of dispatcher objects are set to the Signaled state or (optionally) until the wait times out.</DD>

<DT><A HREF="k108_4gfm.htm"><B>PsGetCurrentThread</B></A> </DT>

<DD>Returns a handle for the current thread. </DD>

<DT><A HREF="k105_8fxu.htm"><B>KeGetCurrentThread</B></A> </DT>

<DD>Returns a pointer to the opaque thread object that represents the current thread. </DD>

<DT><A HREF="k104_48c2.htm"><B>IoGetCurrentProcess</B></A> </DT>

<DD>Returns a handle for the process of the current thread.</DD>

<DT><A HREF="k108_50vm.htm"><B>PsGetCurrentProcess</B></A> </DT>

<DD>Returns a pointer to the process of the current thread.</DD>

<DT><A HREF="k105_70du.htm"><B>KeEnterCriticalRegion</B></A> </DT>

<DD>Temporarily disables the delivery of normal kernel APCs while a highest-level driver is running in the context of the user-mode thread that requested the current I/O operation. Special kernel-mode APCs are still delivered.</DD>

<DT><A HREF="k105_033m.htm"><B>KeLeaveCriticalRegion</B></A> </DT>

<DD>Reenables, as soon as possible, the delivery of normal kernel-mode APCs that were disabled by a preceding call to <B>KeEnterCriticalRegion</B>.</DD>

<DT><A HREF="k105_9x6a.htm"><B>KeAreApcsDisabled</B></A> </DT>

<DD>Returns TRUE if normal kernel-mode APCs are disabled.</DD>

<DT><A HREF="k105_91de.htm"><B>KeSaveFloatingPointState</B></A> </DT>

<DD>Saves the current thread's nonvolatile floating-point context so that the caller can carry out its own floating-point operations.</DD>

<DT><A HREF="k105_2njm.htm"><B>KeRestoreFloatingPointState</B></A> </DT>

<DD>Restores the previous nonvolatile floating-point context that was saved with <B>KeSaveFloatingPointState</B>. </DD>

<DT><A HREF="k111_2zaq.htm"><B>ZwSetInformationThread</B></A> </DT>

<DD>Sets the priority of a given thread for which the caller has a handle.</DD>

<DT><A HREF="k108_4zw2.htm"><B>PsGetCurrentProcessId</B></A> </DT>

<DD>Returns the system-assigned identifier of the current process. </DD>

<DT><A HREF="k108_8vg2.htm"><B>PsGetCurrentThreadId</B></A> </DT>

<DD>Returns the system-assigned identifier of the current thread. </DD>

<DT><A HREF="k108_5lwy.htm"><B>PsSetCreateProcessNotifyRoutine</B></A> </DT>

<DD>Registers a highest level driver's callback routine that is subsequently executed whenever a new process is created or existing process deleted.</DD>

<DT><A HREF="k108_690y.htm"><B>PsSetCreateThreadNotifyRoutine</B></A> </DT>

<DD>Registers a highest level driver's callback routine that is subsequently executed whenever a new thread is created or an existing thread is deleted.</DD>

<DT><A HREF="k108_5sc2.htm"><B>PsSetLoadImageNotifyRoutine</B></A> </DT>

<DD>Registers a callback routine for a highest level system-profiling driver. The callback routine is subsequently executed whenever a new image is loaded for execution. 
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Driver%20Threads%20Dispatcher%20Objects%20and%20Resources"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
