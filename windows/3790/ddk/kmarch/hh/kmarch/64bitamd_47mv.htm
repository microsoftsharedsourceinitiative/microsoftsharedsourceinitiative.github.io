<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Attributes for AMD64</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Attributes for AMD64">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_attributes_for_amd64_kg"></A>Attributes for AMD64</H3>

<P>The <B>__declspec</B> keyword specifies that an instance of a given type will be stored using the following Microsoft-specific, storage-class attributes for the AMD64 compiler: 

<UL>
	<LI><B>noinline</B>
<P><B>__declspec(noinline)</B> informs the compiler never to inline a particular member function in a class, as in the following example:

<PRE>class X {
    __declspec(noinline) int mbrfunc( ) { return 0; }
};
</PRE>
</LI>

	<LI><B>align</B>
<P>Use the <B>__declspec(align(</B><I>alignment number</I><B>)) declarator</B> to precisely control the alignment of global data. By aligning frequently used data to the cache line size of a specific processor, you improve cache performance.

<P>For example, if you define a structure whose size is less than 32 bytes, you might want to align it to 32 bytes to ensure that objects of that structure type are efficiently cached. The <I>alignment number</I> is the alignment value. Valid entries are powers of two from 1 to 8192 (bytes), such as 2, 4, 8, 16, 32, or 64. The <B>declarator</B> is the global data that you declare as aligned. You can use <B>__declspec(align(</B><I>alignment number</I><B>))</B> when you define a structure, union, or class, or when you declare a variable. Without <B>__declspec(align(</B><I>alignment number</I><B>))</B>, the compiler aligns data on natural boundaries based on the size of the data, such as 4-byte integers on 4-byte boundaries, and 8-byte doubles on 8-byte boundaries. Data in classes or structures is aligned within the class or structure at the minimum of its natural alignment and the current packing setting (from the <B>/Zp</B> compiler option). You cannot specify alignment for stack variables. 

<P>The following is an example of using <B>__declspec(align(</B><I>alignment number</I><B>))</B>:

<PRE>__declspec(align(32)) struct Str1 { 
    int a, b, c, d, e; 
}; 
</PRE>

<P>After using <B>__declspec(align(</B>32<B>))</B> on the <B>struct Str1</B> type, <B>struct Str1</B> has a 32-byte alignment attribute, meaning that all instances must start on a 32-byte boundary. Note that <B>sizeof(struct Str1)</B> is equal to 32 to support creation of aligned array members using code like <B>malloc(n * sizeof(struct Str1))</B>. Additional structure types declared with this type as a member preserve this type's alignment attribute (that is, any structure with <B>struct Str1</B> as an element has an alignment attribute of at least 32). 

<P>The <B>sizeof</B> value for any structure is the offset of the final member, plus that member's size, rounded up to the nearest multiple of the largest member alignment value or the whole structure alignment value, whichever is greater. 
</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Attributes%20for%20AMD64"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
