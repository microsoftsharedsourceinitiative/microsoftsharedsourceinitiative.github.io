<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Introduction to WMI</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Introduction to WMI">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_introduction_to_wmi_kg"></A>Introduction to WMI</H1>

<P>Windows Management Instrumentation (WMI) is a kernel-mode service that drivers can use to make measurement and instrumentation data available to user-mode applications. A driver can use WMI mechanisms to publish information, permit configuration of its device, and supply notifications and logging of events. </P>

<P>WMI provides several capabilities that driver writers can use. A driver that supports WMI can:

<UL>
	<LI>Make custom data generally available to user-mode applications. 
<P>WMI makes driver-defined data and events accessible to user-mode applications. Any application that is a WMI client can access the data that a driver provides to WMI. The driver writer does not need to define and document public I/O control codes or write a custom user-mode application. 

<P>To make data available, the driver writer defines WMI <I>classes</I> that describe <I>data blocks</I>. Each class is uniquely identified by a GUID<I> </I>and contains one or more <I>data items</I>. A data block is an instance of a class, and is identified by the class GUID. Descriptions of WMI classes are written in Managed Object Format (MOF) and typically compiled as a resource in the driver's binary image file. Management applications use the MOF descriptions to interpret a driver's custom data.

<P>At driver initialization time, the driver registers its GUIDs with WMI, which adds the driver's WMI classes to the CIMOM (Common Information Model Object Manager) database, making the driver's data blocks accessible to WMI client applications. 

<P>When a WMI client accesses a given data block, the WMI kernel component sends a query request to the driver for its data. The format of the driver-defined data is transparent to WMI, which simply passes the data to the user mode client.
</LI>

	<LI>Permit user-mode applications to configure a device through a standard interface rather than a custom control panel application. 
<P>A driver's data blocks can define read/write items that WMI clients can set. When a WMI client user sets the value of such an item, the WMI kernel component sends a set request with the new value to the driver.

<P>A driver writer can also associate a <I>method</I> (routine) with a data block by including a driver-defined method in a data block. When a WMI client user executes that method, the WMI kernel component sends an execute-method request with the method ID to the driver. In this respect, WMI methods are functionally equivalent to IOCTLs. 
</LI>

	<LI>Notify user-mode applications of driver-defined events without requiring the application to poll or send IRPs. 
<P>A driver writer can define certain blocks as <I>event blocks</I>, which establish the events the driver can send. When a WMI client user requests notification of an event, the WMI kernel component sends an enable-event request to the driver. After an event is enabled, the driver sends the event block to WMI whenever the event occurs, until WMI sends a disable-event request. WMI routes the event block to all users that have requested notification of the event.
</LI>

	<LI>Reduce driver overhead by collecting and sending only requested data to a single destination.
<P>After a driver registers its data and event blocks, it needs to provide data and events only when users request them. If ongoing collection of a given data block might affect driver performance, a driver writer can designate that block as expensive to collect. A driver need not accumulate data for such a block until the first user requests it, which causes WMI to send an enable-collection request to the driver. The driver can stop accumulating data after WMI sends a disable-collection request. 

<P>Similarly, a driver need not generate an event until the first user requests notification, which causes WMI to send an enable-event request to the driver. The driver can stop sending the event after WMI sends a disable-event request.

<P>The WMI kernel component routes a driver's events and data blocks to all WMI clients that have requested them. 
</LI>

	<LI>Document data and event blocks implicitly with descriptive class names and optional descriptions.
<P>WMI clients can access the driver-defined class names and optional descriptions of all data and event blocks and can display them to users, making a driver's data and event blocks self-documenting.
</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Introduction%20to%20WMI"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
