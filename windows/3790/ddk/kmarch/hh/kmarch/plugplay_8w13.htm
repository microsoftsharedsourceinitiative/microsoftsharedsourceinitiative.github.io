<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Understanding When Remove IRPs Are Issued</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Understanding When Remove IRPs Are Issued">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_understanding_when_remove_irps_are_issued_kg"></A>Understanding When Remove IRPs Are Issued</H2>

<P>The following figure shows the typical sequence of IRPs involved in removing the drivers for a device.</P>



<P><A NAME="ddk__bmc_rem_irps.wmf_kg"></A><IMG SRC="images/rem-irps.gif" ALT="" BORDER=0></P>

<P><B>Typical Remove IRP Transitions</B></P>

<P>The following notes correspond to the circled numbers in the previous figure:

<OL>
	<LI>Query remove
<P>The PnP Manager issues an <A HREF="pnp-irps_22k2.htm">IRP_MN_QUERY_REMOVE_DEVICE</A> to ask whether a device can be removed without disrupting the machine. It also sends this IRP when a user requests to update driver(s) for the device and (on Windows&nbsp;2000 and later) when the Device Manager disables the device. (On Windows 98/Me, the PnP Manager sends stop IRPs in this situation; see <A HREF="plugplay_26jr.htm">Stopping a Device</A> for details.)

<P>If all drivers in the device stack return STATUS_SUCCESS, the drivers have put the device into the remove-pending state. In this state, the drivers must not start any operations that prevent the device from being removed.

<P>In this "clean" removal case, the PnP Manager sends a query-remove IRP before it sends a remove IRP. See step (5) for a description of "surprise" removal.

<P>Although it is not shown in the above diagram, a bus driver might receive an IRP_MN_QUERY_REMOVE_DEVICE for a device that is not started. This can happen if a user requests to dynamically remove a device that is physically present on the machine but is disabled.
</LI>

	<LI>Remove after successful query
<P>The PnP Manager issues an <A HREF="pnp-irps_4noy.htm">IRP_MN_REMOVE_DEVICE</A> to remove the drivers for a device.

<P>Drivers must succeed this request. The drivers for the device perform any necessary clean-up, detach from the device stack, and delete the FDO and any filter DOs. The parent bus driver retains the PDO until the user physically removes the device from the machine.

<P>Note that drivers might receive an IRP_MN_STOP_DEVICE prior to a remove IRP, but it is not required. On Windows &nbsp;2000 and later, IRP_MN_STOP_DEVICE is used only to pause a device for resource rebalancing; it is not a step toward removal. If a user removes the device hardware while the device is stopped, the PnP Manager sends a remove IRP at some point after the stop IRP, but a stop is not a prerequisite for a remove.
</LI>

	<LI>Re-enumerate the device
<P>If the device is re-enumerated after drivers have deleted their device objects, the PnP Manager calls the drivers' <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routines and issues an <A HREF="pnp-irps_1gqa.htm">IRP_MN_START_DEVICE</A> to reinstate the device (See also <A HREF="plugplay_442v.htm#ddk__bmc_pnp_states.wmf_kg">Device States from the PnP Perspective</A> figure.)
</LI>

	<LI>Cancel a query remove
<P>The PnP Manager issues an <A HREF="pnp-irps_7xte.htm">IRP_MN_CANCEL_REMOVE_DEVICE</A> to cancel a query-remove request.

<P>In response to an IRP_MN_CANCEL_REMOVE_DEVICE, the drivers return the device to its started state.
</LI>

	<LI>Surprise remove (Windows&nbsp;2000 and later systems)
<P>On Windows®&nbsp;2000 and later systems, if a user unplugs a device from the machine without using the Unplug or Eject Hardware program, the PnP Manager sends an <A HREF="pnp-irps_8e42.htm">IRP_MN_SURPRISE_REMOVAL</A> IRP. 

<P>This case is called "surprise" removal because the drivers receive no advance warning. 

<P>In response to an IRP_MN_SURPRISE_REMOVAL IRP, the drivers for the device fail any outstanding I/O and release the hardware resources used by the device. The drivers must ensure that no components attempt to access the device because it is no longer present. 

<P>All drivers must handle an IRP_MN_SURPRISE_REMOVAL IRP and must set status to STATUS_SUCCESS.

<P>An IRP_MN_SURPRISE_REMOVAL cannot be canceled.
</LI>

	<LI>Remove after surprise remove (Windows&nbsp;2000 and later systems)
<P>When all open handles to the device are closed, the PnP Manager sends an <A HREF="pnp-irps_4noy.htm">IRP_MN_REMOVE_DEVICE</A> request to the drivers for the device. Each driver detaches from the device stack and deletes its device object. 
</LI>

	<LI>Surprise remove (Windows 98/Me)
<P>On Windows® 98/Me, a driver does not receive an <A HREF="pnp-irps_8e42.htm">IRP_MN_SURPRISE_REMOVAL</A> when a device is removed without warning. The PnP Manager sends only an IRP_MN_REMOVE_DEVICE. WDM drivers must have code to handle both an IRP_MN_SURPRISE_REMOVAL followed by an IRP_MN_REMOVE_DEVICE (the Windows&nbsp;2000 and later behavior for surprise removal) and an IRP_MN_REMOVE_DEVICE without a prior surprise-remove IRP (the Windows 98/Me behavior).
</LI>

	<LI>Remove after a failed start (Windows&nbsp;2000 and later)
<P>If one of the drivers for a device fails an IRP_MN_START_DEVICE, the PnP Manager sends an IRP_MN_REMOVE_DEVICE request to the device stack. Such a remove IRP ensures that all drivers for the device are notified that the device was not successfully started. In response to the IRP_MN_REMOVE_DEVICE IRP, the drivers for the device undo their start operations (if they succeeded the start IRP) and undo their <I>AddDevice</I> operations. The PnP Manager marks such a device as "failed start."

<P>This behavior applies to Windows&nbsp;2000 and later platforms only. On Windows 98/Me, the PnP Manager sends an IRP_MN_STOP_DEVICE in response to a failed start.
</LI>
</OL>

<P>A driver for a PnP device can receive an IRP_MN_SURPRISE_REMOVAL in more situations than those shown in the figure illustrating <A HREF="#ddk__bmc_rem_irps.wmf_kg">typical remove IRP transitions</A>. For example, a user could insert a PC Card into the machine and then remove it before the device is started. In that case, the PnP Manager issues a surprise-remove IRP after the drivers' <I>AddDevice</I> routines are called but before issuing the IRP_MN_START_DEVICE request. A driver for a PnP device must be prepared to handle remove IRPs at any time after the driver's <I>AddDevice</I> routine is called. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Understanding%20When%20Remove%20IRPs%20Are%20Issued"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
