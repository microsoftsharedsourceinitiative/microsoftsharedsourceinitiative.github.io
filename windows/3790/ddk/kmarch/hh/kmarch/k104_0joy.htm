<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoWritePartitionTable</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoWritePartitionTable">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_drive_layout_information_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ioctl_disk_set_drive_layout_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iowritepartitiontable_kr"></A>IoWritePartitionTable</H1>

<P>The <B>IoWritePartitionTable</B> routine is <B>obsolete</B> and is provided only to support existing drivers. New drivers must use <A HREF="k104_9p9u.htm"><B>IoWritePartitionTableEx</B></A>.</P>

<P><B>IoWritePartitionTable</B> writes partition tables from the entries in the partition list buffer for each partition on the disk represented by the given device object.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>IoWritePartitionTable(</B>
<B>    IN PDEVICE_OBJECT</B>  <I>DeviceObject</I><B>,</B>
<B>    IN ULONG</B>  <I>SectorSize</I><B>,</B>
<B>    IN ULONG</B>  <I>SectorsPerTrack</I><B>,</B>
<B>    IN ULONG</B>  <I>NumberOfHeads</I><B>,</B>
<B>    IN struct _DRIVE_LAYOUT_INFORMATION</B>  <I>*PartitionBuffer</I>
<B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceObject</I></DT>

<DD>Pointer to the device object representing the disk whose partition tables are to be written.</DD>

<DT><I>SectorSize</I></DT>

<DD>Specifies the size in bytes of sectors on the device.</DD>

<DT><I>SectorsPerTrack</I></DT>

<DD>Specifies the track size on the device.</DD>

<DT><I>NumberOfHeads</I></DT>

<DD>Specifies the number of tracks per cylinder.</DD>

<DT><I>PartitionBuffer</I></DT>

<DD>Pointer to the drive layout buffer that contains the partition list entries. For more detailed information see <A HREF="JavaScript:hhobj_1.Click()">DRIVE_LAYOUT_INFORMATION</A>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoWritePartitionTablo</B> returns a status code of STATUS_SUCCESS if all writes were completed without error. In case of failure, the error codes returned by <B>IoWritePartitionTable</B> might include, but are not limited to, the following list:

<DL>
<DT>STATUS_DEVICE_NOT_READY</DT>

<DD>Indicates a failure read the correct disk geometry.</DD>

<DT>STATUS_INSUFFICIENT_RESOURCES</DT>

<DD>Indicates a failure to allocate necessary resources (for example, heap memory, IRPs, etc.).</DD>

<DT>STATUS_UNSUCCESSFUL</DT>

<DD>Indicates that sector zero did not have the expected MBR disk signature.</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I>. Include <I>ntddk.h.</I></P>

<H4>Comments</H4>

<P><B>IoWritePartitionTable</B> must only be used by disk drivers. Other drivers should use the <A HREF="JavaScript:hhobj_2.Click()">IOCTL_DISK_SET_DRIVE_LAYOUT</A> disk I/O request instead.</P>

<P><B>IoWritePartitionTable</B> is called when a disk device driver is requested to set the partition type in a partition table entry or to repartition the disk by an IRP_MJ_DEVICE_CONTROL request. The device control request is generally issued by the format utility, which performs I/O control functions on the partitions and disks in the machine.</P>

<P>To reset a partition type, the driver passes a pointer to the device object representing the physical disk and the number of the partition associated with the device object that the format utility has open. When a disk is to be repartitioned dynamically, the disk driver must tear down its set of device objects representing the current disk partitions and create a new set of device objects representing the new partitions on the disk.</P>

<P>Applications that create and delete partitions and require full descriptions of the system should call <B>IoReadPartitionTable</B> with <I>ReturnRecognizedPartitions</I> set to FALSE. The drive layout structure can be modified by the system format utility to reflect a new configuration of the disk.</P>

<P><B>IoWritePartitionTable</B> is synchronous. It must be called by the disk driver’s Dispatch routine or by a driver thread. Thus, all user and file system threads must be prepared to enter a wait state when issuing the device control request to reset partition types for the device.</P>

<P>Callers of this routine must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k104_8piq.htm"><B>IoCreateDevice</B></A>, <A HREF="k104_9yuq.htm"><B>IoReadPartitionTable</B></A>, <A HREF="k104_8y7m.htm"><B>IoSetPartitionInformation</B></A>,  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoWritePartitionTable"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
