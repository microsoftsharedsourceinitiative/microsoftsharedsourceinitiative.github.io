<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>64-Bit Compiler</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="64-Bit Compiler">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_64_bit_compiler_kg"></A>64-Bit Compiler</H3>

<P>The Microsoft® Windows® DDK and IFS Kit include a partial 64-bit build environment you can use to evaluate your driver source code for the upcoming 64-bit version of Windows. This environment includes a 64-bit compiler that you can use to identify pointer truncation, improper type casts, and other 64-bit-specific problems. Better tools will be available in future releases, but this tool will get you started.</P>

<P>The first time you run the compiler, it will probably generate many pointer truncation or type mismatch warnings such as the following: </P>

<PRE>warning C4311: 'type cast' : pointer truncation from 'unsigned char *' to 'unsigned long '</PRE>

<P>Use these warnings as a guide to make your code more robust. It is good practice to eliminate all warnings, especially pointer-truncation warnings. For example, the following code can generate the C4311 warning: </P>

<PRE>buffer = (PUCHAR)srbControl;
(ULONG)buffer += srbControl-&gt;HeaderLength;</PRE>

<P>To correct the code, make the following changes: </P>

<PRE>buffer = (PUCHAR)srbControl;
(ULONG_PTR)buffer += srbControl-&gt;HeaderLength;</PRE>

<H4>Predefined Macros</H4>

<P>The compiler defines the following macros to identify the platform.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Macro</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>_WIN64</TD>
<TD width=52%>A 64-bit platform.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>_WIN32</TD>
<TD width=52%>A 32-bit platform. This value is also defined by the 64-bit compiler for backward compatibility.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>_WIN16</TD>
<TD width=52%>A 16-bit platform.</TD>
</TR>
</TABLE><BR>

<P>The following macros are specific to the architecture.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Macro</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>_M_IA64</TD>
<TD width=52%>A 64-bit Intel platform.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>_M_IX86</TD>
<TD width=52%>A 32-bit Intel platform.</TD>
</TR>
</TABLE><BR>

<P>Do not use these macros except with architecture-specific code. Instead, use _WIN64, _WIN32, and _WIN16 whenever possible.</P>

<H4>64-Bit Compiler Switches and Warnings</H4>

<P>There is a warning option to assist porting to 64-bit Windows. The -Wp64-W3 switch enables the following warnings: 

<UL>
	<LI><B>C4305</B>: Truncation warning. For example, "return": truncation from "unsigned int64" to "long." </LI>

	<LI><B>C4311</B>: Truncation warning. For example, "type cast": pointer truncation from "int*_ptr64" to "int." </LI>

	<LI><B>C4312</B>:<B> </B>Conversion to bigger-size warning. For example, "type cast": conversion from "int" to "int*_ptr64" of greater size. </LI>

	<LI><B>C4318</B>: Passing zero length. For example, passing constant zero as the length to the <B>memset</B> function. </LI>

	<LI><B>C4319</B>: Not operator. For example, "~": zero extending "unsigned long" to "unsigned _int64" of greater size. </LI>

	<LI><B>C4313</B>: Calling the <B>printf</B> family of functions with conflicting conversion type specifiers and arguments. For example, "printf": "%p" in format string conflicts with argument 2 of type "_int64." Another example is the call printf("%x", pointer_value); this causes a truncation of the upper 32 bits. The correct call is printf("%p", pointer_value). </LI>

	<LI><B>C4244</B>: Same as the existing warning C4242. For example, "return": conversion from "_int64" to "unsigned int," possible loss of data. </LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: 64-Bit%20Compiler"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
