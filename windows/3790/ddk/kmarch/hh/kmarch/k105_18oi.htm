<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeWaitForMultipleObjects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeWaitForMultipleObjects">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_bug_check_0xc_bug">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kewaitformultipleobjects_kr"></A>KeWaitForMultipleObjects</H1>

<P>The <B>KeWaitForMultipleObjects</B> routine puts the current thread into an alertable or nonalertable wait state until any or all of a number of dispatcher objects are set to a signaled state or (optionally) until the wait times out.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>KeWaitForMultipleObjects(</B>
<B>    IN ULONG</B>  <I>Count</I><B>,</B>
<B>    IN PVOID</B>  <I>Object[]</I><B>,</B>
<B>    IN WAIT_TYPE</B>  <I>WaitType</I><B>,</B>
<B>    IN KWAIT_REASON</B>  <I>WaitReason</I><B>,</B>
<B>    IN KPROCESSOR_MODE</B>  <I>WaitMode</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>Alertable</I><B>,</B>
<B>    IN PLARGE_INTEGER</B>  <I>Timeout</I>  <B>OPTIONAL,</B>
<B>    IN PKWAIT_BLOCK</B>  <I>WaitBlockArray</I>  <B>OPTIONAL</B>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Count</I></DT>

<DD>Specifies the number of objects to be waited on.</DD>

<DT><I>Object</I></DT>

<DD>Pointer to an array of pointers to dispatcher objects (events, mutexes, semaphores, threads, and timers) for which the caller supplies the storage.</DD>

<DT><I>WaitType</I></DT>

<DD>Specifies either <B>WaitAll</B>, indicating that all of the specified objects must attain a signaled state before the wait is satisfied; or <B>WaitAny</B>, indicating that any one of the objects must attain a signaled state before the wait is satisfied.</DD>

<DT><I>WaitReason</I></DT>

<DD>Specifies the reason for the wait. Drivers should set this value to <B>Executive</B> or, if the driver is doing work on behalf of a user and is running in the context of a user thread, to <B>UserRequest</B>.</DD>

<DT><I>WaitMode</I></DT>

<DD>Specifies whether the caller waits in <B>KernelMode</B> or <B>UserMode</B>. Intermediate and lowest-level drivers should specify <B>KernelMode</B>. If the set of objects waited on includes a mutex, the caller must specify <B>KernelMode</B>.</DD>

<DT><I>Alertable</I></DT>

<DD>Specifies a Boolean value that indicates whether the thread can be alerted while it is in the waiting state.</DD>

<DT><I>Timeout</I></DT>

<DD>Pointer to an absolute or relative value representing the upper limit for the wait. A negative value specifies an interval relative to the current system time. The value should be expressed in units of 100 nanoseconds. Absolute expiration times track any changes in the system time; relative expiration times are not affected by system time changes.</DD>

<DT><I>WaitBlockArray</I></DT>

<DD>If <I>Count</I> &lt;= THREAD_WAIT_OBJECTS, then <I>WaitBlockArray</I> can be NULL. Otherwise this parameter must point to a memory buffer of <B>sizeof(</B>KWAIT_BLOCK<B>)</B> * <I>Count</I> bytes. The routine uses this buffer for record-keeping while performing the wait operation.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>KeWaitForMultipleObjects</B> can return one of the following:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>Depending on the specified <I>WaitType</I>, one or all of the dispatcher objects in the <I>Object</I> array satisfied the wait.</DD>

<DT>STATUS_ALERTED</DT>

<DD>The wait is completed because of an alert to the thread.</DD>

<DT>STATUS_USER_APC</DT>

<DD>A user APC was delivered to the current thread before the specified <I>Timeout</I> interval expired.</DD>

<DT>STATUS_TIMEOUT</DT>

<DD>A time out occurred before the specified set of wait conditions was met. This value can be returned when an explicit time-out value of zero is specified, but the specified set of wait conditions cannot be met immediately.
</DD>
</DL>

<P>Note that the NT_SUCCESS macro recognizes all of these status values as "success" values.</P>

<P>If <B>KeWaitForMultipleObjects</B> returns STATUS_SUCCESS and if <B>WaitAny</B> is specified as the <I>WaitType</I>, <B>KeWaitForMultipleObjects</B> also returns the zero-based index of the object that satisfied the wait at NTSTATUS.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Each thread object has a built-in array of wait blocks that can be used to wait on several objects concurrently. Whenever possible, the built-in array of wait blocks should be used in a wait-multiple operation because no additional wait block storage needs to be allocated and later deallocated. However, if the number of objects that must be waited on concurrently is greater than the number of built-in wait blocks, use the <I>WaitBlockArray</I> parameter to specify an alternate set of wait blocks to be used in the wait operation. Drivers only need to allocate a sufficiently-large memory buffer for <I>WaitBlockArray</I>. The buffer does not need to be initialized, and the drivers can treat it as an opaque structure. The buffer can be freed once the routine returns.</P>

<P>If either Count &gt; MAXIMUM_WAIT_OBJECTS or if <I>WaitBlockArray</I> is NULL and Count &gt; THREAD_WAIT_OBJECTS, the system issues <A HREF="JavaScript:hhobj_1.Click()">Bug Check 0xC</A> (MAXIMUM_WAIT_OBJECTS_EXCEEDED).</P>

<P>The current state for each of the specified objects is examined to determine whether the wait can be satisfied immediately. If the necessary side effects are performed on the objects, an appropriate value is returned.</P>

<P>If the wait cannot be satisfied immediately and either no time-out value or a nonzero time-out value has been specified, the current thread is put in a waiting state and a new thread is selected for execution on the current processor. If no <I>Timeout</I> is supplied, the calling thread will remain in a wait state until the conditions specified by <I>Object</I> and <I>WaitType</I> are satisfied.</P>

<P>If <I>Timeout</I> is specified, the wait will be automatically satisfied if none of the specified wait conditions is met when the given interval expires.</P>

<P>A <I>Timeout</I> value of zero allows the testing of a set of wait conditions, conditionally performing any side effects if the wait can be immediately satisfied, as in the acquisition of a mutex.</P>

<P>The <I>Alertable</I> parameter specifies whether the thread can be alerted and its wait state consequently aborted. If the value of this parameter is FALSE then the thread cannot be alerted, no matter what the value of the <I>WaitMode</I> parameter or the origin of the alert. The only exception to this rule is that of a terminating thread. A thread is automatically made alertable, for instance, when terminated by a user with a CTRL+C.</P>

<P>If the value of <I>Alertable </I>is TRUE and one of the following conditions exists, the thread will be alerted:

<OL>
	<LI>If the origin of the alert is an internal, undocumented kernel-mode routine used to alert threads.</LI>

	<LI>If the origin of the alert is a user-mode APC and the value of the <I>WaitMode</I> parameter is <B>UserMode</B>.</LI>
</OL>

<P>In the first of these two cases, the thread’s wait is satisfied with a completion status of STATUS_ALERTED; in the second case, it is satisfied with a completion status of STATUS_USER_APC.</P>

<P>The thread must be alertable for a user-mode APC to be delivered. This is not the case for kernel-mode APCs. A kernel-mode APC can be delivered and executed even though the thread is not alerted. Once the APC's execution completes, the thread's wait will resume. A thread is never alerted nor is its wait aborted by the delivery of a kernel-mode APC.</P>

<P>The delivery of kernel-mode APCs to a waiting thread does not depend on whether the thread can be alerted, but it depends on other conditions. If the kernel-mode APC is a special kernel-mode APC, then the APC is delivered provided that IRQL&nbsp;&lt; APC_LEVEL. If the kernel-mode APC is a normal kernel-mode APC, then the APC is delivered provided that the following three conditions hold: (1) IRQL&nbsp;&lt; APC_LEVEL, (2) no kernel APC is in progress, and (3) the thread is not in a critical section. </P>

<P>A special consideration applies when the <I>Object</I> parameter passed to <B>KeWaitForMultipleObjects</B> is a mutex. If the dispatcher object waited on is a mutex, APC delivery is the same as for all other dispatcher objects <I>during the wait</I>. However, once <B>KeWaitForMultipleObjects</B> returns with STATUS_SUCCESS and the thread actually holds the mutex, only special kernel-mode APCs are delivered. Delivery of all other APCs, both kernel-mode and user-mode, is disabled. This restriction on the delivery of APCs persists until the mutex is released.</P>

<P>For additional information, see <A HREF="synchro_1oo7.htm">Do Waiting Threads Receive Alerts and APCs?</A></P>

<P>If the <I>WaitMode</I> parameter is <B>UserMode</B>, the kernel stack can be swapped out during the wait. Consequently, a caller must <I>never</I> attempt to pass parameters on the stack when calling <B>KeWaitForMultipleObjects</B> with the <B>UserMode</B> argument. If you allocate the event on the stack, you must set the <I>WaitMode</I> parameter to <B>KernelMode</B>. </P>

<P>It is especially important to check the return value of <B>KeWaitForMultipleObjects</B> when the <I>WaitMode</I> parameter is <B>UserMode</B> or <I>Alertable</I> is TRUE, because <B>KeWaitForMultipleObjects</B> might return early with a status of STATUS_USER_APC or STATUS_ALERTED. </P>

<P>All long term waits that can be aborted by a user should be <B>UserMode</B> waits and <I>Alertable</I> should be set to FALSE. </P>

<P>Where possible, <I>Alertable</I> should be set to FALSE and <I>WaitMode</I> should be set to <B>KernelMode</B>, in order to reduce driver complexity. The principal exception to this is when the wait is a long term wait. </P>

<P>Callers of <B>KeWaitForMultipleObjects</B> can be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL. However, the caller cannot wait at raised IRQL for a nonzero interval nor in an arbitrary thread context on any dispatcher object. Therefore callers usually are running at IRQL&nbsp;= PASSIVE_LEVEL. A call while running at IRQL&nbsp;= DISPATCH_LEVEL is valid if and only if the caller specifies a <I>Timeout</I> of zero. That is, a driver must not wait for a nonzero interval at IRQL&nbsp;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k102_2o8i.htm"><B>ExInitializeFastMutex</B></A>, <A HREF="k105_8jaq.htm"><B>KeInitializeEvent</B></A>, <A HREF="k105_9hgy.htm"><B>KeInitializeMutex</B></A>, <A HREF="k105_4zhu.htm"><B>KeInitializeSemaphore</B></A>, <A HREF="k105_6g4y.htm"><B>KeInitializeTimer</B></A>, <A HREF="k105_2kvm.htm"><B>KeWaitForMutexObject</B></A>, <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeWaitForMultipleObjects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
