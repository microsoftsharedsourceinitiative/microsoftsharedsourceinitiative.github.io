<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Sending WMI Events</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Sending WMI Events">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_sending_wmi_events_kg"></A>Sending WMI Events</H1>

<P>A driver can use WMI events to notify user-mode applications of events without requiring the applications to poll or send IRPs. A driver should use WMI events to notify WMI clients of exceptional conditions, not as an alternative to error logging. A driver should support any standard event blocks defined for its device type in <I>wmicore.mof</I>, and might define and register additional custom event blocks to support device-specific notifications.</P>

<P>An event block is simply a data block that derives from the abstract base class <B>WMIEvent</B>. An event block can contain any of the same data as a data block, or it can be empty—that is, an event block need not contain any driver-defined data items. If an event block does contain data, the total size of the WNODE_<I>XXX</I> plus the data should not exceed the registry-defined limit of 1K. In general, smaller events result in better system performance and more timely notification. For information about defining blocks, see <A HREF="wmi_7qnb.htm">MOF Syntax for WMI Data and Event Blocks</A> and <A HREF="wmi_6gx3.htm">Designing WMI Data and Event Blocks</A>.</P>

<P>A driver indicates support for an event by registering the corresponding event block with WMIREG_FLAG_EVENT_ONLY_GUID set in the block's <A HREF="k112_3ulu.htm">WMIREGGUID</A> structure. For information about registering blocks, see <A HREF="wmi_1hd3.htm">Registering as a WMI Data Provider</A>.</P>

<P>When a WMI client user requests notification of an event, WMI sends an <A HREF="k901_10du.htm">IRP_MN_ENABLE_EVENTS</A> request to the driver, which alerts the driver to begin monitoring the event's driver-determined trigger condition. Then, when the trigger condition occurs, the driver sends the event to WMI, which delivers it to all data consumers that have registered for the event. </P>

<P>A driver sends an event to WMI in one of the following ways:

<UL>
	<LI>Call the kernel-mode WMI library routine <A HREF="k902_43hu.htm"><B>WmiFireEvent</B></A>. A driver can call <B>WmiFireEvent</B> to send only events that do not use dynamic instance names, and that base static instance names on a single base name string or the device instance ID of a PDO. Furthermore, the event must be a single instance—that is, a driver cannot call <B>WmiFireEvent</B> to send an event that consists of a single item or multiple instances. For more information, see <A HREF="wmi_3kbr.htm">Sending an Event with <B>WmiFireEvent</B></A>.</LI>

	<LI>Call the kernel-mode routine <A HREF="k104_2uya.htm"><B>IoWmiWriteEvent</B></A> with a pointer to a driver-allocated and initialized WNODE_XXX structure that contains the event's data. For more information, see <A HREF="wmi_0eg7.htm">Sending an Event with <B>IoWMIWriteEvent</B></A>.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Sending%20WMI%20Events"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
