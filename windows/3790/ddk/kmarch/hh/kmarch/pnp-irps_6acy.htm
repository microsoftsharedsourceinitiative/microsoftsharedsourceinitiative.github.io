<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP_MN_QUERY_PNP_DEVICE_STATE</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP_MN_QUERY_PNP_DEVICE_STATE">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_mn_query_pnp_device_state_dr"></A>IRP_MN_QUERY_PNP_DEVICE_STATE</H1>

<P>Function, filter, and bus drivers can handle this request.</P>

<H4>Major Code</H4>

<P><A HREF="k113_8ur6.htm">IRP_MJ_PNP</A> </P>

<H4>When Sent</H4>

<P>The PnP Manager sends this IRP after the drivers for a device return success from the <A HREF="pnp-irps_1gqa.htm">IRP_MN_START_DEVICE</A> request sent when a device is first started. This IRP is not sent on a start after a stop for resource rebalancing. The PnP Manager also sends this IRP when a driver for the device calls <A HREF="k104_4m2a.htm"><B>IoInvalidateDeviceState</B></A>.</P>

<P>The PnP Manager sends this IRP at IRQL PASSIVE_LEVEL in the context of an arbitrary thread.</P>

<H4>Input</H4>

<P>None</P>

<H4>Output</H4>

<P>Returned in I/O status block.</P>

<H4>I/O Status Block</H4>

<P>A driver sets <B>Irp-&gt;IoStatus.Status</B> to STATUS_SUCCESS or to an appropriate error status such as STATUS_UNSUCCESSFUL.</P>

<P>On success, a driver sets <B>Irp-&gt;IoStatus.Information</B> to a PNP_DEVICE_STATE bitmask.</P>

<P>If a function or filter driver does not handle this IRP, it calls <A HREF="k104_1ohe.htm"><B>IoSkipCurrentIrpStackLocation</B></A>, does not set an IoCompletion routine, and passes the IRP down to the next driver. Such a driver must not modify <B>Irp-&gt;IoStatus</B> and must not complete the IRP.</P>

<P>If a bus driver does not handle this IRP, it leaves <B>Irp-&gt;IoStatus.Status</B> as is and completes the IRP.</P>

<H4>Operation</H4>

<P>This IRP is handled first by the driver at the top of the device stack and then by each next lower driver in the stack.</P>

<P>A driver handles this IRP if it has information about the PnP state of a device. A driver can set or clear the flags in the PNP_DEVICE_STATE bitmask. If another driver has set a PNP_DEVICE_STATE in <B>Irp-&gt;IoStatus.Information</B>, a driver must take care to modify the flags in that bitmask rather than overwrite the whole structure.</P>

<P>See <A HREF="plugplay_15t3.htm">Plug and Play</A> for the general rules for handling <A HREF="pnp-irps_9bzm.htm">Plug and Play Minor IRPs</A>.</P>

<H4>Sending This IRP</H4>

<P>Reserved for system use. Drivers must not send this IRP.</P>

<H4>See Also</H4>

<P><A HREF="k104_4m2a.htm"><B>IoInvalidateDeviceState</B></A>, <A HREF="k112_1wqa.htm">PNP_DEVICE_STATE</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP_MN_QUERY_PNP_DEVICE_STATE"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
