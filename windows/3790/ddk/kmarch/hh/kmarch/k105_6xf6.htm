<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeCancelTimer</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeCancelTimer">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kecanceltimer_kr"></A>KeCancelTimer</H1>

<P>The <B>KeCancelTimer</B> routine dequeues a timer object before the timer interval, if any was set, expires.</P>

<PRE class=syntax><B>BOOLEAN 
</B>  <B>KeCancelTimer(</B>
<B>    IN PKTIMER</B>  <I>Timer</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Timer</I></DT>

<DD>Pointer to an initialized timer object, for which the caller provides the storage.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the specified timer object is in the system timer queue, <B>KeCancelTimer</B> returns TRUE.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>If the timer object is currently in the system timer queue, it is removed from the queue. If a DPC object is associated with the timer, it too is canceled. Otherwise, no operation is performed.</P>

<P>The routine returns TRUE if the timer is still in the timer queue. A nonperiodic timer is removed from the system queue as soon as it expires. Thus for nonperiodic timers <B>KeCancelTimer</B> returns FALSE if the timer DPC has begun executing.  Periodic timers are always in the timer queue, so <B>KeCancelTimer</B> always returns TRUE for periodic timers. </P>

<P>Note that a DPC that is already running runs to completion. The driver must ensure that the DPC has completed before freeing any resources used by the DPC. For a nonperiodic timer, you can use synchronization primitives, such as event objects, to synchronize between the driver and the DPC. The driver can check the return code of <B>KeCancelTimer</B> to determine if the DPC is running. If so, the DPC can signal the event before exiting, and the driver can wait on that event.</P>

<P>Since for periodic timers <B>KeCancelTimer</B> always returns TRUE, drivers must use a different technique to wait until the DPC has completed. Use the <A HREF="k105_6i0i.htm"><B>KeFlushQueuedDpcs</B></A> routine to block until the DPC executes.</P>

<P>Drivers do not need to synchronize for data stored in global variables or driver object extensions. The system automatically calls <B>KeFlushQueuedDpcs</B> before deallocating either of these regions.</P>

<P>Callers of this routine must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k105_6g4y.htm"><B>KeInitializeTimer</B></A>, <A HREF="k105_6asz.htm"><B>KeReadStateTimer</B></A>, <A HREF="k105_9mlu.htm"><B>KeSetTimer</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeCancelTimer"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
