<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Dispatch(Internal)DeviceControl in Class/Port Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Dispatch(Internal)DeviceControl in Class/Port Drivers">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_storage_drivers_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_dispatch_internal_devicecontrol_in_class_port_drivers_kg"></A><I>Dispatch(Internal)DeviceControl</I> in Class/Port Drivers</H3>

<P>The higher-level driver of a class/port pair can sometimes complete IRPs in its <I>DispatchDeviceControl</I> routine. For example a class driver could, during initialization, gather and store information about the features of the underlying device, which might be sought in a subsequent <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> request, and thus save processing time by satisfying the request without passing it on to the underlying device driver. A class driver might also be designed to check the IRP’s parameters and send only requests with valid parameters to the port driver.</P>

<P>Closely coupled class/port drivers also can define a set of driver-specific or device-specific internal I/O control codes that the class driver can use for <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> requests to the port driver. </P>

<P>For example, the <I>DispatchCreateClose</I> routines in the system keyboard and mouse class drivers send system-defined internal device control requests to enable or disable keyboard and mouse interrupts to the underlying port drivers. These system class drivers set up IRP_MJ_INTERNAL_DEVICE_CONTROL requests for an underlying port driver. Any new keyboard or mouse port driver that interoperates with these system class drivers also must support these public internal device control requests.</P>

<P>The system parallel class/port driver model has similar features. New parallel class drivers can get support from the system parallel port driver by setting up IRPs for IRP_MJ_INTERNAL_DEVICE_CONTROL requests with public IOCTL_PARALLEL_PORT_<I>XXX</I> control codes. You can replace the system parallel port driver, but any new driver also <I>must</I> support this set of public internal device control requests. </P>

<P>For more information about these public internal device control requests, see device-specific documentation in this DDK. For information about how to define private I/O control codes, see <A HREF="irps_65k7.htm">Using I/O Control Codes</A>.</P>

<P>For a closely coupled pair of port/class drivers, the class driver might handle the processing of certain device control requests without passing them on to the port driver. In a new class/port driver pair, the class driver’s <I>DispatchDeviceControl</I> routine can do either of the following:

<UL>
	<LI>Check the validity of the parameters in its own I/O stack location, set the I/O status block if it finds any parameter errors, and call <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A> with a <I>PriorityBoost</I> of IO_NO_INCREMENT; otherwise, call <A HREF="k104_6u5u.htm"><B>IoGetNextIrpStackLocation</B></A> copy its own I/O stack location into the port driver’s, and pass the IRP on with <A HREF="k104_1agi.htm"><B>IoCallDriver</B></A>.</LI>

	<LI>Or, do nothing more than set up the port driver’s I/O stack location in the IRP without checking parameters and pass it on to the port driver for processing.</LI>
</UL>

<P>SCSI class drivers have special requirements for handling device control requests. For more information about these requirements, see <A HREF="JavaScript:hhobj_1.Click()">Storage Drivers</A>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Dispatch(Internal)DeviceControl%20in%20Class%2FPort%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
