<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Device-Dedicated Threads</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Device-Dedicated Threads">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_device_dedicated_threads_kg"></A>Device-Dedicated Threads</H3>

<P>The driver of a slow device or a device that is seldom used (like the floppy controller) can solve many “waiting” problems by creating a device-dedicated system thread. Additionally, most file system drivers use system worker threads and supply worker-thread callback routines.</P>

<P>If a device driver has its own thread context or is running in a system-thread context, the device-dedicated thread or highest-level driver’s worker-thread callback routine can synchronize operations on a dispatcher object, such as an <A HREF="synchro_4euf.htm">event object</A> or <A HREF="synchro_94tj.htm">semaphore object</A>, in a shared communication region of the driver’s device extension. For example, a device-dedicated thread can wait for a shared dispatcher object, while the thread's device is not in use, by calling <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> for a semaphore. Until the device driver is called to carry out an I/O operation (at which point it sets the semaphore to the Signaled state), its waiting thread uses no CPU time.</P>

<P>A driver can call <A HREF="k108_0q42.htm"><B>PsCreateSystemThread</B></A> to create a driver- or device-dedicated thread, and then call <A HREF="k105_2hbm.htm"><B>KeSetBasePriorityThread</B></A> to set the thread's base priority. The driver should specify a priority value that avoids <I>run-time priority inversions</I> in SMP machines. That is, setting the base priority of a driver-created thread too high can create delays in the execution of lower priority threads that submit I/O requests for that driver.  </P>

<P>Because thread objects are themselves a type of dispatcher object, a thread can wait for another thread to complete. To obtain the thread object pointer associated with a thread, a driver can call <A HREF="k107_54qa.htm"><B>ObReferenceObjectByHandle</B></A>, passing in the thread handle received from <B>PsCreateSystemThread</B>.</P>

<P>A thread can call <A HREF="k105_7epe.htm"><B>KeDelayExecutionThread</B></A> to wait for an interval that could be a full time slice or longer. The granularity of a <B>KeDelayExecutionThread</B> interval is around 10 milliseconds. Because<B> KeDelayExecutionThread</B> is a timer-driven routine, the granularity of its interval is slightly faster or slower than 10 milliseconds, depending on the platform.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Device-Dedicated%20Threads"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
