<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Writing a Bug Check Callback Routine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Writing a Bug Check Callback Routine">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_writing_a_bug_check_callback_routine_kg"></A>Writing a Bug Check Callback Routine</H1>

<P>Drivers can register callback routines that the system executes when it issues a bug check.  </P>

<P>On all NT-based operating systems, drivers can use the <A HREF="k105_29wy.htm"><B>KeRegisterBugCheckCallback</B></A> routine to register a <A HREF="drvrrtns_0m2a.htm"><I>BugCheckCallback</I></A> routine, and <A HREF="k105_2d6a.htm"><B>KeDeregisterBugCheckCallback</B></A> to remove the routine. Drivers can use a <A HREF="drvrrtns_0m2a.htm"><I>BugCheckCallback</I></A> routine to reset their device to a known state.</P>

<P>Prior to Windows&nbsp;XP Service Pack 1 (SP1) and Windows Server&nbsp;2003, drivers could also use <I>BugCheckCallback</I> to store data in the crash dump file:  the system called each <I>BugCheckCallback</I> routine before writing the crash dump file, so any data written to the buffer that was passed to <I>BugCheckCallback</I> was stored in the crash dump file.</P>

<P>For Windows&nbsp;XP SP1 and Windows Server&nbsp;2003 and later, the system calls <I>BugCheckCallback</I> <I>after</I> the crash dump file is written. Instead, the system supports two additional types of bug check callback routines. A <A HREF="drvrrtns_5x2q.htm"><I>BugCheckSecondaryDumpDataCallback</I></A> routine can be used to write data to the crash dump file. A <A HREF="drvrrtns_85gy.htm"><I>BugCheckDumpIoCallback</I></A> routine can be used to copy the crash dump file to a device. Drivers use the <A HREF="k105_8ecy.htm"><B>KeRegisterBugCheckReasonCallback</B></A> and <A HREF="k105_0pma.htm"><B>KeDeregisterBugCheckReasonCallback</B></A> routines to register these types of callback routines. </P>

<P>A bug check callback routine executes at IRQL = HIGH_LEVEL, which imposes strong restrictions on what it can do.</P>

<P>A bug check callback routine cannot:

<UL>
	<LI>Allocate memory</LI>

	<LI>Access pageable memory</LI>

	<LI>Use any synchronization mechanisms</LI>

	<LI>Call any routine that must execute at IRQL = DISPATCH_LEVEL or below</LI>
</UL>

<P>Bug check callback routines are guaranteed to run without interruption, so no synchronization is required. (If the bug check routine does use any synchronization mechanisms, the system will deadlock.)</P>

<P>A driver's bug check callback routine can safely use the READ_PORT_<I>XXX</I>, READ_REGISTER_<I>XXX</I>, WRITE_PORT_<I>XXX</I>, and WRITE_REGISTER_<I>XXX</I> routines to communicate with the driver's device.  (For information about these routines, see <A HREF="k103_4q42.htm">Hardware Abstraction Layer Routines</A>.)</P>

<P>For more information about bug check callbacks, see <A HREF="drvrrtns_0m2a.htm"><I>BugCheckCallback</I></A>, <A HREF="drvrrtns_85gy.htm"><I>BugCheckDumpIoCallback</I></A>, and <A HREF="drvrrtns_5x2q.htm"><I>BugCheckSecondaryDumpDataCallback</I></A>.  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Writing%20a%20Bug%20Check%20Callback%20Routine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
