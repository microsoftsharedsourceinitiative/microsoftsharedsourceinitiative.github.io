<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Timer Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Using Timer Objects">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_using_timer_objects_kg"></A>Using Timer Objects</H3>

<P>The following figure illustrates the use of a notification timer to set up a time-out interval for an operation and then wait while other driver routines process an I/O request.</P>

<P><B><IMG SRC="images/3ketimer.gif" ALT="" BORDER=0></B></P>

<P><B>Waiting on a Timer Object</B></P>

<P>As the previous figure shows, a driver must provide storage for the timer object, which must be initialized by a call to <A HREF="k105_6g4y.htm"><B>KeInitializeTimer</B></A> with a pointer to this storage. A driver typically makes this call from its <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routine.</P>

<P>Within the context of a particular thread, such as a driver-created thread or a thread requesting a synchronous I/O operation, the driver can wait on its timer object as shown in the previous figure:

<OL>
	<LI>The thread calls <A HREF="k105_9mlu.htm"><B>KeSetTimer</B></A> with a pointer to the timer object and a given <I>DueTime </I>value, expressed in units of 100 nanoseconds. A positive value for <I>DueTime</I> specifies an absolute time at which the timer object should be removed from the kernel's timer queue and set to the Signaled state. A negative value for <I>DueTime</I> specifies an interval relative to the current system time.
<P>Note that the thread (or driver routine running in a system thread) passes a NULL pointer for the DPC object (shown previously in the figure illustrating <A HREF="synchro_242v.htm#ddk__bmc_3ketmdpc.wmf__kg">using timer and DPC objects for a CustomTimerDpc routine</A>) when it calls <B>KeSetTimer</B> if it waits on the timer object instead of queuing a <I>CustomTimerDpc</I> routine.
</LI>

	<LI>The thread calls <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> with a pointer to the timer object, which puts the thread into a wait state while the timer object is in the kernel's timer queue.</LI>

	<LI>The given <I>DueTime</I> expires.</LI>

	<LI>The kernel dequeues the timer object, sets it to the Signaled state, and changes the thread's state from waiting to ready.</LI>

	<LI>The kernel dispatches the thread for execution as soon as a processor is available: that is, no other thread with a higher priority is currently in the ready state and there are no kernel-mode routines to be run at raised IRQL (greater than PASSIVE_LEVEL).</LI>
</OL>

<P>Driver routines that run at raised IRQL can time out requests by using a timer object with an associated DPC object to queue a driver-supplied <A HREF="drvrrtns_0iwi.htm"><I>CustomTimerDpc</I></A> routine. Only driver routines that run within a nonarbitrary thread context can wait for a nonzero interval on a timer object, as shown in the previous figure.</P>

<P>Like every other thread, a driver-created thread is represented by a kernel thread object, which is also a dispatcher object. Consequently, a driver need not have its driver-created thread use a timer object to voluntarily put itself into a wait state for a given interval. Instead, the thread can call <A HREF="k105_7epe.htm"><B>KeDelayExecutionThread</B></A> with a caller-supplied interval. For more information about this technique, see <A HREF="iputoput_7h5z.htm">Polling a Device</A>. </P>

<P><B>DriverEntry</B>, <I>Reinitialize</I>, and <I>Unload</I> routines also run in a system thread context, so drivers can call <B>KeWaitForSingleObject</B> with a driver-initialized timer object or <B>KeDelayExecutionThread</B> while they are initializing or unloading. A device driver can call <A HREF="k105_66nm.htm"><B>KeStallExecutionProcessor</B></A> for a very short interval (preferably something less than 50 microseconds) if it must wait for the device to update state during its initialization. </P>

<P>However, higher-level drivers generally use another synchronization mechanism in their <B>DriverEntry</B> and <I>Reinitialize</I> routines instead of using a timer object. Higher-level drivers should always be designed to layer themselves over any lower-level driver of a particular type or types of device. Therefore, a higher-level driver tends to become slow to load if it waits on a timer object or calls <B>KeDelayExecutionThread</B> because such a driver must wait for an interval long enough to accommodate the slowest possible device supporting it. Note also that a "safe" but minimum interval for such a wait is very difficult to determine.</P>

<P>Similarly, PnP drivers should not wait for other actions to occur, but instead should use the PnP Manager's <A HREF="plugplay_32xz.htm">notification</A> mechanism. </P>

<P>If the system time changes before a timer expires, a relative timer is not affected but the system adjusts each absolute timer. A relative timer always expires after the specified number of time units elapse, regardless of the absolute system time. An absolute timer expires at a specific system time, so a change in the system time changes the wait duration of an absolute timer.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Using%20Timer%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
