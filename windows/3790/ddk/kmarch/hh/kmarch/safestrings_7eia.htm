<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCbCopy</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCbCopy">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcbcopy_kr"></A>RtlStringCbCopy</H1>

<P>The <B>RtlStringCbCopyW</B> and <B>RtlStringCbCopyA</B> functions copy a byte-counted string into a buffer. </P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCbCopyW(
    OUT LPWSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCWSTR  </B><I>pszSrc</I>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCbCopyA(</B>
<B>    OUT LPSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszSrc</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Supplies a pointer to a caller-supplied buffer that receives the copied string. The string at <I>pszSrc</I> is copied to the buffer at <I>pszDest</I> and terminated with a NULL character.</DD>

<DT><I>cbDest</I> </DT>

<DD>Supplies the size, in bytes, of the destination buffer. 

<P>For Unicode strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(char). 


<P>For ANSI strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(WCHAR). 
</DD>

<DT><I>pszSrc</I> </DT>

<DD>Supplies a pointer to a caller-supplied, NULL-terminated string. </DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=50%>Return Value</TH>
<TH align=left width=50%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_SUCCESS</TD>
<TD width=50%>This <I>success</I> status means source data was present, the string was copied without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=50%>This <I>warning</I> status means the copy operation did not complete due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_INVALID_PARAMETER</TD>
<TD width=50%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER value when:

<UL>
	<LI>The value in <I>cbDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present.</LI>

	<LI>The destination buffer's length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCbCopyA</B> and <B>RtlStringCbCopyW</B> should be used instead of the following functions: 

<UL>
	<LI><B>strcpy</B> </LI>

	<LI><B>wcscpy</B> </LI>
</UL>

<P><B>RtlStringCbCopyA</B> and <B>RtlStringCbCopyW</B> are not replacements for <B>strncpy</B>. To replace <B>strncpy</B>, use <A HREF="safestrings_70du.htm"><B>RtlStringCbCopyN</B></A> or <A HREF="safestrings_4t2q.htm"><B>RtlStringCbCopyNEx</B></A>.</P>

<P>The size of the destination buffer is provided to the function to ensure that <B>RtlStringCbCopy</B> does not write past the end of the buffer.</P>

<P>Use <B>RtlStringCbCopyW</B> to handle Unicode strings and <B>RtlStringCbCopyA</B> to handle ANSI strings. The form you use depends on your data as shown in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=33%>String Data Type</TH>
<TH align=left width=27%>String Literal</TH>
<TH align=left width=40%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=33%>WCHAR</TD>
<TD width=27%>L"string"</TD>
<TD width=40%><B>RtlStringCbCopyW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>char</B></TD>
<TD width=27%>"string"</TD>
<TD width=40%><B>RtlStringCbCopyA</B></TD>
</TR>
</TABLE><BR>

<P>If <I>pszSrc</I> and <I>pszDest</I> point to overlapping strings, the behavior of the function is undefined.</P>

<P>Neither <I>pszSrc</I> nor <I>pszDest</I> can be NULL. If you need to handle null string pointer values, use <A HREF="safestrings_1qr6.htm"><B>RtlStringCbCopyEx</B></A>.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_1qr6.htm"><B>RtlStringCbCopyEx</B></A>,<B> <A HREF="safestrings_8sky.htm">RtlStringCchCopy</A></B></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCbCopy"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
