<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PsSetCreateThreadNotifyRoutine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PsSetCreateThreadNotifyRoutine">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_pssetcreatethreadnotifyroutine_kr"></A>PsSetCreateThreadNotifyRoutine</H1>

<P><B>PsSetCreateThreadNotifyRoutine</B> registers a driver-supplied callback that is subsequently notified when a new thread is created and when such a thread is deleted.</P>

<PRE class=syntax><B>NTSTATUS
</B>  <B>PsSetCreateThreadNotifyRoutine(</B>
<B>    IN PCREATE_THREAD_NOTIFY_ROUTINE</B>  <I>NotifyRoutine</I>
<B>    );</B></PRE>

<H4>Parameter</H4>

<DL>
<DT><I>NotifyRoutine</I></DT>

<DD>Specifies the entry point of the caller-supplied thread-creation callback. 
</DD>
</DL>

<H4>Include</H4>

<P><I>ntddk.h </I></P>

<H4>Return Value</H4>

<P><B>PsSetCreateThreadNotifyRoutine</B> either returns STATUS_SUCCESS or it returns STATUS_INSUFFICIENT_RESOURCES if it failed the callback registration.</P>

<H4>Comments</H4>

<P>Highest-level drivers can call <B>PsSetCreateThreadNotifyRoutine</B> to set up their thread-creation notify routines, declared as follows:</P>

<PRE>VOID
(*PCREATE_THREAD_NOTIFY_ROUTINE) (
    IN HANDLE  ProcessId,
    IN HANDLE  ThreadId,
    IN BOOLEAN  Create
    );</PRE>

<P>For example, an IFS or highest-level system-profiling driver might register such a thread-creation callback to track the system-wide creation and deletion of threads against the driver's internal state. The system registers up to eight such thread-creation callbacks. Any driver that successfully registers such a callback <I>must remain loaded until the system itself is shut down</I>. </P>

<P>After such a driver-supplied thread-creation routine is registered, it is called with <I>Create</I> set to TRUE whenever a new thread is created. The input <I>ThreadId</I> handle identifies the newly created thread. The input <I>ProcessId</I> handle identifies the process in which the given thread was just created. As each such thread is deleted, such a driver's thread-notify routine is called again with <I>Create</I> set to FALSE. </P>

<P>When it is called, the driver's thread-creation notify routine runs at IRQL PASSIVE_LEVEL either in the context of the newly created thread or in the context of the exiting thread. </P>

<P>Callers of <B>PsSetCreateThreadNotifyRoutine</B> must be running at IRQL PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k108_4zw2.htm"><B>PsGetCurrentProcessId</B></A>, <A HREF="k108_8vg2.htm"><B>PsGetCurrentThreadId</B></A>, <A HREF="k108_5lwy.htm"><B>PsSetCreateProcessNotifyRoutine</B></A>, <A HREF="k108_5sc2.htm"><B>PsSetLoadImageNotifyRoutine</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PsSetCreateThreadNotifyRoutine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
