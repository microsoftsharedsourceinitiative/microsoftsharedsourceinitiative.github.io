<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoCreateNotificationEvent</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoCreateNotificationEvent">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_kernel_handle_kg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iocreatenotificationevent_kr"></A>IoCreateNotificationEvent</H1>

<P>The <B>IoCreateNotificationEvent</B> routine creates or opens a named notification event used to notify one or more threads of execution that an event has occurred. </P>

<PRE class=syntax><B>PKEVENT 
</B>  <B>IoCreateNotificationEvent(</B>
<B>    IN PUNICODE_STRING</B>  <I>EventName</I><B>,</B>
<B>    OUT PHANDLE</B>  <I>EventHandle</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>EventName</I></DT>

<DD>Pointer to a buffer containing a zero-terminated Unicode string that names the event.</DD>

<DT><I>EventHandle</I></DT>

<DD>Pointer to a location in which to return a handle for the event object.  In Windows Server 2003 and later operating systems, the returned handle is a <A HREF="JavaScript:hhobj_1.Click()">kernel handle</A>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoCreateNotificationEvent</B> returns a pointer to the created or opened event object or NULL if the event object could not be created or opened.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P><B>IoCreateNotificationEvent</B> creates and opens the event object if it does not already exist. <B>IoCreateNotificationEvent</B> sets the state of a new notification event to Signaled. If the event object already exists, <B>IoCreateNotificationEvent</B> just opens the event object.</P>

<P>When a notification event is set to the Signaled state it remains in that state until it is explicitly cleared.</P>

<P>Notification events, like synchronization events, are used to coordinate execution. Unlike a synchronization event, a notification event is not auto-resetting. Once a notification event is in the Signaled state, it remains in that state until it is explicitly reset (with a call to <A HREF="k105_47g2.htm"><B>KeClearEvent</B></A> or <A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A>).</P>

<P>To synchronize on a notification event:

<OL>
	<LI>Open the notification event with <B>IoCreateNotificationEvent</B>. Identify the event with the <I>EventName</I> string.</LI>

	<LI>Wait for the event to be signaled by calling <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> with the PKEVENT returned by <B>IoCreateNotificationEvent</B>. More than one thread of execution can wait on a given notification event. To poll instead of stall, specify a <I>Timeout</I> of zero to <B>KeWaitForSingleObject</B>.</LI>

	<LI>Close the handle to the notification event with <A HREF="k111_03aq.htm"><B>ZwClose</B></A> when access to the event is no longer needed.</LI>
</OL>

<P>Sharing event objects between user mode and kernel mode requires care. The system creates user-mode event objects relative to the \\<I>BaseNamedObjects</I> object directory, and only those event objects are visible to user-mode programs. The <I>Xxx</I> user-mode event corresponds to the \\<I>BaseNamedObjects</I>\<I>Xxx</I> kernel-mode event. The preferred method to share event objects between user mode and kernel mode is for the user-mode program to create the event object and pass it to the driver through an IOCTL. The \\<I>BaseNamedObjects</I> object directory is not created until the Win32® system initializes. Therefore, drivers that are loaded at boot time cannot create event objects in their <A HREF="drvrrtns_6r76.htm"><B>DriverEntry</B></A> routines that are visible to user-mode programs.</P>

<P>For more information on events, see <A HREF="synchro_4euf.htm">Event Objects</A>.</P>

<P>Callers of <B>IoCreateNotificationEvent</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k104_8che.htm"><B>IoCreateSynchronizationEvent</B></A>, <A HREF="k105_47g2.htm"><B>KeClearEvent</B></A>, <A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A>, <A HREF="k105_1prm.htm"><B>KeSetEvent</B></A>, <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A>, <A HREF="k109_6x4i.htm"><B>RtlInitUnicodeString</B></A>, <A HREF="k111_03aq.htm"><B>ZwClose</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoCreateNotificationEvent"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
