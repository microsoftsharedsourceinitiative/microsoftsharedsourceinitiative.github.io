<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Driver-Allocated IRPs</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Driver-Allocated IRPs">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_driver_allocated_irps_kr"></A>Driver-Allocated IRPs</H2>

<DL>
<DT><A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A> </DT>

<DD>Allocates and sets up an IRP that specifies a major function code (<A HREF="k113_8ur6.htm">IRP_MJ_PNP</A>, <A HREF="k113_7fhu.htm">IRP_MJ_READ</A>, <A HREF="k113_45o2.htm">IRP_MJ_WRITE</A>, <A HREF="k113_1wz6.htm">IRP_MJ_SHUTDOWN</A>, or <A HREF="k113_4a0i.htm">IRP_MJ_FLUSH_BUFFERS</A>) with a pointer to:

<UL>
	<LI>The lower driver's device object on which the I/O should occur</LI>

	<LI>A pointer to a buffer that will contain the data to be read or that contains the data to be written</LI>

	<LI>The length of the buffer in bytes</LI>

	<LI>The starting offset on the media</LI>

	<LI>The I/O status block where the called driver can return status information and the caller's <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine can access it </LI>
</UL>


<P>Returns a pointer to the IRP so the caller can set any necessary minor function code and set up its IoCompletion routine before sending the IRP to the target driver.
</DD>

<DT><A HREF="k104_61pu.htm"><B>IoBuildSynchronousFsdRequest</B></A> </DT>

<DD>Allocates and sets up an IRP specifying a major function code (IRP_MJ_PNP, IRP_MJ_READ, IRP_MJ_WRITE, IRP_MJ_SHUTDOWN, or IRP_MJ_FLUSH_BUFFERS) with a pointer to: 

<UL>
	<LI>The lower driver's device object on which the I/O should occur </LI>

	<LI>A buffer that will contain the data to be read or that contains the data to be written</LI>

	<LI>The length of the buffer in bytes </LI>

	<LI>The starting offset on the media </LI>

	<LI>An event object to be set to the Signaled state when the requested operation completes </LI>

	<LI>The I/O status block where the called driver can return status information and the caller's IoCompletion routine can access it </LI>
</UL>


<P>Returns a pointer to the IRP so the caller can set any necessary minor function code and set up its IoCompletion routine before sending the IRP to the target driver.
</DD>

<DT><A HREF="k104_8ble.htm"><B>IoBuildDeviceIoControlRequest</B></A> </DT>

<DD>Allocates and sets up an IRP specifying a major function code (either <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> or <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A>) with an optional input or output buffer; a pointer to the lower driver's device object; an event to be set to the Signaled state when the requested operation completes; and an I/O status block to be set by the driver that receives the IRP. Returns a pointer to the IRP so the caller can set the appropriate IOCTL_<I>XXX</I> before sending the IRP to the next-lower-level driver.</DD>

<DT><A HREF="portn_55gy.htm"><B>PoRequestPowerIrp</B></A> </DT>

<DD>Allocates and initializes an IRP with major function code <A HREF="k113_7jjm.htm">IRP_MJ_POWER</A> and then sends the IRP to the top-level driver in the device stack for the specified device object.</DD>

<DT><A HREF="k104_7qnm.htm"><B>IoSizeOfIrp</B></A> </DT>

<DD>Returns the size in bytes required for an IRP with a given count of I/O stack locations.</DD>

<DT><A HREF="k104_42pe.htm"><B>IoAllocateIrp</B></A> </DT>

<DD>Allocates an IRP, given the number of I/O stack locations (optionally, for the caller, but at least one for each driver layered under the caller) and whether to charge quota against the caller. Returns a pointer to an IRP in nonpaged system space if successful; otherwise, returns NULL.</DD>

<DT><A HREF="k104_5vaq.htm"><B>IoInitializeIrp</B></A> </DT>

<DD>Initializes an IRP, given a pointer to an already allocated IRP, its length in bytes, and its number of I/O stack locations.</DD>

<DT><A HREF="k104_5qr6.htm"><B>IoSetNextIrpStackLocation</B></A> </DT>

<DD>Sets the current IRP stack location to the caller's location in an IRP. The stack location must have been allocated by a preceding call to <B>IoAllocateIrp</B> that specified a stack-size argument large enough to give the caller its own stack location.</DD>

<DT><A HREF="k104_3c8i.htm"><B>IoAllocateMdl</B></A> </DT>

<DD>Allocates an MDL large enough to map the starting address and length supplied by the caller; optionally associates the MDL with a given IRP.</DD>

<DT><A HREF="k104_96eq.htm"><B>IoBuildPartialMdl</B></A> </DT>

<DD>Builds an MDL for the specified starting virtual address and length in bytes from a given source MDL. Drivers that split large transfer requests into a number of smaller transfers can call this routine.</DD>

<DT><A HREF="k104_7cfm.htm"><B>IoFreeMdl</B></A> </DT>

<DD>Releases a given MDL allocated by the caller.</DD>

<DT><A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A> </DT>

<DD>Allocates and initializes an IRP to be associated with a master IRP sent to the highest-level driver, allowing the driver to "split" the original request and send associated IRPs on to lower-level drivers or to the device.</DD>

<DT><A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> </DT>

<DD>Registers a driver-supplied <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine with a given IRP, so that the IoCompletion routine is called when lower-level drivers have completed the request. The <I>IoCompletion</I> routine lets the caller release the IRP it allocated with <B>IoAllocateIrp</B> or <B>IoBuildAsynchronousFsdRequest</B>; to release any other resources it allocated to set up an IRP for lower drivers; and to perform any I/O completion processing necessary.</DD>

<DT><A HREF="k104_17zm.htm"><B>IoSetCompletionRoutineEx</B></A></DT>

<DD>Same as <B>IoSetCompletionRoutine</B>, except that it guarantees a non-Plug and Play driver is not unloaded before the <I>IoCompletion</I> routine exits.</DD>

<DT><A HREF="k104_1agi.htm"><B>IoCallDriver</B></A> </DT>

<DD>Sends an IRP to a lower-level driver.</DD>

<DT><A HREF="k104_82wj.htm"><B>IoFreeIrp</B></A> </DT>

<DD>Releases an IRP that was allocated by the caller.</DD>

<DT><A HREF="k104_4drm.htm"><B>IoReuseIrp</B></A><B> </B></DT>

<DD>Reinitializes for reuse an IRP that was previously allocated by <B>IoAllocateIrp</B>.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Driver-Allocated%20IRPs"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
