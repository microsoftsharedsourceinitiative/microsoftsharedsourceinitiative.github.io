<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WMI Architecture</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WMI Architecture">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wmi_architecture_kg"></A>WMI Architecture</H1>

<P>This section describes WMI architecture and how the WMI extensions to WDM provide WMI with a means for collecting and setting data and events. </P>

<P>WMI is a unifying architecture that allows access to data from a variety of underlying technologies. These technologies include, for example, WMI extensions to WDM, the Desktop Management Interface (DMI), and the Simple Network Management Protocol (SNMP). WMI is based on the Common Information Model (CIM) schema, which is an industry standard specification driven by the Distributed Management Task Force (DMTF). </P>

<P>WMI provides a three-tiered approach for collecting and providing management data. This approach consists of a standard mechanism for storing data (a CIM-compliant data repository), a standard protocol for obtaining and distributing management data (for example, COM and DCOM), and a WMI provider. A WMI provider is a Win32® dynamic-link library (DLL) that supplies instrumentation data for parts of the CIM schema. The WMI provider for WDM acts as an interface to the kernel-mode WMI component. The kernel-mode WMI component provides services for WMI-enabled drivers and interfaces with the WMI provider for WDM. </P>

<P>Although the kernel-mode WMI component is part of the WDM architecture, it can also be used with other types of drivers as well if class or port drivers for those driver types are implemented to register with WMI and to handle WMI requests. For example, the NDIS class driver maps WMI I/O request packets (IRPs) to either object identifiers (OIDs) or status codes, and the SCSI port driver maps WMI IRPs to stream request blocks (SRBs). These mappings allow driver writers to implement WMI services with a familiar model. That is, to provide WMI services, NDIS miniport drivers can use OIDs and status codes, and SCSI miniport drivers can use SRBs. For example, an NDIS miniport driver does not require any WMI-specific code to indicate a change in status for its NIC. If the NDIS miniport driver indicates status about which a WMI client application has requested notification, the NDIS class driver maps that status indication to a WMI value, and passes the status indication to WMI. WMI then passes the status indication to the WMI client application. </P>

<P>The following figure shows the architecture of WMI.</P>

<P><IMG SRC="images/wmi1a.gif" ALT="" BORDER=0></P>

<P><B>WMI Architecture</B></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WMI%20Architecture"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
