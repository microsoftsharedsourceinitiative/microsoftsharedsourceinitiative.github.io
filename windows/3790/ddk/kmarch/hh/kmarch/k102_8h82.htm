<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ExInterlockedRemoveHeadList</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ExInterlockedRemoveHeadList">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_exinterlockedremoveheadlist_kr"></A>ExInterlockedRemoveHeadList</H1>

<P>The <B>ExInterlockedRemoveHeadList</B> routine removes an entry from the head of a doubly linked list so that access to this queue is synchronized in a multiprocessor-safe way.</P>

<PRE class=syntax><B>PLIST_ENTRY 
</B>  <B>ExInterlockedRemoveHeadList(</B>
    <B>IN PLIST_ENTRY</B>  <I>ListHead</I><B>,</B>
    <B>IN PKSPIN_LOCK</B>  <I>Lock</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>ListHead</I></DT>

<DD>Pointer to the head of the doubly linked list from which an entry is to be removed.</DD>

<DT><I>Lock</I></DT>

<DD>Pointer to a caller-supplied spin lock.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the list is empty, a NULL pointer is returned. Otherwise, a pointer to the dequeued entry is returned.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Support routines that do interlocked operations are assumed to be incapable of causing a page fault. That is, neither their code nor any of the data they touch can cause a page fault without bringing down the system. They use spin locks to achieve atomicity in SMP machines. The caller must provide resident storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B> before the initial call to an <B>ExInterlocked</B><I>Xxx</I>. A caller <I>must not</I> be holding this spin lock when it calls <B>ExInterlockedRemoveHeadList</B>. </P>

<P>The caller also must supply resident storage for the interlocked queue. The <I>ListHead</I> must be initialized with <B>InitializeListHead</B> before the initial call to an <B>ExInterlocked..List</B> routine.</P>

<P>If the caller uses only <B>ExInterlocked..List</B> routines to manipulate the list, these routines can be called from a single IRQL that is &lt;= DIRQL. If other driver routines access the list using any other routines, such as the noninterlocked <B>InsertHeadList</B>, callers of <B>ExInterlocked..List</B> must be at &lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k102_84oi.htm"><B>ExInterlockedInsertHeadList</B></A>, <A HREF="k102_5xv6.htm"><B>ExInterlockedInsertTailList</B></A>, <A HREF="k109_7zua.htm"><B>InitializeListHead</B></A>, <A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ExInterlockedRemoveHeadList"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
