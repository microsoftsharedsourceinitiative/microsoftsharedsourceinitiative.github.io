<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Methods for Accessing Data Buffers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Methods for Accessing Data Buffers">
<META NAME="MS-HKWD" CONTENT="Buffered I/O">
<META NAME="MS-HKWD" CONTENT="Direct I/O">
<META NAME="MS-HKWD" CONTENT="Neither Buffered Nor Direct I/O">
<META NAME="MS-HKWD" CONTENT="Neither Method">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_methods_for_accessing_data_buffers_kg"></A>Methods for Accessing Data Buffers</H1>

<P>One of the primary responsibilities of driver stacks is transferring data between user-mode applications and a system's devices. The operating system provides the following three methods for accessing data buffers:</P>



<DL>
<DT><A NAME="ddk_buffered_i_o_kg"></A><I>Buffered I/O</I></DT>

<DD>The operating system creates a nonpaged system buffer, equal in size to the application's buffer. For write operations, the I/O Manager copies user data into the system buffer before calling the driver stack. For read operations, the I/O Manager copies data from the system buffer into the application's buffer after the driver stack completes the requested operation.

<P>For more information, see <A HREF="iputoput_1ulj.htm">Using Buffered I/O</A>.
</DD>

<DT><A NAME="ddk_direct_i_o_kg"></A><I>Direct I/O</I></DT>

<DD>The operating system locks the application's buffer in memory. It then creates a memory descriptor list (MDL) that identifies the locked memory pages, and passes the MDL to the driver stack. Drivers access the locked pages through the MDL.

<P>For more information, see <A HREF="iputoput_46xz.htm">Using Direct I/O</A>.
</DD>

<DT><A NAME="ddk_neither_buffered_nor_direct_i_o_kg"></A><I>Neither Buffered Nor Direct I/O</I></DT>

<DD>The operating system passes the application buffer's virtual starting address and size to the driver stack. The buffer is only accessible from drivers that execute in the application's thread context.

<P>For more information, see <A HREF="iputoput_3cbr.htm">Using Neither Buffered Nor Direct I/O</A>.

</DD>
</DL>



<P>For <A HREF="k113_7fhu.htm">IRP_MJ_READ</A> and <A HREF="k113_45o2.htm">IRP_MJ_WRITE</A> requests, drivers specify the I/O method by using flags in each <A HREF="k112_32cy.htm">DEVICE_OBJECT</A> structure. For more information, see <A HREF="devobjts_8zdz.htm">Initializing a Device Object</A>.</P>

<P>For <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> and <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> requests, the I/O method is determined by the <I>TransferType</I> value that is contained in each IOCTL value.  For more information, see <A HREF="irps_1l0n.htm">Defining I/O Control Codes</A>.</P>

<P>All drivers in a driver stack must use the same buffer access method for each request, except possibly for the highest-level driver (which can use the "neither" method, regardless of the method used by lower drivers).</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Methods%20for%20Accessing%20Data%20Buffers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
