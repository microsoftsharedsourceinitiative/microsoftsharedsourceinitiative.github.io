<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeDelayExecutionThread</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeDelayExecutionThread">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kedelayexecutionthread_kr"></A>KeDelayExecutionThread</H1>

<P>The <B>KeDelayExecutionThread</B> routine puts the current thread into an alertable or nonalertable wait state for a given interval.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>KeDelayExecutionThread(</B>
<B>    IN KPROCESSOR_MODE</B>  <I>WaitMode</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>Alertable</I><B>,</B>
<B>    IN PLARGE_INTEGER</B>  <I>Interval</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>WaitMode</I></DT>

<DD>Specifies the processor mode in which the caller is waiting, which can be either <B>KernelMode</B> or <B>UserMode</B>. Lower-level drivers should specify <B>KernelMode</B>.</DD>

<DT><I>Alertable</I></DT>

<DD>Specifies TRUE if the wait is alertable. Lower-level drivers should specify FALSE.</DD>

<DT><I>Interval</I></DT>

<DD>Specifies the absolute or relative time, in units of 100 nanoseconds, for which the wait is to occur. A negative value indicates relative time. Absolute expiration times track any changes in system time; relative expiration times are not affected by system time changes.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Return Value</H4>

<P><B>KeDelayExecutionThread</B> returns one of the following values that describes how the delay was completed:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>The delay completed because the specified interval elapsed.</DD>

<DT>STATUS_ALERTED</DT>

<DD>The delay completed because the thread was alerted.</DD>

<DT>STATUS_USER_APC</DT>

<DD>A user-mode APC was delivered before the given <I>Interval </I>expired.
</DD>
</DL>

<P>Note that the NT_SUCCESS macro recognizes all of these status values as "success" values.</P>

<H4>Comments</H4>

<P>The expiration time is computed and the current thread is put in a wait state. When the specified interval has passed, the thread exits the wait state and is put in the ready state, becoming eligible for execution.</P>

<P>The <I>Alertable</I> parameter specifies whether the thread can be alerted and its wait state consequently aborted. If the value of this parameter is FALSE then the thread cannot be alerted, no matter what the value of the <I>WaitMode</I> parameter or the origin of the alert. The only exception to this rule is that of a terminating thread. A thread is automatically made alertable, for instance, when terminated by a user with a CTRL+C.</P>

<P>If the value of <I>Alertable </I>is TRUE and one of the following conditions is present, the thread will be alerted:

<OL>
	<LI>If the origin of the alert is an internal, undocumented kernel-mode routine used to alert threads.</LI>

	<LI>The origin of the alert is a user-mode APC, and the value of the <I>WaitMode</I> parameter is <B>UserMode</B>.</LI>
</OL>

<P>In the first of these two cases, the thread’s wait is satisfied with a completion status of STATUS_ALERTED; in the second case, it is satisfied with a completion status of STATUS_USER_APC.</P>

<P>The thread must be alertable for a user-mode APC to be delivered. This is not the case for kernel-mode APCs. A kernel-mode APC can be delivered and executed even though the thread is not alerted. Once the APC's execution completes, the thread's wait resumes. A thread is never alerted, nor is its wait aborted, by the delivery of a kernel-mode APC.</P>

<P>The delivery of kernel-mode APCs to a thread that has called <B>KeDelayExecutionThread </B>does not depend on whether the thread can be alerted. If the kernel-mode APC is a special kernel-mode APC, then the APC is delivered provided that IRQL&nbsp;&lt; APC_LEVEL. If the kernel-mode APC is a normal kernel-mode APC, then the APC is delivered provided that the following three conditions hold: (1) IRQL&nbsp;&lt; APC_LEVEL, (2) no kernel-mode APC is in progress, and(3) the thread is not in a critical section. </P>

<P>If the <I>WaitMode</I> parameter is <B>UserMode</B>, the kernel stack can be swapped out during the wait. Consequently, a caller must <I>never</I> attempt to pass parameters on the stack when calling <B>KeDelayExecutionThread</B> using the <B>UserMode</B> argument.</P>

<P>It is especially important to check the return value of <B>KeDelayExecutionThread</B> when the <I>WaitMode</I> parameter is <B>UserMode</B> or <I>Alertable</I> is TRUE, because <B>KeDelayExecutionThread</B> might return early with a status of STATUS_USER_APC or STATUS_ALERTED. </P>

<P>All long term waits that can be aborted by a user should be <B>UserMode</B> waits and <I>Alertable</I> should be set to FALSE. </P>

<P>Where possible, <I>Alertable</I> should be set to FALSE and <I>WaitMode</I> should be set to <B>KernelMode</B>, in order to reduce driver complexity. The principal exception to this is when the wait is a long term wait. </P>

<P>The expiration time of the delay is expressed as either an absolute time at which the delay is to expire, or a time relative to the current system time. If the <I>Interval</I> parameter is a negative value, the expiration time is relative.</P>

<P>Callers of <B>KeDelayExecutionThread</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k105_41iq.htm"><B>KeQuerySystemTime</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeDelayExecutionThread"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
