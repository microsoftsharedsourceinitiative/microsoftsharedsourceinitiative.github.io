<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Standard Driver Routine Requirements</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Standard Driver Routine Requirements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_standard_driver_routine_requirements_kg"></A>Standard Driver Routine Requirements</H1>

<P>Keep the following points in mind when designing a kernel-mode driver:

<UL>
	<LI>Each driver must have a <A HREF="drvrrtns_6r76.htm"><B>DriverEntry</B></A> routine, which initializes driver-wide data structures and resources. The I/O Manager calls the <B>DriverEntry</B> routine when it loads the driver. </LI>

	<LI>Every driver must have at least one dispatch routine, and it must place a dispatch routine's entry point in its <A HREF="k112_6jaq.htm">DRIVER_OBJECT</A> structure for each IRP_MJ_<I>XXX</I> function code it handles. A driver can have a separate dispatch routine for each of the IRP_MJ_<I>XXX</I> function codes the driver handles.</LI>

	<LI>Every driver must have an <A HREF="drvrrtns_7d82.htm"><I>Unload</I></A> routine, and must place the <I>Unload</I> routine's entry point in its driver object, if the driver can be replaced while the system is running. An <I>Unload</I> routine is responsible for releasing any system resources, such as system-defined objects or driver-allocated memory, that the driver is using before the driver itself is unloaded from the system.</LI>

	<LI>Every PnP driver must have an <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routine and define its entry point in the driver extension of the driver object. An <I>AddDevice</I> routine is responsible for creating and initializing device objects for each PnP device the driver controls.</LI>

	<LI>A driver can have a <A HREF="drvrrtns_6isy.htm"><I>StartIo</I></A> routine and place its entry point in the driver object. Any lowest-level driver that does not have a <I>StartIo</I> routine must set up and manage internal queues of the IRPs sent to its dispatch routines, unless it can complete every IRP it gets within its dispatch routines. Higher-level drivers can have a <I>StartIo</I> routine, but seldom do because higher-level drivers usually pass IRPs on to lower-level drivers directly from their dispatch routines.</LI>

	<LI>Certain miniport drivers are exceptions to the preceding requirements. See the device-type-specific documentation in this DDK for information about the requirements for miniport drivers.</LI>

	<LI>Whether a driver has any other kind of standard routine depends on its functionality and on how that driver fits into the system (for example, whether it interoperates with system-supplied drivers). See the device-type specific documentation in this DDK for details.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Standard%20Driver%20Routine%20Requirements"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
