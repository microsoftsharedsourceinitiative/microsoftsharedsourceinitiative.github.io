<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Implementing the I2C Interface</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_vddi2c_implementing_the_i2c_interface"></A>Implementing the I<SUP>2</SUP>C Interface</H2>

<P>The <B>I2C_OPEN</B> function that the miniVDD exports to the slave minidriver opens or closes a channel for the slave minidriver to use when communicating with the I<SUP>2</SUP>C bus. The slave passes a pointer to its DEVICE_OBJECT, a flag indicating if the call is to open or close a channel, and a pointer to a <B>I2CControl</B> structure. The <B>I2CControl</B> structure contains information that the miniVDD needs to identify the channel and process commands for the I<SUP>2</SUP>C bus. This structure is defined in the I2C.h include file.</P>

<P>The following example shows a partial implementation of an <B>I2C_OPEN</B> function. You should add the code required to open and close a channel for your particular hardware.</P>

<PRE>NTSTATUS
STDMETHODCALLTYPE
  I2C_OPEN(PDEVICE_OBJECT DO,
           ULONG OpenClose,
           PI2CControl TheControl)
{
    if(OpenClose)    // True means open the channel
    {
        // Put a unique identifier in the Cookie field
        TheControl-&gt;Cookie = inc(Unique);
    }
    else    // Close the channel
    {
    }
}
 </PRE>

<P>The <B>I2C_ACCESS</B> function sends and receives data using the I<SUP>2</SUP>C bus. Its arguments are the DEVICE_OBJECT of the slave minidriver and the <B>I2CControl</B> structure used with the <B>I2C_OPEN</B> call. The <B>Command</B> member of the <B>I2CControl</B> structure indicates the action to take. The following example shows the basic structure of a <B>I2C_ACCESS</B> function. You should add the code that controls that I<SUP>2</SUP>C bus for your particular hardware where indicated.</P>

<PRE>NTSTATUS
STDMETHODCALLTYPE 
  I2C_ACCESS(PDEVICE_OBJECT DO, 
             PI2CControl TheControl)
{
    switch(TheControl-&gt;Command)
    {
        case I2C_COMMAND_READ:
            // Read a byte from the I2C bus and put it in
            // TheControl-&gt;Data
            break;
        case I2C_COMMAND_WRITE:
            // Send the byte in TheControl-&gt;Data to the I2C bus
            break;
    }
}
 </PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Implementing%20the%20I2C%20Interface"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
