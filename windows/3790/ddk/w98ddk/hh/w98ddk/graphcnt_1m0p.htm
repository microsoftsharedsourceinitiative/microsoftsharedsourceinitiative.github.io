<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GDIINFO</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_789"></A>GDIINFO</H1>

<PRE>typedef struct tagGDIINFO {
    short int           dpVersion;
    short int           dpTechnology;
    short int           dpHorzSize;
    short int           dpVertSize;
    short int           dpHorzRes;
    short int           dpVertRes;
    short int           dpBitsPixel;
    short int           dpPlanes;
    short int           dpNumBrushes;
    short int           dpNumPens;
    short int           dpCapsFE;
    short int           dpNumFonts;
    short int           dpNumColors;
    short int           dpDEVICEsize;
    unsigned short int  dpCurves;
    unsigned short int  dpLines;
    unsigned short int  dpPolygonals
    unsigned short int  dpText;
    unsigned short int  dpClip;
    unsigned short int  dpRaster;
    short int           dpAspectX;
    short int           dpAspectY;
    short int           dpAspectXY;
    short int           dpStyleLen;
    POINT               dpMLoWin;
    POINT               dpMLoVpt;
    POINT               dpMHiWin;
    POINT               dpMHiVpt;
    POINT               dpELoWin;
    POINT               dpELoVpt;
    POINT               dpEHiWin;
    POINT               dpEHiVpt;
    POINT               dpTwpWin;
    POINT               dpTwpVpt;
    short int           dpLogPixelsX;
    short int           dpLogPixelsY;
    short int           dpDCManage;
    unsigned short int  dpCaps1;
    long                dpSpotSizeX;
    long                dpSpotSizeY;
    short int           dpNumPalReg;
    short int           dpPalReserved;
    short int           dpColorRes;
} GDIINFO;
 </PRE>

<P>Contains information about the graphics device supported by a device driver. GDI retrieves this structure when it loads the driver and uses the information in the structure to initialize the driver. 

<DL>
<DT><B>dpVersion</B> </DT>

<DD>Version number. The high-order byte specifies the major version, the low-order byte the minor version. For example, in a device driver developed for Windows® 3.1, this member should contain 0x030A. </DD>

<DT><B>dpTechnology</B> </DT>

<DD>Device technology. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>DT_PLOTTER (0) </TD>
<TD width=57%>Vector plotter </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>DT_RASDISPLAY (1) </TD>
<TD width=57%>Raster display </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>DT_RASPRINTER (2) </TD>
<TD width=57%>Raster printer </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. 
</DD>

<DT><B>dpHorzSize</B> </DT>

<DD>Width, in millimeters, of the physical display surface. </DD>

<DT><B>dpVertSize</B> </DT>

<DD>Height, in millimeters, of the physical display surface. </DD>

<DT><B>dpHorzRes</B> </DT>

<DD>Width, in pixels, of the display surface. For nonraster devices, this width is equivalent to the number of vertical grid lines used by the device to plot points on the display surface. In such cases, a pixel is defined to be the smallest mark the device can draw. </DD>

<DT><B>dpVertRes</B> </DT>

<DD>Height, in raster lines, of the display. For nonraster devices, this height is equivalent to the number of horizontal grid lines used by the device to plot points on the display surface. In such cases, a raster line is equivalent to a gridline. </DD>

<DT><B>dpBitsPixel</B> </DT>

<DD>Number of adjacent bits on each plane required to define a single pixel. </DD>

<DT><B>dpPlanes</B> </DT>

<DD>Number of planes required to define the pixels. For a typical raster device with red, green, and blue bit planes (such as a 3-plane EGA), this member is 3. </DD>

<DT><B>dpNumBrushes</B> </DT>

<DD>Number of device-specific brushes supported by the device. </DD>

<DT><B>dpNumPens</B> </DT>

<DD>Number of device-specific pens supported by the device. </DD>

<DT><B>dpCapsFE</B> </DT>

<DD>Capability bits for East Asian fonts. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>FEC_TT_DBCS (0x0020) </TD>
<TD width=57%>Can output DBCS True Type fonts </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>FEC_WIFE_ABLE (0x0080) </TD>
<TD width=57%>Can handle WIFE font as Engine font </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>dpNumFonts</B> </DT>

<DD>Number of device-specific fonts supported by the device. </DD>

<DT><B>dpNumColors</B> </DT>

<DD>Number of entries in the color table for the device or the number of reserved colors for a palette-capable device. </DD>

<DT><B>dpDEVICEsize</B> </DT>

<DD>Size, in bytes, of the <B>PDEVICE</B> structure for this device. It must be at least two bytes. </DD>

<DT><B>dpCurves</B> </DT>

<DD>Curve-drawing capabilities. This member specifies the types of curves a device can draw, whether the interior of those figures that can be handled can be brushed in, and whether the borders of those figures that can be handled can be drawn with wide lines, styled lines, or lines that are both wide and styled. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>CC_NONE (0x0000) </TD>
<TD width=57%>Curves not supported. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_CIRCLES (0x0001) </TD>
<TD width=57%>Draws circles. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_PIE (0x0002) </TD>
<TD width=57%>Draws pie wedges. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_CHORD (0x0004) </TD>
<TD width=57%>Draws chord arcs. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_ELLIPSES (0x0008) </TD>
<TD width=57%>Draws ellipses. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_WIDE (0x0010) </TD>
<TD width=57%>Draws wide lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_STYLED (0x0020) </TD>
<TD width=57%>Draws styled lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_WIDESTYLED (0x0040) </TD>
<TD width=57%>Draws lines that are wide and styled. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_INTERIORS (0x0080) </TD>
<TD width=57%>Draws interiors. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_ROUNDRECT (0x0100) </TD>
<TD width=57%>Draws round rectangles. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CC_POLYBEZIER (0x0200) </TD>
<TD width=57%>Draws poly Bezier splines. </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. 
</DD>

<DT><B>dpLines</B> </DT>

<DD>Polyline and line-drawing capabilities. This member also specifies the types of lines a device can draw, whether the interior of figures can be brushed in, and whether the borders of figures can be drawn with wide lines, styled lines, or lines that are both wide and styled. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>LC_NONE (0x0000) </TD>
<TD width=57%>Lines not supported. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_POLYSCANLINE (0x0001) </TD>
<TD width=57%>Draws a group of scanlines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_POLYLINE (0x0002) </TD>
<TD width=57%>Draws polylines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_WIDE (0x0010) </TD>
<TD width=57%>Draws wide lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_STYLED (0x0020) </TD>
<TD width=57%>Draws styled lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_WIDESTYLED (0x0040) </TD>
<TD width=57%>Draws wide styled lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>LC_INTERIORS (0x0080) </TD>
<TD width=57%>Draws interiors. </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. The high-order byte must be zero. 
</DD>

<DT><B>dpPolygonals</B> </DT>

<DD>Polygon-, rectangle-, and scan-line drawing capabilities. This member also specifies whether the interior of those figures that can be handled can be brushed in, and whether the borders of those figures that can be handled can be drawn with wide lines, styled lines, or lines that are both wide and styled. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>PC_NONE (0x0000) </TD>
<TD width=57%>Polygons not supported. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_ALTPOLYGON (0x0001) </TD>
<TD width=57%>Draws alternate-fill polygons. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_RECTANGLE (0x0002) </TD>
<TD width=57%>Draws rectangles. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_WINDPOLYGON (0x0004) </TD>
<TD width=57%>Draws winding-number-fill polygons. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_SCANLINE (0x0008) </TD>
<TD width=57%>Draws scan lines. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_WIDE (0x0010) </TD>
<TD width=57%>Draws wide borders. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_STYLED (0x0020) </TD>
<TD width=57%>Draws styled borders. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_WIDESTYLED (0x0040) </TD>
<TD width=57%>Draws borders that are wide and styled. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_INTERIORS (0x0080) </TD>
<TD width=57%>Draws interiors. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_POLYPOLYGON (0x0100) </TD>
<TD width=57%>Draws multiple polygons. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PC_PATHS (0x0200) </TD>
<TD width=57%>Draws paths. </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. The high byte must be zero. 
</DD>

<DT><B>dpText</B> </DT>

<DD>Level of text support the device driver provides. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=34%>TC_OP_CHARACTER (0x0001) </TD>
<TD width=66%>Generates character-precision text. If this value is not given (or implied by the TC_OP_STROKE value), the driver can generate string-precision text only. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_OP_STROKE (0x0002) </TD>
<TD width=66%>Generates stroke-precision text. This value implies the TC_OP_CHARACTER value. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_CP_STROKE (0x0004) </TD>
<TD width=66%>Draws partially clipped characters. If this value is not given, the character must be entirely within the clip region to be drawn. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_CR_90 (0x0008) </TD>
<TD width=66%>Rotates characters in 90-degree increments. If this value is not given (or implied by the TC_CR_ANY value), the driver cannot rotate text. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_CR_ANY (0x0010) </TD>
<TD width=66%>Rotates characters to any angle. This value implies the TC_CR_90 value. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_SF_X_YINDEP (0x0020) </TD>
<TD width=66%>Scales characters independently along the x- and y-axes. If this value is not given, the driver may be able to scale characters but not independently along the axes. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_SA_DOUBLE (0x0040) </TD>
<TD width=66%>Scales characters by doubling. If this value is not given (or implied by the TC_SA_INTEGER or TC_SA_CONTIN values), the driver cannot scale text. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_SA_INTEGER (0x0080) </TD>
<TD width=66%>Scales characters by integral multiples. This value implies the TC_SA_DOUBLE value. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_SA_CONTIN (0x0100) </TD>
<TD width=66%>Scales characters by any multiple. This value implies the TC_SA_DOUBLE and TC_SA_INTEGER values. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_EA_DOUBLE (0x0200) </TD>
<TD width=66%>Generates bold characters by doubling the weight. If this value is not given, the driver cannot modify character weights. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_IA_ABLE (0x0400) </TD>
<TD width=66%>Generates italic characters by skewing. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_UA_ABLE (0x0800) </TD>
<TD width=66%>Generates underlined characters. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_SO_ABLE (0x1000) </TD>
<TD width=66%>Generates struck-out characters. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_RA_ABLE (0x2000) </TD>
<TD width=66%>Can use raster fonts to generate text. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_VA_ABLE (0x4000) </TD>
<TD width=66%>Can use vector fonts to generate text. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_RESERVED (0x8000) </TD>
<TD width=66%>Reserved; must be zero. </TD>
</TR>
</TABLE><BR>



<P>If one of these values is specified, the device must support that capability for all fonts, whether realized by the device or provided by GDI. 
</DD>

<DT><B>dpClip</B> </DT>

<DD>Clipping capabilities. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=34%>CP_NONE (0) </TD>
<TD width=66%>Cannot clip. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CP_RECTANGLE (1) </TD>
<TD width=66%>Can clip using a single rectangle. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CP_REGION (2) </TD>
<TD width=66%>Not supported. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CP_REGION32 (4) </TD>
<TD width=66%>The driver will receive one of three values for <I>lpClipRect</I>: NULL (meaning cannot clip), or a far pointer to either a <B>REGION</B> or a <B>RECT</B> structure. (If rgn_id is 0x8000 it is a <B>REGION</B> structure; otherwise, it is a <B>RECT</B> structure.) </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>dpRaster</B> </DT>

<DD>Raster capabilities. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=34%>RC_NONE (0x0000) </TD>
<TD width=66%>No raster capabilities. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_BITBLT (0x0001) </TD>
<TD width=66%>Can transfer bitmaps. The driver exports the <B>BitBlt</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_BANDING (0x0002) </TD>
<TD width=66%>Requires banding support. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_SCALING (0x0004) </TD>
<TD width=66%>Requires scaling support. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_SAVEBITMAP (0x0040) </TD>
<TD width=66%>Saves bitmaps locally in shadow memory. The driver exports the <B>SaveScreenBitmap</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_PALETTE (0x0100) </TD>
<TD width=66%>Does color-palette management. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_DIBTODEV (0x0200) </TD>
<TD width=66%>Transfers DIBs directly to device. The driver exports the <B>SetDIBitsToDevice</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_BIGFONT (0x0400) </TD>
<TD width=66%>Supports Windows 3.<I>x</I> fonts. If this value is not given, GDI ensures that the driver receives Windows 2.<I>x</I> fonts only. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_STRETCHBLT (0x0800) </TD>
<TD width=66%>Stretches and compresses bitmaps while transferring the bitmap. The driver exports the <B>StretchBlt</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_FLOODFILL (0x1000) </TD>
<TD width=66%>Perform flood filling. The driver exports the <B>FloodFill</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_STRETCHDIB (0x2000) </TD>
<TD width=66%>Stretches and compresses device-independent bitmaps while transferring the bitmap. The driver exports the <B>StretchDIBits</B> function. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RC_DEVBITS (0x8000) </TD>
<TD width=66%>Supports device bitmaps. Driver exports the <B>BitmapBits</B> and <B>SelectBitmap</B> function. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>dpAspectX</B> </DT>

<DD>Relative width of a device pixel. This value, in the range 1 through 1000, helps specify the device's aspect ratio. </DD>

<DT><B>dpAspectY</B> </DT>

<DD>Relative height of a device pixel. This value, in the range 1 through 1000, helps specify the device's aspect ratio. </DD>

<DT><B>dpAspectXY</B> </DT>

<DD>Relative diagonal width of a device pixel. This value, in the range 1 through 1000, helps specify the device's aspect ratio. It must be equal to the square root of the sum of the squares of <B>dpAspectX</B> and <B>dpAspectY</B>. </DD>

<DT><B>dpStyleLen</B> </DT>

<DD>Minimum length of a dot generated by a styled pen. The length is relative to the width of a device pixel and should be given in the same units as <B>dpAspectX</B>. For example, if <B>dpAspectX</B> is 5 and the minimum length required is 3 pixels, <B>dpStyleLen</B> should be 15. </DD>

<DT><B>dpMLoWin</B> </DT>

<DD>Width and height of the metric (low resolution) window. The width is <B>dpHorzSize</B>*10; the height is <B>dpVertSize</B>*10. </DD>

<DT><B>dpMLoVpt</B> </DT>

<DD>Horizontal and vertical resolutions of the metric (low resolution) viewport. The horizontal resolution is <B>dpHorzRes</B>; the vertical resolution is <B>dpVertRes</B>. </DD>

<DT><B>dpMHiWin</B> </DT>

<DD>Width and height of the metric (high resolution) window. The width is <B>dpHorzSize</B>*100; the height is <B>dpVertSize</B>*100. </DD>

<DT><B>dpMHiVpt</B> </DT>

<DD>Horizontal and vertical resolutions of the metric (high resolution) viewport. The horizontal resolution is <B>dpHorzRes</B>; the vertical resolution is <B>dpVertRes</B>. </DD>

<DT><B>dpELoWin</B> </DT>

<DD>Width and height of the English (low resolution) window. The width is <B>dpHorzSize</B>*1000; the height is <B>dpVertSize</B>*1000. </DD>

<DT><B>dpELoVpt</B> </DT>

<DD>Horizontal and vertical resolutions of the English (low resolution) viewport. The horizontal resolution is <B>dpHorzRes</B>*254; the vertical resolution is <B>dpVertRes</B>*254. </DD>

<DT><B>dpEHiWin</B> </DT>

<DD>Width and height of the English (high resolution) window. The width is <B>dpHorzSize</B>*10,000; the height is <B>dpVertSize</B>*10,000. </DD>

<DT><B>dpEHiVpt</B> </DT>

<DD>Horizontal and vertical resolutions of the English (high resolution) viewport. The horizontal resolution is <B>dpHorzRes</B>*254; the vertical resolution is <B>dpVertRes</B>*254. </DD>

<DT><B>dpTwpWin</B> </DT>

<DD>Width and height of the twip window. There are 20 twips per 1 printer's point and 72 printer's points per inch. The width is <B>dpHorzSize</B>*14400; the height is <B>dpVertSize</B>*14400. </DD>

<DT><B>dpTwpVpt</B> </DT>

<DD>Horizontal and vertical resolutions of the twip viewport. The horizontal resolution is <B>dpHorzRes</B>*254; the vertical resolution is <B>dpVertRes</B>*254. </DD>

<DT><B>dpLogPixelsX</B> </DT>

<DD>Number of pixels per logical inch along a horizontal line on the display surface. This value is used to match fonts. </DD>

<DT><B>dpLogPixelsY</B> </DT>

<DD>Number of pixels per logical inch along a vertical line on the display surface. This value is used to match fonts. </DD>

<DT><B>dpDCManage</B> </DT>

<DD>Device-context management capabilities. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=34%>0x0000 </TD>
<TD width=66%>Driver allows multiple DCs. It creates a new <B>PDEVICE</B> structure for each DC that specifies a new device and filename pair, but uses the same <B>PDEVICE</B> structure for any subsequent DCs that specify the same device and filename pair. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DC_SPDEVICE (0x0001) </TD>
<TD width=66%>Driver allows multiple DCs but it creates a new <B>PDEVICE</B> structure for each DC regardless of whether the device and filename pairs are the same. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DC_1PDEVICE (0x0002) </TD>
<TD width=66%>Driver allows multiple DCs but only if all DCs have unique device and filename pairs. The driver creates a <B>PDEVICE</B> structure for each DC. The driver returns an error on any attempt to create a second DC with an existing device and filename pair. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DC_IGNOREDFNP (0x0004) </TD>
<TD width=66%>Driver allows multiple DCs but only creates one <B>PDEVICE</B> structure . All DCs share the same <B>PDEVICE</B> structure regardless of the device and filename pairs. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>0x0006 </TD>
<TD width=66%>Driver allows only one DC. The driver returns an error on any attempt to create a second DC. </TD>
</TR>
</TABLE><BR>



<P>The values 0x0003, 0x0005, and 0x0007 are not valid and must not be used. 
</DD>

<DT><B>dpCaps1</B> </DT>

<DD>Additional raster abilities. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=34%>C1_TRANSPARENT (0x0001) </TD>
<TD width=66%>Driver supports transparent BitBlts. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TC_TT_ABLE (0x0002) </TD>
<TD width=66%>Informs GDI that the driver is capable of producing TrueType as raster fonts. The driver must call the <B>dmExtTextOut</B> function to draw the raster font into the bitmap. The value is similar to TC_RA_ABLE. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_TT_CR_ANY (0x0004) </TD>
<TD width=66%>Driver can rotate TrueType fonts. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_EMF_COMPLIANT (0x0008) </TD>
<TD width=66%>Driver supports metafile spooling. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_DIBENGINE (0x0010) </TD>
<TD width=66%>Driver is DIB engine compliant. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_GAMMA_RAMP (0x0020) </TD>
<TD width=66%>Driver supports gamma ramp setting. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_ICM (0x0040) </TD>
<TD width=66%>Driver does some form of ICM support. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_REINIT_ABLE (0x0080) </TD>
<TD width=66%>Driver supports ReEnable call. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_GLYPH_INDEX (0x0100) </TD>
<TD width=66%>Driver supports glyph index fonts. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_BIT_PACKED (0x0200) </TD>
<TD width=66%>Driver supports bit-packed glyphs. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_BYTE_PACKED (0x0400) </TD>
<TD width=66%>Driver supports byte-packed glyphs. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_COLORCURSOR (0x0800) </TD>
<TD width=66%>Driver supports color-cursors and async <B>SetCursors.</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_CMYK_ABLE (0x1000) </TD>
<TD width=66%>Driver supports CMYK <B>COLOREF</B> structures. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>C1_SLOW_CARD (0x2000) </TD>
<TD width=66%>Driver has little or no acceleration (for example, VGA). </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. 
</DD>

<DT><B>dpSpotSizeX</B> </DT>

<DD>Horizontal spot size for TrueType fonts on this device. </DD>

<DT><B>dpSpotSizeY</B> </DT>

<DD>Vertical spot size for TrueType fonts on this device. </DD>

<DT><B>dpNumPalReg</B> </DT>

<DD>Number of entries in the device's palette. This is the total number of simultaneous colors available for palette-capable devices. Nonpalette-capable devices ignore this value. </DD>

<DT><B>dpPalReserved</B> </DT>

<DD>Even number of reserved system colors available for palette-capable devices. Nonpalette-capable devices ignore this value. </DD>

<DT><B>dpColorRes</B> </DT>

<DD>Palette resolution, which equals the number of bits going into video DACS. Nonpalette-capable devices ignore this value. 
</DD>
</DL>

<P>The <B>dpText</B> member requires that for each precision level the precision levels below are also set. For example, the TC_SA_INTEGER value requires that the TC_SA_DOUBLE value be set, and the TC_SA_CONTIN value requires that all three values be set. Because the lowest precision level of each capability be supported, no value is provided in <B>dpText</B> for the lowest level of each capability. </P>

<P>The <B>dpAspectX</B>, <B>dpAspectY</B>, and <B>dpAspectXY</B> members specify the relative width, height, and diagonal width of a device pixel and correspond directly to the device's aspect ratio. For devices whose pixels do not have integral diagonal widths, the member values can be multiplied by a convenient factor to preserve information. For example, pixels on a device with a 1 to 1 aspect ratio have a diagonal width of 1.414. For reasonable results, the aspect members should be set to 100, 100, and 141, respectively. For numerical stability, the member values should be kept under 1000. </P>

<P>The window/viewport pair members are the numerator and denominator of the scale fraction used to correct for the device aspect ratio, and to set to a fixed unit of measurement, either metric or English. These numbers should be integers in the range of -32768 through 32767. When calculating these constants, out-of-range values can be divided by some number to bring them back into range as long as the corresponding window or viewport constant is divided by the same number. </P>

<P>The <B>dpRaster</B> member is also used to specify scaling support. If the RC_SCALING value is set, the device does graphics scaling. Certain devices perform graphics at one resolution and text at another. Some applications require that character cells be an integral number of pixels. If a device reports that its graphics resolution is 75 dpi but its text resolution is 300 dpi, its character cells are not an integral number of pixels (because they are digitized at 300 dpi). To get around this problem, GDI uses scaling devices. The device driver registers itself as a 300 dpi device but all the graphics at 300 dpi are scaled to 75 dpi. Any device that scales must have the RC_SCALING value set. Scaling always reduces the resolution; it never increases it. GDI calls the <B>Control</B> function with GETSCALINGFACTOR escape before output to a device. The scaling factor is a shift count that is a power of two. Therefore, a scaling factor of 2 means "reduce by 4", and a scaling factor of 1 means "reduce by 2". Scaling devices are strongly discouraged because compatible bitmaps to scaling devices cannot image both graphics and text. </P>

<P>The number of reserved colors on the palette is always 20, with 16 corresponding to the VGA colors and 4 special colors. Half of the reserved palette colors are placed at the beginning and half at the end of the palette. </P>

<H4>See Also</H4>

<P><B>Enable</B>, <B>PDEVICE</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: GDIINFO"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
