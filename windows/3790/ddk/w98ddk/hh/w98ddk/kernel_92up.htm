<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Nested Execution</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_1461"></A>Nested Execution</H3>

<P>Often, a virtual device (VxD) handles an interrupt or fault by calling code in a virtual machine (VM). The code might be an MS-DOS routine or a BIOS interrupt handler, for example. When the virtual device calls into the virtual machine, it must do so within the context of a nested execution block, which is a block of code delimited by calls to <B>Begin_Nest_Exec</B> (or <B>Begin_Nest_V86_Exec</B>) and <B>End_Nest_Exec</B>. </P>

<P><B>Begin_Nest_Exec</B> changes the execution mode of the virtual machine to the mode of the application running in the VM. For example, if the virtual machine is running a protected-mode program but happens to be in V86 mode at the moment, <B>Begin_Nest_Exec</B> changes the virtual machine to protected-mode. <B>Begin_Nest_Exec</B> is typically used to call callback procedures registered by an application. </P>

<P><B>Begin_Nest_V86_Exec</B> is like <B>Begin_Nest_Exec</B>, except that it forces the mode of the virtual machine to V86-mode, even if the program running in the virtual machine is a protected-mode program. <B>Begin_Nest_V86_Exec</B> is typically used to call the BIOS, a TSR, or other V86-mode code. </P>

<P><B>End_Nest_Exec</B> restores the virtual machine to its original mode, regardless of how nested execution was entered. </P>

<P>The code in the virtual machine can modify the virtual machines registers. It is rarely desirable that changes to the registers resulting from nested execution be propagated back to the virtual machine when nested execution is complete. To be able to restore the state of the virtual machine after the code executes, a virtual device must save the state of the virtual machine's registers before entering a nested execution block. To save the registers, a virtual device can use the <B>Save_Client_State</B> service, which stores the registers in a buffer, or the <B>Push_Client_State</B> macro, which pushes the registers onto the virtual device's stack. After completing the nested execution block, the virtual device can restore the registers by calling the <B>Restore_Client_State</B> service or using the <B>Pop_Client_State</B> macro. </P>

<P>Once inside a nested execution block, a virtual device uses simulation services, followed by the <B>Resume_Exec</B> service to call into a virtual machine. Alternatively, a virtual machine can use the <B>Exec_Int</B> service, which combines the functionality of <B>Simulate_Int</B> and <B>Resume_Exec</B>. Multiple calls to <B>Resume_Exec</B> can occur while inside a single nested execution block; you don't need to exit and re-enter nested execution if you need to simulate multiple operations. </P>

<P>For the curious: So how does your virtual device manage to regain control after a <B>Resume_Exec</B>? When <B>Begin_Nest_Exec</B> or <B>Begin_Nest_V86_Exec</B> is called, the virtual machine manager changes the mode of the virtual machine, then points the client CS:EIP registers at a pre-allocated breakpoint address. When far calls or interrupts are simulated, this breakpoint gets pushed onto the client's stack as the return address. Then when the simulated call or interrupt returns, it returns to this breakpoint address, at which point the virtual machine manager regains control, does some bookkeeping, and returns control to your virtual device. When <B>End_Nest_Exec</B> is called, the mode of the virtual machine is restored, and the original CS:EIP is replaced. This information is provided to aid in understanding nested execution; Microsoft reserves the right to alter the details of the implementation in future versions of Windows, so you shouldn't rely on it. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Nested%20Execution"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
