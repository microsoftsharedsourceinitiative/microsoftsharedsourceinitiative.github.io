<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Frame Buffer and Cursor Access</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_504"></A>Frame Buffer and Cursor Access</H2>

<P>The DIB engine provides the <B>DIB_BeginAccess</B> and <B>DIB_EndAccess</B> functions to support exclusion and restoration of the software cursor implemented by the DIB engine. These functions are also used to support controlled access to the frame buffer of the display adapter. </P>

<P>The minidriver excludes cursor drawing by specifying the exclusion rectangle in a call to the <B>DIB_BeginAccess</B> function. In this case, the <I>Flags</I> parameter of the function must be set to CURSOREXCLUDE. The minidriver removes the exclusion rectangle by calling the <B>DIB_BeginAccess</B> function with the CURSOREXCLUDE value. </P>

<P>To support controlled access to the frame buffer, the minidriver must set the <B>deBeginAccess</B> and <B>deEndAccess</B> fields of its <B>PDEVICE</B> structure to the addresses of its <B>BeginAccess</B> and <B>EndAccess</B> callback functions. If these fields are non-zero, the DIB engine calls the callback functions before and after accessing the device's frame buffer with the FB_ACCESS value. The purpose of the <B>BeginAccess</B> and <B>EndAccess</B> callback functions is to allow an accelerator to become idle before letting the DIB engine touch the screen. </P>

<P>The return value and parameters for the <B>BeginAccess</B> and <B>EndAccess</B> callback functions are identical to those for the <B>DIB_BeginAccess</B> and <B>DIB_EndAccess</B> functions. </P>

<P>Drivers use the BUSY bit to disable the frame buffer when switched away to a non-Windows application running in the full screen. In addition, drivers should set this bit whenever exclusive access to the frame buffer is needed. For example, a driver might have to put the adapter into a special mode to handle a fast bit-block transfer. While in this mode, the driver should set the BUSY bit so that no asynchronous event (for example, a software cursor in the DIB engine) attempts to write to the screen. The driver does not need to set the BUSY bit when <B>BeginAccess</B> is called. The BUSY bit must only be set when the system VM is switched to the background or when it is necessary to protect the screen from asynchronous drawing. </P>

<P class=note><B>Note</B>&nbsp;&nbsp;Future versions of the DIB engine may draw directly on the display framebuffer. The busy bit in deFlags will be the only mechanism to determine if the frame buffer is accessible. If your driver does not set this bit correctly, it may not work with future versions of the DIB engine. New drawing code in the DIB engine is not necessarily limited to synchronous, new DDI-type functions. Asynchronous drawing code (for example, a second cursor) may be added, which means a driver may need to set or clear the busy bit even if it is running with a hardware cursor. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Frame%20Buffer%20and%20Cursor%20Access"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
