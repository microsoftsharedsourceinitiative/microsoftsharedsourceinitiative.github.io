<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Hook_PM_Fault</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1492"></A>Hook_PM_Fault</H1>

<PRE>include vmm.inc

mov     eax, FaultNo          ; fault number to hook
mov     esi, OFFSET32 FaultProc ; points to a fault handler
VMMCall Hook_PM_Fault

jc      not_installed           ; carry flag set if not installed
; The following line is optional. See the following comments section.
mov     [Previous], esi         ; points to previous fault handler (if any)
 </PRE>

<P>Installs a fault handler procedure for faults encountered by protected mode applications. Virtual devices typically install fault handlers while processing the <B>Sys_Critical_Init</B> control message to handle faults, such as general protection faults, that the VMM fault handlers cannot handle. The VMM installs its fault handlers only after the <B>Sys_Critical_Init</B> control message. Virtual devices install fault handlers after <B>Sys_Critical_Init</B> to handle faults before the fault is passed to the VMM fault handlers. Uses ESI, Flags. 

<UL>
	<LI>Returns with the carry flag clear if successful, set otherwise. If the carry flag is clear, and if FaultProc is a hook procedure, the address of the previous handler is stored into the hook variable. If there was no previous handler, the address of the default handler is stored in the hook variable. Whether or not FaultProc is a hook procedure, the ESI register contains the address of the previous fault handler (zero if there was no previous handler). The return value in ESI exists solely for backwards compatibility with Windows 3.1. </LI>
</UL>

<DL>
<DT><I>FaultNo</I></DT>

<DD>Fault number for which to install the fault handler. The fault number cannot be 02h.

<TABLE border=1 frame=box rules=all>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT><B>Interrupt range (hex)</B></DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT><B>Description</B></DT>
</DL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT>0-1F</DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT>Intel processor faults</DT>
</DL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT>20-3F</DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT>Windows faults</DT>
</DL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT>40-41</DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT>Debugger</DT>
</DL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT>42-4F</DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT>Not used</DT>
</DL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>
<DL>
<DT>50-5F</DT>
</DL>
</TD>
<TD width=77%>
<DL>
<DT>VPICD-reserved (hardware interrupt vectors).  If you hook these you should ensure that the behavior of your hook does not interfere with the normal operation of VPICD.</DT>
</DL>
</TD>
</TR>
</TABLE>
</DD>

<DT></DT>

<DT><I>FaultProc</I></DT>

<DD>Points to the fault handler to install, which should be a hook procedure in order to be compatible with future versions of Windows. For more information about the handler, see below. 
</DD>
</DL>

<P>A virtual device can install a fault handler while processing the <B>Sys_Critical_Init</B> message or at a later time. When a fault occurs, fault handlers installed after the <B>Sys_Critical_Init</B> message receive control first, the VMM fault handlers receive control next, and fault handlers installed during the <B>Sys_Critical_Init</B> message receive control last. (Of course, dynamically-loaded VxDs have no choice but to install the fault handler after <B>Sys_Critical_Init</B>, since they haven't yet been loaded at the time the <B>Sys_Critical_Init</B> message is broadcast. </P>

<P>The system disables interrupts, and calls the fault handler as follows: </P>

<PRE>mov     ebx, VM                 ; current VM handle
mov     ebp, OFFSET32 crs       ; points to a Client_Reg_Struc
call    [FaultProc]
 </PRE>

<P>The <I>VM</I> parameter is a handle identifying the current virtual machine, and the <I>crs</I> parameter points to a <B>Client_Reg_Struc</B> structure containing the register values for the current virtual machine. </P>

<P>If the fault procedure does not process the fault, it should pass the fault to the previous fault handler as stored into the hook variable, making sure that <I>all</I> registers are preserved (not just the registers containing input parameters). </P>

<P>The default fault handler calls the fault vector installed by the protected-mode application. (Protected-mode fault hooks gain control before the application sees the fault.) </P>

<P>If the fault handler processes the fault, the handler should return without chaining by executing a near <B>ret</B> instruction (not an <B>iret</B> instruction). </P>

<P>The fault handler can modify the EAX, EBX, ECX, EDX, ESI, and EDI registers. </P>

<P>Do not use this service to install a fault handler for the Non-Maskable Interrupt (NMI). Instead, a virtual device must use the <B>Get_NMI_Handler_Addr</B> and <B>Set_NMI_Handler_Addr</B> services. </P>

<P>Do not use this service to install handlers for hardware interrupts. Instead, a virtual device must use virtual PIC device services. </P>

<H4>See Also</H4>

<P><B>Hook_V86_Fault</B>, <B>Hook_VMM_Fault</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Hook_PM_Fault"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
