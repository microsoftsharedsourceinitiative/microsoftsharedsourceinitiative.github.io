<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Reset SCSI Device Command</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4132"></A>Reset SCSI Device Command</H3>

<P>Prototype: DWORD SendASPI32Command(LPSRB) </P>

<P>Declaration: LPSRB lpSRB; </P>

<P>The SendASPI32Command function with command code SC_RESET_DEV is used to send a SCSI Bus Device reset to the specified target. </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Parameter </TH>
<TD width=75%>Description </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>lpSRB </TD>
<TD width=75%>Points to the following SCSI request block </TD>
</TR>
</TABLE><BR>

<PRE>typedef struct {

 BYTE  SRB_Cmd;        // ASPI command code = SC_RESET_DEV
 BYTE  SRB_Status;     // ASPI command status byte
 BYTE  SRB_HaId;       // ASPI host adapter number
 BYTE  SRB_Flags;      // Reserved
 DWORD  SRB_Hdr_Rsvd;  // Reserved
 BYTE  SRB_Target;     // Target's SCSI ID
 BYTE  SRB_Lun;        // Target's LUN number
 BYTE  SRB_Rsvd1[12];  // Reserved for Alignment
 BYTE  SRB_HaStat;     // Host Adapter Status
 BYTE  SRB_TargStat;   // Target Status
 void  *SRB_PostProc;  // Post routine
 void  *SRB_Rsvd2;     // Reserved
 BYTE  SRB_Rsvd3[32];  // Reserved

} SRB_BusDeviceReset, *PSRB_BusDeviceReset;
</PRE>

<P>Table 4-10. Reset SCSI Device Command </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Member </TH>
<TH align=left width=75%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Cmd </TD>
<TD width=75%>[IN] This field must contain SC_RESET_DEV. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Status </TD>
<TD width=75%>[OUT] This field returns one of the following status: </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=37%>SS_PENDING </TD>
<TD width=63%>SCSI request is in progress. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_COMP </TD>
<TD width=63%>SCSI/ASPI request has completed without error. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_ABORTED </TD>
<TD width=63%>SCSI command has been aborted. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_ABORT_FAIL </TD>
<TD width=63%>SCSI command abort failed. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_ERR </TD>
<TD width=63%>SCSI command completed with an error. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_INVALID_SRB </TD>
<TD width=63%>One or more parameters in the SCSI Request Block (SRB) are set incorrectly. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>SS_INVALID_PATH_ID </TD>
<TD width=63%>SCSI ID and LUN are invalid. </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=25%>SRB_HaId </TD>
<TD width=75%>[IN] This field specifies which installed host adapter the request is intended for. Host adapter numbers are always assigned by the SCSI manager layer beginning with zero. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Flags </TD>
<TD width=75%>[IN] Reserved = zero </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Hdr_Rsvd </TD>
<TD width=75%>Reserved = zero </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Target </TD>
<TD width=75%>[IN] SCSI ID of target device. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Lun </TD>
<TD width=75%>[IN] Logical Unit Number (LUN) of device. This field is ignored by ASPI for Win32, since SCSI Bus Device resets are done on a per-target basis only. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_HaStat </TD>
<TD width=75%>[OUT] Upon completion of the SCSI command, the ASPI manager sets this field with the host adapter status to one of the following values: </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=41%>HASTAT_OK </TD>
<TD width=59%>Host adapter did not detect an error. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_TIMEOUT </TD>
<TD width=59%>The time allocated for the operation expired. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_COMMAND_TIMEOUT </TD>
<TD width=59%>SRB expired while waiting to be processed. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_SEL_TO </TD>
<TD width=59%>Selection of target timed out. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_MESSAGE_REJECT </TD>
<TD width=59%>While processing SRB, the adapter received a MESSAGE REJECT. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_BUS_RESET </TD>
<TD width=59%>A bus reset was detected. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_PARITY_ERROR </TD>
<TD width=59%>A parity error was detected. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_REQUEST_SENSE_FAILED </TD>
<TD width=59%>The adapter failed in issuing a request sense after a check condition was reported by the target device. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_DO_DU </TD>
<TD width=59%>Data overrun/underrun. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_BUS_FREE </TD>
<TD width=59%>Unexpected Bus Free. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>HASTAT_PHASE_ERR </TD>
<TD width=59%>Target Bus phase sequence failure. </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=25%>SRB_TargStat </TD>
<TD width=75%>[OUT] Upon completion of the SCSI command, the ASPI manager sets this field with the target status as follows: </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=37%>STATUS_GOOD </TD>
<TD width=63%>No target status. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>STATUS_CHKCOND </TD>
<TD width=63%>Check status (sense data is in SenseArea). </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>STATUS_BUSY </TD>
<TD width=63%>Specified Target/LUN is busy. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>STATUS_RESCONF </TD>
<TD width=63%>Reservation conflict. </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=25%>SRB_PostProc </TD>
<TD width=75%>[IN] If posting is enabled, ASPI for Win32 will post completion of an ASPI request to this function pointer. </TD>
</TR>
</TABLE><BR>

<P>Table 4-11. Return Values from Reset SCSI Device Command </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Value </TH>
<TH align=left width=75%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>SS_PENDING </TD>
<TD width=75%>SCSI request is in progress. </TD>
</TR>
</TABLE><BR>

<P><B>Example</B> </P>

<P>This example issues a SCSI bus device reset to host adapter #0, target #5. </P>

<PRE>SRB_BusDeviceReset MySRB;
 DWORD ASPIStatus;
  .
  .
 MySRB.SRB_Header   = SC_RESET_DEV;
 MySRB.SRB_HaId   = 0;
 MySRB.SRB_Flags   = 0;
 MySRB.SRB_Hdr_Rsvd  = 0;
 MySRB.SRB_Target   = 5;
 MySRB.SRB_Lun   = 0;
 ASPIStatus     = SendASPI32Command ( (LPSRB) &amp;MySRB );
  .
  .
</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Reset%20SCSI%20Device%20Command"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
