<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Plug and Play Device Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_3578"></A>Plug and Play Device Drivers</H1>

<P>An ideal Plug and Play driver has the following capabilities: 

<UL>
	<LI>Retrieves configuration information from Configuration Manager. </LI>

	<LI>Is dynamically loadable. </LI>

	<LI>Is dynamically reconfigurable. </LI>

	<LI>Requires minimal user interaction to select the proper driver. </LI>

	<LI>Reacts to system messages about the insertion or removal of new devices. </LI>

	<LI>May need to understand state information; that is, the settings for the device may need to change based on which user is logged in, whether the machine is docked or undocked (in the case of a docking station architecture) or both. </LI>
</UL>

<P>Most of the Plug and Play work required for device drivers is producing a callback entry point that the system uses to assign a configuration. For information about this entry point, see <I>Driver Callback Entry Point</I>. For a sample Plug and Play device driver, see <I>Sample Plug and Play Driver</I>. </P>

<P>Many Plug and Play system components, such as enumerators and arbitrators, will not be written by the majority of device driver writers. However, a basic understanding of what each of these components does is important for a complete understanding of how they interact. </P>

<P>Drivers for different architectures will interact with Plug and Play in different ways. Many VxDs will interact directly with Configuration Manager, but drivers that are a part of a layered driver model may get configuration information through another layer. For example, Windows 95 network drivers are based on the NDIS driver model, with extensions for Plug and Play capabilities. The net wrapper interacts with the Windows 95 configuration manager and routes the appropriate configuration information to the extended NDIS drivers. Windows 95 disk and SCSI drivers are based on the Windows NT®/Windows® 2000 SCSI mini-port model, with extensions for Plug and Play. IOS routes configuration information to these drivers. VxDs such as Virtual Display Devices can interact directly with Configuration Manager. For each of these driver models, the interface with Configuration Manager is different. However, the basic requirements are the same. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Plug%20and%20Play%20Device%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
