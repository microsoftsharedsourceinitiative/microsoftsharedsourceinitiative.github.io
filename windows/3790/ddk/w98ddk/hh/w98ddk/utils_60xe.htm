<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Installing Debug Environment</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4582"></A>Installing Debug Environment</H2>

<P>Do not depend on using the DDK’s DDKDEBUG.BAT batch file to copy debug binaries to their proper locations. Instead, copy debug binaries to the locations indicated in KB article Q163358.</P>

<P>The DDKDEBUG.BAT file was originally intended to, among other things, allow the customer to copy debug binaries from the DDK to the windows environment. The user was to type ddkdebug set to install the debug binaries, and ddkdebug restore to remove them.  </P>

<P>However, there is a bug in the ddkdebug.bat file, described in the following paragraphs.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;The KB Article, Q163358, “PRB: DDKDEBUG.BAT Copies Some Drivers to the Wrong Directory”, describes a problem in the DDKDEBUG.BAT file. A summary of this KB article follows:</P>

<P class=note>If you use the \ddk\debug\ddkdebug.bat file to set the debug environment, it does not work correctly. </P>

<P>CAUSE</P>

<P>=====</P>

<P>When you use the ddkdebug.bat file to set the debug environment, the batch file simply copies all the *.vxd files to the \windows\system\vmm32 directory. This directory is not the proper location for some of these drivers.</P>

<P>RESOLUTION</P>

<P>==========</P>

<P>Here are the correct target locations to copy the debug drivers. If debugging Golden Windows 95, the debug binaries are located in the \ddk\debug directory. If debugging Windows 95 version OSR2 (“version “B”), see the following for instructions on how to obtain the OSR2 debug binaries.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Driver file name</TH>
<TH align=left width=36%>Required target directory</TH>
<TH align=left width=41%>Comments</TH>
</TR>

<TR VALIGN="top">
<TD width=23%>bios.vxd
<P>configmg.vxd</P>

<P>ios.vxd</P>

<P>vdd.vxd</P>

<P>vdmad.vxd</P>

<P>vflatd.vxd</P>

<P>vkd.vxd</P>

<P>vmcpd.vxd</P>

<P>vmm.vxd</P>

<P>vpicd.vxd</P>

<P>vxdldr.vxd</P>
</TD>
<TD width=36%>\windows\system\vmm32</TD>
<TD width=41%>Replacements for components that were originally “bound” into vmm32.exe.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>cdtsd.vxd
<P>cdvsd.vxd</P>

<P>disktsd.vxd</P>

<P>diskvsd.vxd</P>

<P>scsiport.pdr</P>
</TD>
<TD width=36%>\windows\system\iosubsys</TD>
<TD width=41%>IOS layered hierarchy drivers</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>eisa.vxd
<P>isapnp.vxd</P>

<P>lptenum.vxd</P>

<P>ndis.vxd</P>

<P>pccard.vxd</P>

<P>pci.vxd</P>
</TD>
<TD width=36%>\windows\system</TD>
<TD width=41%>All other VxDs</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>debugcmd.tmp</TD>
<TD width=36%>\windows\system\debugcmd.vxd</TD>
<TD width=41%>Installed for additional debugger dot commands (see <I>System Dot Commands</I>,  .P).  Note that the file extension needs to be renamed from “.tmp” to “.vxd”.</TD>
</TR>
</TABLE><BR>

<P>Windows 95 Version OSR 2.1 (USB Support)</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Driver file name</TH>
<TH align=left width=36%>Required target directory</TH>
<TH align=left width=41%>Comments</TH>
</TR>

<TR VALIGN="top">
<TD width=23%>VMM.VXD
<P>VPICD.VXD</P>

<P>VXDLDR.VXD</P>

<P>NTKERN.VXD</P>
</TD>
<TD width=36%>\windows\system\vmm32</TD>
<TD width=41%>Replacements for components that were originally “bound” into vmm32.exe.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>USBD.SYS
<P>OPENHCI.SYS</P>

<P>UHCD.SYS</P>

<P>USBHUB.SYS</P>
</TD>
<TD width=36%>\windows\system</TD>
<TD width=41%>WDM driver components</TD>
</TR>
</TABLE><BR>

<P>WIN.COM starts VMM32.VxD (formerly DOS386.EXE). During setup, many standalone VxDs are bound into one large file named VMM32.VxD. The number of VxDs bound can vary from machine to machine. This is done for quicker loading. However, there is still a separate, smaller VxD called VMM32.VxD, whose job is to load static system VxDs. The “bigger” VMM32.VxD contains it. The loader VMM32.VxD will first search for and load standalone VxDs located in the path \windows\system\vmm32. These VxDs replace VxDs by the same name that were bound into VMM32.VxD at setup time. Therefore, debug binary vxds that are placed into \windows\system\vmm32 will replace their (retail build) counterparts located in the bound VMM32.VxD. Within the registry or in SYSTEM.INI, an asterisk preceding a driver name (e.g. *VPICD, *VDMAD) indicates the driver is a “child” VxD located within VMM32.VxD. The driver replacement rules, just described, also apply to these child device references.</P>

<P>The Windows 95 path \windows\system\iosubsys contains I/O Supervisor (IOS) drivers. IOS is a layered hierarchy of drivers, implementing protected-mode 32 bit disk I/O. The drivers in this path are loaded by *IOS during its DEVICE_INIT phase.</P>

<P>The Windows 95 path \windows\system contains all other VxDs. </P>

<P>If you manually copy debug binary drivers, we recommend that you back up or rename any VxD’s that go by the same name in the target path, so you can restore the normal VxDs later.</P>

<P>The original debug binaries in the original Windows 95 DDK are intended for the use with the original (Golden) version of Windows 95. If debugging Windows 95 version b (OSR2), or version 2.1 (USB / WDM support) obtain the OSR2 or OSR21 debug binaries.</P>

<P>Alternatively, go to the Microsoft Support site (http://support.microsoft.com/support) and search using the following keys: </P>

<P>My search is about: Device Drivers</P>

<P>I want to search for: osr2 debug binaries</P>

<P>You can also use DDKDEBUG.BAT to remove the system debug environment and restore the original system files, by typing ddkdebug restore. However, the same problem regarding the ddkdebug set issue still needs to be addressed.</P>

<P>The RUNWDEB.WRF file contains command-line options for the debugger. This file along with RUNWDEB.BAT is copied to the WINDOWS\SYSTEM directory (provided that files with these names are not already present in that directory). </P>

<P>Before you can use RUNWDEB.BAT, you may need to edit it to contain the correct debug settings. These settings are: </P>

<TABLE>

<TR VALIGN="top">
<TD width=7%><B>/c:</B> </TD>
<TD width=93%>Number that represents the COM port to which debug terminal is attached. For example: /c:1 </TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B>/r:</B> </TD>
<TD width=93%>Baud rate at which debug terminal will be operating. For example: /r:19200 </TD>
</TR>
</TABLE><BR>

<P>You can add any other desired command line options to this file. </P>

<P>You will likely need to edit the RUNWDEB.WRF to add <B>/s:</B> options for the symbol files of the components you intended to debug. Remember that the symbol file(s) installed must match the corresponding binary, both in (Windows 95) version and the distinction between retail or debug versions.</P>

<P>Once you have completed editing these files and verifying settings, you can start the debugger by running RUNWDEB.BAT (with one optional WDEB386 command line parameter) from the WINDOWS\SYSTEM directory. </P>

<H4>Debugging WDM Drivers</H4>

<P>All WDM debugging under Windows 95/98 should be done with a standard Windows 95 system debugger such as WDEB386 or SoftIce. Debug output from WDM drivers such as a USB driver will not be displayed in real-time, unlike other Windows 95 debug components such as VxDs. Instead all WDM debug output is written to a debug log. To view this log you must use the debug interface of NTKERN.VXD. This is accomplished by breaking into the debugger and then typing ".NTKERN". You then type "D" to dump the NTKERN debug log. Note that the log is dumped in reverse order, meaning the first debug message displayed in the log is the one most recently logged. No debug binaries are required to use the debug log in NTKERN.VXD.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Installing%20Debug%20Environment"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
