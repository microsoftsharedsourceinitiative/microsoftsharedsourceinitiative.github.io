<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RestrictedEventCallback</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1191"></A>RestrictedEventCallback</H1>

<PRE>include vmm.inc

mov     ebx, VMHandle
mov     edi, ThreadHandle
mov     edx, RefData
mov     ebp, OFFSET32 Client_Reg_Struc
call    [RestrictedEventCallback]
 </PRE>

<P>Performs programmer-defined processing of a restricted event for a virtual machine or thread. <B>RestrictedEventCallback</B> is a programmer-defined callback function installed by the <B>Call_Restricted_Event</B> service. The callback function can modify the EAX, EBX, ECX, EDX, ESI, EDI, and Flags registers. The callback function must return with interrupts enabled and the direction flag clear (up). 

<DL>
<DT><I>VMHandle</I></DT>

<DD>Handle of the current virtual machine. If a timeout occurs, this handle may not be valid. In such cases, the callback function should use the <B>Get_Cur_VM_Handle</B> service to get the handle of the current virtual machine. </DD>

<DT><I>ThreadHandle</I></DT>

<DD>Handle of the current thread. If a timeout occurs, this handle may not be valid. In such cases, the callback function should use the <B>Get_Cur_Thread_Handle</B> service to get the handle of the current thread. </DD>

<DT><I>RefData</I></DT>

<DD>Reference data supplied by the virtual machine that initiated the priority event. </DD>

<DT><I>Client_Reg_Struc</I></DT>

<DD>Address of a <B>Client_Reg_Struc</B> structure containing the contents of the virtual machine's registers. 
</DD>
</DL>

<P>If a timeout occurs, any priority boost is automatically canceled, even if the PEF_Dont_Unboost flag was specified in the Call_Restricted_Event function that initiated the event. </P>

<P>If the PEF_Time_Out bit was set when the event was scheduled, additional information is given in the flags register, as described in Call_Restricted_Event. Such an event callback procedure should begin as follows: </P>

<PRE>mov  hThisEvent, 0         ; (See 'Canceling Events')
                       ; (Must preserve carry!)
jc   Event_Timed_Out       ; Carry set means event timed out
                       ; Else event processed normally
 </PRE>

<P>For additional information about event callbacks, see <I>Event Callbacks</I>. </P>

<H4>See Also</H4>

<P><B>Call_Restricted_Event</B>, <B>Cancel_Restricted_Event</B>, <B>Client_Reg_Struc</B>, <B>Get_Cur_Thread_Handle</B>, <B>Get_Cur_VM_Handle</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RestrictedEventCallback"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
