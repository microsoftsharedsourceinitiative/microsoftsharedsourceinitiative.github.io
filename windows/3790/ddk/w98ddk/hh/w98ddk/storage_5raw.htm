<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DVT</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4258"></A>DVT</H3>

<PRE>#include &lt;dvt.h&gt;

typedef struct DVT {
    USHORT DVT_reserved_1;       // reserved for expansion to 32 bit
    ULONG  DVT_next_dvt;         // 16-bit offset to next DVT
    USHORT DVT_device_cnt;       // count of devices added/accepted
    PVOID  DVT_aer;              // addr of driver's async event routine
    ULONG  DVT_ddb;              // first DDB for this DVT
    ULONG  DVT_ddb_init;         // first DDB for this DVT/ICE
    CHAR   DVT_ascii_name[16];   // driver name
    CHAR   DVT_create_date[8];   // creation date
    CHAR   DVT_create_time[8];   // creation time
    CHAR   DVT_rev_level[4];     // revision level
    ULONG  DVT_feature_code;     // feature code
    USHORT DVT_if_requirements;  // i/f requirements
    BYTE   DVT_bus_type;         // I/O bus type; see below
    ULONG  DVT_reference_data;   // data passed in DRP upon reg
    CHAR   DVT_first_drive;      // unit number of first drive valid
                                 //  only for block devices
    CHAR   DVT_current_lgn;      // current load group number
    ULONG  DVT_LoadHandle;       // contains the VxD's load handle if
                                 //  we loaded the driver else zero
    CHAR   DVT_scsi_max_target;  // max target supported for SCSI
    CHAR   DVT_scsi_max_lun;     // max LUN supported for SCSI
    PVOID  DVT_entry_point;      // entry point into driver 
                                 //  SCSI miniport only
    UCHAR  DVT_init_count;       // # of successful AEP_INITIALIZE calls
                                 //  port drivers only
    PVOID  DVT_reserved[2];      // reserved; must be zero
} _DVT;
</PRE>

<P>Contains driver vector table information. The IOS creates a <B>DVT</B> structure for itself and then one for each driver during registration. The IOS's DVT provides a link to the first driver via the DVT_next_dvt member. The first driver can access the second driver's DVT via its DVT_next_dvt offset, and so on, providing a linked chain between the drivers' DVTs. Many of the members are set using values from the <B>DRP</B> structure provided by the driver. 

<DL>
<DT><B>DVT_bus_type</B> </DT>

<DD>Input and output bus type. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=38%>DVT_BT_ESDI </TD>
<TD width=62%>ESDI or ESDI emulator </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_BT_SCSI </TD>
<TD width=62%>SCSI or SCSI emulator </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_BT_FLOPPY </TD>
<TD width=62%>NEC FLOPPY or FLOPPY emulator </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_BT_SMART </TD>
<TD width=62%>Smart device </TD>
</TR>

<TR VALIGN="top">
<TD width=38%> DVT_BT_ABIOS </TD>
<TD width=62%>ABIOS or ABIOS emulator </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>DVT_feature_code</B> </DT>

<DD>Feature code; must match the feature code in the <B>DRP</B>. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=38%>DVT_FC_SCAN_DOWN </TD>
<TD width=62%>BIOS scans targets from high to low. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_IO_FOR_INQ_AEP </TD>
<TD width=62%>Port driver needs to send I/O through IOP in response to an AEP_DEVICE_INQUIRY function. Results in AEP_CONFIG_DCB function for inquiry DCB. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_HALF_SEC </TD>
<TD width=62%>Notify driver every half second. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_1_SEC </TD>
<TD width=62%>Notify driver every second. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_2_SECS </TD>
<TD width=62%>Notify driver every two seconds. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_4_SECS </TD>
<TD width=62%>Notify driver every four seconds. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_DYNALOAD </TD>
<TD width=62%>Driver was dynaloaded by the IOS. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_NEED_PRELOAD </TD>
<TD width=62%>Driver needs to hook I/O even before the port driver. When set, the AEP_CONFIG_DCB function is received before the port driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=38%>DVT_FC_NEED_PRE_POST_LOAD </TD>
<TD width=62%>Same as DVT_FC_NEED_PRELOAD except that the driver receives two AEP_CONFIG_DCB calls for each DCB: one call before the port driver, and another call after layer drivers before its load group have been initialized. Note that care must be taken not to insert twice in the same DCB. </TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<H4>See Also</H4>

<P><B>DRP</B>, <B>AEP</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DVT"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
