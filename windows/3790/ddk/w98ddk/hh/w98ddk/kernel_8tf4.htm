<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Event Callbacks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_1170"></A>Event Callbacks</H3>

<P>When the VMM calls an event callback function, it enters the function with the following registers set: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=18%>Register </TH>
<TH align=left width=82%>Contents </TH>
</TR>

<TR VALIGN="top">
<TD width=18%>EBX </TD>
<TD width=82%>Current VM handle </TD>
</TR>

<TR VALIGN="top">
<TD width=18%>EDX </TD>
<TD width=82%>Programmer-defined reference data specified when the event service routine was installed </TD>
</TR>

<TR VALIGN="top">
<TD width=18%>EDI </TD>
<TD width=82%>Current thread handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=18%>EBP </TD>
<TD width=82%>Client register structure </TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Interrupts </TD>
<TD width=82%>Enabled </TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Direction </TD>
<TD width=82%>Clear (up) </TD>
</TR>
</TABLE><BR>

<P class=note><B>Note</B>&nbsp;&nbsp;Some types of events can pass additional information in other registers, and other types of events do not always pass all the information listed above. Exceptions are noted. </P>

<P>The event callback procedure can modify EAX, EBX, ECX, EDX, ESI, and EDI. It must return with interrupts enabled and the direction flag cleared. </P>

<P>Since events are not synchronized with the virtual machine, the contents of the client registers are unpredictable. Altering the contents of the client registers can cause the virtual machine to get very confused. You must save the client state before modifying the client registers, then restore them before returning from the event. </P>

<P>Since event callbacks can be called while the current thread is blocked on a semaphore or other synchronization object, events should be extremely careful not to create deadlocks by attempting to claim a resource that may already be owned by the current thread. For example, consider a thread which takes a resource, then blocks waiting for some other operation to complete, with the intention of releasing the resource after the other operation has completed. While waiting for the semaphore to be signaled, that thread is used to perform an event callback is which attempts to take the same resource. The system is now deadlocked, because the event will wait indefinitely for the resource, which cannot be released until the event returns. </P>

<P>There are many important examples of this deadlock risk which are common sources of problems, so they will be given explicit attention. </P>

<P>Event callbacks may not touch pageable data or otherwise cause paging unless it can be ensured that the thread processing the event callback is not in the middle of its own swapping operation. One way to ensure this is to schedule the event as PEF_Wait_Not_Crit, because the critical section is held during paging. Another way to is to check explicitly whether paging is allowed now (e.g., <B>PAGESWAP_Test_IO_Valid</B>). Note that allocating memory from the VMM page manager or heap manager may result in paging, so services like <B>_PageAllocate</B> and <B>_HeapFree</B> are also forbidden unless it has already been determined that the thread is not paging. List management functions like <B>List_Allocate</B> are safe to call, provided the list was not created with the LF_HEAP or LF_SWAP bits. </P>

<P>Event callbacks may not access the registry unless it can be ensured that the thread processing the event callback is itself not active in the registry. This can be done by using the PEF_Wait_Not_Nested_Exec restriction on the event. </P>

<P>Even if you have ensured that blocking on a semaphore or other synchronization object will not cause a deadlock, bear in mind that blocking at event time seriously impacts the system's ability to multitask smoothly. The thread that got selected to service an event might own resources at ring 3, such as the Win16Mutex, for which other threads are waiting. (Indeed, the fact that the thread is running at all makes it much more likely that it owns such a resource.) While the event is in progress, those resources remain held by the thread even though the thread isn't doing anything with them. </P>

<P>Thus, as a general rule, you should not block at event time. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Event%20Callbacks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
