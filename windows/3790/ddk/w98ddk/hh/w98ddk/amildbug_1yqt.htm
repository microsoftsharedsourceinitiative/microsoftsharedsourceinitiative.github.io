<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Command Details</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Command Details">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_command_details_me"></A>Command Details</H3>

<P>To display the help menu for the AMLI debugger, type: </P>

<PRE>AMLI(? for help)-&gt; ?
</PRE>

<P>To find if object _BST is present in the namespace, type: </P>

<PRE>AMLI(? for help)-&gt; find _bst
\_SB.PCI0.ISA.BAT1._BST
\_SB.PCI0.ISA.BAT2._BST
</PRE>

<P>To display only the namespace for device BAT1, type: </P>

<PRE>AMLI(? for help)-&gt; dns /s \_sb.pci0.isa.bat1
</PRE>

<P>To display only the object _BST, type: </P>

<PRE>AMLI(? for help)-&gt; dns /s \_sb.pci0.isa.bat1._bst

ACPI Name Space: \_SB.PCI0.ISA.BAT1._BST (c29c2044)
Method(_BST:Flags=0x0,CodeBuff=c29c20a5,Len=103)
</PRE>

<P>To display the entire namespace, type: </P>

<PRE>AMLI(? for help)-&gt; dns
</PRE>

<P>To disassemble object _BST, type: </P>

<PRE>AMLI(? for help)-&gt; u _sb.pci0.isa.bat1._bst

c29c20a5: Acquire(\_SB_.PCI0.ISA_.EC0_.MUT1, 0xffff)
c29c20c0: Store("CMBatt - _BST.BAT1", Debug)
c29c20d7: \_SB_.PCI0.ISA_.EC0_.CPOL()
c29c20ee: Release(\_SB_.PCI0.ISA_.EC0_.MUT1)
c29c2107: Return(PBST)
</PRE>

<P>or on the address of Codebuff for _BST </P>

<PRE>AMLI(? for help)-&gt; u c29c20a5

c29c20a5: Acquire(\_SB_.PCI0.ISA_.EC0_.MUT1, 0xffff)
c29c20c0: Store("CMBatt - _BST.BAT1", Debug)
c29c20d7: \_SB_.PCI0.ISA_.EC0_.CPOL()
c29c20ee: Release(\_SB_.PCI0.ISA_.EC0_.MUT1)
c29c2107: Return(PBST)

AMLI(? for help)-&gt;
</PRE>

<P>To break into the AMLI debugger before object _BST is executed so you can step through its execution, type: </P>

<PRE>AMLI(? for help)-&gt; bp \_sb.pci0.isa.bat1._bst
</PRE>

<P>Or, you can set a breakpoint somewhere inside the method _BST and continue debugging from there. </P>

<PRE>AMLI(? for help)-&gt; u \_sb.pci0.isa.bat1._bst

c29c20a5: Acquire(\_SB_.PCI0.ISA_.EC0_.MUT1, 0xffff)
c29c20c0: Store("CMBatt - _BST.BAT1", Debug)
c29c20d7: \_SB_.PCI0.ISA_.EC0_.CPOL()
c29c20ee: Release(\_SB_.PCI0.ISA_.EC0_.MUT1)
c29c2107: Return(PBST)

AMLI(? for help)-&gt; bp c29c20ee
</PRE>

<P>To display the list of the set breakpoints, type: </P>

<PRE>AMLI(? for help)-&gt; bl
 0:  c29accf5 [\_WAK]
 1:  c29c20a5 [\_SB.PCI0.ISA.BAT1._BST]
</PRE>

<P>To disable breakpoint one so that the AMLI debugger will not trap on it during execution, type: </P>

<PRE>AMLI(? for help)-&gt; bd 1

AMLI(? for help)-&gt; bl
 0:  c29accf5 [\_WAK]
 1:  c29c20a5 [\_SB.PCI0.ISA.BAT1._BST]
</PRE>

<P>To remove or clear a breakpoint one, type: </P>

<PRE>AMLI(? for help)-&gt; bc 1
</PRE>

<P>In the example below , a breakpoint was set on the _WAK object. An "ln" will tell you the nearest method. An "lc" will tell you all the current context running. From this you can see that methods _Q09 and _WAK have the context and that _WAK is the active context, indicated by the asterisk (*). An "r" will display the context information. From this you can see useful thread and stack information as well as arguments passed to _WAK and the local data objects. </P>

<P>The Flgs are: 

<UL>
	<LI>A = Async Eval</LI>

	<LI>N = Nested Eval</LI>

	<LI>Q = In the ready queue</LI>

	<LI>C = Callback needed</LI>

	<LI>R = Running</LI>

	<LI>W = Ready</LI>

	<LI>T = Timeout</LI>

	<LI>D = Timer dispatch</LI>

	<LI>F = Flushed.</LI>
</UL>

<PRE>Running \_WAK method
Hit Breakpoint 0.
AMLI(? for help)-&gt; ln
c29accf5: \_WAK

AMLI(? for help)-&gt; lc
 Ctxt=c18b6000, ThID=00000000, Flgs=A-QC-W----, pbOp=c29bf8fe, Obj=\_SB.PCI0.ISA.EC0._Q09
*Ctxt=c18b4000, ThID=c15a6618, Flgs=----R-----, pbOp=c29accf5, Obj=\_WAK

AMLI(? for help)-&gt;  r

Context=c18b4000*, Queue=00000000, ResList=00000000
ThreadID=c15a6618, Flags=00000010
StackTop=c18b5eec, UsedStackSize=276 bytes, FreeStackSize=7636 bytes
LocalHeap=c18b40c0, CurrentHeap=c18b40c0, UsedHeapSize=88 bytes
Object=\_WAK, Scope=\_WAK, ObjectOwner=c18b4108, SyncLevel=0
AsyncCallBack=ff06b5d0, CallBackData=0, CallBackContext=c99efddc

MethodObject=\_WAK
c18b40e4: Arg0=Integer(:Value=0x00000001[1])
c18b5f3c: Local0=Unknown()
c18b5f54: Local1=Unknown()
c18b5f6c: Local2=Unknown()
c18b5f84: Local3=Unknown()
c18b5f9c: Local4=Unknown()
c18b5fb4: Local5=Unknown()
c18b5fcc: Local6=Unknown()
c18b5fe4: Local7=Unknown()
c18b4040: RetObj=Unknown()
</PRE>

<P>A "dl" will dump the event log with the bottom showing the latest object processed. A "cl" will clear the event log. </P>

<PRE>AMLI(? for help)-&gt; dl
RUN!: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000000: Ctx=c18b4000,rc=0
KICK: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000000: rc=0
SYNC: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000002,LockPhase=0,Locked=0,IRQL=00: Obj=\_WAK
ASYN: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000002,LockPhase=0,Locked=0,IRQL=00: Obj=\_WAK
REST: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000002: Ctx=c18b4000,Obj=\_WAK
INSQ: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000002: Ctx=c18b4000,Obj=\_WAK
EVAL: [c15a6618]QTh=00000000,QCt=00000000,QFg=00000002: Ctx=c18b4000,Obj=\_WAK
RUNC: [c15a6618]QTh=c15a6618,QCt=c18b4000,QFg=00000002: Ctx=c18b4000,Obj=\_WAK
</PRE>

<P>To turn up the spew from the AMLI debugger, type: </P>

<PRE>AMLI(? for help)-&gt; set verboseon

AMLI(? for help)-&gt; set traceon
</PRE>

<P>From here you can step through the AML code, watching the code execute line by line. You can also trace into AML code. </P>

<PRE>AMLI(? for help)-&gt; p

c29bfcb7: Store(\_SB_.PCI0.ISA_.ACAD.CHAC(SEL0=0x10e1)
c29c17b1: {
c29c17b1: | Store(LGreater(And(Arg0=0x10e1,0xf0,)=0xe0,0x80)=0xffffffff,Local0)=0xffffffff
AMLI(? for help)-&gt; p

c29c17bb: | If(LNot(LEqual(Local0=0xffffffff,ACP_=0xffffffff)=0xffffffff)=0x0)
c29c17ce: | {
c29c17ce: | | Return(Zero)
c29c17d0: | }
c29c17d0: },Local1)=0x0
AMLI(? for help)-&gt; t

c29bfcd4: Store(\_SB_.PCI0.ISA_.BAT1.CHBP(SEL0=0x10e1)
c29c293d: {
c29c293d: | Store("CMBatt - CHBP.BAT1",Debug)String(:Str="CMBatt - CHBP.BAT1")
="CMBatt - CHBP.BAT1"
AMLI(? for help)-&gt;
</PRE>

<P>You may also run methods from within the AMLI debugger if you choose. Here we are evaluating the status of LNKA. </P>

<PRE>AMLI(? for help)-&gt; run \_sb.lnka._sta
PCI OpRegion Access on region c29b2268 device c29b2120

\_SB.LNKA._STA completed successfully with object data:
Integer(:Value=0x0000000b[11])</PRE>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Command%20Details"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
