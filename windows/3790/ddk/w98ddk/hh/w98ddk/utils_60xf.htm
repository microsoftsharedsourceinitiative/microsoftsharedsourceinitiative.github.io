<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Starting from the Command Line</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4583"></A>Starting from the Command Line</H2>

<P>You can start the debugger from the real-mode command line by using the WDEB386 command line. (You cannot start the debugger from the command line after WIN.COM has started. To get the real-mode command line, press the F8 key as Windows starts and choose the Command Prompt Only option.) The command line has this syntax: </P>

<PRE>wdeb386 [/A] [/B] [/C:comport] [/D:"commands"] [/E] [/F:filename] [/H] [/I] [/L] [/N] [/T:hhhh] [/S:symfile] [/V[P]] [/X] winfile [parameters]
 </PRE>

<P>Following are the command-line options and parameters: </P>

<TABLE>

<TR VALIGN="top">
<TD width=19%>/<B>A</B> </TD>
<TD width=81%>Specifies that symbol files should not be automatically loaded. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/<B>B</B> </TD>
<TD width=81%>Specifies that the debugger should stop just prior to VMM initialization, after all virtual devices have been loaded and the processor is running in protected mode. This option is useful if you want to install breakpoints early. Also, if you use the debugger’s <B>.VMM s</B> command at this stop point, you can turn on verbose device tracing which displays the name of each VxD before it is called, and <B>OK</B> when the VxD returns.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/C:</B><I>comport</I> </TD>
<TD width=81%>Specifies a COM port for debugger output. You can specify "1", "2", "3", or "4" for <I>comport</I>. If this option is not specified, The debugger checks first for COM2. If COM2 is not found, the debugger then checks for COM1. If neither COM1 nor COM2 exists, the debugger checks for any other COM port in the read-only memory (ROM) data area (40:0). </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/D:"</B><I>commands</I><B>"</B> </TD>
<TD width=81%>Carries out the debugger command line specified by the string enclosed in quotation marks. Spaces, semicolons (;), and other punctuation can be included in the command string. To use a single quote (') on the command line, use double quotation marks (") before and after the single quotation mark. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>&nbsp;</TD>
<TD width=81%>The commands specified in this option are carried out after symbols are loaded. This means you can set breakpoints in code even before the code has been loaded. Before a segment or module has been loaded or defined, breakpoints can be set on the logical address (a combination of map number and group number) until the segment or module is defined, at which point the breakpoint turns into a real breakpoint. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/<B>E</B> </TD>
<TD width=81%>Specifies that the debugger should stop at real-mode entry. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/F:</B> <I>filename</I> </TD>
<TD width=81%>Specifies a file containing command-line options for the debugger. Maximum file size is 4K, and the input file cannot contain the <B>/F</B> option. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/<B>H</B> </TD>
<TD width=81%>Specifies that the debugger should be loaded as a VxD. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/<B>I</B> </TD>
<TD width=81%>Specifies that the debugger should be invisible to int 41. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/<B>L</B> </TD>
<TD width=81%>Specifies that line numbers should not be included in the .SYM file. This can make a large difference in memory use, and may be required on a machine with 4 megabytes of RAM. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/N</B> </TD>
<TD width=81%>Sets the following options: </TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=25%></TD>
<TD width=37%>dislwr </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>codebytes </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>symaddrs </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>int3line </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>newvec </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>newreg </TD>
<TD width=38%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=25%> </TD>
<TD width=37%>newprompt </TD>
<TD width=38%>&nbsp;</TD>
</TR>
</TABLE><BR>

<TABLE>

<TR VALIGN="top">
<TD width=19%>&nbsp;</TD>
<TD width=81%>For information about these options, see the <B>y</B> command in <I>Reference</I>. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/R:</B><I>dddd</I> </TD>
<TD width=81%>Sets the baud rate for the debugging terminal. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/S:</B> <I>symfile</I> </TD>
<TD width=81%>Specifies a symbol file to be loaded. This option can be repeated to load more than one symbol file. If the symbol files are not in your current directory, you must supply a full path, because the debugger does not use the PATH environment variable to locate any of the files supplied on the command line. 
<P>When memory is low, you can use more symbol files by running the Debugger in the Windows directory and specifying the full path of VMM32.VXD (such as \WINDOWS\SYSTEM\VMM32.VXD) instead of WIN.COM. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/T:</B><I>hhhh</I> </TD>
<TD width=81%>Sets the port number for the timing card (The default number is 250h.). See MSDN Library CD: Q85897, “WDEB386-Compatible Timing Card Available”</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/V</B> </TD>
<TD width=81%>Enables verbose mode, which displays messages indicating which segments are being loaded. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/VP</B> </TD>
<TD width=81%>Enables verbose mode, which displays messages indicating which segments are being loaded. This option displays the messages for applications only. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>/X</B> </TD>
<TD width=81%>Causes symbols to be loaded into Extended Memory Specification (XMS) memory. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><I>winfile</I> </TD>
<TD width=81%>Specifies the Windows application to run under debugger control. You will usually specify WIN.COM. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><I>parameters</I> </TD>
<TD width=81%>Specifies any parameters to be passed to the application. </TD>
</TR>
</TABLE><BR>

<P>The length of the command line cannot exceed 128 characters. </P>

<P>The following example shows a valid command line: </P>

<PRE>wdeb386 /C:1 /R:9600 /F:RUNWDEB.WRF /V \windows\win.com
 </PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Starting%20from%20the%20Command%20Line"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
