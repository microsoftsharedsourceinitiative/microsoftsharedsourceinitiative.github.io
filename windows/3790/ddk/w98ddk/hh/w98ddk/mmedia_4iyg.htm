<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DriverCallback Function</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_2298"></A>DriverCallback Function</H2>

<P>Audio-device drivers need to notify clients when certain events occur, such as when a waveform data block has been played, or when a MIDI input event is received. Clients must be notified when the following conditions occur: 

<UL>
	<LI>When a device is opened. </LI>

	<LI>When a device is closed. </LI>

	<LI>hen the driver is finished with a data block. </LI>

	<LI>When the driver receives data that should be passed directly back to the application, such as when a MIDI input driver receives a MIDI event from an input port. </LI>
</UL>

<P>When the client opens a device, the client specifies how it wants to be notified. There are three ways a driver can notify a client application: 

<UL>
	<LI>By calling a client-specified callback function. </LI>

	<LI>By sending a message to a client-specified window. </LI>

	<LI>By unblocking a client-specified task. </LI>
</UL>

<P>To make the job of notifying clients easier, MMSYSTEM provides the <B>DriverCallback</B> function. <B>DriverCallback</B> takes information supplied by the client when it opened a device and notifies the client accordingly. A MIDI driver can use the function as shown in the following example to call <B>DriverCallback</B>: </P>

<PRE>void FAR PASCAL midiCallback(
   NPPORTALLOC pPortalloc,
   WORD msg,
   DWORD dwParam1,
   DWORD dwParam2)
{
   if (pPortalloc-&gt;dwCallback)
      DriverCallback
      (  pPortalloc-&gt;dwCallback,       /* users callback DWORD */
         HIWORD(pPortalloc-&gt;dwFlags),  /* callback flags */
         pPortalloc-&gt;hMidi,            /* handle to the wave device */
        msg,                           /* message from the driver */
        Portalloc-&gt;dwInstance,         /* user's instance data */
        dwParam1,                      /* message-dependent parameter */
         dwParam2                      /* message-dependent parameter */
      );
}
 </PRE>

<P>The parameter <I>pPortalloc</I> points to a structure containing the MIDI device handle, callback flags, and user instance data passed to the driver with the MODM_OPEN message. For an example of how to handle the MODM_OPEN message, see . The parameters <I>msg</I>, <I>dwParam1</I>, and <I>dwParam2</I> specify the message and message-dependent parameters the driver is sending to the client. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DriverCallback%20Function"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
