<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Starting as a VxD</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4584"></A>Starting as a VxD</H2>

<P>Running WDEB386 as a VxD requires approximately 90KB less of conventional memory than running it from the command line. Its only disadvantage is that loaded symbols aren't available until after SYS_CRITICAL_INIT. You can start the debugger as a virtual device driver by placing the following line in your CONFIG.SYS file: </P>

<PRE>device=c:\windev\wdeb386.exe
 </PRE>

<P>You must specify the full path to the WDEB386.EXE file. You can specify any command-line options on the <B>device</B> line with (for example, you can load symbol files), or you can set options by adding one or more of the following debug settings to the [386Enh] section of SYSTEM.INI: </P>

<TABLE>

<TR VALIGN="top">
<TD width=27%><B>DebugCom=</B><I>comport</I> </TD>
<TD width=73%>Sets the communications port that the debugger uses for input and output. The <I>comport</I> can be 1, 2, 3 or 4, as described for the <B>/C</B> command line option. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%><B>DebugBaud=</B><I>baudrate</I> </TD>
<TD width=73%>Sets the baud rate for the communications port used by the debugger. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%><B>DebugCmd=</B><I>parameters</I> </TD>
<TD width=73%>Lists the debugger commands to execute as the debugger starts. This is typically used to set command-line parameters. For example, use DebugCmd=y /n /b to enable new options and to initially break into debugger at SYS_CRITICAL_INIT. Multiple commands must be separated by semicolons (;). </TD>
</TR>

<TR VALIGN="top">
<TD width=27%><B>DebugSym=</B><I>symbol-files</I> </TD>
<TD width=73%>Specifies the symbol file or files to load. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%><B>DebugSymCmd=</B><I>cmds</I> </TD>
<TD width=73%>Lists the debugger commands to execute immediately after all symbols have been loaded. Multiple commands must be separated by semicolons (;). </TD>
</TR>

<TR VALIGN="top">
<TD width=27%><B>BreakInDebugVxD=</B><I>value</I> </TD>
<TD width=73%>Sets the behavior of the CTRL+C key when pressed on the debug terminal or the CTRL+ALT+SYSREQ key combination when pressed on the computer on which the debugger is running. If <I>value</I> is TRUE, pressing the key stops execution at the current instruction regardless of the privilege (ring) of the code. If FALSE, pressing the keys stops execution in ring 3 code only. The default setting if this entry is not given is TRUE. </TD>
</TR>
</TABLE><BR>

<P>If you have the Windows 95 Device Driver Development Kit, you can use the DDKDEBUG.BAT batch file to create a WDEBVXD.INS file that contains the statements that you need to add to the [386Enh] section of SYSTEM.INI. In particular, DDKDEBUG.BAT includes the DEBUGCMD.VXD file that provides additional debugging support. You may need to set the <B>DebugCom</B> and other options to appropriate values. </P>

<P>When you no longer want to run the debugger as a VxD, insert a semicolon before the device=WDEB386.EXE (and device=DEBUGCMD.VXD if present) entry in the SYSTEM.INI file. Any debug options settings you added to the file do not need a semicolon; they will be ignored on subsequent loads of Windows 95. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Starting%20as%20a%20VxD"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
