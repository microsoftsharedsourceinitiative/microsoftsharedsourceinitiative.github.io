<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Breakpoints and Callbacks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1127"></A>Breakpoints and Callbacks</H1>

<P>Breakpoints and callbacks provide a mechanism for transferring control from ring 3 to ring 0 in a controlled manner. </P>

<P>Callbacks are typically given by VxDs to applications so that the application can call back into the VxD as part of a service request. The application performs a far call indirect to the callback address. VMM will perform a Simulate_Far_Return before dispatching the callback to the VxD that installed it. The VxD typically inspects and/or modifies client registers, then returns. Execution then resumes in the application at the instruction following the "call far". </P>

<P>Breakpoints are typically installed by a VxD into existing V86-mode code that needs to be patched. When execution reaches the breakpoint, VMM dispatches the breakpoint directly to the VxD that installed it. The VxD typically inspects and/or modifies client registers, then moves the client (E)IP register past the breakpoint so as to resume execution. Note that, unlike callbacks, it is the VxD's responsibility to adjust the client (E)IP register to point to the location where execution should resume when servicing of the breakpoint is complete. If you forget to do this, the breakpoint will merely be hit again immediately. </P>

<P>Since there are no facilities for freeing breakpoints or callbacks, they should be treated as scarce resources. Dynamically-loaded VxDs which allocate callbacks should save the callback in a static data segment so a new callback is not allocated each time the VxD is loaded. </P>

<P class=note><B>Note</B>&nbsp;&nbsp;Breakpoints are supported only for V86-mode code. Moreover, protected-mode callbacks are not supported from a Win32 application. If a Win32 application needs to communicate with a VxD, it must use the DeviceIoControl mechanism. </P>

<P>There are the following break point and callback services: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=43%>Service </TH>
<TH align=left width=57%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=43%><B>Allocate_V86_Call_Back</B></TD>
<TD width=57%>Allocates a V86-mode callback. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>Allocate_PM_Call_Back</B></TD>
<TD width=57%>Allocates a protected-mode callback. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>Call_When_VM_Returns</B></TD>
<TD width=57%>Installs a return-from-interrupt callback. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>Install_V86_Break_Point</B></TD>
<TD width=57%>Installs a breakpoint callback. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>Remove_V86_Break_Point</B></TD>
<TD width=57%>Removes a V86 breakpoint. </TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Breakpoints%20and%20Callbacks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
