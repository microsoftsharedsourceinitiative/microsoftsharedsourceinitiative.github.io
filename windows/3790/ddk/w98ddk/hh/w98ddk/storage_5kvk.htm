<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Layered Block Device Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_4030"></A>Layered Block Device Drivers</H1>

<P>Layered block device drivers are 32-bit, flat-model device drivers that execute in protected mode. Windows® 95 uses layered block device drivers to manage input and output to block devices, such as disks and CD-ROM devices. These drivers support partitioned and nonpartitioned removable media as well as conventional, SCSI, and floptical floppy drives. </P>

<P>Windows 95 also uses layered block device drivers to manage the operation of existing Windows 3.1 FastDisk drivers, Windows 3.1 FastDisk clients and hookers, MS-DOS-based real mode device drivers, and SCSI miniport drivers for Windows NT®/Windows 2000 and Windows 95. </P>

<P>Windows 95 uses a variety of device driver components to support different types of devices and software support. Each component corresponds to a specific layer and has specific responsibilities and requirements. Note that in a typical configuration, only a few of the layers are required for any given device. Only the layers that are required are associated with the device when the device is initialized. </P>

<P>In Windows 95, the layered block device driver components are: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Component </TH>
<TH align=left width=19%>Item number(s) in the illustration</TH>
<TH align=left width=56%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>File system drivers (FSD) </TD>
<TD width=19%>7, 8, 9, 10</TD>
<TD width=56%>Manages the high-level I/O requests from applications. The FSD processes requests from applications and initiates low-level I/O requests through the I/O supervisor. File system drivers are provided by Microsoft. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>I/O supervisor (IOS) </TD>
<TD width=19%>13</TD>
<TD width=56%>Provides various services to file system drivers and other drivers in the system. The IOS register drivers, routes and queues I/O requests, sends asynchronous notifications to the drivers as needed, and provide services that drivers can use to allocate memory and complete I/O requests. The IOS also provides Blockdev services to support compatibility with BlockDev clients. The IOS is provided by Microsoft. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Volume tracking driver (volume tracker) </TD>
<TD width=19%>14</TD>
<TD width=56%>Works with a group of devices that share removability rules. The volume tracker ensures that the correct media is in the device and detects and reports improper media removal or insertion. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Type-specific driver (TSD) </TD>
<TD width=19%>15, 16</TD>
<TD width=56%>Works with all devices of a specific type, such as all CD-ROM devices. The TSD validates incoming I/O requests, converts logical requests to physical requests, and notifies the requester when the request is complete. The TSD may also initiate logical error recovery as needed for certain types of device, principally disk. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SCSI-izer </TD>
<TD width=19%>20, 21</TD>
<TD width=56%>Works with all SCSI devices of a given type, such as all SCSI disks. The SCSI-izer constructs SCSI Command Descriptor Blocks (CDBs) for a specific class and carries out device-level error recovery and logging. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Vendor-supplied driver (VSD) </TD>
<TD width=19%>18, 19, 22, 23, 27</TD>
<TD width=56%>Intercepts and processes I/O requests for a given block device. The VSD gives a vendor an efficient way to incorporate enhancements into an existing layered block device driver or to extend the capabilities of the driver to new but similar hardware. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SCSI port driver (SCSI manager) </TD>
<TD width=19%>26</TD>
<TD width=56%>Manages the interaction between the SCSI-izer and a SCSI miniport driver. The SCSI port driver initializes the miniport driver, converts the I/O request format, and carries out all interactions with the miniport driver. The SCSI port driver is provided by Microsoft. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Windows NT/2000 SCSI miniport driver </TD>
<TD width=19%>30, 31</TD>
<TD width=56%>Works with a specific set of SCSI adapters. The miniport driver detects and initializes the adapter, handles interrupts, transmits I/O requests to the device, and carries out adapter-level error recovery and logging. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Port driver </TD>
<TD width=19%>24, 25, 27</TD>
<TD width=56%>Works with a specific adapter, usually proprietary. For example, there are port drivers for IDE/ESDI and NEC floppy drivers. A port driver provides the same functionality as a combination of SCSI manager and miniport driver. The port driver detects and initializes the adapter, handles interrupts, transmits I/O requests to the device, and carries out adapter-level error recovery and logging. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Protect mode to real mode mapper </TD>
<TD width=19%>17</TD>
<TD width=56%>Provides the interface between a file system and an MS-DOS real mode driver. The real mode mapper manages MS-DOS-based device drivers while they operate in virtual 8086 mode. The mapper allows binary compatibility for MS-DOS drivers. The mapper is provided by Microsoft. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Real mode driver </TD>
<TD width=19%>28</TD>
<TD width=56%>An existing MS-DOS-based device driver. A real mode driver executes in virtual 8086 mode.  Used when there is no protect-mode driver for a given adapter.</TD>
</TR>
</TABLE><BR>

<P>The relative position of these different components in the layered model is shown in the following illustration. </P>

<P><IMG SRC="images/storage.gif" ALT="" BORDER=0></P>

<P>Note that the Windows 95 DDK block device documentation concentrates on disk and CD-ROM devices. For information about drivers for block devices other than disk and CD-ROM, see <I>ASPI for Win32</I>. The following abstract describes the usefulness of that documentation. </P>

<P>The Advanced SCSI Programming Interface (ASPI) has become an industry standard SCSI software interface. ASPI allows developers to write device drivers and applications that are independent of the specific host adapter platform used to connect SCSI peripherals. With ASPI, there is a single driver managing the host bus adapter, eliminating conflicts when multiple applications try to access the SCSI bus at the same time. </P>

<P><I>ASPI for Win32</I> describes the Advanced SCSI Programming Interface (ASPI) for the Win32 environment. </P>

<P>The ASPI manager for Win32 is implemented as a Dynamic Link Library (DLL) called Wnaspi32.dll. ASPI function calls can be used to retrieve information about installed SCSI host adapters and devices, and to execute SCSI I/O requests. The ASPI for Win32 layer is fully reentrant, supporting multitasking and multithreaded operations. <I>ASPI for Win32</I> defines the protocol between ASPI client applications and the ASPI Manager Wnaspi32.dll. It does not describe the protocol between Wnaspi32.dll and the target Win32 environment. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Layered%20Block%20Device%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
