<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Installing Debug Environment</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Installing Debug Environment">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_installing_debug_environment_me"></A>Installing Debug Environment </H3>

<P>Use the DbgInst utility to install the debugging environment. It will automatically create the appropriate initialization file entries, copy the appropriate files to your machine, and prompt you to reboot your debug machine. You will need to copy Rterm.exe (included in the DDK) to a separate machine for remote debugging. See the previous topics in this section for additional information on configuring Rterm and Debugger.exe.</P>

<H4>Replacing VMM32.VxD “bound” binaries</H4>

<P>During setup, many standalone VxDs are bound into one large file named VMM32.VxD. The number of VxDs bound can vary from machine to machine. This is done for quicker loading. However, there is still a separate, smaller VxD called VMM32.VxD, whose job is to load static system VxDs. The “bigger” VMM32.VxD contains it. The loader VMM32.VxD will first search for and load standalone VxDs located in the path \windows\system\vmm32. These VxDs replace VxDs by the same name that were bound into VMM32.VxD at setup time. Therefore, debug binary vxds that are placed into \windows\system\vmm32 will replace their (retail build) counterparts located in the bound VMM32.VxD. Within the registry or in SYSTEM.INI, an asterisk preceding a driver name (for example, *VPICD, *VDMAD) indicates the driver is a “child” VxD located within VMM32.VxD. The driver replacement rules, just described, also apply to these child device references.</P>

<P>The Windows 9x path \windows\system\iosubsys contains I/O Supervisor (IOS) drivers. IOS is a layered hierarchy of drivers, implementing protected-mode 32 bit disk I/O. The drivers in this path are loaded by *IOS during its DEVICE_INIT phase.</P>

<P>The Windows 9x path \windows\system contains all other VxDs. </P>

<P>If you manually copy debug binary drivers, we recommend that you back up or rename any VxD’s that go by the same name in the target path, so you can restore the normal VxDs later.</P>

<H4>Debugging WDM Drivers</H4>

<P>All WDM debugging under Windows 9x should be done with a standard Win9x system debugger such as <I>debugger.exe</I> or SoftIce. Debug output from WDM drivers such as a USB driver will not be displayed in real-time, unlike other Win95 debug components such as VxDs. Instead all WDM debug output is written to a debug log. To view this log you must use the debug interface of NTKERN.VXD. This is accomplished by breaking into the debugger and then typing "..NTKERN". You then type "D" to dump the NTKERN debug log. Note that the log is dumped in reverse order, meaning the first debug message displayed in the log is the one most recently logged. No debug binaries are required to use the debug log in NTKERN.VXD.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Installing%20Debug%20Environment"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
