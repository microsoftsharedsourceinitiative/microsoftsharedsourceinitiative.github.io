<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Device Bitmaps</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_468"></A>Device Bitmaps</H3>

<P>A device bitmap is any bitmap whose bitmap bits are stored in device memory (such as RAM on a display adapter) instead of main memory. Device bitmaps can significantly increase the performance of a graphics driver as well as free main memory for other uses. To realize these benefits, the corresponding graphics device must have ample video memory in addition to the video memory used to generate the current display. The device should also have efficient routines for copying bits to video memory. </P>

<P>The DIB engine sets the RC_DEVBITS value in the <B>dpRaster</B> member and all minidrivers are device-bitmap capable. Note that the DIB engine allocates the bitmaps in system memory. </P>

<P>Graphics drivers that set the RC_DEVBITS value in the <B>dpRaster</B> member of the <B>GDIINFO</B> structure support device bitmaps. GDI checks this bit to determine how to carry out requests to create and select bitmaps. If a driver sets the RC_DEVBITS value, it must export the following functions. Minidrivers may forward these calls to the DIB engine: 

<UL>
	<LI><B>BitmapBits</B> </LI>

	<LI><B>RealizeObject</B> </LI>

	<LI><B>SelectBitmap</B> </LI>
</UL>

<P><B>BitmapBits</B> copies bitmap data to and from device bitmaps. GDI calls this function when initializing the bitmap bits after creating the bitmap. It also calls the function when an application calls the functions such as <B>GetBitmapBits</B> (GDI.74) and <B>SetBitmapBits</B> (GDI.106). </P>

<P><B>RealizeObject</B> creates or deletes a device bitmap. GDI calls this function when creating the bitmap, specifying the OBJ_BITMAP style. <B>RealizeObject</B> is responsible for allocating memory to the device as well as filling a physical <B>PBITMAP</B> structure that GDI will use to identify the device bitmap. If the bitmap is to be deleted, <B>RealizeObject</B> must free the device memory. </P>

<P><B>SelectBitmap</B> associates a device bitmap with the given <B>PDEVICE</B> structure. GDI passes the physical <B>PBITMAP</B> structures of both the currently selected bitmap and the new bitmap so that <B>SelectBitmap</B> can carry out any special processing to enable or disable access to the device bitmaps. </P>

<P>Device bitmaps cannot be monochrome bitmaps. GDI intercepts all requests to create monochrome bitmaps and creates main memory bitmaps instead. This means a graphics driver that supports device bitmaps must also be able to support main memory monochrome bitmaps. </P>

<P class=note><B>Note</B>&nbsp;&nbsp;If the display driver supports device bitmaps, it must not fail any calls to the SelectBitmap, BitmapBits, or RealizeObject functions. If the driver cannot allocate more video memory for a requested bitmap, it must use GlobalAlloc to allocate system memory instead. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Device%20Bitmaps"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
