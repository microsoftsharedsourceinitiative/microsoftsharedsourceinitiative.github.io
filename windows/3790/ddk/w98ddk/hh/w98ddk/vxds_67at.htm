<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing Messages</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4795"></A>Processing Messages</H3>

<P>You process and prepare static messages for display by using the <B>GET_MESSAGE_PTR</B> macro. The following example shows how to retrieve the addresses of two static messages declared in the file USAMSG.INC: </P>

<PRE>include usamsg.inc

GET_MESSAGE_PTR MSG_BootErrorMsg eax
  ; address of MSG_BootErrorMsg message now in eax

GET_MESSAGE_PTR MSG_DiskPlease edx
  ; address of MSG_DiskPlease message now in edx
</PRE>

<P>You process messages containing parameter placeholders by using the <B>PUSH_SPRINTF </B>macro. Because this macro places a new string on the stack, you must use the <B>POP_SPRINTF</B> macro to remove the string from the stack after displaying it. </P>

<P>Of course, since the message is on the stack, it goes away once you call <B>POP_SPRINTF</B>. A common error is passing the pointer to a pushed string to another procedure (such as <B>SHELL_Message</B>), then popping the string before the called procedure is finished with it. If you need a message to be placed somewhere other than the stack, use the <B>LOCALIZED_SPRINTF</B> macro instead. </P>

<P>The following example shows how to process the MSG_CantOpen message: </P>

<PRE>include usamsg.inc

PUSH_SPRINTF MSG_CantOpen, eax, &lt;offset32 DriveBuf&gt;
  ; address of new string now in eax

PUSHED_SPRINTF_LENGTH ebx
  ; string length now in ebx

; Call output function here

POP_SPRINTF     ; Remove the string from stack
</PRE>

<P>In this example, the EAX register contains the address of a null-terminated string specifying a filename and the DriveBuf variable contains a null terminated string specifying the drive letter. The parameter placeholders are assumed to be %0s and %1s. The macro creates a new string by replacing the parameter placeholders in the original message with the filename and driver letter. The macro leaves the new string on the stacks copies its address to the EAX register. </P>

<H4>See Also</H4>

<P><B>GET_MESSAGE_PTR</B>, <B>POP_SPRINTF</B>, <B>PUSH_SPRINTF</B>, <B>PUSHED_SPRINTF_LENGTH</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Processing%20Messages"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
