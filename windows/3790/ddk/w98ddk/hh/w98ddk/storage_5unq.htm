<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FS_WriteFile</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4396"></A>FS_WriteFile</H3>

<PRE>FS_WriteFile(
 PIOREQ pir
 )
 </PRE>

<P>Operations that write to a normal file are handled through <B>FS_WriteFile</B>. This routine handles the Win32 function: WriteFile(); and INT 21h functions: 15h, 22h, 28h, and 40h. 

<DL>
<DT><I>ir_rh</I> </DT>

<DD>Supplies handle to disk volume or network resource that contains the file. </DD>

<DT><I>ir_fh</I> </DT>

<DD>Supplies FSD file handle. </DD>

<DT><I>ir_sfn</I> </DT>

<DD>Supplies system file number. </DD>

<DT><I>ir_data</I> </DT>

<DD>Supplies a pointer to the data buffer to write. </DD>

<DT><I>ir_length</I> </DT>

<DD>Supplies number of bytes of data to write. </DD>

<DT><I>ir_pos</I> </DT>

<DD>Supplies file position to begin writing. </DD>

<DT><I>ir_options</I> </DT>

<DD>Supplies processing options. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Processing Option Values:</B> 
<P>Any combination of the following options may be specified. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>R0_NO_CACHE </TD>
<TD width=66%>File data should be written directly to the disk without going through the cache. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>R0_SWAPPER_CALL </TD>
<TD width=66%>This read operation is issued for the swap-file by the memory manager. Any FSD that allows paging to be done through it needs to observe some special rules to make the system work smoothly. These have already been described in Section 8.3.4 of this document. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>R0_MM_READ_WRITE </TD>
<TD width=66%>This flag is passed in to indicate a write operation to a memory-mapped file. The FSD needs to treat these operations in a special manner as described in Section 8.3.5. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_user</I> </DT>

<DD>Supplies user ID for this request. </DD>

<DT><I>ir_pid</I> </DT>

<DD>Supplies process ID for this request. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><I>ir_error</I> </TD>
<TD width=66%>Returns status of the operation (zero if no error, the error code otherwise). </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_length</I> </TD>
<TD width=66%>Returns number of bytes actually written. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_pos</I> </TD>
<TD width=66%>Returns the new file position. </TD>
</TR>
</TABLE><BR>


</DD>
</DL>

<P>A write of zero bytes to the file, (ir_length = zero), is used to set the end of file position. The FSD should truncate or extend the file to the passed file position. </P>

<P>This operation may take place asynchronously, and it is recommended that the implementation of this function be async when ever possible. To do this, the function may return STATUS_PENDING to allow the caller to continue processing while the operation completes. If STATUS_PENDING is returned, the Complete_Async() service in the IFSMGR must be called when the operation completes. The address of the I/O request packet must be passed to identify the completed request. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FS_WriteFile"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
