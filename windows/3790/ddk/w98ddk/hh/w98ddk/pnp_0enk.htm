<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Device Nodes</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_3580"></A>Device Nodes</H3>

<P>A device node is the basic in-memory representation of a device that is physically present on the system. This data structure contains information relating to the device and its drivers. The major information stored in a device node is: 

<UL>
	<LI>Device ID </LI>

	<LI>Currently assigned configuration </LI>

	<LI>Possible logical configurations </LI>

	<LI>Status information </LI>

	<LI>Device driver entry point </LI>

	<LI>Enumerator entry point (optional) </LI>

	<LI>Arbitrator entry point(s) (optional) </LI>
</UL>

<P>Device nodes are created only by enumerators. The creation of a device node causes the appropriate driver to be loaded. Driver writers typically need not concern themselves with creating device nodes or device IDs. </P>



<H4><A NAME="_pss_3581"></A>Device ID</H4>

<P>A device ID is a unique ASCII string. This string can be used to cross-reference data about the device stored in the registry. Examples of device IDs are: 

<UL>
	<LI>Root\*PNP0000\0 </LI>

	<LI>ISAPNP\ADP1522_DEV0000\E8124123 </LI>

	<LI>BIOS\*PNP0100\0 </LI>

	<LI>PCMCIA\MEGAHERTZ-XJ124FM-936B </LI>
</UL>

<P>For more information about device IDs, see  </P>



<H4><A NAME="_pss_3582"></A>Assigned Configuration</H4>

<P>Drivers examine this portion of the device node to determine which resources have been allocated for the device. For Plug and Play cards, the assigned resources for a given device may change from one boot to the next, or even while the computer is running (dynamically). </P>



<H4><A NAME="_pss_3583"></A>Logical Configurations</H4>

<P>Logical configurations describe the various configurations that are valid for a given piece of hardware. Most driver writers will not need to examine or modify the logical configuration list for a given device node. Enumerators are responsible for creating the appropriate logical configurations when they create a device node. </P>



<H4><A NAME="_pss_3584"></A>Status Information</H4>

<P>Information about the state of a device, such as whether it is disabled or configured, is maintained by Configuration Manager in each device node. Drivers can query this information. </P>



<H4><A NAME="_pss_3585"></A>Device Driver Entry Point</H4>

<P>When a driver is loaded for a specific device node, it registers with Configuration Manager, passing an entry point that will be called to assign or change hardware configurations. </P>



<H4><A NAME="_pss_3586"></A>Enumerator Entry Point</H4>

<P>Device nodes that have child nodes will have enumerators. Enumerators are the components of Plug and Play that identify installed hardware and create device nodes. Most driver writers will not need to write an enumerator. </P>



<H4><A NAME="_pss_3587"></A>Arbitrator Entry Point(s)</H4>

<P>Arbitrators are the components of Plug and Play that assign ownership of various resources, such as IRQs and I/O ports. Most driver writers will not need to write an arbitrator. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Device%20Nodes"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
