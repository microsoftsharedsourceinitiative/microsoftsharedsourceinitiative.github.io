<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NPSNotifyRegister</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_3338"></A>NPSNotifyRegister</H1>

<PRE>DWORD NPSNotifyRegister(
      enum NOTIFYTYPE NotifyType,
      NOTIFYCALLBACK NotifyCallBack
  );
 </PRE>

<DL>
<DT><I>NotifyType</I> </DT>

<DD>The type of notification. This takes the values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>NotifyAddConnection </TD>
<TD width=57%>For adding connections. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NotifyCancelConnection </TD>
<TD width=57%>For canceling connections. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NotifyGetConnectionPerformance </TD>
<TD width=57%>For get connection performance estimates. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>NotifyCallBack</I> </DT>

<DD>The notification function to be called back in the context of the application making the WNet request. A different callback address should be given for each type of notification registered. </DD>
</DL>

<UL>
	<LI>WN_SUCCESS - the notification function was successfully registered with MPR. </LI>
</UL>

<TABLE>

<TR VALIGN="top">
<TD width=43%>WN_BAD_VALUE </TD>
<TD width=57%><I>NotifyType </I>is not a valid operation type, or <I>NotifyCallBack</I> is NULL. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>WN_OUT_OF_MEMORY </TD>
<TD width=57%>MPR is out of memory, so the notification function was not registered. </TD>
</TR>
</TABLE><BR>

<P>The notification function takes the same form for notification of all operations: </P>

<PRE>DWORD  (FAR PASCAL *NOTIFYCALLBACK) pfNotifyCallback(
  LPNOTIFYINFO lpNotifyInfo, 
  LPVOID lpOperationInfo 
  );
 </PRE>

<TABLE>

<TR VALIGN="top">
<TD width=41%><I>lpNotifyInfo</I> </TD>
<TD width=59%>Generic notification information common to all types of operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><I>lpOperationInfo</I> </TD>
<TD width=59%>Pointer to a structure containing information specific to the operation being attempted. The structure is given below for each type of notification function. </TD>
</TR>
</TABLE><BR>

<P>Returns WN_SUCCESS - the notification was processed without error. If <I>dwNotifyStatu</I>s has the NOTIFY_PRE flag set, the operation will be attempted and <B>*pfNotifyCallback </B>called again with the NOTIFY_POST flag set in <I>dwNotifyStatu</I>s. The return status in <I>dwOperationStatus</I> is returned to the user. </P>

<TABLE>

<TR VALIGN="top">
<TD width=41%>WN_RETRY </TD>
<TD width=59%>The operation failed and the notification function wants a retry. The operation will be retried by MPR and the pre-notification is not done a second time to this NP. This value should not be returned when being pre-notified or post-notified of a successful operation (if it is, it will be treated as WN_SUCCESS). </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>WN_CANCEL </TD>
<TD width=59%>The user canceled the operation in some user interface produced within <B>*pfNotifyCallback</B>. WN_CANCEL is returned to the caller and a subsequent post-notification is not done to this NP, so any memory allocated for the context should be freed by the NP. This value should not be returned when being post-notified of a successful operation (if it is, it will be treated as WN_SUCCESS). </TD>
</TR>
</TABLE><BR>

<P>Any other value is returned to the caller as the result of the operation attempt (unless in post-notification of a successful operation, in which case it is ignored), so should only be returned if there was some internal error in the notify function (such as WN_OUT_OF_MEMORY) or to alter the error return status code to the caller. If an error is returned in pre-notification, post-notification is not done to this NP. When in post-notification and an error is returned, <B>NPSSetCustomText</B> or <B>NPSSetExtendedError</B> may be called to specify the error text, but <B>SetLastError</B> does not need to be explicitly called. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NPSNotifyRegister"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
