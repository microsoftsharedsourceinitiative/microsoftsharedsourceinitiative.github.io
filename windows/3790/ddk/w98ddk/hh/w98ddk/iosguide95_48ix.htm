<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IOS General Architecture</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IOS General Architecture">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ios_general_architecture_si"></A>IOS General Architecture</H1>

<P>The figure below describes the overall structure of IOS device drivers that are used to interface local physical storage devices. Note that each module is labeled by number, for ease of reference in the table that follows.</P>

<P><IMG SRC="images/ddm.gif" ALT="" BORDER=0></P>

<P>Port drivers are located at the “bottom” of the IOS hierarchy, closest to the hardware. Most storage technology device driver developers use the SCSI miniport driver model to interface with their hardware (items 30 or 31 in the diagram above).</P>

<TABLE border=1 frame=box rules=all>

<TR VALIGN="top">
<TH align=left width=24%>Module(s)</TH>
<TH align=left width=76%>Comments</TH>
</TR>

<TR VALIGN="top">
<TD width=24%>1, 2, 3</TD>
<TD width=76%>These are client applications that use IOS to access all local storage devices.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>4, 5, 11, 12, 18</TD>
<TD width=76%>These modules implement the ASPI specification. ASPI is designed to provide low-level communications (at the SCSI Request Block, or SRB, level) between applications and SCSI miniport devices or (IDE) ATAPI devices. Adaptec provides this technology.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>6</TD>
<TD width=76%>The Installable File System (IFS) oversees storage data at the file system level, managing the host File System Drivers (FSDs).</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>7-10</TD>
<TD width=76%>File System Drivers (FSDs) manage the format of the file systems contained on storage devices.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>13</TD>
<TD width=76%>The I/O Supervisor (a.k.a. I/O Subsystem), manages storage devices at the physical and logical partition level. It understands storage devices at the “drive number” and “sector number” level.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>14</TD>
<TD width=76%>The Volume Tracker is used to accommodate removable media devices, including PCCARD, USB, SCSI, IDE and ATAPI technologies.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>15</TD>
<TD width=76%>DISKTSD.VXD assigns logical drive letter(s) to each disk-type storage device, when given a physical DCB assigned to the given device.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>16</TD>
<TD width=76%>CDTSD.VXD assigns drive letter(s) to CD-ROM storage devices, when given a physical DCB assigned to the given device.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>17</TD>
<TD width=76%>RMM.VXD is used to direct I/O to real-mode driver(s), for when there is no functioning 32-bit protected-mode device driver for the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>19</TD>
<TD width=76%>ATAPCHNG.VXD is installed as needed when a CD-ROM changer is present.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>20</TD>
<TD width=76%>DISKVSD.VXD is the disk device SCSI’izer, amending its IOP into a full-blown SCSI request (complete with SCSI Request Block).</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>21</TD>
<TD width=76%>CDVSD.VXD is the CD-ROM device SCSI’izer, amending its IOP into a full-blown SCSI request (complete with SCSI Request Block).</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>22</TD>
<TD width=76%>SMARTVSD.VXD allows a Win32® application to obtain S.M.A.R.T. statistics from IDE disk drives. See Knowledge Base article Q208048 for sample Win32 source code.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>23</TD>
<TD width=76%>SCSI1HLP.VXD inspects CD-ROM I/O requests and compares each request against the manufacturer and model of CD-ROM. It modifies the request if needed, to accommodate special requirements, or correct unusual behavior, of certain CD-ROM devices. In some cases, SCSI1HLP will force SCSI 1 protocol behavior. SCSI1HLP also “helps” ATAPI CD-ROM devices.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>24</TD>
<TD width=76%>HSFLOP.PDR handles floppy diskette drives.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>25</TD>
<TD width=76%>ESDI_506.PDR handles IDE drives and ATAPI devices. ATAPI CD-ROM and similar ATA devices appear to IOS as if they are SCSI devices, i.e. the IOP packet includes a SCSI Request Block (SRB).</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>26</TD>
<TD width=76%>SCSIPORT.PDR supplies the interface to one or more SCSI Miniport device drivers. SCSIPORT implements the Windows NT miniport standard, orchestrates the loading and initialization of miniport drivers, exports a number of services available to Miniport device drivers, and coordinates I/O between IOS and the miniport driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>27</TD>
<TD width=76%>IOS accommodates OEM-defined and developed components, including Vendor Supplied Drivers (VSDs) and Port Drivers.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>28</TD>
<TD width=76%>These are DOS real-mode based drivers that are used until IOS replaces these drivers with their (higher-performance) protected-mode counterparts.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>29</TD>
<TD width=76%>The SCSI Miniport is the most common technique used to develop custom port drivers.
<P>The Windows NT Device Driver Kit supplies a sample ATAPI.SYS miniport driver. This driver sample is binary compatible with Windows 95. If used, it is renamed to ATAPI.MPD and placed into the \system\iosubsys directory. This miniport driver can be used to replace much of the functionality of  ESDI_506.PDR.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>30</TD>
<TD width=76%>SCSI Miniport drivers, originally developed for Windows NT,  are the most common interface to SCSI adapter cards (and the attached SCSI devices) to the rest of the system. A sample functional IDE/ATAPI miniport driver (ATAPI.C) is available in the Windows NT 4 DDK.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>31</TD>
<TD width=76%>SCSI Miniport drivers can also be used to interface Parallel-port based devices such as external tape drives and external hard drives, or to interface unusual hardware, making the device appear as a SCSI device.</TD>
</TR>
</TABLE><BR>

<P>Each IOS-supervised driver is located in the <B>\system\iosubsys</B> folder. </P>

<P>After a driver is dynamically loaded by IOS during its Device_Init phase, IOS sends the SYS_DYNAMIC_DEVICE_INIT message to the control dispatch procedure of the newly loaded driver. The driver responds to this message by registering itself with IOS using the <B>IOS_Register(&amp;DRP)</B> call.</P>

<P>A VxD may reside in the <B>\system\iosubsys</B> folder and not call IOS_Register. This is generally not good practice if the VxD does not require use of IOS services. If this is done, the DRP declaration must still be used, because IOS expects it to be there when it is dynamically loading the device, even if the device does not use IOS services.</P>

<P>The complete IOS_Register() process is available in IOS Registration Flowchart.</P>

<P>All IOS-specific data structures (IDA, DVT, DDB, DCB, VRP, etc.) and fields within each data structure are detailed in IOS internal data structure detail, including a block diagram showing the linkages between the structures. </P>

<P>If you are using the Windows Me debug version of IOS.VXD, you can use the IOS dot command <B>.IDUMP </B>for a complete dump of all internal IOS structures on your debugger terminal.</P>

<P>For more information, see Debugging Tools.</P>

<P>For details regarding all the IOS Services, please refer to the “Storage Technology Reference” section of the Windows 95/98 Device Driver Kit (DDK).</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IOS%20General%20Architecture"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
