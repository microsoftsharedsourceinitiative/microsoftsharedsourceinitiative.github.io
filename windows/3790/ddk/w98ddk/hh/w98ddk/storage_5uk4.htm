<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FS_DeleteFile</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4374"></A>FS_DeleteFile</H3>

<PRE>FS_DeleteFile(
 PIOREQ pir
 )
 </PRE>

<P>A file is deleted through <B>FS_DeleteFile</B>. This routine handles the Win32 function: DeleteFile(); and INT 21h functions: 13h, and 41h. 

<DL>
<DT><I>ir_ppath</I> </DT>

<DD>Supplies a pointer to the canonicalized Unicode path name to delete. Wildcards are allowed on the file name specification. </DD>

<DT><I>ir_rh</I> </DT>

<DD>Supplies handle to disk volume or network resource that contains the file. </DD>

<DT><I>ir_attr</I> </DT>

<DD>Supplies must-match and search attributes. Path parsing flags are also provided as advisory information for the FSDs. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Search Attribute Values:</B> 
<P>Any combination of the following attributes may be specified, causing those files to be included with normal files in the search. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_HIDDEN </TD>
<TD width=66%>Include hidden file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_SYSTEM </TD>
<TD width=66%>Include system file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_DIRECTORY </TD>
<TD width=66%>Include subdirectories in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_VOLUMELABEL </TD>
<TD width=66%>Search for volume label. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Must-Match Attribute Values:</B> 
<P>The must-match attributes can be any of the following attributes. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_READONLY </TD>
<TD width=66%>Match read-only files. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_HIDDEN </TD>
<TD width=66%>Match hidden files. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_SYSTEM </TD>
<TD width=66%>Match system files. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_DIRECTORY </TD>
<TD width=66%>Match subdirectories. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_ARCHIVE </TD>
<TD width=66%>Match archived files. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_VOLUMELABEL </TD>
<TD width=66%>Match volume label. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Path Parsing Flags:</B> 
<P>The following path parsing flags are passed in. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_WILDCARDS </TD>
<TD width=66%>Wildcard characters present in path name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_HAS_STAR </TD>
<TD width=66%>Path has the asterisk as a wildcard character. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_LONG_PATH </TD>
<TD width=66%>Path has a long name component. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_KEEP_CASE </TD>
<TD width=66%>Preserve the case of the file name passed in when storing on disk. This also implies that this call should use long name semantics for its processing. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_HAS_DOT </TD>
<TD width=66%>File name component has a dot in its name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_IS_LFN </TD>
<TD width=66%>File name component is a long name. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_uFname</I> </DT>

<DD>Pointer to the case-preserved file name component in Unicode. </DD>

<DT><I>ir_upath</I> </DT>

<DD>Pointer to the unparsed user path name in Unicode. </DD>

<DT><I>ir_user</I> </DT>

<DD>Supplies user ID for this request. </DD>

<DT><I>ir_pid</I> </DT>

<DD>Supplies process ID for this request. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><I>ir_error</I> </TD>
<TD width=66%>Returns status of the operation (zero if no error, the error code otherwise). </TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<P>If an FSD does not support long file names on a volume and it gets a path that contains long names, it should fail the call. The FSD should not attempt to truncate the path name because there is a possibility of deleting the wrong file. Any truncation that needs to be done will be done by the IFS manager before the FSD is called. If an FSD does not support a wildcard delete, it must return an ERROR_INVALID_FUNCTION. The IFS manager watches for this error code and then proceeds to split the wildcard delete into a sequence of Find and Delete operations on nonwildcard file names. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FS_DeleteFile"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
