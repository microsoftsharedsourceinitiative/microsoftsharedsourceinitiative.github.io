<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>HwInterrupt Routine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4112"></A>HwInterrupt Routine</H2>

<P>On entry, a HwInterrupt routine should determine if its HBA actually generated an interrupt. HwInterrupt must return FALSE as soon as possible if it detects a spurious interrupt so the interrupt service routine for the device that generated the interrupt can be called quickly. </P>

<P>Otherwise, a miniport's HwInterrupt routine is generally responsible for completing the I/O operation that caused the interrupt. Depending on the HBA and the design of the miniport, a HwInterrupt routine does some or all of the following: 

<UL>
	<LI>Dismisses the interrupt on the HBA </LI>

	<LI>Notifies (by calling <B>ScsiPortNotification</B> or <B>ScsiPortCompleteRequest</B>) the port driver if the HBA indicates that certain SCSI error conditions occurred during the operation and logging the error (see <I>Error Handling</I>) </LI>

	<LI>Completing the requested operation that caused the interrupt, such as calling <B>ScsiPortIoMapTransfer</B> if the interrupt came in from a previously selected target TID and LU indicating a readiness to transfer data </LI>
</UL>

<P>When the HwInterrupt routine (or an internal miniport routine) completes an SRB, it calls <B>ScsiPortNotification</B> twice: 

<OL>
	<LI>First, with the <B>NotificationType</B> <B>RequestComplete</B> and the just satisfied request </LI>

	<LI>Next, with the <B>NotificationType</B> <B>NextRequest</B>, or with <B>NextLuRequest</B> if the HBA supports tagged queuing or multiple requests per logical unit </LI>
</OL>

<P>For better overall system performance, a miniport's HwInterrupt routine should do only the minimum necessary to process I/O requests. That is, the miniport should be designed to return control from the HwInterrupt routine as quickly as possible, rather than tying up a processor and preventing other drivers from servicing device interrupts. </P>

<P>If interrupt-driven I/O operations take a long time to complete, a miniport driver should have a pair of HwEnableInterruptsCallback and HwDisableInterruptsCallback routines. For example, if a miniport must poll for longer than 50 microseconds doing PIO, its HwInterrupt routine should <I>not</I> retain control of the CPU for the full polling interval in order to complete a requested operation. Instead, its HwInterrupt routine should do the following: 

<OL>
	<LI>Disable interrupts from the HBA. </LI>

	<LI>Set up the device extension with any context necessary to complete the operation. </LI>

	<LI>Call <B>ScsiPortNotification</B> with a pointer to the device extension, the <B>NotificationType</B> <B>CallEnableInterrupts</B>, and the miniport's HwEnableInterruptsCallback routine, described in <I>HwEnableInterruptsCallback Routine</I>. </LI>

	<LI>Return control. </LI>
</OL>

<P><B>ScsiPortNotification</B> calls the HwEnableInterruptsCallback routine as an DPC. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: HwInterrupt%20Routine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
