<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BeginProc</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1700"></A>BeginProc</H1>

<PRE>include vmm.inc

BeginProc ProcName, Attributes
 </PRE>

<P>Marks the start of a procedure having the specified attributes. 

<UL>
	<LI>No return value. </LI>
</UL>

<DL>
<DT><I>ProcName</I></DT>

<DD>Name of the procedure to create. </DD>

<DT><I>Attributes</I></DT>

<DD>One or more procedure attributes. Can be any number of these attributes, with multiple attributes separated by commas: 

<TABLE>

<TR VALIGN="top">
<TH align=left width=27%>Attribute </TH>
<TH align=left width=73%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=27%>HIGH_FREQ </TD>
<TD width=73%>Specifies a frequently called procedure. The macro aligns the start of the procedure on a doubleword boundary to optimize calls to the procedure. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PUBLIC </TD>
<TD width=73%>Creates a global procedure that other procedures in the virtual device can call. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PCALL </TD>
<TD width=73%>Use the Pascal calling convention. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>CCALL </TD>
<TD width=73%>Use the C calling convention. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>SCALL </TD>
<TD width=73%>Use the StdCall calling convention. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>ESP </TD>
<TD width=73%>Use ESP instead of EBP to access arguments. See caveats below. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>HOOK_PROC, hook_var </TD>
<TD width=73%>This procedure is being used to hook a service or fault. See remarks below. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>segment_type </TD>
<TD width=73%>Place the procedure in the segment_type code segment. Valid segment types are LOCKED, INIT, PAGEABLE, STATIC, DEBUG_ONLY, SYSEXIT, INT21, RARE, W16, W32, VMCREATE, VMDESTROY, THCREATE, THDESTROY, VMSUSPEND, VMRESUME, PNP, DOSVM, and LOCKABLE. </TD>
</TR>
</TABLE><BR>



<P>If the DEBUG symbol is defined, then the following keywords are also recognized. (If the DEBUG symbol is not defined, then the following keywords have no effect.) 


<TABLE>

<TR VALIGN="top">
<TH align=left width=27%>Attribute </TH>
<TH align=left width=73%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=27%>NO_LOG </TD>
<TD width=73%>Prevents entry to this procedure from being logged via Log_Call_Proc. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>SERVICE </TD>
<TD width=73%>Indicates that this procedure is an exported service. Additional code is generated to ensure that the service is not called asynchronously, as well some code for system performance profiling, and checking that basic ring 0 assumptions are not violated. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>ASYNC_SERVICE </TD>
<TD width=73%>The same as SERVICE, except that the check that the service is not called asynchronously is not performed. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>NO_PROFILE </TD>
<TD width=73%>If the procedure is a service, disables the generation of code which does performance profiling. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>NO_TEST_CLD </TD>
<TD width=73%>Disables the normal check that the processor direction flag is clear (up). </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>TEST_BLOCK </TD>
<TD width=73%>Generate code to check on entry to the procedure that there are no outstanding ENTER_NOBLOCK calls. This is the default if the procedure resides in pageable code. See _Debug_Flags_Service for more information. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>TEST_REENTER </TD>
<TD width=73%>Generate code to check on entry to the procedure that VMM has not been re-entered. See _Debug_Flags_Service for more information. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>NEVER_REENTER </TD>
<TD width=73%>Generate code to check on entry to the procedure that VMM has not been re-entered, not even when Begin_Reentrant_Execution has been called. See _Debug_Flags_Service for more information. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>NOT_SWAPPING </TD>
<TD width=73%>Generate code to check on entry to the procedure that the current thread is not swapping. See _Debug_Flags_Service for more information. </TD>
</TR>
</TABLE><BR>


</DD>
</DL>

<P>If a procedure is marked ASYNC_SERVICE, then it must be re-entrant, must not call synchronous services, and must restrict itself to locked code and data. Asynchronous services may be called by interrupt handling routines when processing interrupts. Therefore, virtual devices which export asynchronous services must be prepared for the service to be called any time interrupts are disabled. </P>

<P>Marking a procedure as PCALL, SCALL, or CCALL indicates to the ArgVar, LocalVar, EnterProc, LeaveProc and Return macros how code should be generated to access procedure parameters and local variables, and how code should be generated to return to the calling procedure. </P>

<P>If a procedure is marked ESP, then extra care must be taken to maintain the assumptions made by the ArgVar and LocalVar macros. All stack pushes must be performed with the SaveReg macro, and all stack pops must be performed with the RestoreReg macro. You may not adjust the stack manually, and you may not jump over code that adjusts the stack. These are relatively severe restrictions, but that's the way it is. If you can't live within them, then don't use the ESP attribute. Nobody's forcing you. </P>

<P>If a procedure will be passed to Hook_Device_Service, Hook_V86_Fault, Hook_PM_Fault, or Hook_VMM_Fault, then it must be marked with the HOOK_PROC attribute so that the service can be unhooked. This is important, even if you do not plan to unhook the service or fault yourself. Failure to comply may prevent other virtual devices from unhooking the service. The hook_var parameter is the name of the variable into which the address of the previous hook will be stored. See the discussion of hook procedure in the Overview for additional information about hook procedures. </P>

<P>If a segment type is provided, then the procedure will be placed in the segment named VxD_segment_type_CODE_SEG. This is provided for convenience in procedure-level page tuning. </P>

<H4>See Also</H4>

<P><B>EndProc</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: BeginProc"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
