<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>312 - Possible infinite loop.</TITLE>
<META Name="InChm" Content="True">
<META name="rtfFileName" content="prefast.rtf">
<!--CSS_START-->
<SCRIPT SRC="../scripts/dtuelink.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>PREfast&nbsp;User&nbsp;Guide</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vcgrf312possibleinfiniteloop"></A>312 - Possible infinite loop.</H1>

<H1 class="dtH1">Additional Information: Use of the constant EXCEPTION_CONTINUE_EXECUTION in the exception-filter expression of a try-except.</H1>

<H1 class="dtH1">Consequence: Execution restarts in the protected block.</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><!-- Topic Status -->
<P>This message indicates that PREfast has detected the use of the constant EXCEPTION_CONTINUE_EXECUTION (or another constant that evaluates to -1) in the filter expression of a structured exception handler. </P>

<P>Use of the constant value EXCEPTION_CONTINUE_EXECUTION can lead to an infinite loop. If an exception was raised by hardware, the instruction that caused the exception will be restarted. If the address that caused the exception is still bad, another exception will occur and be handled in the same way. This results in an infinite loop. </P>

<P>An explicit call to <B>RaiseException</B> will not directly result in an infinite loop, but it will continue execution of the code in the protected block. This can be unexpected and can lead to an infinite loop if <B>RaiseException</B> was used to avoid dereferencing an invalid pointer. </P>

<P>In addition, when EXCEPTION_CONTINUE_EXECUTION is used, the handler block of the structured exception handler is not executed. </P>

<P>EXCEPTION_CONTINUE_EXCEPTION should usually only be returned by a function called in the filter expression, which has a chance to fix either the pointer that caused the exception or the underlying memory. </P>

<H4 class="dtH4">Example</H4>

<P><B>Defective Source</B></P>

<PRE class="code">__try {
    *ptr = '\0';
} __except (EXCEPTION_CONTINUE_EXCEPTION) {
    // This block is never executed.

    ;
}</PRE>

<P><B>Corrected Source</B></P>

<PRE class="code">__try {
    *ptr = '\0';
} __except (ExceptionFilter(ptr, GetExceptionCode())) {
    // Block may be executed depending on result of call
    // to ExceptionFilter.

    ;
}</PRE>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p><MSHelp:link keywords="vxmscCopyright" TABINDEX="0">&copy; Microsoft Corporation. All rights reserved.</MSHelp:link></p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
