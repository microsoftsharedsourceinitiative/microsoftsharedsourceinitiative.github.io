<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Supporting PC Cards That Have Incomplete Configuration Register Addresses</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Supporting PC Cards That Have Incomplete Configuration Register Addresses">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_inf_ddinstall.logconfigoverride_section_dr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_inf_logconfig_directive_dr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Multifunction&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_supporting_pc_cards_that_have_incomplete_configuration_register_addresses_dg"></A>Supporting PC Cards That Have Incomplete Configuration Register Addresses</H2>

<P>If a multifunction 16-bit PC Card device has configuration registers for each function but does not contain pointers in attribute memory to all register sets (does not support the LONGLINK_MFC tuple), the vendor of such a device can use the system-supplied multifunction bus driver (<I>mf.sys</I>) but must provide a custom INF file and support for the individual functions.</P>

<P>The vendor of such a device on an NT-based platform can use a system-supplied function driver for the multifunction device.</P>

<P>A custom INF for the device must specify <I>mf.sys</I> as the function driver for the device. The system-supplied <I>mf.sys</I> driver will then enumerate the functions of the device.</P>

<P>See <A HREF="mf-supp_55rb.htm">Using the System-Supplied Multifunction Bus Driver</A> for more information on using the system-supplied <I>mf.sys</I> driver.</P>

<P>The vendor of such a device on must provide the following:

<UL>
	<LI>A custom INF file for the multifunction device. (vendor-supplied)
<P>The vendor must supply a multifunction INF file that specifies <I>mf.sys</I> as the multifunction bus driver, specifies the class "MultiFunction" (with its associated GUID as defined in <I>devguid.h</I>), and provides the missing configuration register address(es). See further information later in this section.
</LI>

	<LI>A PnP function driver for each function of the device. (vendor-supplied)
<P>Since the multifunction bus driver handles the multifunction semantics, the function drivers can be the same drivers that are used when the functions are packaged as individual devices.
</LI>

	<LI>An INF file for each function of the device. (vendor-supplied)
<P>The INF files can be the same files that are used when the functions are packaged as individual devices. The INF files do not need any special multifunction semantics.
</LI>
</UL>

<P>The custom INF for such a multifunction device must contain at least one <A HREF="JavaScript:hhobj_1.Click()">INF <I>DDInstall</I>.<B>LogConfigOverride</B> section</A>. The override section must contain an <B>MfCardConfig</B> entry for each function, identifying the location of each set of configuration registers.</P>

<P>The INF must restate all the resource requirements specified by the device because if override configurations are present in the INF, the PnP Manager does not use any device resource requirements from the device.</P>

<P>Specify the <B>MfCardConfig</B> entries using the syntax described in <A HREF="JavaScript:hhobj_2.Click()">INF <B>LogConfig</B> Directive</A>.</P>

<P>For example, consider the following excerpt from a custom INF for a multifunction PC Card device that contains a modem and a network adapter:</P>

<PRE>;...
 
[<I>DDInstall</I>.LogConfigOverride]
LogConfig = <I>DDInstall</I>.Override0
 
[<I>DDInstall</I>.Override0]
IOConfig     =    3F8-3FF                  ; Com1
IOConfig     =    10@100-FFFF%FFF0         ; NIC I/O
IRQConfig    =    3,4,5,7,9,10,11          ; IRQ
MemConfig    =    2000@0-FFFFFFFF%FFFFE000 ; Memory Descriptor 0
MemConfig    =    1000@0-FFFFFFFF%FFFFF000 ; Memory Descriptor 1
MfCardConfig =    1000:47:0(A)
MfCardConfig =    1080:47:1
;...</PRE>

<P>The example shows two <B>MfCardConfig</B> entries, one for each function of the device. The first <B>MfCardConfig</B> entry contains the following information:

<DL>
<DT>1000 (<I>ConfigRegBase</I>)</DT>

<DD>Specifies that there is a set of configuration registers in the attribute memory of the card at offset 0x1000. In this example, the information in these registers describes the modem function on the card.</DD>

<DT>47 (<I>ConfigOptions</I>)</DT>

<DD>Specifies the hexadecimal value for the bus driver to program into the configuration option register at the <I>ConfigRegBase</I> offset (0x1000). </DD>

<DT>0 (<I>IoConfigIndex</I>)</DT>

<DD>Specifies that the I/O resources for this function are listed in the first <B>IOConfig</B> entry in this section. An index of zero indicates the first entry, which in this example is "<B>IOConfig</B> = 3F8-3FF".</DD>

<DT>A (<I>attrs</I>)</DT>

<DD>Directs the bus driver to turn on audio enable for this function, which is typical for a modem.
</DD>
</DL>

<P>The second <B>MfCardConfig</B> entry contains information about the second function on the device (the network adapter, in this example). This entry specifies that there is a second set of configuration registers at offset 0x1080. The bus driver will write the <I>ConfigOptions</I> value of 0x47 to the configuration option register for this function. The <I>IoConfigIndex</I> value of one directs the bus driver to use the second <B>IOConfig</B> entry in this section (<B>IOConfig</B> = 10@100-FFFF%FFF0) to program the I/O base and limit registers for this function.</P>

<P>Include more than one <I>DDInstall</I>.<B>Override</B><I>N</I> section in the INF to specify more than one choice of nonsequential I/O port ranges.</P>

<P>If the device uses a memory window that is not based at zero, the <I>DDInstall</I>.<B>Override</B><I>N</I> section(s) must also include a <B>PcCardConfig</B> entry. If an override section has both an <B>MfCardConfig</B> entry and a <B>PcCardConfig</B> entry, the PCMCIA bus driver ignores the <I>ConfigIndex</I> value in the <B>PcCardConfig</B> entry and just uses the <I>MemoryCardBaseN</I> information. See <A HREF="mf-supp_91pj.htm">Supporting PC Cards That Have Incomplete Configuration Registers</A> for further information on the <B>PcCardConfig</B> entry.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Supporting%20PC%20Cards%20That%20Have%20Incomplete%20Configuration%20Register%20Addresses"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
