<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetupDiRegisterDeviceInfo</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="SetupDiRegisterDeviceInfo">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Device&nbsp;Installation:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_setupdiregisterdeviceinfo_dr"></A>SetupDiRegisterDeviceInfo</H1>

<P>The <B>SetupDiRegisterDeviceInfo</B> function registers a newly created device instance with the Plug and Play Manager. This function is the default handler for the <A HREF="dif-codes_3rle.htm">DIF_REGISTERDEVICE</A> request. In certain situations, you must also directly call this function to register non-PnP device instances.</P>

<PRE class=syntax><B>WINSETUPAPI BOOL WINAPI</B>
  <B>SetupDiRegisterDeviceInfo(</B>
    <B>IN HDEVINFO</B>  <I>DeviceInfoSet</I><B>,</B>
    <B>IN OUT PSP_DEVINFO_DATA</B>  <I>DeviceInfoData</I><B>,</B>
    <B>IN DWORD</B>  <I>Flags</I><B>,</B>
    <B>IN PSP_DETSIG_CMPPROC</B>  <I>CompareProc</I><B>,  OPTIONAL</B>
    <B>IN PVOID</B>  <I>CompareContext</I><B>,  OPTIONAL
    OUT PSP_DEVINFO_DATA</B>  <I>DupDeviceInfoData</I><B>  OPTIONAL</B>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceInfoSet</I></DT>

<DD>Supplies a handle to a <A HREF="setup-cls_2h9j.htm">device information set</A>. The device information set must not contain any remote elements.</DD>

<DT><I>DeviceInfoData</I></DT>

<DD>Supplies a pointer to a <A HREF="di-struct_7nqq.htm">SP_DEVINFO_DATA</A> structure that identifies the device in the <I>DeviceInfoSet</I>. This is an IN OUT parameter because the <B>DevInst</B> field of the structure can be updated with a new handle value upon return.</DD>

<DT><I>Flags</I></DT>

<DD>Controls how the device is registered. Can be the following value:

<DL>
<DT>SPRDI_FIND_DUPS</DT>

<DD>Search for a previously-existing device instance corresponding to the device information pointed to by <I>DeviceInfoData</I>. If this flag is not specified, the device instance is registered regardless of whether or not a device instance already exists for it.

<P>If the caller supplies a <I>CompareProc</I> they must also set this flag.
</DD>
</DL>
</DD>

<DT><I>CompareProc</I></DT>

<DD>Supplies a comparison callback function to use in duplicate detection. If specified, the function is called for each device instance that is of the same class as the device instance being registered. The prototype of the callback function is as follows:

<PRE>typedef  DWORD (CALLBACK* PSP_DETSIG_CMPPROC) (
    IN HDEVINFO          DeviceInfoSet,
    IN PSP_DEVINFO_DATA  NewDeviceData,
    IN PSP_DEVINFO_DATA  ExistingDeviceData,
    IN PVOID             CompareContext     <B>  </B>OPTIONAL
    );</PRE>


<P>The compare function must return ERROR_DUPLICATE_FOUND if it finds that the two devices are duplicates. Otherwise, it should return NO_ERROR. If some other error is encountered, the callback function should return the appropriate ERROR_* code to indicate the failure.


<P>If <I>CompareProc</I> is not specified and duplication detection is requested, a default comparison behavior is used. The default is to compare the new device's detect signature with the detect signature of all other devices in the class. The detect signature is contained in the class-specific resource descriptor of the device's boot log configuration.
</DD>

<DT><I>CompareContext</I></DT>

<DD>Supplies a pointer to a caller-supplied context buffer that is passed into the callback function. This parameter is ignored if <I>CompareProc</I> is not specified.</DD>

<DT><I>DupDeviceInfoData</I></DT>

<DD>Optionally supplies a pointer to a <A HREF="di-struct_7nqq.htm">SP_DEVINFO_DATA</A> structure to receive information about a duplicate device instance, if any, discovered as a result of attempting to register this device. The caller must set <B>cbSize</B> to <B>sizeof</B>(SP_DEVINFO_DATA). This will be filled in if the function returns FALSE, and <B>GetLastError</B> returns ERROR_DUPLICATE_FOUND. This device information element is added as a member of the specified <I>DeviceInfoSet</I>, if not already a member. If <I>DupDeviceInfoData</I> is not specified, the duplicate is not added to the device information set.

<P>If you call this function when handling a <A HREF="dif-codes_3rle.htm">DIF_REGISTERDEVICE</A> request, the <I>DupDeviceInfoData</I> parameter must be NULL. 

</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns TRUE if it is successful. Otherwise, it returns FALSE and the logged error can be retrieved with a call to <B>GetLastError</B>.</P>

<H4>Headers</H4>

<P>Declared in <I>setupapi.h</I>. Include <I>setupapi.h</I>. </P>

<H4>Comments</H4>

<P>The caller of this function must be a member of the Administrators group.</P>

<P>Co-installers should not call default DIF code handlers.</P>

<P>Do not call this function for PnP devices. PnP devices are registered by the OS.</P>

<P>After registering a device information element, the caller should refresh any stored copies of the <B>DevInst</B> handle associated with this device. This is necessary because the handle value might have changed during registration. The caller need not retrieve the SP_DEVINFO_DATA structure again because the <B>DevInst</B> field of the structure is updated to reflect the current value of the handle. </P>

<P>The <I>DeviceInfoSet</I> must only contain elements on the local machine.</P>

<P>Do not directly call this function for PnP device instances. PnP device instances are automatically registered by the OS. However, you must register non-PnP device instances in one of the following ways:

<OL>
	<LI>If your installation application uses a <A HREF="dif-codes_048i.htm">DIF_DETECT</A> request to successfully detect a device, it should also use a DIF_REGISTERDEVICE request to register the device instance. The request should be handled in the default manner. (By default, <A HREF="di-rtns_7fjm.htm"><B>SetupDiCallClassInstaller</B></A> first calls the class installer and class co-installers to do duplicate detection and register the device instance. If these installers do not register the device instance, <B>SetupDiCallClassInstaller</B> calls <B>SetupDiRegisterDeviceInfo</B> to do duplicate detection and register the device instance.)</LI>

	<LI>If your installation application creates a device instance (for example, by calling <A HREF="di-rtns_75gy.htm"><B>SetupDiCreateDeviceInfo</B></A>) but does not do duplicate detection, your installation application should use a DIF_REGISTERDEVICE request to register the device instance. The request should be handled in the default manner as described above.</LI>

	<LI>If your installation application creates a new device and does duplicate detection, your installation application should use a DIF_REGISTERDEVICE request but should prevent <B>SetupDiCallClassInstaller</B> from calling <B>SetupDiRegisterDeviceInfo</B>. To prevent <B>SetupDiCallClassInstaller</B> from calling <B>SetupDiRegisterDeviceInfo</B>, set the DI_NODI_DEFAULTACTION flag in the <B>Flags</B> member of the SP_DEVINSTALL_PARAMS structure for the device instance.
<P>If <B>SetupDiCallClassInstaller</B> returns TRUE for the DIF_REGISTERDEVICE request, the class installer or class co-installers registered the device instance. In this case, the installation application can continue installing the device.

<P>If <B>SetupDiCallClassInstaller</B> returns FALSE for the DIF_REGISTERDEVICE request, the class installer or class co-installers did not register the device instance. In this case, the installation application should do one of the following, depending on the last error that <B>GetLastError</B> returns for the request:

<UL>
	<LI>If the last error is ERROR_DI_DO_DEFAULT, the installation application can directly call <B>SetupDiRegisterDeviceInfo</B> and supply a <I>CompareProc</I> to do duplicate detection. If this call is successful and no duplicates are found, device installation can continue. If a duplicate is found, <B>SetupDiRegisterDeviceInfo</B> returns FALSE, and the installation application must terminate device installation.</LI>

	<LI>If the last error is not ERROR_DI_DO_DEFAULT, the installation application must terminate device installation.</LI>
</UL>
</LI>
</OL>

<H4>See Also</H4>

<P><A HREF="dif-codes_3rle.htm">DIF_REGISTERDEVICE</A>, <A HREF="di-struct_7nqq.htm">SP_DEVINFO_DATA</A>, <A HREF="di-struct_7j76.htm">SP_DEVINSTALL_PARAMS</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: SetupDiRegisterDeviceInfo"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
