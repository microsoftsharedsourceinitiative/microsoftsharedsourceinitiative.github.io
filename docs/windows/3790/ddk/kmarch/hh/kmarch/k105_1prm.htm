<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeSetEvent</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeSetEvent">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kesetevent_kr"></A>KeSetEvent</H1>

<P>The <B>KeSetEvent</B> routine sets an event object to a signaled state if the event was not already signaled, and returns the previous state of the event object.</P>

<PRE class=syntax><B>LONG 
</B>  <B>KeSetEvent(</B>
<B>    IN PRKEVENT</B>  <I>Event</I><B>,</B>
<B>    IN KPRIORITY</B>  <I>Increment</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>Wait</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Event</I></DT>

<DD>Pointer to an initialized event object for which the caller provides the storage.</DD>

<DT><I>Increment</I></DT>

<DD>Specifies the priority increment to be applied if setting the event causes a wait to be satisfied.</DD>

<DT><I>Wait</I></DT>

<DD>Specifies whether the call to <B>KeSetEvent</B> is to be followed immediately by a call to one of the <B>KeWait<I>Xxx</I></B> routines.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the previous state of the event object was signaled, a nonzero value is returned.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Calling <B>KeSetEvent</B> causes the event to attain a signaled state. If the event is a notification event, the system attempts satisfy as many waits as possible on the event object before clearing the event. If the event is a synchronization event, one wait is satisfied before the event is cleared.</P>

<P>If the <I>Wait</I> parameter is TRUE, the return to the caller is executed without lowering IRQL or releasing the dispatcher database spin lock. Therefore, the call to <B>KeSetEvent</B> must be followed immediately by a call to one of the <B>KeWait<I>Xxx</I></B> routines.</P>

<P>This allows the caller to set an event and wait as one atomic operation, preventing a possibly superfluous context switch. However, the caller cannot wait at raised IRQL nor in an arbitrary thread context for a nonzero interval on an event object.</P>

<P>If <I>Wait</I> is set to FALSE, the caller can be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL. Otherwise, callers of <B>KeSetEvent</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL and in a nonarbitrary thread context.</P>

<H4>See Also</H4>

<P><A HREF="k105_47g2.htm"><B>KeClearEvent</B></A>, <A HREF="k105_8jaq.htm"><B>KeInitializeEvent</B></A>, <A HREF="k105_8dyq.htm"><B>KeReadStateEvent</B></A>, <A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A>, <A HREF="k105_18oi.htm"><B>KeWaitForMultipleObjects</B></A>, <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeSetEvent"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
