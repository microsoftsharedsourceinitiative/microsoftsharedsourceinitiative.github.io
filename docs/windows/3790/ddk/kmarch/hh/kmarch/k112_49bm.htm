<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IO_STACK_LOCATION</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IO_STACK_LOCATION">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_driver_stack_ks">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_io_stack_location_kr"></A>IO_STACK_LOCATION</H1>

<P>The IO_STACK_LOCATION structure defines an <A HREF="irps_8lgn.htm">I/O stack location</A>, which is an entry in the I/O stack that is associated with each IRP. Each I/O stack location in an IRP has some common members and some request-type-specific members.</P>

<PRE class=syntax>typedef struct _IO_STACK_LOCATION {
  UCHAR  MajorFunction;
  UCHAR  MinorFunction;
  UCHAR  Flags;
  UCHAR  Control;
  union {
        //
        // Parameters for <A HREF="k113_02lu.htm">IRP_MJ_CREATE</A> 
        //
        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT POINTER_ALIGNMENT FileAttributes;
            USHORT ShareAccess;
            ULONG POINTER_ALIGNMENT EaLength;
        } Create;
        //
        // Parameters for <A HREF="k113_7fhu.htm">IRP_MJ_READ</A> 
        //
        struct {
            ULONG Length;
            ULONG POINTER_ALIGNMENT Key;
            LARGE_INTEGER ByteOffset;
        } Read;
        //
        // Parameters for <A HREF="k113_45o2.htm">IRP_MJ_WRITE</A> 
        //
        struct {
            ULONG Length;
            ULONG POINTER_ALIGNMENT Key;
            LARGE_INTEGER ByteOffset;
        } Write;
        //
        // Parameters for <A HREF="k113_59o2.htm">IRP_MJ_QUERY_INFORMATION</A> 
        //
        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;
        } QueryFile;
        //
        // Parameters for <A HREF="k113_1ho2.htm">IRP_MJ_SET_INFORMATION</A> 
        //
        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;
            PFILE_OBJECT FileObject;
            union {
                struct {
                    BOOLEAN ReplaceIfExists;
                    BOOLEAN AdvanceOnly;
                };
                ULONG ClusterCount;
                HANDLE DeleteHandle;
            };
        } SetFile;
        //
        // Parameters for IRP_MJ_QUERY_VOLUME_INFORMATION 
        //
        struct {
            ULONG Length;
            FS_INFORMATION_CLASS POINTER_ALIGNMENT FsInformationClass;
        } QueryVolume;
        //
        // Parameters for <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> and <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> 
        //
        struct {
            ULONG OutputBufferLength;
            ULONG POINTER_ALIGNMENT InputBufferLength;
            ULONG POINTER_ALIGNMENT IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;
        //
        // Nonsystem service parameters.
        //
        // Parameters for IRP_MN_MOUNT_VOLUME 
        //
        struct {
            PVOID DoNotUse1;
            PDEVICE_OBJECT DeviceObject;
        } MountVolume;
        //
        // Parameters for IRP_MN_VERIFY_VOLUME 
        //
        struct {
            PVOID DoNotUse1;
            PDEVICE_OBJECT DeviceObject;
        } VerifyVolume;
        //
        // Parameters for Scsi using <A HREF="k113_2yia.htm">IRP_MJ_INTERNAL_DEVICE_CONTROL</A> 
        //
        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;
        //
        // Parameters for <A HREF="pnp-irps_5aia.htm">IRP_MN_QUERY_DEVICE_RELATIONS</A> 
        //
        struct {
            DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;
        //
        // Parameters for <A HREF="pnp-irps_9k36.htm">IRP_MN_QUERY_INTERFACE</A> 
        //
        struct {
            CONST GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            PINTERFACE Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;
        //
        // Parameters for <A HREF="pnp-irps_9unm.htm">IRP_MN_QUERY_CAPABILITIES</A> 
        //
        struct {
            PDEVICE_CAPABILITIES Capabilities;
        } DeviceCapabilities;
        //
        // Parameters for IRP_MN_FILTER_RESOURCE_REQUIREMENTS 
        //
        struct {
            PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList;
        } FilterResourceRequirements;
        //
        // Parameters for <A HREF="pnp-irps_9ipe.htm">IRP_MN_READ_CONFIG</A> and <A HREF="pnp-irps_0rjm.htm">IRP_MN_WRITE_CONFIG</A> 
        //
        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG POINTER_ALIGNMENT Length;
        } ReadWriteConfig;
        //
        // Parameters for <A HREF="pnp-irps_1ieq.htm">IRP_MN_SET_LOCK</A> 
        //
        struct {
            BOOLEAN Lock;
        } SetLock;
        //
        // Parameters for <A HREF="pnp-irps_60vm.htm">IRP_MN_QUERY_ID</A> 
        //
        struct {
            BUS_QUERY_ID_TYPE IdType;
        } QueryId;
        //
        // Parameters for <A HREF="pnp-irps_5raq.htm">IRP_MN_QUERY_DEVICE_TEXT</A> 
        //
        struct {
            DEVICE_TEXT_TYPE DeviceTextType;
            LCID POINTER_ALIGNMENT LocaleId;
        } QueryDeviceText;
        //
        // Parameters for <A HREF="pnp-irps_1wmq.htm">IRP_MN_DEVICE_USAGE_NOTIFICATION</A> 
        //
        struct {
            BOOLEAN InPath;
            BOOLEAN Reserved[3];
            DEVICE_USAGE_NOTIFICATION_TYPE POINTER_ALIGNMENT Type;
        } UsageNotification;
        //
        // Parameters for <A HREF="poirp_44fm.htm">IRP_MN_WAIT_WAKE</A> 
        //
        struct {
            SYSTEM_POWER_STATE PowerState;
        } WaitWake;
        //
        // Parameter for <A HREF="poirp_5omq.htm">IRP_MN_POWER_SEQUENCE</A> 
        //
        struct {
            PPOWER_SEQUENCE PowerSequence;
        } PowerSequence;
        //
        // Parameters for <A HREF="poirp_6hde.htm">IRP_MN_SET_POWER</A> and <A HREF="poirp_9e9e.htm">IRP_MN_QUERY_POWER</A> 
        //
        struct {
            ULONG SystemContext;
            POWER_STATE_TYPE POINTER_ALIGNMENT Type;
            POWER_STATE POINTER_ALIGNMENT State;
            POWER_ACTION POINTER_ALIGNMENT ShutdownType;
        } Power;
        //
        // Parameters for <A HREF="pnp-irps_1gqa.htm">IRP_MN_START_DEVICE</A> 
        //
        struct {
            PCM_RESOURCE_LIST AllocatedResources;
            PCM_RESOURCE_LIST AllocatedResourcesTranslated;
        } StartDevice;
        //
        // Parameters for <A HREF="k901_2i7m.htm">WMI Minor IRPs</A> 
        //
        struct {
            ULONG_PTR ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;
        //
        // Others - driver-specific
        //
        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;
    } Parameters;
  PDEVICE_OBJECT  DeviceObject;
  PFILE_OBJECT  FileObject;
  .
  .
} IO_STACK_LOCATION, *PIO_STACK_LOCATION;</PRE>

<H4>Members</H4>

<DL>
<DT><B>MajorFunction</B></DT>

<DD>The <A HREF="k113_6egi.htm">IRP major function code</A> indicating the type of I/O operation to be performed.</DD>

<DT><B>MinorFunction</B></DT>

<DD>A subfunction code for <B>MajorFunction</B>. The PnP Manager, the Power Manager, file system drivers, and SCSI class drivers set this member for some requests. </DD>

<DT><B>Flags</B></DT>

<DD>Request-type-specific values used almost exclusively by file system drivers. Removable-media device drivers check whether this member is set with SL_OVERRIDE_VERIFY_VOLUME for read requests to determine whether to continue the read operation even if the device object’s <B>Flags</B> is set with DO_VERIFY_VOLUME. Intermediate drivers layered over a removable-media device driver must copy this member into the I/O stack location of the next-lower driver in all incoming IRP_MJ_READ requests.</DD>

<DT><B>Control</B></DT>

<DD>Drivers can check this member to determine whether it is set with SL_PENDING_RETURNED. Drivers have read-only access to this member.</DD>

<DT><B>Parameters</B></DT>

<DD>A union that depends on the major and minor IRP function code values contained in <B>MajorFunction</B> and <B>MinorFunction</B>. For more information, see <A HREF="k113_6egi.htm">IRP Major Function Codes</A>.</DD>

<DT><B>DeviceObject</B></DT>

<DD>A pointer to the driver-created <A HREF="k112_32cy.htm">DEVICE_OBJECT</A> structure representing the target physical, logical, or virtual device for which this driver is to handle the IRP.</DD>

<DT><B>FileObject</B></DT>

<DD>A pointer to a <A HREF="k112_4cz6.htm">FILE_OBJECT</A> structure that represents the file object, if any, that is associated with <B>DeviceObject</B> pointer.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>For each IRP, there is one IO_STACK_LOCATION structure for each driver in a <A HREF="JavaScript:hhobj_1.Click()">driver stack</A>. Each IRP's set of I/O stack locations is appended to the IRP, following the <A HREF="k112_3z5e.htm">IRP</A> structure.</P>

<P>Every higher-level driver is responsible for setting up the I/O stack location for the next-lower driver in each IRP. A driver must call <A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A> to get a pointer to its own stack location for each IRP. Higher-level drivers can call <A HREF="k104_6u5u.htm"><B>IoGetNextIrpStackLocation</B></A> to get a pointer to the next-lower driver’s stack location.</P>

<P>The higher-level driver must set up the stack location contents before calling <A HREF="k104_1agi.htm"><B>IoCallDriver</B></A> to pass an IRP to the lower-level driver. If the driver will pass the input IRP on to the next lower-level driver, the dispatch routine should call <A HREF="k104_1ohe.htm"><B>IoSkipCurrentIrpStackLocation</B></A> or <A HREF="k104_4fqq.htm"><B>IoCopyCurrentIrpStackLocationToNext</B></A> to set up the I/O stack location of the next-lower driver.</P>

<P>A higher-level driver’s call to <B>IoCallDriver</B> sets the <B>DeviceObject</B> member to the next-lower-level driver’s target device object, in the I/O stack location of the lower driver. The I/O Manager passes each higher-level driver’s <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine a pointer to its own device object when the <I>IoCompletion</I> routine is called on completion of the IRP.</P>

<P>If a higher-level driver allocates IRPs to make requests of its own, its <I>IoCompletion</I> routine is passed a NULL <B>DeviceObject</B> pointer if that driver neither allocates a stack location for itself nor sets up the <B>DeviceObject</B> pointer in its own stack location of the newly allocated IRP.</P>

<P>In some cases, a higher-level driver layered over a mass-storage device driver is responsible for splitting up large transfer requests for the underlying device driver. In particular, SCSI class drivers must check the <B>Parameters.Read.Length</B> and <B>Parameters.Write.Length</B>, determine whether the size of the requested transfer exceeds the underlying HBA’s transfer capabilities, and, if so, split the <B>Length</B> of the original request into a sequence of partial transfers to satisfy the original IRP.</P>

<H4>See Also</H4>

<P><A HREF="k104_1agi.htm"><B>IoCallDriver</B></A>, <BR>
<A HREF="k104_4fqq.htm"><B>IoCopyCurrentIrpStackLocationToNext</B></A>, <BR>
<A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A>, <BR>
<A HREF="k104_6u5u.htm"><B>IoGetNextIrpStackLocation</B></A>, <BR>
<A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A>, <BR>
<A HREF="k104_1ohe.htm"><B>IoSkipCurrentIrpStackLocation</B></A>, <BR>
<A HREF="k104_5qr6.htm"><B>IoSetNextIrpStackLocation</B></A>, <BR>
<A HREF="k112_08qa.htm">IO_STATUS_BLOCK</A>, <BR>
<A HREF="k112_3z5e.htm">IRP</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IO_STACK_LOCATION"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
