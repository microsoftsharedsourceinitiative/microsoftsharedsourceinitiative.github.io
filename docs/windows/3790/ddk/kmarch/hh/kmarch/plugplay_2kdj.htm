<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handling an IRP_MN_CANCEL_REMOVE_DEVICE Request</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Handling an IRP_MN_CANCEL_REMOVE_DEVICE Request">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_handling_an_irp_mn_cancel_remove_device_request_kg"></A>Handling an IRP_MN_CANCEL_REMOVE_DEVICE Request</H2>

<P>In response to an <A HREF="pnp-irps_7xte.htm">IRP_MN_CANCEL_REMOVE_DEVICE</A> request, the drivers for a device must return the device to the state it was in prior to receiving the IRP_MN_QUERY_REMOVE_DEVICE request. Typically, drivers return the device to the started state.</P>

<P>In addition to sending an IRP_MN_CANCEL_REMOVE_DEVICE to a device, the PnP Manager sends the IRP to the device's removal relations, if any. The PnP Manager also sends a cancel-remove IRP to the device's children.</P>

<P>The PnP Manager calls any <B>EventCategoryTargetDeviceChange</B> notification callbacks <I>after</I> the IRP_MN_CANCEL_REMOVE_DEVICE request completes. Such callbacks were registered on the device by calling <A HREF="k104_7diq.htm"><B>IoRegisterPlugPlayNotification</B></A>. The PnP Manager also calls any user-mode components that registered for such notification by calling <B>RegisterDeviceNotification</B>.</P>

<P>An IRP_MN_CANCEL_REMOVE_DEVICE request must be handled first by the parent bus driver for a device and then by each higher driver in the device stack. A driver handles remove IRPs in its <I>DispatchPnP</I> routine.</P>

<P>A driver handles an <A HREF="pnp-irps_7xte.htm">IRP_MN_CANCEL_REMOVE_DEVICE</A> request with a procedure such as the following in its <I>DispatchPnP</I> routine:

<OL>
	<LI>In a function or filter driver, postpone restarting the device until lower drivers have completed their restart operations.
<P>A function or filter driver sets an <I>IoCompletion</I> routine, passes the IRP_MN_CANCEL_REMOVE_DEVICE down the device stack, and postpones its restart operations until all lower drivers have finished with the IRP. (See <A HREF="plugplay_6wx3.htm">Postponing PnP IRP Processing Until Lower Drivers Finish</A>.)
</LI>

	<LI>After lower drivers finish, return the device to its previous PnP state.
<P>The drivers return the device to the state it was in prior to receiving the IRP_MN_QUERY_REMOVE_DEVICE request. Typically, drivers return the device to the started state. Exact operations depend on the device and the driver.

<P>If the device was previously enabled for wake-up, the device power policy owner (typically the function driver) should send an IRP_MN_WAIT_WAKE request to re-enable wake-up. See <A HREF="pwrmgmt_48br.htm">Power Management</A> for details.
</LI>

	<LI>Set <B>Irp-&gt;IoStatus.Status</B> to STATUS_SUCCESS and complete the IRP with <B>IoCompleteRequest</B>.
<P>As with any PnP IRP, a bus driver completes the IRP.

<P>A function or filter driver also completes the IRP, in this case because the driver's <I>IoCompletion</I> routine interrupted completion processing by returning STATUS_MORE_PROCESSING_REQUIRED.

<P>Drivers must succeed this IRP. If any driver fails this IRP, the device is left in an inconsistent state. 
</LI>
</OL>

<P>A driver might receive a spurious cancel-remove request when the device is started and active. This can occur, for example, if the driver (or a driver higher in the device stack) failed an IRP_MN_QUERY_REMOVE_DEVICE request. When a device is started and active, a driver simply succeeds a spurious cancel-remove request for the device.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Handling%20an%20IRP_MN_CANCEL_REMOVE_DEVICE%20Request"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
