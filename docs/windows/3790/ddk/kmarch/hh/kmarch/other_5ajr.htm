<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Extended Example: Defining a "64Bit" Field</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Extended Example: Defining a &quot;64Bit&quot; Field">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_extended_example_defining_a_64bit_field_kg"></A>Extended Example: Defining a "64Bit" Field</H3>

<P>The following example shows how to modify a 32-bit driver for 64-bit by adding a "64Bit" field to the IOCTL control code. Note that this example shows only the portions of the driver code that need to be modified. </P>

<H4>Original Driver Code</H4>

<P>The following is the 32-bit version of the driver:</P>

<H4>Header File</H4>

<PRE>#define REGISTER_FUNCTION 0     // Define the IOCTL function code

#define IOCTL_REGISTER   CTL_CODE(FILE_DEVICE_UNKNOWN, \
  REGISTER_FUNCTION, METHOD_BUFFERED, FILE_ANY_ACCESS)

typedef struct _IOCTL_PARAMETERS {
    PVOID   Addr;
    SIZE_T  Length;
    HANDLE  Handle;
} IOCTL_PARAMETERS, *PIOCTL_PARAMETERS;</PRE>

<H4>DeviceControl Dispatch Routine</H4>

<PRE>NTSTATUS
TestdrvDeviceControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
{
    PIO_STACK_LOCATION irpSp;
    NTSTATUS status;
    PIOCTL_PARAMETERS params;
    IOCTL_PARAMETERS  LocalParam;
    PIOCTL_PARAMETERS_32 params32;

    //
    //Get a pointer to the current parameters for this request. The
    //information is contained in the current stack location.
    //
    irpSp = IoGetCurrentIrpStackLocation(Irp);
    //
    // Case on the device control code
    //
    switch (irpSp-&gt;Parameters.DeviceIoControl.IoControlCode) {
    case IOCTL_REGISTER:
        params = (PIOCTL_PARAMETERS)
            (Irp-&gt;AssociatedIrp.SystemBuffer);
        if (irpSp-&gt;Parameters.DeviceIoControl.InputBufferLength &lt;
               sizeof(IOCTL_PARAMETERS)) {
            status = STATUS_INVALID_PARAMETER;
        } else {
            RtlCopyMemory(&amp;LocalParam,  params, 
              sizeof(IOCTL_PARAMETERS));
            /*  Handle the ioctl here */
            status = STATUS_SUCCESS;
        }
        Irp-&gt;IoStatus.Information = 0;
            break;
    //
    // Unrecognized device control request
    //
    default:
        Irp-&gt;IoStatus.Information = 0;
        status = STATUS_INVALID_PARAMETER;
        break;
    }
    //
    // If status is pending, mark the IRP pending and start the
    // request in a cancelable state. Otherwise, complete the IRP.
    //
    Irp-&gt;IoStatus.Status = status;
    IoCompleteRequest(Irp, IO_NO_INCREMENT);
    return(status);
}</PRE>

<H4>Driver Code With Thunking Support</H4>

<P>The following is the 64-bit version of the driver:</P>

<H4>Header File</H4>

<PRE>#define REGISTER_FUNCTION 0     // Define the IOCTL function code

<span style="color:#ff0000"><B>#ifdef  _WIN64
#define CLIENT_64BIT   0x800
#define REGISTER_FUNCTION 0
#define IOCTL_REGISTER   CTL_CODE(FILE_DEVICE_UNKNOWN, \
  CLIENT_64BIT|REGISTER_FUNCTION, METHOD_BUFFERED, FILE_ANY_ACCESS)
#else</B></span>    
#define IOCTL_REGISTER   CTL_CODE(FILE_DEVICE_UNKNOWN, \
  REGISTER_FUNCTION, METHOD_BUFFERED, FILE_ANY_ACCESS)
<span style="color:#ff0000"><B>#endif</B></span>    

typedef struct _IOCTL_PARAMETERS {
    PVOID   Addr;
    SIZE_T  Length;
    HANDLE  Handle;
} IOCTL_PARAMETERS, *PIOCTL_PARAMETERS;</PRE>

<H4>DeviceControl Dispatch Routine</H4>

<PRE><span style="color:#ff0000"><B>#ifdef _WIN64
#define IOCTL_REGISTER_32   CTL_CODE(FILE_DEVICE_UNKNOWN, \
  REGISTER_FUNCTION, METHOD_BUFFERED, FILE_ANY_ACCESS)
#endif</B></span>    
.
.
.
<span style="color:#ff0000"><B>#ifdef _WIN64
typedef struct _IOCTL_PARAMETERS_32 {
    VOID*POINTER_32  Addr;
    INT32            Length;
    VOID*POINTER_32  Handle;
} IOCTL_PARAMETERS_32, *PIOCTL_PARAMETERS_32;
#endif</B></span>    
.
.
.
NTSTATUS
TestdrvDeviceControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
{
    PIO_STACK_LOCATION irpSp;
    NTSTATUS status;
    PIOCTL_PARAMETERS params;
    IOCTL_PARAMETERS  LocalParam;
    PIOCTL_PARAMETERS_32 params32;

    //
    //Get a pointer to the current parameters for this request. The
    //information is contained in the current stack location.
    //
    irpSp = IoGetCurrentIrpStackLocation(Irp);
    //
    // Case on the device control code
    //
    switch (irpSp-&gt;Parameters.DeviceIoControl.IoControlCode) {
<span style="color:#ff0000"><B>#ifdef  _WIN64
    case IOCTL_REGISTER_32:
        params32 = (PIOCTL_PARAMETERS_32)
          (Irp-&gt;AssociatedIrp.SystemBuffer);
        if (irpSp-&gt;Parameters.DeviceIoControl.InputBufferLength &lt; 
            sizeof(IOCTL_PARAMETERS_32)) {
            status = STATUS_INVALID_PARAMETER;
</B>        <B>} else {</B>
<B>            LocalParam.Addr = params32-&gt;Addr;</B>
<B>            LocalParam.Handle = params32-&gt;Handle;</B>
<B>            LocalParam.Length = params32-&gt;Length;</B>
<B>            /* Handle the ioctl here */</B>
<B>            status = STATUS_SUCCESS;</B>
<B>            Irp-&gt;IoStatus.Information = 0;</B>
<B>        }</B>
<B>        break;</B>
<B>#endif</B></span>    
    case IOCTL_REGISTER:
        params = (PIOCTL_PARAMETERS)
            (Irp-&gt;AssociatedIrp.SystemBuffer);
        if (irpSp-&gt;Parameters.DeviceIoControl.InputBufferLength &lt;
            sizeof(IOCTL_PARAMETERS)) {
            status = STATUS_INVALID_PARAMETER;
        } else {
            RtlCopyMemory(&amp;LocalParam, params, 
                sizeof(IOCTL_PARAMETERS));
            /* Handle the ioctl here */
            status = STATUS_SUCCESS;
        }
        Irp-&gt;IoStatus.Information = 0;
        break;
    //
    // Unrecognized device control request
    //
    default:
        Irp-&gt;IoStatus.Information = 0;
        status = STATUS_INVALID_PARAMETER;
        break;
    }
    //
    // If status is pending, mark the IRP pending and start the
    // request in a cancelable state. Otherwise, complete the IRP.
    //
    Irp-&gt;IoStatus.Status = status;
    IoCompleteRequest(Irp, IO_NO_INCREMENT);
    return(status);
}
</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Extended%20Example:%20Defining%20a%20'64Bit'%20Field"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
