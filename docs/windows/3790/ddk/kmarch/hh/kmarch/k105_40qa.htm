<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeAcquireSpinLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeAcquireSpinLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_keacquirespinlock_kr"></A>KeAcquireSpinLock</H1>

<P>The <B>KeAcquireSpinLock</B> routine acquires a spin lock so the caller can synchronize access to shared data in a multiprocessor-safe way by raising IRQL.</P>

<PRE class=syntax><B>VOID 
</B>  <B>KeAcquireSpinLock(</B>
<B>    IN PKSPIN_LOCK</B>  <I>SpinLock</I><B>,</B>
<B>    OUT PKIRQL</B>  <I>OldIrql</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SpinLock</I></DT>

<DD>Pointer to an initialized spin lock for which the caller provides the storage.</DD>

<DT><I>OldIrql</I></DT>

<DD>Pointer to a variable that is set to the current IRQL when this call occurs.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Drivers for Windows&nbsp;XP and later should use the more efficient and reliable <A HREF="synchro_8ftz.htm">queued spin locks</A>, which are acquired by the <A HREF="k105_427m.htm"><B>KeAcquireInStackQueuedSpinLock</B></A> routine.</P>

<P>The current IRQL is saved in <I>OldIrql</I>. Then, the current IRQL is reset to DISPATCH_LEVEL, and the specified spin lock is acquired.</P>

<P>The <I>OldIrql</I> value must be specified when the spin lock is released with <A HREF="k105_3mia.htm"><B>KeReleaseSpinLock</B></A>.</P>

<P>Spin locks can cause serious problems if not used judiciously. In particular, no deadlock protection is performed and dispatching is disabled while the spin lock is held. Therefore:

<UL>
	<LI>The code within a critical region guarded by an spin lock must neither be pageable nor make any references to pageable data.</LI>

	<LI>The code within a critical region guarded by a spin lock can neither call any external function that might access pageable data or raise an exception, nor can it generate any exceptions.</LI>

	<LI>The caller should release the spin lock with <B>KeReleaseSpinLock</B> as quickly as possible.</LI>
</UL>

<P>Callers of <B>KeAcquireSpinLock</B> must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k105_427m.htm"><B>KeAcquireInStackQueuedSpinLock</B></A>, <A HREF="k105_9vaq.htm"><B>KeAcquireSpinLockAtDpcLevel</B></A>, <A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A>, <A HREF="k105_3mia.htm"><B>KeReleaseSpinLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeAcquireSpinLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
