<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PsCreateSystemThread</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PsCreateSystemThread">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_pscreatesystemthread_kr"></A>PsCreateSystemThread</H1>

<P><B>PsCreateSystemThread</B> creates a system thread that executes in kernel mode and returns a handle for the thread.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>PsCreateSystemThread(</B>
    <B>OUT PHANDLE</B>  <I>ThreadHandle</I><B>,</B>
    <B>IN ULONG</B>  <I>DesiredAccess</I><B>,</B>
    <B>IN POBJECT_ATTRIBUTES</B>  <I>ObjectAttributes</I>  <B>OPTIONAL,</B>
    <B>IN HANDLE</B>  <I>ProcessHandle</I>  <B>OPTIONAL,</B>
    <B>OUT PCLIENT_ID</B>  <I>ClientId</I>  <B>OPTIONAL,</B>
    <B>IN PKSTART_ROUTINE</B>  <I>StartRoutine</I><B>,</B>
    <B>IN PVOID</B>  <I>StartContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>ThreadHandle</I></DT>

<DD>Points to a variable that will receive the handle.  The driver must close the handle with <A HREF="k111_03aq.htm"><B>ZwClose</B></A> once the handle is no longer in use.</DD>

<DT><I>DesiredAccess</I></DT>

<DD>Specifies the <A HREF="k112_9sfm.htm">ACCESS_MASK</A> value that represents the requested types of access to the created thread. This value can be THREAD_ALL_ACCESS or (ACCESS_MASK) 0L for a driver-created thread.</DD>

<DT><I>ObjectAttributes</I></DT>

<DD>Points to a structure that specifies the object’s attributes. OBJ_PERMANENT, OBJ_EXCLUSIVE, and OBJ_OPENIF are not valid attributes for a thread object. On Windows XP and later operating systems, if the caller is not running in the system process context, it must set the OBJ_KERNEL_HANDLE attribute for <I>ObjectAttributes</I>.  Drivers for Windows 2000 and Windows 98/Me must only call <B>PsCreateSystemThread</B> from the system process context.</DD>

<DT><I>ProcessHandle</I></DT>

<DD>Specifies an open handle for the process in whose address space the thread is to be run. The caller’s thread must have PROCESS_CREATE_THREAD access to this process. If this parameter is not supplied, the thread will be created in the initial system process. This value should be NULL for a driver-created thread. Use the <B>NtCurrentProcess</B> macro to specify the current process.</DD>

<DT><I>ClientId</I></DT>

<DD>Points to a structure that receives the client identifier of the new thread. This value should be NULL for a driver-created thread.</DD>

<DT><I>StartRoutine</I></DT>

<DD>Is the entry point for a driver thread.</DD>

<DT><I>StartContext</I></DT>

<DD>Supplies a single argument passed to the thread when it begins execution.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>PsCreateSystemThread</B> returns STATUS_SUCCESS if the thread was created.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>.  Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Drivers that create device-dedicated threads call this routine, either when they initialize or when I/O requests begin to come in to such a driver’s Dispatch routines. For example, a driver might create such a thread when it receives an asynchronous device control request.</P>

<P><B>PsCreateSystemThread</B> creates a kernel-mode thread that begins a separate thread of execution within the system. Such a system thread has no TEB or user-mode context and runs only in kernel mode.</P>

<P>If the input <I>ProcessHandle</I> is NULL, the created thread is associated with the system process. Such a thread continues running until either the system is shut down or the thread terminates itself by calling <B>PsTerminateSystemThread</B>.</P>

<P>On Windows XP and later operating systems, driver routines that run in a process context other than that of the system process must set the OBJ_KERNEL_HANDLE attribute for the <I>ObjectAttributes</I> parameter of <B>PsCreateSystemThread</B>.   This restricts the use of the handle returned by <B>PsCreateSystemThread</B> to processes running in kernel mode.  Otherwise, the thread handle can be accessed by the process in whose context the driver is running. Drivers can set the OBJ_KERNEL_HANDLE attribute as follows.</P>

<PRE>InitializeObjectAttributes(&amp;<I>ObjectAttributes</I>, NULL, OBJ_KERNEL_HANDLE, NULL, NULL);
</PRE>

<P>Drivers for Windows 2000 and Windows 98/Me must only call <B>PsCreateSystemThread</B> from the system process context.</P>

<P>Callers of this routine must be running at IRQL PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k109_66uq.htm"><B>InitializeObjectAttributes</B></A>, <A HREF="k105_2hbm.htm"><B>KeSetBasePriorityThread</B></A>, <A HREF="k105_4zoy.htm"><B>KeSetPriorityThread</B></A>, <A HREF="k108_44aa.htm"><B>PsTerminateSystemThread</B></A>, <A HREF="k111_2zaq.htm"><B>ZwSetInformationThread</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PsCreateSystemThread"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
