<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlQueryRegistryValues</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlQueryRegistryValues">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlqueryregistryvalues_kr"></A>RtlQueryRegistryValues</H1>

<P>The <B>RtlQueryRegistryValues</B> routine allows the caller to query several values from the registry subtree with a single call.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>RtlQueryRegistryValues(</B>
<B>    IN ULONG</B>  <I>RelativeTo</I><B>,</B>
<B>    IN PCWSTR</B>  <I>Path</I><B>,</B>
<B>    IN PRTL_QUERY_REGISTRY_TABLE</B>  <I>QueryTable</I><B>,</B>
<B>    IN PVOID</B>  <I>Context</I><B>,</B>
<B>    IN PVOID</B>  <I>Environment</I>  <B>OPTIONAL</B>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>RelativeTo</I></DT>

<DD>Specifies whether <I>Path</I> is an absolute registry path or is relative to a predefined path as one of the following.

<TABLE>

<TR VALIGN="top">
<TH align=left width=13%>Value</TH>
<TH align=left width=87%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_ABSOLUTE</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is an absolute registry path.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_SERVICES</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is relative to <B>\Registry\Machine\System\CurrentControlSet\Services</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_CONTROL</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is relative to <B>\Registry\Machine\System\CurrentControlSet\Control</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_WINDOWS_NT</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is relative to <B>\Registry\Machine\Software\Microsoft\<BR>
Windows NT\CurrentVersion</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_DEVICEMAP</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is relative to <B>\Registry\Machine\Hardware\DeviceMap</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_USER</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Path is relative to <B>\Registry\User\CurrentUser</B>.  (For a system process, this is <B>\Users\.Default</B>.)</TD>
</TR>
</TABLE><BR>



<P>The <I>RelativeTo</I> value can be modified by ORing it with one of the following flags.


<TABLE>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_OPTIONAL</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Specifies that the key referenced by this parameter and the <I>Path</I> parameter are optional.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_REGISTRY_HANDLE</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>&nbsp;</TD>
<TD width=87%>Specifies that the <I>Path</I> parameter is actually a registry handle to use.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>Path</I></DT>

<DD>Pointer to either an absolute registry path or a path relative to the known location specified by the <I>RelativeTo</I> parameter. Note that the names of keys in such a path must be known to the caller, including the last key in the path. If the RTL_REGISTRY_HANDLE flag is specified, this parameter is a registry handle for an already opened key to be queried directly.</DD>

<DT><I>QueryTable</I></DT>

<DD>Pointer to a table of one or more value names and subkey names in which the caller is interested. Each table entry contains the address of a caller-supplied <I>QueryRoutine</I> function that will be called for each value name that exists in the registry. The table must be terminated with a NULL table entry, which is a table entry with a NULL <B>QueryRoutine</B> member and a NULL <B>Name</B> member. The structure for query table entries is defined as follows:

<PRE>typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
    ULONG Flags;
    PWSTR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE;</PRE>


<DL>
<DT><B>QueryRoutine</B></DT>

<DD>The address of a <I>QueryRoutine</I> function that is called with the name, type, data, and data length of a registry value. If this member is NULL, it marks the end of the table.

<P>A <I>QueryRoutine</I> function is declared as follows:


<PRE>NTSTATUS
<I>QueryRoutine</I> (
    IN PWSTR <I>ValueName</I>,
    IN ULONG <I>ValueType</I>,
    IN PVOID <I>ValueData</I>,
    IN ULONG <I>ValueLength</I>,
    IN PVOID <I>Context</I>,
    IN PVOID <I>EntryContext</I>
    );</PRE>
</DD>

<DT><B>Flags</B></DT>

<DD>Control how the remaining members are to be interpreted, as follows.

<TABLE>

<TR VALIGN="top">
<TH align=left width=12%>Value</TH>
<TH align=left width=88%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_SUBKEY</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>The <B>Name</B> of this table entry is another path to a registry key, and all following table entries are for that key rather than the key specified by the <I>Path</I> parameter. This change in focus lasts until the end of the table or until another RTL_REGISTRY_SUBKEY or RTL_QUERY_REGISTRY_TOPKEY entry is seen. Each such entry must specify a path that is relative to the <I>Path</I> specified in the call to <B>RtlQueryRegistryValues</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_TOPKEY</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>Resets the current registry key handle to the original one specified by the <I>RelativeTo</I> and <I>Path</I> parameters. This is useful for getting back to the original node after descending into subkeys with the RTL_QUERY_REGISTRY SUBKEY flag.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_REQUIRED</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>Specifies that this value is required and, if it is not found, <B>RtlQueryRegistryValues</B> immediately exits with a status code of STATUS_OBJECT_NAME_NOT_FOUND. This occurs if the <B>Name</B> member is NULL and the current key has no subkeys, or if <B>Name</B> specifies a nonexistent subkey. (If this flag is not specified, then when no match is found for a non-NULL <B>Name</B>, the routine uses the <B>DefaultValue</B> member as the value. When <B>Name</B> is NULL and the current key has no subkeys, the routine simply skips that table entry.)</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_NOVALUE</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>Specifies that even though there is no <B>Name</B> for this table entry, all the caller wants is a callback: that is, the caller does <I>not</I> want to enumerate all the values under the current key. <I>QueryRoutine</I> is called with NULL for <I>ValueData</I>, REG_NONE for <I>ValueType</I>, and zero for <I>ValueLength</I>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_NOEXPAND</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>Specifies that, if the type of this registry value is REG_EXPAND_SZ or REG_MULTI_SZ, <B>RtlQueryRegistryValues</B> is <I>not</I> to do any preprocessing of these registry values before calling <I>QueryRoutine</I>. By default, <B>RtlQueryRegistryValues</B> expands environment variable references into REG_EXPAND_SZ values, enumerates each zero-terminated string in a REG_MULTI_SZ value, and calls <I>QueryRoutine</I> once with each, making it look like there is more than one REG_SZ value with the same <I>ValueName</I>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_DIRECT</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>The <B>QueryRoutine</B> member is ignored, and the <B>EntryContext</B> points to the buffer to store the value. </TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=100%>RTL_QUERY_REGISTRY_DELETE</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD width=88%>This is used to delete value keys after they have been queried.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>Name</B></DT>

<DD>This is the name of a Value that the caller queried. If <B>Name</B> is NULL, the <I>QueryRoutine</I> function specified for this table entry is called for all values associated with the current registry key. If the RTL_QUERY_REGISTRY_DIRECT flag is set, a non-NULL value for <B>Name</B> must be provided.</DD>

<DT><B>EntryContext</B></DT>

<DD>If the RTL_QUERY_REGISTRY_DIRECT flag is set, this is a pointer to the buffer to store the result of the query operation for this key. Otherwise, this value is passed as the <I>EntryContext</I> parameter of <I>QueryRoutine</I>. </DD>

<DT><B>DefaultType</B></DT>

<DD>Specifies the REG_<I>XXX</I> type of the data to be returned if no matching key is found and the RTL_QUERY_REGISTRY_REQUIRED flag is not specified. Specify REG_NONE for no default type.</DD>

<DT><B>DefaultData</B></DT>

<DD>Specifies the default value to be returned if no matching key is found and the RTL_QUERY_REGISTRY_REQUIRED flag is not specified. This member is ignored if <B>DefaultType</B> = REG_NONE. </DD>

<DT><B>DefaultLength</B></DT>

<DD>Specifies the length, in bytes, of the <B>DefaultData</B> member. If <B>DefaultType</B> is REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, callers can optionally specify zero to indicate <B>RtlQueryRegistryValues</B> should compute the length based on the default data value. If <B>DefaultType</B> = REG_NONE, this member is ignored. </DD>
</DL>
</DD>

<DT><I>Context</I></DT>

<DD>Specifies the value passed as the <I>Context</I> parameter of a <I>QueryRoutine</I> function each time it is called. </DD>

<DT><I>Environment</I></DT>

<DD>Pointer to the environment used when expanding variable values in REG_EXPAND_SZ registry values, or a NULL pointer (optional).
</DD>
</DL>

<H4>Return Value</H4>

<P><B>RtlQueryRegistryValues</B> returns an NTSTATUS code. The possible return values include:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>The entire query table was processed successfully.</DD>

<DT>STATUS_INVALID_PARAMETER</DT>

<DD>Processing of the query table terminated with an invalid table entry. A table entry can be invalid if the specified flags require the <B>QueryRoutine</B> or <B>Name</B> members to be non-NULL, but a NULL value was provided.</DD>

<DT>STATUS_OBJECT_NAME_NOT_FOUND</DT>

<DD>The <I>Path</I> parameter does not match a valid key, or processing of the query table terminated with an entry with the RTL_QUERY_REGISTRY_REQUIRED flag set and no matching key is found. This occurs if the <B>Name</B> member is NULL and the current key has no subkeys, or if <B>Name</B> specifies a nonexistent subkey.</DD>

<DT>STATUS_BUFFER_TOO_SMALL</DT>

<DD>The RTL_QUERY_REGISTRY_DIRECT flag is set, and the buffer specified by <B>EntryContext</B> is too small to hold the key value data.
</DD>
</DL>

<P><B>RtlQueryRegistryValues</B> also terminates processing of the table if the <I>QueryRoutine</I> function for a table entry returns an NTSTATUS error code, and returns that error code as its result. (With one exception:  If <I>QueryRoutine</I> returns STATUS_BUFFER_TOO_SMALL, the error code is ignored.)</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>The caller specifies an initial key path and a table. The table contains one or more entries that describe the key values and subkey names in which the caller is interested.  The table is terminated by an entry with a NULL <B>QueryRoutine</B> member and a NULL <B>Name</B> member. The table must be allocated from nonpaged pool.</P>

<P>If an entry does not specify the RTL_QUERY_REGISTRY_DIRECT flag, <B>RtlQueryRegistryValues</B> uses the specified <I>QueryRoutine</I> function to report the value name, type, data, and data length, in bytes, to the caller. If the <B>Name</B> member of the entry is NULL, <B>RtlQueryRegistryValues</B> reports every direct subkey of the key. If the key type is REG_MULTI_SZ and the RTL_QUERY_REGISTRY_NOEXPAND flag not is specified, the routine calls <I>QueryRoutine</I> separately for each individual string; otherwise the routine reports it as a single value. If an entry specifies the RTL_QUERY_REGISTRY_DIRECT flag, <B>RtlQueryRegistryValues</B> stores the value of the key in the buffer pointed to by the entry's <B>EntryContext</B> member. The format of the returned data is as follows.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Key data type</TH>
<TH align=left width=52%>How data is returned</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>A zero-terminated Unicode string (such as REG_SZ, REG_EXPAND_SZ).</TD>
<TD width=52%><B>EntryContext</B> must point to an initialized UNICODE_STRING structure. If the <B>Buffer</B> member of UNICODE_STRING is NULL, the routine allocates storage for the string data. Otherwise, it stores the string data in the buffer that <B>Buffer</B> points to.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>REG_MULTI_SZ</TD>
<TD width=52%>You must specify the RTL_QUERY_REGISTRY_NOEXPAND flag for this key data type. <B>EntryContext</B> points to an initialized UNICODE_STRING structure. The routine stores the key value as a single string value. Each individual component within the string is terminated by a zero.
<P>If the <B>Buffer</B> member of UNICODE_STRING is NULL, the routine allocates storage for the string data. Otherwise, it stores the string data in the buffer that <B>Buffer</B> points to.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>Nonstring data with size, in bytes, &lt;= <B>sizeof</B>(ULONG)</TD>
<TD width=52%>The value is stored in the memory location specified by <B>EntryContext</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>Nonstring data with size, in bytes, &gt; <B>sizeof</B>(ULONG)</TD>
<TD width=52%>The buffer pointed to by <B>EntryContext</B> must begin with a signed LONG value. The magnitude of the value must specify the size, in bytes, of the buffer. If the sign of the value is negative, <B>RtlQueryRegistryValues</B> will only store the data of the key value. Otherwise, it will use the first ULONG in the buffer to record the value length, in bytes, the second ULONG to record the value type, and the rest of the buffer to store the value data.</TD>
</TR>
</TABLE><BR>

<P>If an error occurs at any stage of processing of the query table <B>RtlQueryRegistryValues</B> stops processing the table and returns the error status.</P>

<P>See <A HREF="k111_5yya.htm"><B>ZwSetValueKey</B></A> for a description of the possible REG_<I>XXX</I> values.</P>

<P>Callers of <B>RtlQueryRegistryValues</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k109_4nci.htm"><B>RtlZeroMemory</B></A>, <A HREF="k111_3wvm.htm"><B>ZwEnumerateKey</B></A>, <A HREF="k111_9dtf.htm"><B>ZwEnumerateValueKey</B></A>, <A HREF="k111_5yya.htm"><B>ZwSetValueKey</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlQueryRegistryValues"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
