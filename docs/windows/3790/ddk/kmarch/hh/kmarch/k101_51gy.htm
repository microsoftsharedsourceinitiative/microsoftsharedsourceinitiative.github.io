<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Driver Routines and I/O Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Driver Routines and I/O Objects">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_driver_routines_and_i_o_objects_kr"></A>Driver Routines and I/O Objects</H2>

<DL>
<DT><A HREF="k105_99rm.htm"><B>KeSynchronizeExecution</B></A> </DT>

<DD>Synchronizes the execution of a driver-supplied <A HREF="drvrrtns_4m2a.htm"><I>SynchCritSection</I></A> routine with that of the ISR associated with a set of interrupt objects, given a pointer to the interrupt objects.</DD>

<DT><A HREF="k104_3mb6.htm"><B>IoRequestDpc</B></A> </DT>

<DD>Queues a driver-supplied <A HREF="drvrrtns_9ycy.htm"><I>DpcForIsr</I></A> routine to complete interrupt-driven I/O processing at a lower IRQL.</DD>

<DT><A HREF="k105_75iq.htm"><B>KeInsertQueueDpc</B></A> </DT>

<DD>Queues a DPC to be executed as soon as the IRQL of a processor drops below DISPATCH_LEVEL; returns FALSE if the DPC object is already queued.</DD>

<DT><A HREF="k105_7i2a.htm"><B>KeRemoveQueueDpc</B></A> </DT>

<DD>Removes a given DPC object from the DPC queue; returns FALSE if the object is not in the queue.</DD>

<DT><A HREF="k105_2pf6.htm"><B>KeSetImportanceDpc</B></A> </DT>

<DD>Controls how a particular DPC is queued and, to some degree, how soon the DPC routine is run.</DD>

<DT><A HREF="k105_9ovm.htm"><B>KeSetTargetProcessorDpc</B></A> </DT>

<DD>Controls on which processor a particular DPC subsequently will be queued.</DD>

<DT><A HREF="k105_6i0i.htm"><B>KeFlushQueuedDpcs</B></A> </DT>

<DD>Call this routine to wait for all queued DPCs to execute.</DD>

<DT><A HREF="kdma_92r6.htm"><B>AllocateAdapterChannel</B></A> </DT>

<DD>Connects a device object to an adapter object and calls a driver-supplied <A HREF="drvrrtns_7vea.htm"><I>AdapterControl</I></A> routine to carry out an I/O operation through the system DMA controller or a bus-master adapter as soon as the appropriate DMA channel and any necessary map registers are available. (This routine reserves exclusive access to a DMA channel and map registers for the specified device.)</DD>

<DT><A HREF="kdma_3bua.htm"><B>FreeAdapterChannel</B></A> </DT>

<DD>Releases an adapter object, representing a system DMA channel, and optionally releases map registers, if any were allocated.</DD>

<DT><A HREF="kdma_5rqq.htm"><B>FreeMapRegisters</B></A> </DT>

<DD>Releases a set of map registers that were saved from a call to <A HREF="kdma_92r6.htm"><B>AllocateAdapterChannel</B></A>, after the registers have been used by <A HREF="k104_88j6.htm"><B>IoMapTransfer</B></A> and the bus-master DMA transfer is complete.</DD>

<DT><A HREF="k104_4qia.htm"><B>IoAllocateController</B></A> </DT>

<DD>Connects a device object to a controller object and calls a driver-supplied <A HREF="drvrrtns_2ype.htm"><I>ControllerControl</I></A> routine to carry out an I/O operation on the device controller as soon as the controller is not busy. (This routine reserves exclusive access to the hardware controller for the specified device.)</DD>

<DT><A HREF="k104_8hte.htm"><B>IoFreeController</B></A> </DT>

<DD>Releases a controller object, provided that all device operations queued to the controller for the current IRP have completed.</DD>

<DT><A HREF="k104_6m5u.htm"><B>IoStartTimer</B></A> </DT>

<DD>Enables the timer for a given device object and calls the driver-supplied IoTimer routine once per second thereafter.</DD>

<DT><A HREF="k104_09wy.htm"><B>IoStopTimer</B></A> </DT>

<DD>Disables the timer for a given device object so that the driver-supplied IoTimer routine is not called unless the driver reenables the timer.</DD>

<DT><A HREF="k105_9mlu.htm"><B>KeSetTimer</B></A> </DT>

<DD>Sets the absolute or relative interval at which a timer object will be set to the Signaled state and optionally supplies a timer DPC to be executed after the interval expires.</DD>

<DT><A HREF="k105_57aq.htm"><B>KeSetTimerEx</B></A> </DT>

<DD>Sets the absolute or relative interval at which a timer object will be set to the Signaled state, optionally supplies a timer DPC to be executed when the interval expires, and optionally supplies a recurring interval for the timer.</DD>

<DT><A HREF="k105_6xf6.htm"><B>KeCancelTimer</B></A> </DT>

<DD>Cancels a timer object before the interval passed to <B>KeSetTimer</B> expires; dequeues a timer DPC before the timer interval, if any was set, expires.</DD>

<DT><A HREF="k105_6asz.htm"><B>KeReadStateTimer</B></A> </DT>

<DD>Returns whether a given timer object is set to the Signaled state.</DD>

<DT><A HREF="k104_1nsi.htm"><B>IoStartPacket</B></A> </DT>

<DD>Calls the driver's <A HREF="drvrrtns_6isy.htm"><I>StartIo</I></A> routine with the given IRP for the given device object or inserts the IRP into the device queue if the device is already busy, specifying whether the IRP is cancelable.</DD>

<DT><A HREF="k104_7eb6.htm"><B>IoStartNextPacket</B></A> </DT>

<DD>Dequeues the next IRP for a given device object, specifying whether the IRP is cancelable, and calls the driver's <I>StartIo</I> routine.</DD>

<DT><A HREF="k104_2hte.htm"><B>IoStartNextPacketByKey</B></A> </DT>

<DD>Dequeues the next IRP, according to the specified sort-key value, for a given device object. Specifies whether the IRP is cancelable and calls the driver's <I>StartIo</I> routine.</DD>

<DT><A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> </DT>

<DD>Registers a driver-supplied <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine with a given IRP, so the IoCompletion routine is called when the next-lower-level driver has completed the requested operation in one or more of the following ways: successfully, with an error, or by canceling the IRP.</DD>

<DT><A HREF="k104_17zm.htm"><B>IoSetCompletionRoutineEx</B></A></DT>

<DD>Same as <B>IoSetCompletionRoutine</B>, except that it guarantees a non-Plug and Play driver is not unloaded before the <I>IoCompletion</I> routine exits.</DD>

<DT><A HREF="k104_6hiq.htm"><B>IoSetCancelRoutine</B></A> </DT>

<DD>Sets or clears the <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine in an IRP. Setting a <I>Cancel</I> routine makes an IRP cancelable.</DD>

<DT><A HREF="k105_66nm.htm"><B>KeStallExecutionProcessor</B></A> </DT>

<DD>Stalls the caller (a device driver) for a given interval on the current processor.</DD>

<DT><A HREF="k102_5xo2.htm"><B>ExAcquireResourceExclusiveLite</B></A> </DT>

<DD>Acquires an initialized resource for exclusive access by the calling thread and optionally waits for the resource to be acquired.</DD>

<DT><A HREF="k102_61bm.htm"><B>ExTryToAcquireResourceExclusiveLite</B></A> </DT>

<DD>Acquires a given resource for exclusive access immediately or returns FALSE. </DD>

<DT><A HREF="k102_1u0i.htm"><B>ExAcquireResourceSharedLite</B></A> </DT>

<DD>Acquires an initialized resource for shared access by the calling thread and optionally waits for the resource to be acquired. </DD>

<DT><A HREF="k102_316a.htm"><B>ExAcquireSharedStarveExclusive</B></A> </DT>

<DD>Acquires a given resource for shared access without waiting for any pending attempts to acquire exclusive access to the same resource.</DD>

<DT><A HREF="k102_8ape.htm"><B>ExAcquireSharedWaitForExclusive</B></A> </DT>

<DD>Acquires a given resource for shared access, optionally waiting for any pending exclusive waiters to acquire and release the resource first. </DD>

<DT><A HREF="k102_7rjm.htm"><B>ExReleaseResourceForThreadLite</B></A> </DT>

<DD>Releases a given resource that was acquired by the given thread.</DD>

<DT><A HREF="k111_8ype.htm"><B>ZwReadFile</B></A> </DT>

<DD>Reads data from an open file. If the caller opened the file object with certain parameters, the caller can wait on the file handle for completion of the I/O.</DD>

<DT><A HREF="k111_68fm.htm"><B>ZwWriteFile</B></A> </DT>

<DD>Writes data to an open file. If the caller opened the file object with certain parameters, the caller can wait on the file handle for completion of the I/O.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Driver%20Routines%20and%20I%2FO%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
