<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoSetCancelRoutine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoSetCancelRoutine">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iosetcancelroutine_kr"></A>IoSetCancelRoutine</H1>

<P>The <B>IoSetCancelRoutine</B> routine sets up a driver-supplied <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine to be called if a given IRP is canceled. </P>

<PRE class=syntax><B>PDRIVER_CANCEL 
</B>  <B>IoSetCancelRoutine(</B>
<B>    IN PIRP</B>  <I>Irp</I><B>,</B>
<B>    IN PDRIVER_CANCEL</B>  <I>CancelRoutine</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Pointer to the IRP being put into or removed from a cancelable state.</DD>

<DT><I>CancelRoutine</I></DT>

<DD>Specifies the entry point of the caller-supplied <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A> routine to be called if the specified IRP is canceled or is NULL if the given IRP is being removed from the cancelable state. This routine is declared as follows:

<PRE>VOID
(*PDRIVER_CANCEL)(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );</PRE>

</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoSetCancelRoutine</B> returns the previous value of <B>Irp</B>-&gt;<B>CancelRoutine</B>. If no <I>Cancel</I> routine was previously set, or if IRP cancellation is already in progress, <B>IoSetCancelRoutine</B> returns NULL.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>This routine can disable the <I>Cancel</I> routine currently set in an IRP.</P>

<P>A driver must hold the system cancel spin lock when calling this routine if the driver uses the I/O-manager-supplied device queue in the device object. The driver executes at IRQL&nbsp;= DISPATCH_LEVEL after calling <A HREF="k104_9fw2.htm"><B>IoAcquireCancelSpinLock</B></A> until it releases the cancel spin lock with <A HREF="k104_5po2.htm"><B>IoReleaseCancelSpinLock</B></A>. </P>

<P>If the driver manages its own queues of IRPs, then the driver need not hold the cancel spin lock when calling this routine. <B>IoSetCancelRoutine</B> uses an interlocked exchange intrinsic to set the address of the <I>Cancel</I> routine as an atomic operation. Reduced usage of the cancel spin lock can improve driver performance and overall system performance.</P>

<P>Driver <I>Cancel</I> routines are called at IRQL&nbsp;= DISPATCH_LEVEL with the cancel spin lock held. The <I>Cancel</I> routine must release the cancel spin lock before it returns control.</P>

<H4>See Also</H4>

<P><A HREF="k104_9fw2.htm"><B>IoAcquireCancelSpinLock</B></A>, <A HREF="k104_5po2.htm"><B>IoReleaseCancelSpinLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoSetCancelRoutine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
