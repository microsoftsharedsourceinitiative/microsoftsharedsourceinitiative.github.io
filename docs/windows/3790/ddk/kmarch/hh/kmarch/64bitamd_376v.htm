<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Stack Allocation</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_stack_allocation_kg"></A>Stack Allocation</H4>

<P>A function’s prolog code must allocate stack space for local variables, saved registers, stack parameters, and register parameters.</P>

<P>The parameter area is always at the bottom of the stack (even if the <B>alloca</B> function is used), so that the area is always adjacent to the return address during any function call. The area contains enough space to hold all the parameters required by any function that might be called. Note that space is always allocated for the register parameters, even if the parameters themselves are never homed to the stack; a callee is guaranteed that space has been allocated for all its parameters. Home addresses are required for the register arguments so a contiguous area is available in case the called function must take the address of the argument list (va_list) or an individual argument. This area also provides a convenient place to save register arguments during thunk execution and as a debugging option (for example, the arguments are easy to find during debugging if they are stored at their home addresses in the prolog code).</P>

<P>If space is dynamically allocated (using <B>alloca</B>) in a function, then a nonvolatile register must be used as a frame pointer to mark the base of the fixed part of the stack. This register must be saved and initialized in the prolog code. Note that when <B>alloca</B> is used, calls to the same callee from the same caller might have different home addresses for their register parameters.</P>

<P>The stack is always maintained as 16-byte aligned, except within the prolog code (for example, after the return address is pushed), and except where indicated in <A HREF="64bitamd_6ron.htm">Function Types</A> for a certain class of frame functions.</P>

<P>The following is an example of the stack layout where function A calls a non-eaf function B. Function A’s prolog has already allocated space for all the register and stack parameters required by B at the bottom of the stack. The call pushes the return address and B’s prolog allocates space for its local variables, nonvolatile registers as well as the space needed for it to call functions. If B uses <B>alloca</B>, the space is allocated between the local variable/nonvolatile register save area and the parameter stack area. </P>

<P><IMG SRC="images/amdstack.gif" ALT="" BORDER=0></P>

<P><B>Example Where Function A Calls a Nonleaf Function B</B></P>

<P>When the function B calls another function, the return address is pushed just below the home address for RCX.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Stack%20Allocation"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
