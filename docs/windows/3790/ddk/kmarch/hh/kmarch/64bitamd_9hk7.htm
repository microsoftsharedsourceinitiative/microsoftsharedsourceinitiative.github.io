<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Overloading of Function Templates</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_overloading_of_function_templates_kg"></A>Overloading of Function Templates</H4>

<P>Earlier versions of compilers in the DDK treated the following <B>foo(int)</B> as a specialization of <B>foo</B>. The compiler for AMD64 treats <B>foo(int)</B> as an overload; therefore, the behavior at run time is to not call <B>foo(int)</B>. </P>

<PRE>template&lt;class T&gt;
void foo(T) {       // Called.
}
void foo(int) {       // Not called.
}
int main() {
    foo&lt;int&gt;(3);
}</PRE>

<P>In this case, you can get identical run-time behavior (that is, both versions of <B>foo</B> can be called) by making <B>foo(int)</B> an explicit specialization instead of what should be an overload. The specialization is then called.</P>

<PRE>template&lt;class T&gt;
void foo(T) {
}
template&lt;&gt; void foo&lt;int&gt;(int) {
}
int main() {
            foo&lt;int&gt;(3);
}</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Overloading%20of%20Function%20Templates"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
