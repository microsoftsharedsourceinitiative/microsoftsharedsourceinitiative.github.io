<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Performing DMA in 64-Bit Windows</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Performing DMA in 64-Bit Windows">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_performing_dma_in_64_bit_windows_kg"></A>Performing DMA in 64-Bit Windows</H3>

<P>Adding 64-bit addressing support to your driver can significantly improve overall system performance. This is particularly important for device drivers that perform direct memory access (DMA). In 64-bit Microsoft® Windows®, device drivers that perform DMA but do not support 64-bit addressing are double-buffered, which results in lower relative performance. </P>

<P>Although double-buffering usually has a relatively small impact (single percentage points) on 8 GB systems, this is enough to impact I/O-intensive tasks, such as database activity. As the amount of physical memory increases, this negative performance impact increases as well.</P>

<P>To support 64-bit DMA, drivers should observe the following guidelines:

<OL>
	<LI>Use PHYSICAL_ADDRESS structures for physical address calculations. </LI>

	<LI>Treat the entire 64-bit address as a valid physical address. For example, drivers should not call <A HREF="k106_6ur6.htm"><B>MmGetPhysicalAddress</B></A> on a locked buffer, discard the high 32 bits, and pass the truncated address to a 32-bit component adapter. This results in corrupted memory, lost I/O, and system failure. </LI>

	<LI>Use the high-performance scatter/gather routines (<A HREF="kdma_0pbm.htm"><B>GetScatterGatherList</B></A> and <A HREF="kdma_5u42.htm"><B>PutScatterGatherList</B></A>) that were added in Windows&nbsp;2000. </LI>

	<LI>Check the value of the <B>Mm64BitPhysicalAddress</B> global system variable. If it is TRUE, the system supports 64-bit physical addressing. </LI>

	<LI>Set the <B>Dma64BitAddresses</B> member of the <A HREF="k112_7f76.htm">DEVICE_DESCRIPTION</A> structure to TRUE to indicate that your driver supports 64-bit DMA addresses. </LI>
</OL>

<P>The DMA routines in 32-bit Windows are 64-bit-ready. If your device driver uses these routines correctly, your DMA code should work without modification on 64-bit Windows.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Performing%20DMA%20in%2064-Bit%20Windows"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
