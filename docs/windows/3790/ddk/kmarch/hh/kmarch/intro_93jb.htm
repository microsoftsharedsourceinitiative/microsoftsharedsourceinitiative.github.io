<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Supporting Asynchronous I/O</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Supporting Asynchronous I/O">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_supporting_asynchronous_i_o_kg"></A>Supporting Asynchronous I/O</H2>

<P>The I/O Manager provides asynchronous I/O support so that the originator of an I/O request (usually a user-mode application, but sometimes another driver) can continue executing, rather than waiting for its I/O request to be completed. Providing asynchronous I/O support improves overall system throughput, as well as the performance of any code that makes an I/O request.</P>

<P>As a consequence, kernel-mode drivers do not necessarily process I/O requests in the same order they were sent to the I/O Manager. The I/O Manager or a higher level driver can reorder I/O requests as they are received or can split a large data transfer request into smaller transfer requests. Moreover, a driver can overlap I/O request processing, particularly in a symmetric multiprocessor platform, as mentioned in <A HREF="intro_725j.htm">Multiprocessor Safe</A>.</P>

<P>Furthermore, a kernel-mode driver's processing of an individual I/O request is not necessarily serialized. That is, a driver does not process each IRP to completion before it starts processing the next incoming I/O request, as drivers naturally do in a single-tasking operating system written to support synchronous I/O in uniprocessor machines.</P>

<P>Instead, a driver responds to the current IRP as it is passed to the driver's standard routines by carrying out whatever routine-specific operations are necessary to eventually satisfy the current request. However, a lowest level driver is required to help the I/O Manager and any higher level drivers processing the same IRPs to track the status of each request by setting the I/O status block in the IRP.</P>

<P>Drivers also can maintain state information about their current I/O operations in a special part of their device objects, called a <A HREF="devobjts_1gdj.htm">device extension</A>.</P>

<P>For more information, see <A HREF="irps_0uuf.htm">Handling IRPs</A> and <A HREF="iputoput_92cn.htm">Input/Output Techniques</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Supporting%20Asynchronous%20I%2FO"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
