<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeSaveFloatingPointState</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeSaveFloatingPointState">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kesavefloatingpointstate_kr"></A>KeSaveFloatingPointState</H1>

<P>The <B>KeSaveFloatingPointState</B> routine saves the nonvolatile floating-point context so the caller can carry out floating-point operations. </P>

<PRE class=syntax><B>NTSTATUS
</B>  <B>KeSaveFloatingPointState(</B>
<B>    OUT PKFLOATING_SAVE</B>  <I>FloatSave</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>FloatSave</I></DT>

<DD>Pointer to a caller-allocated resident buffer, which must be at least <B>sizeof(</B>KFLOATING_SAVE<B>)</B>. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>KeSaveFloatingPointState</B> returns STATUS_SUCCESS if it saved the current thread's floating-point context and set up a fresh floating point context for the caller. Otherwise, it returns one of the following:

<DL>
<DT>STATUS_ILLEGAL_FLOAT_CONTEXT</DT>

<DD>The system is configured to use floating point emulation, rather than doing FP operations in the processors. </DD>

<DT>STATUS_INSUFFICIENT_RESOURCES</DT>

<DD><B>KeSaveFloatingPointState</B> could not allocate sufficient memory to save the current thread's floating-point context. 
</DD>
</DL>

<H4>Return Value</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>A successful call to <B>KeSaveFloatingPointState</B> allows the caller to carry out floating point operations of its own, but such a caller must restore the previous nonvolatile floating-point context as soon as its FP operations are done. Any routine that calls <B>KeSaveFloatingPointState</B> <I>must</I> call <A HREF="k105_2njm.htm"><B>KeRestoreFloatingPointState</B></A> before that routine returns control. </P>

<P>If the call to <B>KeSaveFloatingPointState</B> is successful, the data at <I>FloatSave</I> is opaque to the caller, which can release the buffer it allocated only after calling <B>KeRestoreFloatingPointState</B>.</P>

<P>For performance reasons, drivers should avoid doing any floating point operations unless absolutely necessary. The overhead of saving and restoring the current thread's nonvolatile floating point state degrades the performance of any driver that does floating-point operations. </P>

<P>Callers of <B>KeSaveFloatingPointState</B> must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="k105_8fxu.htm"><B>KeGetCurrentThread</B></A>, <A HREF="k105_2njm.htm"><B>KeRestoreFloatingPointState</B></A>, <A HREF="k108_0q42.htm"><B>PsCreateSystemThread</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeSaveFloatingPointState"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
