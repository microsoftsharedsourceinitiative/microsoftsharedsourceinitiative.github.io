<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ZwCreateSection</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ZwCreateSection">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_section_object_kg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_zwcreatesection_kr"></A>ZwCreateSection</H1>

<P>The <B>ZwCreateSection</B> routine creates a <A HREF="JavaScript:hhobj_1.Click()">section object</A> and returns a section object handle with the specified desired access. </P>

<PRE class=syntax><B>NTSTATUS</B> 
  <B>ZwCreateSection(</B>
    <B>OUT PHANDLE</B>  <I>SectionHandle</I><B>,</B>
    <B>IN ACCESS_MASK</B>  <I>DesiredAccess</I><B>,</B>
    <B>IN POBJECT_ATTRIBUTES</B>  <I>ObjectAttributes</I><B> OPTIONAL,</B>
    <B>IN PLARGE_INTEGER</B>  <I>MaximumSize</I><B> OPTIONAL,</B>
    <B>IN ULONG</B>  <I>SectionPageProtection</I><B>,</B>
    <B>IN ULONG</B>  <I>AllocationAttributes</I><B>,</B>
    <B>IN HANDLE</B>  <I>FileHandle</I><B> OPTIONAL</B>
    <B>);</B> </PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SectionHandle</I></DT>

<DD>Pointer to a variable that will receive the section object handle if this call is successful.</DD>

<DT><I>DesiredAccess</I></DT>

<DD>Specifies the <A HREF="k112_9sfm.htm">ACCESS_MASK</A> value that expresses the requested access to the section object. The system-defined set of <I>DesiredAccess</I> flags defines the following specific access rights for section objects. 

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Flag</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_EXTEND_SIZE</TD>
<TD width=52%>The size of the section can be dynamically extended. </TD>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_MAP_EXECUTE</TD>
<TD width=52%>Views of this section are executable.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_MAP_READ</TD>
<TD width=52%>Views of this section are readable.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_MAP_WRITE</TD>
<TD width=52%>Views of this section are writeable.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_QUERY</TD>
<TD width=52%>The section object can be queried for information about the section. Drivers should set this bit. </TD>
</TR>

<TR VALIGN="top">
<TD width=48%>SECTION_ALL_ACCESS</TD>
<TD width=52%>All of the above flags ORed with the system-defined STANDARD_RIGHTS_REQUIRED.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ObjectAttributes</I></DT>

<DD>Pointer to a structure that contains the attributes of the section to be opened. The structure was previously initialized by calling <A HREF="k109_66uq.htm"><B>InitializeObjectAttributes</B></A>. If the caller is running in the system process context, this parameter can be NULL. Otherwise, the caller must set the OBJ_KERNEL_HANDLE attribute in the call to <B>InitializeObjectAttributes</B>. </DD>

<DT><I>MaximumSize</I></DT>

<DD>Specifies the maximum size, in bytes, of the section. This value is rounded up by <B>ZwCreateSection</B> to the nearest multiple of PAGE_SIZE. If the section is backed by the paging file, <I>MaximumSize</I> specifies the actual size of the section. If the section is backed by an ordinary file, <I>MaximumSize</I> specifies the maximum size to which the file can be extended or mapped.</DD>

<DT><I>SectionPageProtection</I></DT>

<DD>Specifies the protection to place on each page in the section. Specify one of the following:  PAGE_READONLY, PAGE_READWRITE, PAGE_EXECUTE, or PAGE_WRITECOPY. For a description of each PAGE_XXX value, see the <B>CreateFileMapping</B> routine in the Platform SDK. </DD>

<DT><I>AllocationAttributes</I></DT>

<DD>Specifies a bitmask of SEC_XXX flags that determine the allocation attributes of the section. For a description of the possible SEC_XXX flags, see the documentation of the <B>CreateFileMapping</B> routine in the Platform SDK.</DD>

<DT><I>FileHandle</I></DT>

<DD>Optionally specifies a handle for an open file object. If the value of <I>FileHandle</I> is NULL, the section is backed by the paging file. Otherwise the section is backed by the specified file.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I>. Include <I>ntddk.h</I>. </P>

<H4>Return Value</H4>

<P><B>ZwCreateSection</B> returns STATUS_SUCCESS on success, or the appropriate error code on failure. Possible error status codes include the following:

<DL>
<DT>STATUS_FILE_LOCK_CONFLICT</DT>

<DD>The file specified by the <I>FileObject</I> parameter is locked.</DD>

<DT>STATUS_INVALID_FILE_FOR_SECTION</DT>

<DD>The file specified by <I>FileObject</I> does not support sections.</DD>

<DT>STATUS_INVALID_PAGE_PROTECTION</DT>

<DD>The value specified for the <I>SectionPageProtection</I> parameter is invalid. </DD>

<DT>STATUS_MAPPED_FILE_SIZE_ZERO</DT>

<DD>The size of the file specified by <I>FileObject</I> is zero, and <I>MaximumSize</I> is zero.</DD>

<DT>STATUS_SECTION_TOO_BIG</DT>

<DD>The value of <I>MaximumSize</I> is too big. This occurs when either <I>MaximumSize</I> is greater than the system-defined maximum for sections, or if <I>MaximumSize</I> is greater than the specified file and the section is not writeable.
</DD>
</DL>

<H4>Comments</H4>

<P>Any handle that is obtained from <B>ZwCreateSection</B> must eventually be released by calling <A HREF="k111_03aq.htm"><B>ZwClose</B></A>. </P>

<P>Driver routines that run in a process context other than that of the system process must set the OBJ_KERNEL_HANDLE attribute for the <I>ObjectAttributes</I> parameter of <B>ZwCreateSection</B>. This restricts the use of the handle returned by <B>ZwCreateSection</B> to processes that are running in kernel mode. Otherwise, the handle can be accessed by the process in whose context the driver is running. </P>

<P>For more information on setting up mapped sections and views of memory, see <A HREF="k101_7x2q.htm">Sections and Views</A>. </P>

<P>Callers of <B>ZwCreateSection</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="k112_9sfm.htm">ACCESS_MASK</A>, <A HREF="k109_66uq.htm"><B>InitializeObjectAttributes</B></A>, <A HREF="k111_03aq.htm"><B>ZwClose</B></A>, <A HREF="k111_4k6q.htm"><B>ZwMapViewOfSection</B></A>, <A HREF="k111_4fqq.htm"><B>ZwOpenSection</B></A>, <A HREF="k111_9oaa.htm"><B>ZwUnmapViewOfSection</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ZwCreateSection"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
