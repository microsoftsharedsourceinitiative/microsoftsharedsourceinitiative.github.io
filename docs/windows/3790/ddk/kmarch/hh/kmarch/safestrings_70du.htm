<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCbCopyN</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCbCopyN">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcbcopyn_kr"></A>RtlStringCbCopyN</H1>

<P>The <B>RtlStringCbCopyNW</B> and <B>RtlStringCbCopyNA</B> functions copy a byte-counted string to a buffer while limiting the size of the copied string.</P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCbCopyNW(
    OUT LPWSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCWSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cbSrc</I>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCbCopyNA(</B>
<B>    OUT LPSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cbSrc</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Supplies a pointer to a caller-supplied buffer that receives the copied string. The string at <I>pszSrc</I>, up to <I>cbSrc</I> bytes, is copied to the buffer at <I>pszDest</I> and terminated with a NULL character. </DD>

<DT><I>cbDest</I> </DT>

<DD>Supplies the size, in bytes, of the destination buffer. 

<P>For Unicode strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(char). 


<P>For ANSI strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(WCHAR). 
</DD>

<DT><I>pszSrc</I> </DT>

<DD>Supplies a pointer to a caller-supplied, NULL-terminated string. </DD>

<DT><I>cbSrc</I> </DT>

<DD>Supplies the maximum number of bytes to copy from <I>pszSrc</I> to <I>pszDest</I>.</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=51%>Return Value</TH>
<TH align=left width=49%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_SUCCESS</TD>
<TD width=49%>This <I>success</I> status means source data was present, the string was copied without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=49%>This <I>warning</I> status means the copy operation did not complete due to insufficient space in the destination buffer. The destination buffer contains a truncated version of the copied string.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_INVALID_PARAMETER</TD>
<TD width=49%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER value when:

<UL>
	<LI>The value in <I>cbDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present.</LI>

	<LI>The destination buffer's length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCbCopyNW</B> and <B>RtlStringCbCopyNA</B> should be used instead of <B>strncpy</B>. However, these functions  differ in behavior. If <I>cbSrc</I> is larger than the number of bytes in <I>pszSrc</I>, the <B>RtlStringCbCopyN </B>functions—unlike <B>strncpy</B>—do not fill <I>pszDest</I> with NULL characters until <I>cbSrc</I> bytes have been copied.</P>

<P><B>RtlStringCbCopyN</B> copies a given number of bytes from a source string. The size, in bytes, of the destination buffer is provided to the function to ensure that <B>RtlStringCbCopyN</B> does not write past the end of this buffer.</P>

<P>Use <B>RtlStringCbCopyNW</B> to handle Unicode strings and <B>RtlStringCbCopyNA</B> to handle ANSI strings. The form you use depends on your data, as shown in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=32%>String Data Type</TH>
<TH align=left width=27%>String Literal</TH>
<TH align=left width=41%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=32%>WCHAR</TD>
<TD width=27%>L"string"</TD>
<TD width=41%><B>RtlStringCbCopyNW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>char</B></TD>
<TD width=27%>"string"</TD>
<TD width=41%><B>RtlStringCbCopyNA</B></TD>
</TR>
</TABLE><BR>

<P>If  <I>pszSrc</I> and <I>pszDest</I> point to overlapping strings, the behavior of the function is undefined.</P>

<P>Neither <I>pszSrc</I> nor <I>pszDest</I> can be NULL. If you need to handle null string pointer values, see <A HREF="safestrings_4t2q.htm"><B>RtlStringCbCopyNEx</B></A>.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_7eia.htm"><B>RtlStringCbCopy</B></A>,<B> <A HREF="safestrings_614i.htm">RtlStringCchCopyN</A></B>, <A HREF="safestrings_4t2q.htm"><B>RtlStringCbCopyNEx</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCbCopyN"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
