<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Driver Entry Points in Driver Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Driver Entry Points in Driver Objects">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_driver_information_in_the_registry_dg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_driver_entry_points_in_driver_objects_kg"></A>Driver Entry Points in Driver Objects</H2>

<P>A kernel-mode driver must specify the following entry points in its driver object:

<UL>
	<LI>At least one dispatch routine's entry point, in order to get IRPs requesting PnP, power, and I/O operations.</LI>

	<LI>The entry point of its <I>AddDevice</I> routine, at <B>DriverObject </B><B>–</B><B>&gt; DriverExtension </B><B>–</B><B>&gt; AddDevice</B>.</LI>

	<LI>The entry point of its <I>StartIo</I> routine, if it manages its own queue of IRPs.</LI>

	<LI>If the driver can be loaded and/or replaced dynamically, an <I>Unload</I> entry point in order to free any system resources, such as system objects or memory, that the driver has allocated. (Drivers that cannot be replaced while the system is running, such as a keyboard driver, need not supply an <I>Unload</I> routine.)</LI>
</UL>

<P>These requirements do not apply to some miniport drivers, for which the corresponding class or port driver defines the entry points in the driver object. See the device-type-specific documentation for details.</P>

<P>The I/O Manager maintains information about driver-created device objects in the corresponding driver object.</P>

<P>When a driver is loaded, its <B>DriverEntry</B> routine is called with a pointer to the driver object. When a driver's <B>DriverEntry</B> routine is called, it sets <I>Dispatch</I>, <I>StartIo</I> (if any), and <I>Unload</I> (if any) entry points directly in the driver object as follows:</P>

<PRE>DriverObject-&gt;MajorFunction[IRP_MJ_xxx] = DDDispatchXxx; 
              :    : 
DriverObject-&gt;MajorFunction[IRP_MJ_yyy] = DDDispatchYyy; 
              :    : 
DriverObject-&gt;DriverStartIo = DDStartIo; 
DriverObject-&gt;DriverUnload = DDUnload; 
              :    : </PRE>

<P>The <B>DriverEntry</B> routine also sets the entry point of its <I>AddDevice</I> routine, in the <B>DriverExtension</B> of its driver object, as follows:</P>

<PRE>DriverObject-&gt;DriverExtension-&gt;AddDevice = DDAddDevice; </PRE>

<P>A <B>DriverEntry</B> or optional <I>Reinitialize</I> routine also can use a field in the driver object (not shown in the <A HREF="drvcomps_6js7.htm#ddk__bmc_24drvobj.wmf__kg">Driver Object</A> figure) to get information from and/or set information in the Configuration Manager's registry database. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Driver Information in the Registry</A>.</P>

<P>The I/O Manager exports no support routines to manipulate driver objects, which are <A HREF="k112_6jaq.htm">DRIVER_OBJECT</A> structures. Driver objects are used by the I/O Manager to keep track of currently loaded drivers. Some members of a driver object are used only by the I/O Manager. Others members are also used by driver writers; for example, you must know certain member names to define <I>AddDevice</I>, <I>Dispatch</I>, <I>StartIo</I>, and <I>Unload</I> entry points. You should neither attempt to use undocumented members within a DRIVER_OBJECT structure, nor make assumptions about the locations of any driver object members that are named in this documentation. Otherwise, you cannot maintain the portability of a driver from one Windows platform to another.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Driver%20Entry%20Points%20in%20Driver%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
