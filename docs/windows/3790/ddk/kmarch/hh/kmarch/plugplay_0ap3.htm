<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Stopping a Device to Rebalance Resources</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Stopping a Device to Rebalance Resources">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_stopping_a_device_to_rebalance_resources_kg"></A>Stopping a Device to Rebalance Resources</H2>

<P>The following figure shows the sequence of IRPs involved in stopping and restarting a device to rebalance resources. </P>

<P><IMG SRC="images/stop-irps.gif" ALT="" BORDER=0></P>

<P><B>Stopping a Device to Rebalance Resources</B></P>

<P>The following notes correspond to the circled numbers in the previous figure:

<OL>
	<LI>The PnP Manager issues an <A HREF="pnp-irps_6d4i.htm">IRP_MN_QUERY_STOP_DEVICE</A> to ask whether the drivers for a device can stop the device and release its hardware resources.
<P>If all the drivers in the device stack return STATUS_SUCCESS, the drivers have put the device into a state (stop-pending) from which the device can be quickly stopped.

<P>The PnP Manager queries as many device stacks as necessary to rebalance the required resources.
</LI>

	<LI>The PnP Manager issues an IRP_MN_STOP_DEVICE to stop the device.
<P>On Windows&nbsp;2000 and later systems, the PnP Manager sends a stop IRP only if a previous query-stop IRP for the device completed successfully. In response to a stop IRP, drivers release the device's hardware resources (such as its I/O ports) and hold any IRPs that require access to the device. 
</LI>

	<LI>After successfully rebalancing resources, the PnP Manager issues <A HREF="pnp-irps_1gqa.htm">IRP_MN_START_DEVICE</A> requests to restart any devices that it stopped during the rebalance.</LI>

	<LI>Otherwise, the PnP Manager cancels a query-stop IRP by sending an <A HREF="pnp-irps_4tpu.htm">IRP_MN_CANCEL_STOP_DEVICE</A>.
<P>In response to an IRP_MN_CANCEL_STOP_DEVICE, the drivers for a device return the device to the started state and resume processing I/O requests for the device.

<P>The PnP Manager cancels the query-stop for a device stack if one driver in the stack failed the request or if the overall rebalance operation failed and it is canceling all its query-stop requests. When the PnP Manager cancels the query-stop on just one device stack, it sends the IRP_MN_CANCEL_STOP_DEVICE request because any drivers attached above the driver that failed the query have the device in the stop-pending state. When the IRP_MN_CANCEL_STOP_DEVICE succeeds, drivers have returned the device to the started state.
</LI>

	<LI>If a driver fails to restart the device after rebalancing resources, the PnP Manager sends remove IRPs to the device stack (on Windows&nbsp;2000 and later systems).
<P>The PnP Manager first sends an <A HREF="pnp-irps_8e42.htm">IRP_MN_SURPRISE_REMOVAL</A> request. Then it sends an <A HREF="pnp-irps_4noy.htm">IRP_MN_REMOVE_DEVICE</A> request, but only after all open handles to the device are closed. 
</LI>
</OL>

<P>Rebalancing the hardware resources of a PnP device must be transparent to applications and end users. Users might experience a temporary delay in operation, but data must not be lost. You must take that into consideration when you handle stop IRPs.   </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Stopping%20a%20Device%20to%20Rebalance%20Resources"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
