<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Timer Objects and DPCs</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Timer Objects and DPCs">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_timer_objects_and_dpcs_kg"></A>Timer Objects and DPCs</H2>

<P>Any driver can use a timer object within a nonarbitrary thread context to time out operations within the driver's other routines, or to perform a periodic operation. A driver calls <A HREF="k105_6g4y.htm"><B>KeInitializeTimer</B></A> or <A HREF="k105_15pu.htm"><B>KeInitializeTimerEx</B></A> to set up a timer object. </P>

<P>A timer can be set to expire just once, or to expire repeatedly after a given interval. <A HREF="k105_9mlu.htm"><B>KeSetTimer</B></A> always sets a timer that will expire just once. <A HREF="k105_57aq.htm"><B>KeSetTimerEx</B></A> accepts an optional <I>Period</I> parameter, which specifies a recurring timer interval.</P>

<P>An optional <A HREF="drvrrtns_0iwi.htm"><I>CustomTimerDpc</I></A> routine (a type of deferred procedure call) can be associated with either a notification timer or a synchronization timer. This routine executes when the specified time interval expires. For more information, see <A HREF="synchro_5qnb.htm">Using Timer Objects</A>.</P>

<P>A timer can be a <I>notification timer</I> or a <I>synchronization timer</I>. 

<UL>
	<LI>When a notification timer is signaled, all waiting threads have their wait satisfied. The state of the timer remains signaled until it is explicitly reset. </LI>

	<LI>When a synchronization timer expires, its state is set to Signaled until a single waiting thread is released. Then the timer is reset to the Not-Signaled state.</LI>
</UL>

<P><B>KeInitializeTimer</B> always creates notification timers. <B>KeInitializeTimerEx</B> accepts a <I>Type</I> parameter, which can be <B>NotificationTimer</B> or <B>SynchronizationTimer</B>.</P>

<P>This section contains the following topics, which provide more information about timer objects and DPCs:</P>

<P class=indent1><A HREF="synchro_5qnb.htm">Using Timer Objects</A> </P>

<P class=indent1><A HREF="synchro_242v.htm">Registering and Queuing a <I>CustomTimerDpc</I> Routine</A> </P>

<P class=indent1><A HREF="synchro_6b3b.htm">Providing <I>CustomTimerDpc</I> Context Information</A> </P>

<P class=indent1><A HREF="synchro_23l3.htm">Using a <I>CustomTimerDpc</I> Routine</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Timer%20Objects%20and%20DPCs"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
