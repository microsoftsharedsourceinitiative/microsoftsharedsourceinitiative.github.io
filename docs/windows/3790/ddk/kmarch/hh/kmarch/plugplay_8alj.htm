<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Holding Incoming IRPs When A Device Is Paused</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Holding Incoming IRPs When A Device Is Paused">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_holding_incoming_irps_when_a_device_is_paused_kg"></A>Holding Incoming IRPs When A Device Is Paused</H3>

<P>The drivers for a device must pause the device when its resources are being rebalanced. During resource rebalancing, some drivers pause the device in response to an IRP_MN_QUERY_STOP_DEVICE request and other drivers delay pausing the device until they receive the IRP_MN_STOP_DEVICE request. In either case, the device must be paused when the IRP_MN_STOP_DEVICE succeeds.</P>

<P>The drivers must finish any IRPs in progress on the device and refrain from starting any new IRPs that require access to the device. </P>

<P>To hold IRPs while a device is paused, a driver implements a procedure such as the following:

<OL>
	<LI>In its <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routine, define a flag in the device extension with a name like HOLD_NEW_REQUESTS. Clear the flag.</LI>

	<LI>Create a FIFO queue for holding IRPs.
<P>If the driver already queues IRPs, it can reuse the same queue because the driver is required to finish any outstanding requests before pausing the device.

<P>If the driver does not already have an IRP queue, it must create one in its <I>AddDevice</I> routine. What kind of queue it creates depends on how the driver flushes the queue. A driver might use an interlocked, doubly-linked list and the <B>ExInterlocked..List</B> routines.
</LI>

	<LI>In its <I>DispatchPnP</I> code for IRP_MN_QUERY_STOP_DEVICE (or IRP_MN_STOP_DEVICE), finish any outstanding requests and set the HOLD_NEW_REQUESTS flag.</LI>

	<LI>In a dispatch routine that accesses the device, such as <A HREF="drvrrtns_6mr6.htm"><I>DispatchWrite</I></A> or <A HREF="drvrrtns_7s4y.htm"><I>DispatchRead</I></A>, check whether the HOLD_NEW_REQUESTS flag is set. If so, the driver must mark the IRP pending and queue it.
<P>The driver's <I>DispatchPnP</I> routine must continue to process PnP IRPs rather than hold them and the <A HREF="drvrrtns_00mq.htm"><I>DispatchPower</I></A> routine must continue to process power IRPs. 
</LI>

	<LI>In <I>DispatchPnP</I>, in response to a start or cancel-stop IRP, clear the HOLD_NEW_REQUESTS flag and start the IRPs in the IRP-holding queue. 
<P>These actions are probably the last steps for processing these PnP IRPs. For example, in response to a start IRP, the driver must first perform any operations to start the device and then it can start the IRPs in the IRP-holding queue.

<P>Errors in processing IRPs from the IRP-holding queue do not affect the status returned for the start or cancel-stop IRPs.
</LI>
</OL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Holding%20Incoming%20IRPs%20When%20A%20Device%20Is%20Paused"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
