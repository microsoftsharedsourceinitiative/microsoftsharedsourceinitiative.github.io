<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCbCatN</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCbCatN">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcbcatn_kr"></A>RtlStringCbCatN</H1>

<P>The <B>RtlStringCbCatNW</B> and <B>RtlStringCbCatNA</B> functions concatenate two byte-counted strings while limiting the size of the appended string. </P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCbCatNW(
    IN OUT LPWSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCWSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cbMaxAppend</I>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCbCatNA(</B>
<B>    IN OUT LPSTR  </B><I>pszDest</I><B>,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszSrc</I><B>,</B>
<B>    IN size_t  </B><I>cbMaxAppend</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Caller-supplied pointer to a buffer which, on input, contains a NULL-terminated string to which <I>pszSrc</I> will be concatenated. On output, this is the destination buffer that contains the entire resultant string. The string at <I>pszSrc</I>, up to <I>cbMaxAppend</I> bytes, is added to the end of the string at <I>pszDest</I> and terminated with a NULL character.</DD>

<DT><I>cbDest</I> </DT>

<DD>Supplies the size of the destination buffer, in bytes. 

<P>For Unicode strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(char). 


<P>For ANSI strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(WCHAR). 
</DD>

<DT><I>pszSrc</I> </DT>

<DD>Caller-supplied pointer to a NULL-terminated string. This string will be concatenated to the end of the string that is contained in the buffer at <I>pszDest</I>. </DD>

<DT><I>cbMaxAppend </I></DT>

<DD>Supplies the maximum number of bytes to append to the string that is contained in the buffer at <I>pszDest</I>.</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=50%>Return Value</TH>
<TH align=left width=48%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_SUCCESS</TD>
<TD colspan=2 width=50%>This <I>success</I> status means source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_BUFFER_OVERFLOW</TD>
<TD colspan=2 width=50%>This <I>warning</I> status means the concatenation operation did not complete due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>STATUS_INVALID_PARAMETER</TD>
<TD width=48%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER  value when:

<UL>
	<LI>The value in <I>cbDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present.</LI>

	<LI>The destination buffer's length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCbCatNW</B> and <B>RtlStringCbCatNA</B> should be used instead of the following functions: 

<UL>
	<LI><B>strncat </B></LI>

	<LI><B>wcsncat</B></LI>
</UL>

<P>The size, in bytes, of the destination buffer is provided to <B>RtlStringCbCatNW</B> and <B>RtlStringCbCatNA</B> to ensure that they do not write past the end of the buffer.</P>

<P>Use <B>RtlStringCbCatNW</B> to handle Unicode strings and <B>RtlStringCbCatNA</B> to handle ANSI strings. The form you use depends on your data, as shown in the following table</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=33%>String Data Type</TH>
<TH align=left width=27%>String Literal</TH>
<TH align=left width=40%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=33%>WCHAR</TD>
<TD width=27%>L"string"</TD>
<TD width=40%><B>RtlStringCbCatNW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>char</B></TD>
<TD width=27%>"string"</TD>
<TD width=40%><B>RtlStringCbCatNA</B></TD>
</TR>
</TABLE><BR>

<P>If <I>pszSrc</I> and <I>pszDest</I> point to overlapping strings, the behavior of the function is undefined.</P>

<P>Neither <I>pszSrc</I> nor <I>pszDest</I> can be NULL. If you need to handle null string pointer values, use <A HREF="safestrings_2hpu.htm"><B>RtlStringCbCatNEx</B></A>.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_5dte.htm"><B>RtlStringCbCat</B></A>,<B> <A HREF="safestrings_2hpu.htm">RtlStringCbCatNEx</A></B>, <A HREF="safestrings_967m.htm"><B>RtlStringCchCatN</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCbCatN"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
