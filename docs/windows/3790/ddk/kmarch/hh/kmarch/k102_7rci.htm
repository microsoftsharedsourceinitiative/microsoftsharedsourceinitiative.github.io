<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ExInterlockedAddLargeInteger</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ExInterlockedAddLargeInteger">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_exinterlockedaddlargeinteger_kr"></A>ExInterlockedAddLargeInteger</H1>

<P>The <B>ExInterlockedAddLargeInteger</B> routine adds a large integer value to the specified variable as an atomic operation.</P>

<PRE class=syntax><B>LARGE_INTEGER 
</B>  <B>ExInterlockedAddLargeInteger(</B>
    <B>IN PLARGE_INTEGER</B>  <I>Addend</I><B>,</B>
    <B>IN LARGE_INTEGER</B>  <I>Increment</I><B>,</B>
    <B>IN PKSPIN_LOCK</B>  <I>Lock</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Addend</I></DT>

<DD>Pointer to the variable to be adjusted by the <I>Increment</I> value.</DD>

<DT><I>Increment</I></DT>

<DD>Specifies a value to be added to <I>Addend</I>.</DD>

<DT><I>Lock</I></DT>

<DD>Pointer to a spin lock to be used to synchronize access to <I>Addend</I>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>ExInterlockedAddLargeInteger</B> returns the initial value of the <I>Addend </I>parameter.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Support routines that do interlocked operations are assumed to be incapable of causing a page fault. That is, neither their code nor any of the data they touch can cause a page fault without bringing down the system. They use spin locks to achieve atomicity in SMP machines. The caller must provide resident storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B> before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.</P>

<P>The <I>Lock</I> passed to <B>ExInterlockedAddLargeInteger</B> is used to assure that the add operation on <I>Addend</I> is atomic with respect to any other operations on the same value which synchronize with this same spin lock. </P>

<P><B>ExInterlockedAddLargeInteger</B> masks interrupts. Consequently, it can be used for synchronization between an ISR and other device driver code, provided that the same <I>Lock</I> is never reused in a call to a routine that runs at IRQL&nbsp;= DISPATCH_LEVEL.</P>

<P>Note that calls to <B>Interlocked</B><I>Xxx</I> are guaranteed to be atomic with respect to other <B>Interlocked</B><I>Xxx</I> calls without caller-supplied spin locks.</P>

<P>This routine is not available on Windows&nbsp;98 or Windows&nbsp;Me.</P>

<P>Callers of <B>ExInterlockedAddLargeInteger</B> run at any IRQL.</P>

<H4>See Also</H4>

<P><A HREF="k102_9b5e.htm"><B>ExInterlockedAddUlong</B></A>, <A HREF="k102_2cs2.htm"><B>InterlockedIncrement</B></A>, <A HREF="k102_00j6.htm"><B>InterlockedDecrement</B></A>, <A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ExInterlockedAddLargeInteger"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
