<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating IRPs for Lower-Level Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating IRPs for Lower-Level Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_creating_irps_for_lower_level_drivers_kg"></A>Creating IRPs for Lower-Level Drivers</H1>

<P>To allocate an IRP for an asynchronous request, which will be processed in an arbitrary thread context by lower drivers, a <A HREF="drvrrtns_7lbm.htm"><I>DispatchReadWrite</I></A> routine can call one of the following support routines:

<UL>
	<LI><A HREF="k104_42pe.htm"><B>IoAllocateIrp</B></A>, which allocates an IRP and a number of zero-initialized I/O stack locations
<P>The dispatch routine must set up the next-lower driver’s I/O stack location for the newly allocated IRP, usually by copying (possibly modified) information from its own stack location in the original IRP. If a higher-level driver allocates an I/O stack location of its own for a newly-allocated IRP, the dispatch routine can set up per-request context information there for the <I>IoCompletion</I> routine to use. 
</LI>

	<LI><A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A>, which sets up the next-lower driver’s I/O stack location for the caller, according to caller-specified parameters
<P>Higher-level drivers can call this routine to allocate IRPs for IRP_MJ_READ, IRP_MJ_WRITE, IRP_MJ_FLUSH_BUFFERS, and IRP_MJ_SHUTDOWN requests. 

<P>When an <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine is called for such an IRP, it can check the I/O status block, and if necessary (or possible) set up the next-lower driver’s I/O stack location in the IRP again and retry the request or reuse it. However, the <I>IoCompletion</I> routine has no local context storage for itself in the IRP, so the driver must maintain context about the original request elsewhere in resident memory. 
</LI>

	<LI><A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A>, which allocates an IRP and a number of zero-initialized I/O stack locations, and associates the IRP with a <I>master</I> IRP.
<P>Intermediate drivers cannot call <B>IoMakeAssociatedIrp</B> to create IRPs for lower drivers. 

<P>Any highest-level driver that calls <B>IoMakeAssociatedIrp</B> to create IRPs for lower drivers can return control to the I/O Manager after sending its associated IRPs on and calling <A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> for the original, master IRP. A highest-level driver can rely on the I/O Manager to complete the master IRP when all associated IRPs have been completed by lower drivers. 

<P>Drivers seldom set an <I>IoCompletion</I> routine for an associated IRP. If a highest-level driver calls <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> for an associated IRP it creates, the I/O Manager does not complete the master IRP if the driver returns STATUS_MORE_PROCESSING_REQUIRED from its <I>IoCompletion</I> routine. In these circumstances, the driver’s <I>IoCompletion</I> routine must explicitly complete the master IRP with <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A>. 
</LI>
</UL>

<P>If a driver allocates an I/O stack location of its own in a new IRP, the dispatch routine must call <A HREF="k104_5qr6.htm"><B>IoSetNextIrpStackLocation</B></A> before it calls <A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A> to set up context in its own I/O stack location for the <I>IoCompletion</I> routine. For more information, see <A HREF="irps_38kn.htm">Processing IRPs in an Intermediate-Level Driver</A>. </P>

<P>The dispatch routine must call <A HREF="k104_9odu.htm"><B>IoMarkIrpPending</B></A> with the original IRP, but not with any driver-allocated IRPs because the <I>IoCompletion</I> routine will free them. </P>

<P>If the dispatch routine is allocating IRPs for partial transfers and the underlying device driver might control a removable-media device, the dispatch routine must set up the thread context in its newly allocated IRPs from the value at <B>Tail.Overlay.Thread</B> in the original IRP. </P>

<P>An underlying driver for a removable-media device might call <A HREF="k104_4aia.htm"><B>IoSetHardErrorOrVerifyDevice</B></A>, which references the pointer at <B>Irp-&gt;Tail.Overlay.Thread</B>, for a driver-allocated IRP. If the driver calls this support routine, the file system driver can send a popup to the appropriate user thread that prompts the user to cancel, retry, or fail an operation that the driver could not satisfy. See <A HREF="other_5ag7.htm">Supporting Removable Media</A> for more information. </P>

<P>Dispatch routines must return STATUS_PENDING after sending all driver-allocated IRPs on to lower drivers. </P>

<P>A driver’s <I>IoCompletion</I> routine should free all driver-allocated IRPs with <A HREF="k104_82wj.htm"><B>IoFreeIrp</B></A> before it calls <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A> for the original IRP. When it completes the original IRP, the <I>IoCompletion</I> routine must free all driver-allocated IRPs before it returns control. </P>

<P>Each higher-level driver sets up any driver-allocated (and reused) IRPs for lower drivers in such a way that it is immaterial to the underlying device driver whether a given request comes from an intermediate driver or originates from any other source, such as a file system or user-mode application. </P>

<P>Highest-level drivers can call <A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A> to allocate IRPs and set them up for a chain of lower drivers. The I/O Manager automatically completes the original IRP when all its associated IRPs have been completed, as long as the driver does <I>not</I> call <B>IoSetCompletionRoutine</B> with the original IRP or with any of the associated IRPs it allocates. Highest-level drivers must not, however, allocate associated IRPs for any IRP that requests a buffered I/O operation. </P>

<P>An intermediate-level driver <I>cannot</I> allocate IRPs for lower-level drivers by calling <B>IoMakeAssociatedIrp</B>. Any IRP an intermediate driver receives might already be an associated IRP, and a driver cannot associate another IRP with such an IRP.</P>

<P>Instead, if an intermediate driver creates IRPs for lower drivers, it should call <B>IoAllocateIrp</B>, <B>IoBuildDeviceIoControlRequest</B>, <B>IoBuildSynchronousFsdRequest</B>, or <B>IoBuildAsynchronousFsdRequest</B>. However, <B>IoBuildSynchronousFsdRequest</B> can be called only in the following circumstances: 

<UL>
	<LI>By a driver-created thread to build IRPs for read or write requests, because such a thread can wait in a nonarbitrary thread context (its own) on a dispatcher object, such as a driver-initialized <I>Event</I> passed to <B>IoBuildSynchronousFsdRequest</B> </LI>

	<LI>In the system thread context during initialization or while unloading </LI>

	<LI>To build IRPs for inherently synchronous operations, such as create, flush, shutdown, close, and device control requests</LI>
</UL>

<P>However, a driver is more likely to call <B>IoBuildDeviceIoControlRequest</B> to allocate device control IRPs than <B>IoBuildSynchronousFsdRequest</B>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating%20IRPs%20for%20Lower-Level%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
