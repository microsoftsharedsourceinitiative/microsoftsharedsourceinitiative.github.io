<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Failure to Validate Variable-length Buffers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Failure to Validate Variable-length Buffers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_failure_to_validate_variable_length_buffers_kg"></A>Failure to Validate Variable-length Buffers</H3>

<P>Drivers often accept input buffers with fixed headers and trailing variable length data, as in the following example:</P>

<PRE>   typedef struct _WAIT_FOR_BUFFER {
      LARGE_INTEGER Timeout;
      ULONG NameLength;
      BOOLEAN TimeoutSpecified;
      WCHAR Name[1];
   } WAIT_FOR_BUFFER, *PWAIT_FOR_BUFFER;

   if (InputBufferLength &lt; sizeof(WAIT_FOR_BUFFER)) {
      IoCompleteRequest( Irp, STATUS_INVALID_PARAMETER );
      Return( STATUS_INVALID_PARAMETER );
   }

   WaitBuffer = Irp-&gt;AssociatedIrp.SystemBuffer;

   if (<span style="color:#ff0000"><B>FIELD_OFFSET(WAIT_FOR_BUFFER, Name[0]) +
</B>       <B>WaitBuffer-&gt;NameLength</B></span> &gt; InputBufferLength) {
       IoCompleteRequest( Irp, STATUS_INVALID_PARAMETER );
       return( STATUS_INVALID_PARAMETER );
   }</PRE>

<P>If <B>WaitBuffer-&gt;NameLength</B> is a very large ULONG value, adding it to the offset could cause an integer overflow. Instead, a driver should subtract the offset from the <B>InputBufferLength</B>, and compare the result with <B>WaitBuffer-&gt;NameLength</B>, as in the following example:</P>

<PRE>   if (InputBufferLength &lt; sizeof(WAIT_FOR_BUFFER)) {
      IoCompleteRequest( Irp, STATUS_INVALID_PARAMETER );
      Return( STATUS_INVALID_PARAMETER );
   }

   WaitBuffer = Irp-&gt;AssociatedIrp.SystemBuffer;

   if<B> </B>((<span style="color:#ff0000"><B>InputBufferLength </B><B>–
</B><B>       FIELD_OFFSET(WAIT_FOR_BUFFER, Name[0])  &gt;
       WaitBuffer-&gt;NameLength</B></span>) {
      IoCompleteRequest( Irp, STATUS_INVALID_PARAMETER );
      return( STATUS_INVALID_PARAMETER );
   }</PRE>

<P>The subtraction above cannot underflow because the first <B>if </B>statement ensures that the <B>InputBufferLength</B> is greater than or equal to the size of WAIT_FOR_BUFFER.</P>

<P>The following shows a more complicated overflow problem:</P>

<PRE>   case IOCTL_SET_VALUE:
      dwSize = sizeof(SET_VALUE);

      if(inputBufferLength &lt; dwSize) {
         ntStatus = STATUS_BUFFER_TOO_SMALL;
         break;
      }

      dwSize = FIELD_OFFSET(SET_VALUE, pInfo[0]) +
              <span style="color:#ff0000"><B>pSetValue-&gt;NumEntries * sizeof(SET_VALUE_INFO)</B></span>;

      if(inputBufferLength &lt; dwSize) {
         ntStatus = STATUS_BUFFER_TOO_SMALL;
         break;
      }</PRE>

<P>In this example, an integer overflow can occur during multiplication. If the size of the SET_VALUE_INFO structure is a multiple of 2, a <B>NumEntries</B> value such as 0x80000000 results in an overflow, when the bits are shifted left during multiplication. However, the buffer size will nevertheless pass the validation test, because the overflow causes <B>dwSize</B> to appear quite small. To avoid this problem, subtract the lengths as in the previous example, divide by <B>sizeof</B>(SET_VALUE_INFO), and compare the result with <B>NumEntries</B>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Failure%20to%20Validate%20Variable-length%20Buffers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
