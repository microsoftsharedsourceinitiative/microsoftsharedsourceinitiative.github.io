<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating Controller Objects and Controller Extensions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating Controller Objects and Controller Extensions">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_creating_controller_objects_and_controller_extensions_kg"></A>Creating Controller Objects and Controller Extensions</H2>

<P>If a driver uses a controller object, it must call <A HREF="k104_7zqq.htm"><B>IoCreateController</B></A> after it has created device objects and its device is ready for I/O, typically after receiving a PnP IRP_MN_START_DEVICE request. The following figure illustrates the call.</P>

<P><B><IMG SRC="images/3ctlrobj.gif" ALT="" BORDER=0></B></P>

<P><B>Controller Object</B></P>

<P>Every controller object has an associated controller extension. As the previous figure shows, the caller of <B>IoCreateController</B> determines the <I>Size</I> of the controller extension. Its structure and contents are driver-defined.</P>

<P>In addition to whatever device-specific state information the driver maintains about the physical controller (or device with channels), the previous figure shows a representative set of driver-defined data for a controller extension.</P>

<P>The <I>PtrToControllerObject</I> pointer, returned by <B>IoCreateController</B>, must be passed in the driver's calls to <A HREF="k104_4qia.htm"><B>IoAllocateController</B></A> and <A HREF="k104_8hte.htm"><B>IoFreeController</B></A>, described in <A HREF="iputoput_7fdz.htm">Allocating Controller Objects for I/O Operations</A>. The driver must store the returned controller object pointer in the device extensions of its driver-created device objects or in another driver-accessible resident storage area (nonpaged pool, allocated by the driver). If the driver is unloaded, it also must pass the controller object pointer to <A HREF="k104_1yd0.htm"><B>IoDeleteController</B></A>.</P>

<P>Most drivers that set up controller objects find it convenient to store a pointer to the current target device object or device extension in the controller extension. Usually, such a driver stores the controller object pointer in every one of its device extensions so that it can use the <I>ControllerObject</I><B>-&gt;ControllerExtension</B> pointer to access driver-maintained, controller-specific state about I/O operations for every target device object.</P>

<P>If the physical controller represented by a controller object generates interrupts, a driver also can use the controller extension as storage for <I>PtrToInterruptObject</I> pointers returned by <A HREF="k104_7h9u.htm"><B>IoConnectInterrupt</B></A>. See <A HREF="intrupts_8yw7.htm">Interrupt Objects and ISRs</A> for more information.</P>

<P><B>IoCreateController</B> allocates resident storage for the controller object and extension, which it initializes with zeros. If it cannot allocate the memory, <B>IoCreateController</B> returns a NULL pointer. If this occurs, the driver must fail device startup and should return STATUS_INSUFFICIENT_RESOURCES.  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating%20Controller%20Objects%20and%20Controller%20Extensions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
