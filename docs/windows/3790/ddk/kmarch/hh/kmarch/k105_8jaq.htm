<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeInitializeEvent</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeInitializeEvent">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_keinitializeevent_kr"></A>KeInitializeEvent</H1>

<P>The <B>KeInitializeEvent</B> routine initializes an event object as a synchronization (single waiter) or notification type event and sets it to a signaled or not signaled state.</P>

<PRE class=syntax><B>VOID 
</B>  <B>KeInitializeEvent(</B>
<B>    IN PRKEVENT</B>  <I>Event</I><B>,</B>
<B>    IN EVENT_TYPE</B>  <I>Type</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>State</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Event</I></DT>

<DD>Pointer to an event object, for which the caller provides the storage.</DD>

<DT><I>Type</I></DT>

<DD>Specifies the event type, either <B>NotificationEvent</B> or <B>SynchronizationEvent</B>.</DD>

<DT><I>State</I></DT>

<DD>Specifies the initial state of the event. TRUE indicates a signaled state.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>A caller cannot wait at raised IRQL for a nonzero interval on an event object or in a nonarbitrary thread context.</P>

<P>Storage for an event object must be resident: in the device extension of a driver-created device object, in the controller extension of a driver-created controller object, or in nonpaged pool allocated by the caller. If you allocate the event on the stack, you must specify a <B>KernelMode </B>wait when calling <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A>, <A HREF="k105_2kvm.htm"><B>KeWaitForMutexObject</B></A>, or <A HREF="k105_18oi.htm"><B>KeWaitForMultipleObjects</B></A>. During a <B>KernelMode</B> wait, the stack containing the event will not be paged out  </P>

<P>Drivers typically use a <B>NotificationEvent</B> to wait for an I/O operation to complete. When a notification event is set to the signaled state, all threads that were waiting on the event become eligible for execution. The event remains in the signaled state until a thread calls <A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A> or <A HREF="k105_47g2.htm"><B>KeClearEvent</B></A> to set the event in the not-signaled state.</P>

<P>A <B>SynchronizationEvent</B> is also called an <I>autoreset</I> or <I>autoclearing</I> event. When such an event is set, a single waiting thread becomes eligible for execution. The Kernel automatically resets the event to the not-signaled state each time a wait is satisfied. A driver might use a synchronization event to protect a shared resource that is used in synchronizing the operations of several threads. Synchronization events are rarely used in a typical driver.</P>

<P>Callers of this routine can be running at any IRQL.</P>

<H4>See Also</H4>

<P><A HREF="k105_47g2.htm"><B>KeClearEvent</B></A>, <A HREF="k105_8dyq.htm"><B>KeReadStateEvent</B></A>, <A HREF="k105_1fhu.htm"><B>KeResetEvent</B></A>, <A HREF="k105_1prm.htm"><B>KeSetEvent</B></A>, <A HREF="k105_18oi.htm"><B>KeWaitForMultipleObjects</B></A>, <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeInitializeEvent"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
