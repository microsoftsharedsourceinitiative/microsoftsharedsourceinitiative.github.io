<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FILE_OBJECT</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="FILE_OBJECT">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_file_object_kr"></A>FILE_OBJECT</H1>

<P>To user-mode protected subsystems, a file object represents an open instance of a file, device, directory, or volume. To device and intermediate drivers, a file object usually represents a device object.</P>

<P>A file object is partially opaque. Certain types of drivers, such as FSDs and network transport drivers, use some of the fields of file objects. The following fields in file objects are accessible to drivers.</P>

<H4>Accessible Fields</H4>

<DL>
<DT><B>PDEVICE_OBJECT DeviceObject</B></DT>

<DD>Pointer to the device object on which the file is opened.</DD>

<DT><B>PVOID FsContext</B></DT>

<DD>Pointer to whatever optional state a driver maintains about the file object; otherwise, NULL.</DD>

<DT><B>PVOID FsContext2</B></DT>

<DD>Pointer to whatever additional state a driver maintains about the file object; otherwise, NULL.</DD>

<DT><B>UNICODE_STRING FileName</B></DT>

<DD>Is the name of the file opened on the device, or the <B>Length</B> of the string is zero if the device represented by <B>DeviceObject</B> is being opened.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>Drivers can use the <B>FsContext</B> fields to maintain driver-determined state about an open file object. A driver cannot use these fields of a file object unless it is accessible in the driver’s I/O stack location of an IRP. </P>

<P>The remaining fields in a file object are opaque. They are reserved for use by the I/O Manager and file systems.</P>

<P>Undocumented fields within a file object should be considered inaccessible. Drivers with dependencies on object field locations or access to undocumented fields might not remain portable and interoperable with other drivers over time.</P>

<P>A higher-level driver that successfully calls <B>IoGetDeviceObjectPointer</B> during initialization is given a pointer to the file object that represents the next-lower driver’s device object in user mode. Such a higher-level driver should save the returned file object pointer. To release its reference to this file object, for example when the driver is being unloaded, the driver must call <B>ObDereferenceObject</B> with this file object pointer. </P>

<H4>See Also</H4>

<P><A HREF="k112_32cy.htm">DEVICE_OBJECT</A>, <A HREF="k104_1os2.htm"><B>IoGetDeviceObjectPointer</B></A>, <A HREF="k107_6vg2.htm"><B>ObDereferenceObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FILE_OBJECT"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
