<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Access to Driver-managed Objects</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Access to Driver-managed Objects">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_access_to_driver_managed_objects_kr"></A>Access to Driver-Managed Objects</H1>

<DL>
<DT><A HREF="k102_967m.htm"><B>ExCreateCallback</B></A> </DT>

<DD>Creates or opens a callback object.</DD>

<DT><A HREF="k102_2f5e.htm"><B>ExNotifyCallback</B></A> </DT>

<DD>Calls the callback routines registered with a previously created or opened callback object. </DD>

<DT><A HREF="k102_0cs2.htm"><B>ExRegisterCallback</B></A> </DT>

<DD>Registers a callback routine with a previously created or opened callback object, so that the caller can be notified when conditions defined for the callback routine occur.</DD>

<DT><A HREF="k102_6gfm.htm"><B>ExUnregisterCallback</B></A> </DT>

<DD>Cancels the registration of a callback routine with a callback object.</DD>

<DT><A HREF="k104_27n6.htm"><B>IoRegisterDeviceInterface</B></A> </DT>

<DD>Registers device functionality (a device interface) that a driver can enable for use by applications or other system components.</DD>

<DT><A HREF="k104_3epe.htm"><B>IoSetDeviceInterfaceState</B></A> </DT>

<DD>Enables or disables a previously registered device interface. Applications and other system components can open only interfaces that are enabled.</DD>

<DT><A HREF="k104_4lv6.htm"><B>IoGetDeviceInterfaceAlias</B></A></DT>

<DD>Returns the alias device interface of the specified interface class, if the alias exists. Device interfaces are considered aliases if they are exposed by the same underlying device and have identical interface reference strings, but are of different interface classes.</DD>

<DT><A HREF="k104_24vm.htm"><B>IoGetDeviceInterfaces</B></A><B> </B></DT>

<DD>Returns a list of device interfaces of a particular device interface class (such as all devices on the system that support a HID interface).</DD>

<DT><A HREF="k104_6rw2.htm"><B>IoGetFileObjectGenericMapping</B></A> </DT>

<DD>Returns information about the mapping between generic access rights and specific access rights for file objects.</DD>

<DT><A HREF="k104_28c2.htm"><B>IoSetShareAccess</B></A> </DT>

<DD>Sets the access allowed to a given file object representing a device. (Only highest-level drivers can call this routine.)</DD>

<DT><A HREF="k104_3uwi.htm"><B>IoCheckShareAccess</B></A> </DT>

<DD>Checks whether a request to open a file object specifies a desired access that is compatible with the current shared access permissions for the open file object. (Only highest-level drivers can call this routine.)</DD>

<DT><A HREF="k104_4roy.htm"><B>IoUpdateShareAccess</B></A> </DT>

<DD>Modifies the current shared access permissions on the given file object. (Only highest-level drivers can call this routine.)</DD>

<DT><A HREF="k104_4awi.htm"><B>IoRemoveShareAccess</B></A> </DT>

<DD>Restores the shared access permissions on the given file object that were modified by a preceding call to <B>IoUpdateShareAccess</B>.</DD>

<DT><A HREF="k109_7i2a.htm"><B>RtlLengthSecurityDescriptor</B></A> </DT>

<DD>Returns the size in bytes of a given security descriptor.</DD>

<DT><A HREF="k109_3nzm.htm"><B>RtlValidSecurityDescriptor</B></A> </DT>

<DD>Returns whether a given security descriptor is valid.</DD>

<DT><A HREF="k109_1upe.htm"><B>RtlCreateSecurityDescriptor</B></A> </DT>

<DD>Initializes a new security descriptor to an absolute format with default values (in effect, with no security constraints).</DD>

<DT><A HREF="k109_8ype.htm"><B>RtlSetDaclSecurityDescriptor</B></A> </DT>

<DD>Sets the discretionary ACL information for a given security descriptor in absolute format.</DD>

<DT><A HREF="k110_9x6a.htm"><B>SeAssignSecurity</B></A> </DT>

<DD>Builds a security descriptor for a new object, given the security descriptor of its parent directory (if any) and an originally requested security for the object.</DD>

<DT><A HREF="k110_04vm.htm"><B>SeDeassignSecurity</B></A> </DT>

<DD>Deallocates the memory associated with a security descriptor that was created with <B>SeAssignSecurity</B>.</DD>

<DT><A HREF="k110_0tyq.htm"><B>SeValidSecurityDescriptor</B></A> </DT>

<DD>Returns whether a given security descriptor is structurally valid. </DD>

<DT><A HREF="k110_42wi.htm"><B>SeAccessCheck</B></A> </DT>

<DD>Returns a Boolean value indicating whether the requested access rights can be granted to an object protected by a security descriptor and, possibly, a current owner.</DD>

<DT><A HREF="k110_6oc2.htm"><B>SeSinglePrivilegeCheck</B></A> </DT>

<DD>Returns a Boolean value indicating whether the current thread has at least the given privilege level.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Access%20to%20Driver-managed%20Objects"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
