<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DpcForIsr</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DpcForIsr">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_dpcforisr_kr"></A><I>DpcForIsr</I></H1>

<P>The <I>DpcForIsr</I> routine finishes the servicing of an I/O operation, after an <A HREF="drvrrtns_29ma.htm"><I>InterruptService</I></A> routine returns.</P>

<PRE class=syntax><B>VOID
</B><I>  DpcForIsr</I><B>(</B>
<B>    IN PKDPC  </B><I>Dpc</I><B>,</B>
<B>    IN struct _DEVICE_OBJECT  *</B><I>DeviceObject</I><B>,</B>
<B>    IN struct _IRP  *</B><I>Irp</I><B>,</B>
<B>    IN PVOID  </B><I>Context</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Dpc</I></DT>

<DD>Caller-supplied pointer to a <A HREF="k112_3gs2.htm">KDPC</A> structure, which represents the DPC object that is associated with this <I>DpcForIsr</I> routine.</DD>

<DT><I>DeviceObject</I></DT>

<DD>Caller-supplied pointer to a <A HREF="k112_32cy.htm">DEVICE_OBJECT</A> structure. This is the device object for the target device, previously created by the driver's <I>AddDevice</I> routine.</DD>

<DT><I>Irp</I></DT>

<DD>Caller-supplied pointer to an <A HREF="k112_3z5e.htm">IRP</A> structure that describes the I/O operation.</DD>

<DT><I>Context</I></DT>

<DD>Caller-supplied pointer to driver-defined context information, specified in a previous call to <A HREF="k104_6q0i.htm"><B>IoInitializeDpcRequest</B></A>.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Comments</H4>

<P>A driver's <I>DpcForIsr </I>routine<I> </I>executes in a DPC context, at IRQL&nbsp;= <A HREF="intrupts_0kh3.htm#ddk_dispatch_level_kg">DISPATCH_LEVEL</A>.</P>

<P>To register a <I>DpcForIsr</I> routine for a specific device object, a driver must call <A HREF="k104_6q0i.htm"><B>IoInitializeDpcRequest</B></A>, which causes the system to allocate and initialize one DPC object. (If you need multiple DPC routines, use <A HREF="drvrrtns_3tbm.htm"><I>CustomDpc</I></A> routines.)</P>

<P>To queue a <I>DpcForIsr</I> routine for execution, a driver's <A HREF="drvrrtns_29ma.htm"><I>InterruptService</I></A> routine must call <A HREF="k104_3mb6.htm"><B>IoRequestDPC</B></A>.</P>

<P>A <I>DpcForIsr</I> routine is typically responsible for at least the following tasks:

<UL>
	<LI>Completing the I/O operation described by the received IRP</LI>

	<LI>Dequeuing next IRP
<P>If the driver uses the system-supplied IRP queue, the <I>DcpForIsr</I> routine should call <A HREF="k104_7eb6.htm"><B>IoStartNextPacket</B></A> or <A HREF="k104_2hte.htm"><B>IoStartNextPacketByKey</B></A>, so the driver’s <I>StartIo</I> routine will start processing the next I/O request.

<P>If the driver uses internal IRP queues, the <I>DpcForIsr</I> routine should dequeue the next IRP and begin processing for the next I/O request.
</LI>

	<LI>Setting the I/O status block in the received IRP and calling <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A> for the completed request</LI>
</UL>

<P>A <I>DpcForIsr</I> routine might also retry a failed operation or set up the next transfer for a large I/O request that has been broken into smaller pieces.</P>

<P>For more information about <I>DpcForIsr</I> routines, see <A HREF="intrupts_4zhj.htm">DPC Objects and DPCs</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DpcForIsr"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
