<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Introduction to Cancel Routines</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Introduction to Cancel Routines">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_introduction_to_cancel_routines_kg"></A>Introduction to <I>Cancel</I> Routines</H2>

<P>Any driver in which IRPs can be held in a pending state for an indefinite interval must have one or more <A HREF="drvrrtns_8y0i.htm"><I>Cancel</I></A><I> </I>routines. For example, a keyboard driver might wait indefinitely for a user to press a key. Conversely, if a driver will never queue more IRPs than it can complete in five minutes, it probably does not need a <I>Cancel </I>routine. </P>

<P>Suppose a user-mode thread makes an I/O request, which is queued by a highest-level device driver’s dispatch routine, and the requesting thread is terminated while the IRP is queued. IRPs queued on behalf of a terminated thread should be canceled. Consequently, the driver must set a driver-supplied <I>Cancel </I>routine in each IRP that it queues.</P>

<P>A driver that creates associated IRPs must cancel them when the master IRP is canceled. Because associated IRPs are not associated with a requesting thread, the master IRP's <I>Cancel </I>routine is responsible for canceling any associated IRPs when the master IRP is canceled. </P>

<P>The number of <I>Cancel </I>routines any driver has depends on the driver’s design. In general, a driver should have a <I>Cancel </I>routine for each stage in its I/O processing at which an IRP might be held in a pending state for an indefinite interval. Such pending IRPS are said to be <I>held in a</I> <I>cancelable state</I>.</P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>Consider the following design guidelines: </B>

<UL>
	<LI>The highest-level driver in a chain of layered drivers <I>must</I> have at least one <I>Cancel </I>routine if it queues IRPs or otherwise holds IRPs in a cancelable state. It can have more than one <I>Cancel </I>routine, if necessary.</LI>

	<LI>Lower-level drivers in which IRPs can be held in a cancelable state for relatively long intervals also should have one or more <I>Cancel </I>routines.</LI>

	<LI>If a driver manages its own internal queues of IRPs, it should have a separate <I>Cancel </I>routine for each of its queues.</LI>
</UL>

<P>Some highest-level drivers for interactive devices, such as keyboard, mouse, sound, parallel class and serial drivers, must have <I>Cancel </I>routines. Some lower-level drivers, such as a parallel port driver that holds IRPs queued for some number of higher-level class drivers for relatively long intervals, also should have <I>Cancel </I>routines.</P>

<P>Mass-storage device drivers, along with intermediate drivers layered over them, are unlikely to have <I>Cancel </I>routines. It is the responsibility of a file system driver to handle the cancellation of file I/O requests, while the IRPs input to lower-level mass-storage drivers are usually processed to completion too quickly to be cancelable.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Introduction%20to%20Cancel%20Routines"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
