<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCchCopyNEx</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCchCopyNEx">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcchcopynex_kr"></A>RtlStringCchCopyNEx</H1>

<P>The <B>RtlStringCchCopyNExW</B> and <B>RtlStringCchCopyNExA</B> functions copy a character-counted string to a buffer while limiting the size of the copied string.</P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCchCopyNExW(
    OUT LPWSTR  </B><I>pszDest</I><B>  OPTIONAL,</B>
<B>    IN size_t  </B><I>cchDest</I><B>,</B>
<B>    IN LPCWSTR  </B>pszSrc<B>  OPTIONAL,</B>
<B>    IN size_t  </B><I>cchSrc</I><B>,</B>
<B>    OUT LPWSTR*  </B><I>ppszDestEnd </I><B> OPTIONAL,</B>
<B>    OUT size_t*  </B><I>pcchRemaining </I><B> OPTIONAL,</B>
<B>    IN DWORD  </B><I>dwFlags</I>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCchCopyNExA(</B>
<B>    OUT LPSTR  </B><I>pszDest</I><B>  OPTIONAL,</B>
<B>    IN size_t  </B><I>cchDest</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszSrc</I><B>  OPTIONAL,</B>
<B>    IN size_t  </B><I>cchSrc</I><B>,</B>
<B>    OUT LPSTR*  </B><I>ppszDestEnd</I><B>  OPTIONAL,</B>
<B>    OUT size_t*  </B><I>pcchRemaining</I><B>  OPTIONAL,</B>
<B>    IN DWORD  </B><I>dwFlags</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Optional. Supplies a pointer to a caller-supplied buffer that receives the copied string. The string at <I>pszSrc</I> is copied to the buffer at <I>pszDest</I> and terminated with a NULL character. The <I>pszDest</I> pointer can be NULL, but only if STRSAFE_IGNORE_NULLS is set in <I>dwFlags</I>.</DD>

<DT><I>cchDest</I> </DT>

<DD>Supplies the size, in characters, of the destination buffer. The maximum number of characters allowed is STRSAFE_MAX_CCH. If <I>pszDest</I> is NULL, <I>cchDest</I> must be zero.</DD>

<DT><I>pszSrc</I> </DT>

<DD>Optional. Supplies a pointer to a caller-supplied, null-terminated string. </DD>

<DT><I>cchSrc</I> </DT>

<DD>Supplies the maximum number of characters to copy from <I>pszSrc</I> to the buffer that is supplied by <I>pszDest</I>.</DD>

<DT><I>ppszDestEnd</I> </DT>

<DD>Optional. If the caller supplies a non-NULL address pointer then, after the copy operation completes, the function loads that address with a pointer to the destination buffer's resulting NULL string terminator. </DD>

<DT><I>pcchRemaining</I> </DT>

<DD>Optional. If the caller supplies a non-NULL address pointer, the function loads the address with the number of unused characters that are in the buffer pointed to by <I>pszDest</I>, including the terminating NULL character.</DD>

<DT><I>dwFlags</I> </DT>

<DD>Supplies one or more flags and, optionally, a fill byte. The flags are defined as follows: 

<DL>
<DT>STRSAFE_FILL_BEHIND_NULL </DT>

<DD>If set and the function succeeds, the low byte of <I>dwFlags</I> is used to fill the portion of the destination buffer that follows the terminating NULL character. </DD>

<DT>STRSAFE_IGNORE_NULLS </DT>

<DD>If set, either <I>pszDest </I>or<I> pszSrc</I>,<I> </I>or both, can be NULL. Null <I>pszSrc</I> pointers are treated like empty strings (TEXT("")), which can be copied. Null <I>pszDest</I> pointers cannot receive nonempty strings. </DD>

<DT>STRSAFE_FILL_ON_FAILURE </DT>

<DD>If set and the function fails, the low byte of <I>dwFlags</I> is used to fill the entire destination buffer, and the buffer is null-terminated. This operation overwrites any preexisting buffer contents. </DD>

<DT>STRSAFE_NULL_ON_FAILURE </DT>

<DD>If set and the function fails, the destination buffer is set to an empty string (TEXT("")). This operation overwrites any preexisting buffer contents. </DD>

<DT>STRSAFE_NO_TRUNCATION </DT>

<DD>If set and the function returns STATUS_BUFFER_OVERFLOW, the contents of the destination buffer are not modified.</DD>
</DL>
</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=51%>Return Value</TH>
<TH align=left width=49%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_SUCCESS</TD>
<TD width=49%>This <I>success</I> status means source data was present, the output string was created without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=49%>This <I>warning</I> status means the operation did not complete due to insufficient space in the destination buffer. If STRSAFE_NO_TRUNCATION is set in <I>dwFlags</I>, the destination buffer is not modified. If the flag is not set, the destination buffer contains a truncated version of the created string.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_INVALID_PARAMETER</TD>
<TD width=49%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER value when:

<UL>
	<LI>An invalid flag was specified.</LI>

	<LI>The value in <I>cchDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present without the STRSAFE_IGNORE_NULLS flag.</LI>

	<LI>The destination buffer pointer was NULL, but the buffer size was not zero.</LI>

	<LI>The destination buffer pointer was NULL, or its length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCchCopyNExW</B> and <B>RtlStringCchCopyNExA</B> should be used instead of <B>strncpy</B>. </P>

<P>The functions copy a given number of characters from a source string. The size, in characters, of the destination buffer is provided to <B>RtlStringCchCopyNExW</B> and <B>RtlStringCchCopyNExA</B> to ensure that they do not write past the end of the buffer.</P>

<P>Note that these functions behave differently from <B>strncpy</B> in one respect. If <I>cchSrc</I> is larger than the number of characters in <I>pszSrc</I>, <B>RtlStringCchCopyNExW</B> and <B>RtlStringCchCopyNExA</B>—unlike <B>strncpy</B>—do not continue to pad <I>pszDest</I> with NULL characters until <I>cchSrc</I> characters have been copied.</P>

<P><B>RtlStringCchCopyNExW</B> and <B>RtlStringCchCopyNExA</B> add to the functionality of <A HREF="safestrings_614i.htm"><B>RtlStringCchCopyN</B></A> by returning a pointer to the end of the destination string, as well as the number of characters left unused in that string. Flags can be passed to the function for additional control.</P>

<P>Use <B>RtlStringCchCopyNExW</B> to handle Unicode strings and <B>RtlStringCchCopyNExA</B> to handle ANSI strings. The form you  use depends on your data, as shown in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=30%>String Data Type</TH>
<TH align=left width=25%>String Literal</TH>
<TH align=left width=45%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=30%>WCHAR</TD>
<TD width=25%>L"string"</TD>
<TD width=45%><B>RtlStringCchCopyNExW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%><B>char</B></TD>
<TD width=25%>"string"</TD>
<TD width=45%><B>RtlStringCchCopyNExA</B></TD>
</TR>
</TABLE><BR>

<P>If <I>pszSrc</I> and <I>pszDest</I> point to overlapping strings, the behavior of the function is undefined.</P>

<P>Neither <I>pszSrc</I> nor <I>pszDest</I> can be NULL unless the STRSAFE_IGNORE_NULLS flag is set, in which case either or both can be NULL. If <I>pszDest</I> is NULL, <I>pszSrc</I> must either be NULL or point to an empty string.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_614i.htm"><B>RtlStringCchCopyN</B></A>, <A HREF="safestrings_4t2q.htm"><B>RtlStringCbCopyNEx</B></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCchCopyNEx"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
