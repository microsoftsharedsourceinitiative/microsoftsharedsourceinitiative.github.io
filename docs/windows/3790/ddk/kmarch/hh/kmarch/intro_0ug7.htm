<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Portable</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Portable">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_scsi_miniport_drivers_kg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ndis_drivers_ng">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_video_miniport_drivers_gg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_portable_kg"></A>Portable</H2>

<P>The system provides two runtime libraries that contain functions beginning with the prefix <B>Rtl</B>. Kernel-mode drivers can use the same kernel-mode <B>Rtl</B><I>Xxx</I> routines as the executive components, but cannot call user-mode <B>Rtl</B><I>Xxx</I> routines. </P>

<P>Each NT executive component exports a set of kernel-mode support routines that drivers and all other kernel-mode components call. If the underlying implementation of a support routine changes over time, its callers remain portable because the interface to the defining component does not change.</P>

<P>Most operating system components are coded entirely in C, with only small pieces of the HAL and Kernel written in assembly language, so that the operating system is readily portable across hardware platforms. A kernel-mode driver should also be written in C so that it can be recompiled with a system-compatible C compiler, relinked, and run on different Windows platforms without recoding parts of the driver or replacing modules in the driver.</P>

<P>Drivers should not rely on the features of any particular system-compatible C compiler or C support library if the same features are not guaranteed to be supported by other system-compatible compilers. In general, driver code should conform to the ANSI C standard, and avoid depending on anything this standard describes as "implementation defined."  </P>

<P>In particular, to write portable drivers, it is best to avoid the following:

<UL>
	<LI>Dependencies on data types that can vary in size or layout from one platform to another</LI>

	<LI>Calling any standard C runtime library function that maintains state</LI>

	<LI>Calling any standard C runtime library function for which the operating system provides an alternative support routine</LI>
</UL>

<P>The DDK supplies a set of include files defining system-specific data types and constants that drivers (and all other kernel-mode components) use to help maintain portability from one platform to another. Most drivers include one of the master DDK kernel-mode include files, <I>ntddk.h</I> or <I>wdm.h</I>. The master include files pull in not only system-supplied headers that define the basic kernel-mode types, but also appropriate selections from any processor-architecture-specific header(s) when a driver is compiled with the corresponding compiler directive.</P>

<P>For WDM drivers, the DDK supplies a set of include files that export a subset of the NT kernel-mode support routines, macros, constants, and types. WDM drivers use the master DDK include file <I>wdm.h</I> instead of <I>ntddk.h</I>. The inclusion of <I>wdm.h</I> and exclusive use of its exported support routines, macros, constants, and types allows a WDM driver to be recompiled to run on Windows&nbsp;98/Me as well as Windows&nbsp;2000 and later.</P>

<P>If a driver requires platform-dependent definitions, it's best to isolate those definitions within <B>#ifdef</B> statements, so that each driver can be compiled and linked for the appropriate hardware platform. However, you can almost always avoid implementing any platform-specific conditionally-compiled code in a driver simply by using the support routines, macros, constants, and types provided in the DDK master header files. </P>

<P>Some drivers, such as <A HREF="JavaScript:hhobj_1.Click()">SCSI miniport drivers</A>, <A HREF="JavaScript:hhobj_2.Click()">NDIS drivers</A>, and <A HREF="JavaScript:hhobj_3.Click()">video miniport drivers</A>, include other system-supplied header files to maintain portability across Windows platforms.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Portable"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
