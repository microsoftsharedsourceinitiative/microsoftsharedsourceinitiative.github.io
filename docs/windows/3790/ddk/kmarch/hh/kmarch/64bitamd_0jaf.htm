<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Aggregates and Unions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_aggregates_and_unions_kg"></A>Aggregates and Unions</H4>

<P>Other types, such as arrays, structures, and unions, have stricter alignment requirements. Alignment requirements for these types must be followed to ensure consistent aggregate and union storage and data retrieval. The following definitions for array, structure, and union indicate the data objects that comprise these types:

<DL>
<DT>Array</DT>

<DD>Contains an ordered group of adjacent data objects. Each object is called an element. All elements within an array have the same size and data type.</DD>

<DT>Structure</DT>

<DD>Contains an ordered group of data objects. Unlike the elements of an array, the data objects within a structure can have different data types and sizes. Each data object in a structure is called a member.</DD>

<DT>Union</DT>

<DD>An object that holds any one of a set of named members. The members of the named set can be of any type. The storage allocated for a union is equal to the storage required for the largest member of that union, plus any padding required for alignment.
</DD>
</DL>

<P>The following table shows the recommended alignment for the scalar objects of arrays, structures, and unions. </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=35%>Scalar Type</TH>
<TH align=left width=39%>C Data Type</TH>
<TH align=left width=26%>Recommended Alignment</TH>
</TR>

<TR VALIGN="top">
<TD width=35%>INT8</TD>
<TD width=39%>char</TD>
<TD width=26%>Byte</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>UINT8</TD>
<TD width=39%>unsigned char</TD>
<TD width=26%>Byte</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>INT16</TD>
<TD width=39%>short</TD>
<TD width=26%>Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>UINT16</TD>
<TD width=39%>unsigned short</TD>
<TD width=26%>Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>INT32</TD>
<TD width=39%>int, long</TD>
<TD width=26%>Double Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>UINT32</TD>
<TD width=39%>unsigned int, unsigned long</TD>
<TD width=26%>Double Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>INT64</TD>
<TD width=39%>_int64</TD>
<TD width=26%>Quad Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>UINT64</TD>
<TD width=39%>unsigned _int64</TD>
<TD width=26%>Quad Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>FP32 (single precision)</TD>
<TD width=39%>float</TD>
<TD width=26%>Double Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>FP64 (double precision)</TD>
<TD width=39%>double</TD>
<TD width=26%>Quad Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>POINTER</TD>
<TD width=39%>*</TD>
<TD width=26%>Quad Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>__m64</TD>
<TD width=39%>struct __m64</TD>
<TD width=26%>Quad Word</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>__m128</TD>
<TD width=39%>struct __m128</TD>
<TD width=26%>Octal Word</TD>
</TR>
</TABLE><BR>

<P>The following aggregate alignment rules apply:

<UL>
	<LI>The alignment of an array is the same as the alignment for the type of the array’s elements.</LI>

	<LI>The alignment of the beginning of a structure or a union is the maximum alignment of any individual member. Each member within the structure or union must be placed at its proper alignment as defined in the preceding table, which may require implicit internal padding, depending on the previous member.</LI>

	<LI>Structure size must be an integral multiple of its alignment, which may require padding after the last member. Because structures and unions can be grouped in arrays, each array element of a structure or union must begin and end at the proper alignment previously determined.</LI>

	<LI>Data can be aligned in such a way as to be greater than the alignment requirements, as long as the previous rules are maintained.</LI>

	<LI>The compiler can adjust the packing of a structure for size reasons. For example, the compiler allows the /Zp switch for adjusting the packing of structures.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Aggregates%20and%20Unions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
