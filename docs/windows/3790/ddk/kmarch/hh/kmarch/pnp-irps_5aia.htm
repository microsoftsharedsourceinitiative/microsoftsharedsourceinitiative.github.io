<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP_MN_QUERY_DEVICE_RELATIONS</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP_MN_QUERY_DEVICE_RELATIONS">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_mn_query_device_relations_dr"></A>IRP_MN_QUERY_DEVICE_RELATIONS</H1>

<P>The PnP Manager sends this request to determine certain relationships among devices. The following types of drivers handle this request:

<UL>
	<LI>Bus drivers must handle <B>BusRelations</B>  requests for their adapter or controller (bus FDO). Filter drivers might handle <B>BusRelations</B> requests.</LI>

	<LI>Bus drivers must handle <B>TargetDeviceRelation</B> requests for their child devices (child PDOs). </LI>

	<LI>Function and filter drivers might handle <B>RemovalRelations </B>requests. </LI>

	<LI>Bus drivers might handle <B>EjectionRelations</B> requestsfor their child devices (child PDOs).</LI>
</UL>

<H4>Major Code</H4>

<P><A HREF="k113_8ur6.htm">IRP_MJ_PNP</A> </P>

<H4>When Sent</H4>

<P>The PnP Manager sends this IRP to gather information about devices with a relationship to the specified device.</P>

<P>The PnP Manager queries a device's <B>BusRelations</B> (child devices) when the device is enumerated and at other times while the device is active, such as when a driver calls <A HREF="k104_8t6a.htm"><B>IoInvalidateDeviceRelations</B></A> to indicate that a child device has arrived or departed. </P>

<P>The PnP Manager queries a device's <B>RemovalRelations</B> before it removes a device's drivers or ejects the device and it queries for <B>EjectionRelations</B> before it ejects a device.</P>

<P></P>

<P>The PnP Manager queries a device's <B>TargetDeviceRelation</B> when a driver or user-mode application registers for PnP notification of an <B>EventCategoryTargetDeviceChange</B> on the device. The PnP Manager queries for the device that is associated with a particular file object. This is the only PnP IRP that has a valid file object parameter. A driver can query a device stack for <B>TargetDeviceRelation</B>.</P>

<P>For <B>BusRelations</B>, <B>RemovalRelations</B>, and <B>EjectionRelations</B> requests, the PnP Manager sends the IRP at IRQL = PASSIVE_LEVEL in the context of a system thread.</P>

<P>For <B>TargetDeviceRelation</B> requests, the PnP Manager sends the IRP at IRQL = PASSIVE_LEVEL in an arbitrary thread context.</P>

<H4>Input</H4>

<P>The <B>Parameters.QueryDeviceRelations.Type</B> member of the <A HREF="k112_49bm.htm">IO_STACK_LOCATION</A> structure specifies the type of relations being queried. Possible values include <B>BusRelations</B>, <B>EjectionRelations</B>, <B>RemovalRelations</B>, and <B>TargetDeviceRelation</B>. <B>PowerRelations</B> is not used.</P>

<P><B>Irp-&gt;FileObject</B> points to a valid file object only if <B>Parameters.QueryDeviceRelations.Type</B> is <B>TargetDeviceRelation</B>. </P>

<H4>Output</H4>

<P>Returned in the I/O status block.</P>

<H4>I/O Status Block</H4>

<P>A driver sets <B>Irp-&gt;IoStatus.Status</B> to STATUS_SUCCESS or to a failure status such as STATUS_INSUFFICIENT_RESOURCES.</P>

<P>On success, a driver sets <B>Irp-&gt;IoStatus.Information</B> to a PDEVICE_RELATIONS pointer that points to the requested relations information. The DEVICE_RELATIONS structure is defined as follows:</P>

<PRE>typedef struct _DEVICE_RELATIONS {
    ULONG Count;
    PDEVICE_OBJECT Objects[1];  // variable length
} DEVICE_RELATIONS, *PDEVICE_RELATIONS;</PRE>

<H4>Operation</H4>

<P>If a driver returns relations in response to this IRP, it allocates a DEVICE_RELATIONS structure from paged memory containing a count and the appropriate number of device object pointers. The PnP Manager frees the structure when it is no longer needed. If a driver replaces a DEVICE_RELATIONS structure allocated by another driver, it must free the previous structure.</P>

<P>A driver must reference the PDO of any device that it reports in this IRP (<A HREF="k107_0tyq.htm"><B>ObReferenceObject</B></A>). The PnP Manager removes the reference when appropriate.</P>

<P>A function or filter driver should be prepared to handle this IRP for a device any time after its AddDevice routine has completed for the device. Bus drivers should be prepared to handle a query for <B>BusRelations</B> immediately after a device is enumerated.</P>

<P>See <A HREF="plugplay_15t3.htm">Plug and Play</A> for the general rules for handling <A HREF="pnp-irps_9bzm.htm">Plug and Play Minor IRPs</A>.</P>

<P>The following subsections describe the specific actions for handling the various queries.</P>



<H4><A NAME="ddk_busrelations_dr"></A>BusRelations</H4>

<P>When the PnP Manager queries for the bus relations (child devices) of an adapter or controller, the bus driver must return a list of pointers to the PDOs of any devices physically present on the bus. The bus driver reports all devices, regardless of whether they have been started. The bus driver might need to power up its bus device to determine which children are present.</P>

<P>The bus driver that responds to this IRP is the function driver for the bus adapter or controller, not the parent bus driver for the bus that the adapter or controller is connected to. Function drivers for non-bus devices do not handle this query. Such drivers just pass the IRP to the next lower driver. (See the following figure.) Filter drivers typically do not handle this query.</P>

<P><IMG SRC="images/qdrstaks.gif" ALT="" BORDER=0></P>

<P><B>Drivers Handling a Query For Bus Relations</B></P>

<P>In the example shown in the figure, the PnP Manager sends an IRP_MN_QUERY_DEVICE_RELATIONS for <B>BusRelations</B> to the drivers for the USB hub device. The PnP Manager is requesting a list of the hub device's children.

<OL>
	<LI>As with all PnP IRPs, the PnP Manager sends the IRP to the top driver in the device stack for the device.</LI>

	<LI>An optional filter driver might be the top driver in the stack. A filter driver typically does not handle this IRP; it passes the IRP down the stack. A filter driver might handle this IRP, for example, if the driver exposes a non-enumerable device on the bus.</LI>

	<LI>The USB hub bus driver handles the IRP.
<P>The USB hub bus driver:

<UL>
	<LI>Creates a PDO for any child device that does not already have one.</LI>

	<LI>Marks the PDO inactive for any device that is no longer present on the bus. The bus driver does not delete such PDOs. See <A HREF="plugplay_3fon.htm">Removing a Device</A> for information on when to delete the PDOs.</LI>

	<LI>Reports any child devices that are present on the bus.
<P>For each child device, the bus driver references the PDO and puts a pointer to the PDO in the DEVICE_RELATIONS structure. 

<P>There are two PDOs in this example, one for the joystick device and one for the keyboard device.

<P>The bus driver should check whether another driver already created a DEVICE_RELATIONS structure for this IRP. If so, the bus driver must add to the existing information. 

<P>If there is no child device present on the bus, the driver sets the count to zero in the DEVICE_RELATIONS structure and returns success.
</LI>

	<LI>Sets the appropriate values in the I/O status block and passes the IRP to the next lower driver. The bus driver for the adapter or controller does not complete the IRP.</LI>
</UL>
</LI>

	<LI>An optional lower filter, if present, typically does not handle this IRP. Such a filter driver passes the IRP down the stack. If a lower-filter driver handles this IRP, it can add PDO(s) to the list of child devices but it must not delete any PDOs created by other drivers.</LI>

	<LI>The parent bus driver does not handle this IRP, unless it is the only driver in the device stack (the device is in raw mode). As with all PnP IRPs, the parent bus driver completes the IRP with <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A>. 
<P>If there are one or more bus filter drivers in the device stack, such drivers might handle the IRP on its way down to the bus driver and/or on the IRP's way back up the device stack (if there are IoCompletion routines). According to the PnP IRP rules, such a driver can add PDOs to the IRP on its way down the stack and/or modify the relations list on the IRP's way back up the stack (in IoCompletion routines).
</LI>
</OL>



<H4><A NAME="ddk_ejectionrelations_dr"></A>EjectionRelations</H4>

<P>A driver returns pointers to PDOs of any devices that might be physically removed from the system when the specified device is ejected. Do not report the PDOs of children of the device; the PnP Manager always requests that child devices be removed before their parent device.</P>

<P>The PnP Manager sends an IRP_MN_EJECT IRP to a device being ejected. The driver for such a device also receive a remove IRP. The device's ejection relations receive an IRP_MN_REMOVE_DEVICE IRP (not an IRP_MN_EJECT IRP).</P>

<P>Only a parent bus driver can respond to an <B>EjectionRelations</B> query for one of its child devices. Function and filter drivers must pass it to the next lower driver in the device stack. If a bus driver receives this IRP as the function driver for its adapter or controller, the bus driver is performing the tasks of a function driver and must pass the IRP to the next lower driver.</P>



<H4><A NAME="ddk_powerrelations_dr"></A>PowerRelations</H4>

<P>Reserved.</P>

<P></P>



<H4><A NAME="ddk_removalrelations_dr"></A>RemovalRelations</H4>

<P>A driver returns pointers to PDOs of any devices whose drivers must be removed when the drivers for the specified device are removed. Do not report the PDOs of children of the device; the PnP Manager already requests removal of child devices before removing a device.</P>

<P>The order in which removal relations are removed is undefined. Removal relations at the same level in the device tree can be removed in any order.</P>

<P>Any driver in the device stack can handle this type of relations query. A function or filter driver handles the IRP before passing it to the next lower driver. A bus driver handles the IRP and then completes it.</P>



<H4><A NAME="ddk_targetdevicerelation_dr"></A>TargetDeviceRelation</H4>

<P>A parent bus driver must handle this type of relations query for its child devices. The bus driver references the child device's PDO with <A HREF="k107_0tyq.htm"><B>ObReferenceObject</B></A> and returns a pointer to the PDO in the DEVICE_RELATIONS structure. There is only one PDO pointer in the structure for this relation type. The PnP Manager removes the reference to the PDO when the driver or application unregisters for notification on the device. </P>

<P>Only a parent bus driver responds to a <B>TargetDeviceRelation</B> query. Function and filter drivers must pass it to the next lower driver in the device stack. If a bus driver receives this IRP as the function driver for its adapter or controller, the bus driver is performing the tasks of a function driver and must pass the IRP to the next lower driver.</P>

<P>If a driver is not in a PDO-based stack, the driver sends a new target-device-relation query IRP to the device object associated with the file handle on which the driver performs I/O. </P>

<H4>Sending This IRP</H4>

<P>Drivers must not send this IRP to request <B>BusRelations</B>. Drivers are not restricted from sending this IRP for <B>RemovalRelations</B> or <B>EjectionRelations</B>, but it is not likely that a driver would do so. </P>

<P>Drivers can query a device stack for <B>TargetDeviceRelation</B>. See <A HREF="irps_0uuf.htm">Handling IRPs</A> for information on sending IRPs. The following steps apply specifically to this IRP: 

<UL>
	<LI>Set the values in the next I/O stack location of the IRP: set <B>MajorFunction</B> to <A HREF="k113_8ur6.htm">IRP_MJ_PNP</A>, set <B>MinorFunction</B> to IRP_MN_QUERY_DEVICE_RELATIONS, set <B>Parameters.QueryDeviceRelations.Type</B> to <B>TargetDeviceRelation</B>, and set <B>Irp-&gt;FileObject</B> to a valid file object. </LI>

	<LI>Initialize <B>IoStatus.Status</B> to STATUS_NOT_SUPPORTED. </LI>
</UL>

<P>If a driver sent this IRP to get the PDO to report in response to an IRP_MN_QUERY_DEVICE_RELATIONS for <B>TargetDeviceRelation</B> that <I>the driver</I> received, then the driver reports the PDO and frees the returned relations structure when the IRP completes. If a driver initiated this IRP for another reason, the driver frees the relations structure when the IRP completes and dereferences the PDO when it is no longer needed.</P>

<H4>See Also</H4>

<P><A HREF="k104_8t6a.htm"><B>IoInvalidateDeviceRelations</B></A>, <A HREF="pnp-irps_7fxu.htm">IRP_MN_EJECT</A>,<A HREF="pnp-irps_4noy.htm"> IRP_MN_REMOVE_DEVICE</A>, <A HREF="k104_7diq.htm"><B>IoRegisterPlugPlayNotification</B></A>, <A HREF="k107_0tyq.htm"><B>ObReferenceObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP_MN_QUERY_DEVICE_RELATIONS"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
