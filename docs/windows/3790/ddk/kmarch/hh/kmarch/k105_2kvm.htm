<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeWaitForMutexObject</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeWaitForMutexObject">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kewaitformutexobject_kr"></A>KeWaitForMutexObject</H1>

<P>The <B>KeWaitForMutexObject</B> routine puts the current thread into an alertable or nonalertable wait state until the given mutex object is set to a signaled state or (optionally) until the wait times out.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>KeWaitForMutexObject(</B>
<B>    IN PRKMUTEX</B>  <I>Mutex</I><B>,</B>
<B>    IN KWAIT_REASON</B>  <I>WaitReason</I><B>,</B>
<B>    IN KPROCESSOR_MODE</B>  <I>WaitMode</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>Alertable</I><B>,</B>
<B>    IN PLARGE_INTEGER</B>  <I>Timeout</I>  <B>OPTIONAL</B>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Mutex</I></DT>

<DD>Pointer to an initialized mutex object for which the caller supplies the storage.</DD>

<DT><I>WaitReason</I></DT>

<DD>Specifies the reason for the wait, which should be set to <B>Executive</B>. If the driver is doing work on behalf of a user and is running in the context of a user thread, this parameter should be set to <B>UserRequest</B>.</DD>

<DT><I>WaitMode</I></DT>

<DD>The caller must specify <B>KernelMode</B>.</DD>

<DT><I>Alertable</I></DT>

<DD>Specifies a Boolean value that indicates whether the wait is alertable.</DD>

<DT><I>Timeout</I></DT>

<DD>Pointer to a time-out value that specifies the absolute or relative time at which the wait is to be completed (optional). A negative value specifies an interval relative to the current time. The value should be expressed in units of 100 nanoseconds. Absolute expiration times track any changes in the system time; relative expiration times are not affected by system time changes.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>KeWaitForMutexObject</B> can return one of the following:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>The dispatcher object specified by the <I>Mutex</I> parameter satisfied the wait.</DD>

<DT>STATUS_ALERTED</DT>

<DD>The wait was completed because of an alert to the thread.</DD>

<DT>STATUS_USER_APC</DT>

<DD>A user APC was delivered to the current thread before the specified <I>Timeout</I> interval expired.</DD>

<DT>STATUS_TIMEOUT</DT>

<DD>A time out occurred before the mutex was set to a signaled state. This value can be returned when an explicit time-out value of zero is specified and the specified set of wait conditions cannot be immediately met.
</DD>
</DL>

<P>Note that the NT_SUCCESS macro recognizes all of these status values as "success" values.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P><B>KeWaitForMutexObject</B> is a macro that converts to <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A>, which can be used instead.</P>

<P>For better performance, use the <B>Ex<I>Xxx</I>FastMutex</B> routines instead of the <B>Ke<I>Xxx</I>Mutex</B> routines. However, a fast mutex cannot be acquired recursively, as a kernel mutex can. </P>

<P>The current state of the given mutex object is examined to determine whether the wait can be satisfied immediately. If so, the necessary side effects are performed on the mutex. Otherwise, the current thread is put in a waiting state and a new thread is selected for execution on the current processor.</P>

<P>The <I>Alertable</I> parameter specifies whether the thread can be alerted and its wait state consequently aborted. If the value of this parameter is FALSE then the thread cannot be alerted, no matter what the value of the <I>WaitMode</I> parameter or the origin of the alert. The only exception to this rule is that of a terminating thread. A thread is automatically made alertable, for instance, when terminated by a user with a CTRL+C.</P>

<P>If the value of <I>Alertable </I>is TRUE and one of the following conditions is present, the thread will be alerted:

<OL>
	<LI>If the origin of the alert is an internal, undocumented kernel-mode routine used to alert threads.</LI>

	<LI>The origin of the alert is a user-mode APC, and the value of the <I>WaitMode</I> parameter is <B>UserMode</B>.</LI>
</OL>

<P>In the first of these two cases, the thread’s wait is satisfied with a completion status of STATUS_ALERTED; in the second case, it is satisfied with a completion status of STATUS_USER_APC.</P>

<P>The thread must be alertable for a user-mode APC to be delivered. This is not the case for kernel-mode APCs. A kernel-mode APC can be delivered and executed even though the thread is not alerted. Once the APC's execution completes, the thread's wait resumes. A thread is never alerted, nor is its wait aborted, by the delivery of a kernel-mode APC.</P>

<P>The delivery of kernel-mode APCs to a waiting thread does not depend on whether the thread can be alerted. If the kernel-mode APC is a special kernel-mode APC, then the APC is delivered provided that IRQL&nbsp;&lt; APC_LEVEL. If the kernel-mode APC is a normal kernel-mode APC, then the APC is delivered provided that the following three conditions hold: (1) IRQL&nbsp;&lt; APC_LEVEL, (2) no kernel APC is in progress, and (3) the thread is not in a critical section. </P>

<P>Because <B>KeWaitForMutexObject</B> initiates a wait on a mutex object, a special consideration applies. APC delivery is the same for mutexes as for all other dispatcher objects <I>during the wait</I> to acquire the mutex. However, once <B>KeWaitForMutexObject</B> returns with STATUS_SUCCESS and the thread actually holds the mutex, only special kernel-mode APCs are delivered. Delivery of all other APCs, both kernel-mode and user-mode, is disabled. This restriction on the delivery of APCs persists until the mutex is released. </P>

<P>For additional information, see <A HREF="synchro_1oo7.htm">Do Waiting Threads Receive Alerts and APCs?</A></P>

<P>If the <I>WaitMode</I> parameter is <B>UserMode</B>, the kernel stack can be swapped out during the wait. Consequently, a caller must <I>never</I> attempt to pass parameters on the stack when calling <B>KeWaitForMutexObject</B> using the <B>UserMode</B> argument.</P>

<P>It is especially important to check the return value of <B>KeWaitForMutexObject</B> when the <I>WaitMode</I> parameter is <B>UserMode</B> or <I>Alertable</I> is TRUE, because <B>KeWaitForMutexObject</B> might return early with a status of STATUS_USER_APC or STATUS_ALERTED. </P>

<P>All long term waits that can be aborted by a user should be <B>UserMode</B> waits and <I>Alertable</I> should be set to FALSE. </P>

<P>Where possible, <I>Alertable</I> should be set to FALSE and <I>WaitMode</I> should be set to <B>KernelMode</B>, in order to reduce driver complexity. The principal exception to this is when the wait is a long term wait. If no <I>Timeout</I> is supplied, the calling thread remains in a wait state until the <I>Mutex</I> is signaled.</P>

<P>A <I>Timeout</I> of zero allows the testing of a set of wait conditions and for conditionally performing any side effects if the wait can be immediately satisfied, such as acquiring the <I>Mutex</I>.</P>

<P>Callers of <B>KeWaitForMutexObject</B> must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL. Usually, the caller must be running at IRQL&nbsp;= PASSIVE_LEVEL and in a nonarbitrary thread context. A call while running at IRQL&nbsp;= DISPATCH_LEVEL is valid if and only if the caller specifies a <I>Timeout</I> of zero. That is, a driver must not wait for a nonzero interval at IRQL&nbsp;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k102_0m9e.htm"><B>ExAcquireFastMutex</B></A>, <A HREF="k102_1ueq.htm"><B>ExAcquireFastMutexUnsafe</B></A>, <A HREF="k102_2o8i.htm"><B>ExInitializeFastMutex</B></A>, <A HREF="k105_9kfm.htm"><B>KeBugCheckEx</B></A>, <A HREF="k105_9hgy.htm"><B>KeInitializeMutex</B></A>, <A HREF="k105_9c4y.htm"><B>KeReadStateMutex</B></A>, <A HREF="k105_44du.htm"><B>KeReleaseMutex</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeWaitForMutexObject"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
