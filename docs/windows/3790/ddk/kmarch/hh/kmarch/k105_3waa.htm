<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeQueryPerformanceCounter</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeQueryPerformanceCounter">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_kequeryperformancecounter_kr"></A>KeQueryPerformanceCounter</H1>

<P>The <B>KeQueryPerformanceCounter</B> routine provides the finest grained running count available in the system.</P>

<PRE class=syntax><B>LARGE_INTEGER 
</B>  <B>KeQueryPerformanceCounter(</B>
<B>    OUT PLARGE_INTEGER</B>  <I>PerformanceFrequency</I>  <B>OPTIONAL</B>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>PerformanceFrequency</I></DT>

<DD>Optionally specifies a pointer to a variable that receives the performance counter frequency.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Return Value</H4>

<P><B>KeQueryPerformanceCounter</B> returns the performance counter value in units of ticks.</P>

<H4>Comments</H4>

<P><B>KeQueryPerformanceCounter</B> always returns a 64-bit integer representing the current number of ticks. Accumulating the count begins when the system is booted. </P>

<P>The resolution of the timer used to accumulate the current count can be obtained by specifying a pointer value for <I>PerformanceFrequency</I>. The value returned is the number of ticks per second. </P>

<P><B>KeQueryPerformanceCounter</B> is intended for time-stamping packets or for computing performance and capacity measurements. It is not intended for measuring elapsed time, for computing stalls or waits, or for iterations.</P>

<P>Use this routine as infrequently as possible. Depending on the platform, <B>KeQueryPerformanceCounter</B> can disable system-wide interrupts for a minimal interval. Consequently, calling this routine frequently, as in an iteration, defeats its purpose of returning very fine-grained, running time-stamp information. Calling this routine too frequently can degrade I/O performance for the calling driver and for the system as a whole.</P>

<P>Callers of <B>KeQueryPerformanceCounter</B> can be running at any IRQL.</P>

<H4>See Also</H4>

<P><A HREF="k105_80tu.htm"><B>KeQueryInterruptTime</B></A>, <A HREF="k105_41iq.htm"><B>KeQuerySystemTime</B></A>, <A HREF="k105_8wj6.htm"><B>KeQueryTickCount</B></A>, <A HREF="k105_51yq.htm"><B>KeQueryTimeIncrement</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeQueryPerformanceCounter"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
