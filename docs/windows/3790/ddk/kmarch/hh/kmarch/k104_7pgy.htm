<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoGetDeviceProperty</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoGetDeviceProperty">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_compatible_id_dg_gly">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_hardware_id_dg_gly">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_guid_ks">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iogetdeviceproperty_kr"></A>IoGetDeviceProperty</H1>

<P>The <B>IoGetDeviceProperty</B> routine retrieves information about a device such as configuration information and the name of its PDO. </P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>IoGetDeviceProperty(</B>
    <B>IN PDEVICE_OBJECT </B> <I>DeviceObject</I><B>,</B>
    <B>IN DEVICE_REGISTRY_PROPERTY</B>  <I>DeviceProperty</I><B>,</B>
    <B>IN ULONG</B>  <I>BufferLength</I><B>,</B>
    <B>OUT PVOID</B>  <I>PropertyBuffer</I><B>,</B>
    <B>OUT PULONG</B>  <I>ResultLength</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceObject</I></DT>

<DD>Pointer to the physical device object (PDO) for the device being queried. </DD>

<DT><I>DeviceProperty</I></DT>

<DD>Specifies the device property being requested. Must be one of the following:

<DL>
<DT><B>DevicePropertyAddress</B></DT>

<DD>Requests the address of the device on the bus. <I>PropertyBuffer</I> points to a ULONG.

<P>The interpretation of this address is bus-specific. The caller of this routine should call the routine again to request the <B>DevicePropertyBusTypeGuid</B>, or possibly the <B>DevicePropertyLegacyBusType</B>, so it can interpret the address. An address value of 0xFFFFFFFF indicates that the underlying bus driver did not supply a bus address for the device.
</DD>

<DT><B>DevicePropertyBootConfiguration</B></DT>

<DD>Requests the hardware resources assigned to the device by the firmware, in raw form. <I>PropertyBuffer</I> points to a <A HREF="k112_92k2.htm">CM_RESOURCE_LIST</A> structure.</DD>

<DT><B>DevicePropertyBootConfigurationTranslated</B></DT>

<DD>The hardware resources assigned to the device by the firmware, in translated form. <I>PropertyBuffer</I> points to a CM_RESOURCE_LIST structure.</DD>

<DT><B>DevicePropertyBusNumber</B></DT>

<DD>Requests the legacy bus number of the bus the device is connected to. <I>PropertyBuffer</I> points to a ULONG.</DD>

<DT><B>DevicePropertyBusTypeGuid</B></DT>

<DD>Requests the GUID for the bus that the device is connected to. The system-defined bus type GUIDs are listed in <I>wdmguid.h</I>. <I>PropertyBuffer</I> points to a GUID, which is a 16-byte structure that contains the GUID in binary form.</DD>

<DT><B>DevicePropertyClassGuid</B></DT>

<DD>Requests the GUID for the device's setup class. <I>PropertyBuffer</I> points to a NULL-terminated array of WCHAR. This routine returns the GUID in a string format as follows, where each "c" represents a hexadecimal character: {cccccccc-cccc-cccc-cccc-cccccccccccc}</DD>

<DT><B>DevicePropertyClassName</B></DT>

<DD>Requests the name of the device's setup class, in text format. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyCompatibleIDs</B></DT>

<DD>Requests the <A HREF="JavaScript:hhobj_1.Click()">compatible IDs</A> reported by the device. <I>PropertyBuffer</I> points to a REG_MULTI_SZ value.</DD>

<DT><B>DevicePropertyDeviceDescription</B></DT>

<DD>Requests a string describing the device, such as "Microsoft PS/2 Port Mouse", typically defined by the manufacturer. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyDriverKeyName</B></DT>

<DD>Requests the name of the driver-specific registry key. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyEnumeratorName</B></DT>

<DD>Requests the name of the enumerator for the device, such as "PCI" or "root". <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyFriendlyName</B></DT>

<DD>Requests a string that can be used to distinguish between two similar devices, typically defined by the class installer. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyHardwareID</B></DT>

<DD>Requests the <A HREF="JavaScript:hhobj_2.Click()">hardware IDs</A> provided by the device that identify the device. <I>PropertyBuffer</I> points to a REG_MULTI_SZ value.</DD>

<DT><B>DevicePropertyInstallState</B></DT>

<DD>(Windows&nbsp;XP and later.) Requests the device's installation state. The installation state is returned as a DEVICE_INSTALL_STATE enumeration value (see <I>ntddk.h</I>).</DD>

<DT><B>DevicePropertyLegacyBusType</B></DT>

<DD>Requests the bus type, such as PCIBus or PCMCIABus. <I>PropertyBuffer</I> points to an INTERFACE_TYPE enumeration value.</DD>

<DT><B>DevicePropertyLocationInformation</B></DT>

<DD>Requests information about the device's location on the bus; the interpretation of this information is bus-specific. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyManufacturer</B></DT>

<DD>Requests a string identifying the manufacturer of the device. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyPhysicalDeviceObjectName</B></DT>

<DD>Requests the name of the PDO for this device. <I>PropertyBuffer</I> points to a NULL-terminated WCHAR string.</DD>

<DT><B>DevicePropertyRemovalPolicy</B></DT>

<DD>(Windows&nbsp;XP and later.) Requests the device's current removal policy. The current removal policy is returned as a DEVICE_REMOVAL_POLICY enumeration value (see <I>ntddk.h</I>).</DD>

<DT><B>DevicePropertyUINumber</B></DT>

<DD>Requests a number associated with the device that can be displayed in the user interface. <I>PropertyBuffer</I> points to a ULONG value.

<P>This number is typically a user-perceived slot number, such as a number printed next to the slot on the board, or some other number that makes locating the physical device easier for the user. If the device is on a bus that has no UI number convention, or if the bus driver for the device cannot determine the UI number, this value is 0xFFFFFFFF. 
</DD>
</DL>
</DD>

<DT><I>BufferLength</I></DT>

<DD>Specifies the size, in bytes, of the caller-supplied <I>PropertyBuffer</I>. </DD>

<DT><I>PropertyBuffer</I></DT>

<DD>Pointer to a caller-supplied buffer to receive the property information. The buffer can be allocated from pageable memory. The type of the buffer is determined by the <I>DeviceProperty</I> (see above).</DD>

<DT><I>ResultLength</I></DT>

<DD>Pointer to a ULONG to receive the size of the property information returned at <I>PropertyBuffer</I>. If <B>IoGetDeviceProperty</B> returns STATUS_BUFFER_TOO_SMALL, it sets this parameter to the required buffer length.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoGetDeviceProperty</B> returns STATUS_SUCCESS if the call was successful. Possible error return values include the following.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=51%>Error Status</TH>
<TH align=left width=49%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_BUFFER_TOO_SMALL</TD>
<TD width=49%>The buffer at <I>PropertyBuffer</I> was too small. <I>ResultLength</I> points to the required buffer length.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_INVALID_PARAMETER_2</TD>
<TD width=49%>The given <I>DeviceProperty</I> is not one of the properties handled by this routine.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_INVALID_DEVICE_REQUEST</TD>
<TD width=49%>Possibly indicates that the given <I>DeviceObject</I> was not a valid PDO pointer.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P><B>IoGetDeviceProperty</B> retrieves device setup information from the registry. Use this routine, rather than accessing the registry directly, to insulate a driver from differences across platforms and from possible changes in the registry structure.</P>

<P>For many <I>DeviceProperty</I> requests, it can take two or more calls to <B>IoGetDeviceProperty</B> to determine the required <I>BufferLength</I>. The first call should use a best-guess value. If the return status is STATUS_BUFFER_TOO_SMALL, the driver should free its current buffer, allocate a buffer of the size returned in <I>ResultLength</I>, and call <B>IoGetDeviceProperty</B> again. Because some of the setup properties are dynamic, the data size can change between the time the required size is returned and driver calls this routine again. Therefore, drivers should call <B>IoGetDeviceProperty</B> inside a loop that executes until the return status is not STATUS_BUFFER_TOO_SMALL. </P>

<P>Function drivers that support devices on a legacy bus and a PnP bus can use the <B>DevicePropertyBusNumber</B>, <B>DevicePropertyBusTypeGuid</B>, and <B>DevicePropertyLegacyBusType</B> properties to distinguish between the buses.</P>

<P>Callers of <B>IoGetDeviceProperty</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL in the context of a system thread.</P>

<H4>See Also</H4>

<P><A HREF="k102_2omq.htm"><B>ExAllocatePoolWithTag</B></A>, <A HREF="k112_92k2.htm">CM_RESOURCE_LIST</A>, <A HREF="k112_5quq.htm">IO_RESOURCE_REQUIREMENTS_LIST</A>, <A HREF="JavaScript:hhobj_3.Click()">GUID</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoGetDeviceProperty"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
