<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ZwMapViewOfSection</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ZwMapViewOfSection">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_view_kg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_zwmapviewofsection_kr"></A>ZwMapViewOfSection</H1>

<P>The <B>ZwMapViewOfSection</B> routine maps a <A HREF="JavaScript:hhobj_1.Click()">view</A> of a section into the virtual address space of a subject process.</P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>ZwMapViewOfSection(</B>
    <B>IN HANDLE</B>  <I>SectionHandle</I><B>,</B>
    <B>IN HANDLE</B>  <I>ProcessHandle</I><B>,</B>
    <B>IN OUT PVOID</B>  <B>*</B><I>BaseAddress</I><B>,</B>
    <B>IN ULONG</B>  <I>ZeroBits</I><B>,</B>
    <B>IN ULONG</B>  <I>CommitSize</I><B>,</B>
    <B>IN OUT PLARGE_INTEGER</B>  <I>SectionOffset</I>  <B>OPTIONAL,</B>
    <B>IN OUT PSIZE_T</B>  <I>ViewSize</I><B>,</B>
    <B>IN SECTION_INHERIT</B>  <I>InheritDisposition</I><B>,</B>
    <B>IN ULONG</B>  <I>AllocationType</I><B>,</B>
    <B>IN ULONG</B>  <I>Protect</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SectionHandle</I></DT>

<DD>Handle to a section object.  This handle is created by a successful call to <A HREF="k111_5ovm.htm"><B>ZwCreateSection</B></A> or <A HREF="k111_4fqq.htm"><B>ZwOpenSection</B></A>.</DD>

<DT><I>ProcessHandle</I></DT>

<DD>Handle of an opened process object, representing the process for which the view should be mapped. Use the <B>NtCurrentProcess</B> macro to specify the current process. The handle must have PROCESS_VM_OPERATION access to the process (described in the Platform SDK documentation).</DD>

<DT><I>BaseAddress</I></DT>

<DD>Pointer to a variable that will receive the base address of the view. If the initial value of this argument is non-NULL, the view is allocated starting at the specified virtual address rounded down to the next 64-kilobyte address boundary.</DD>

<DT><I>ZeroBits</I></DT>

<DD>Specifies the number of high-order address bits that must be zero in the base address of the section view. The value of this argument must be less than 21 and is used only when the operating system determines where to allocate the view, as when <I>BaseAddress</I> is NULL.</DD>

<DT><I>CommitSize</I></DT>

<DD>Specifies the size, in bytes, of the initially committed region of the view. <I>CommitSize</I> is only meaningful for page-file backed sections. For mapped sections, both data and image are always committed at section creation time. This parameter is ignored for mapped files. This value is rounded up to the next host-page-size boundary.</DD>

<DT><I>SectionOffset</I></DT>

<DD>Pointer to the offset, in bytes, from the beginning of the section to the view. If this pointer is non-NULL, the given value is rounded down to the next allocation granularity size boundary.</DD>

<DT><I>ViewSize</I></DT>

<DD>Pointer to a variable that will receive the actual size, in bytes, of the view. If the value of this parameter is zero, a view of the section will be mapped starting at the specified section offset and continuing to the end of the section. Otherwise, the initial value of this argument specifies the size of the view, in bytes, and is rounded up to the next host-page-size boundary.</DD>

<DT><I>InheritDisposition</I></DT>

<DD>Specifies how the view is to be shared by a child process created with a create process operation. Device and intermediate drivers should set this parameter to zero.</DD>

<DT><I>AllocationType</I></DT>

<DD>Specifies a set of flags that describes the type of allocation to be performed for the specified region of pages.  The valid flags are MEM_COMMIT, MEM_PHYSICAL, MEM_RESERVE, and MEM_TOP_DOWN.  For more information on the MEM_<I>XXX</I> flags, see the <B>VirtualAlloc</B> routine in the Platform SDK.</DD>

<DT><I>Protect</I></DT>

<DD>Specifies the protection for the region of initially committed pages. Device and intermediate drivers should set this value to PAGE_READWRITE.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>ZwMapViewOfSection</B> returns an NTSTATUS value. Possible return values include:

<DL>
<DT>STATUS_SUCCESS</DT>

<DD>The routine successfully performed the requested operation.</DD>

<DT>STATUS_CONFLICTING_ADDRESSES</DT>

<DD>The specified address range conflicts with an address range already reserved, or the specified cache attribute type conflicts with the address range's existing cache attribute. For example, if the memory being mapped lies within a large page that is already mapped as fully cached, then it is illegal to request to map this memory as noncached or write combined.</DD>

<DT>STATUS_INVALID_PAGE_PROTECTION</DT>

<DD>The value specified for the <I>Protect</I> parameter is invalid.</DD>

<DT>STATUS_SECTION_PROTECTION </DT>

<DD>The value specified for the <I>AllocationType</I> parameter is incompatible with the protection type specified when the section was created.</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Several different views of a section can be concurrently mapped into the virtual address space of one or more processes.</P>

<P>If the specified section does not exist or the access requested is not allowed, <B>ZwMapViewOfSection</B> returns an error.</P>

<P>Do not use <B>ZwMapViewOfSection</B> to map a memory range in <I>\Device\PhysicalMemory</I> into user mode, unless your driver has allocated the memory range directly with <A HREF="k106_0x82.htm"><B>MmAllocatePagesForMdl</B></A> (or any equivalent method that guarantees no other system component has mapped the same memory range with a different <A HREF="k112_0r3m.htm">MEMORY_CACHING_TYPE</A> value).</P>

<P>Callers of <B>ZwMapViewOfSection</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k111_4fqq.htm"><B>ZwOpenSection</B></A>, <A HREF="k111_9oaa.htm"><B>ZwUnmapViewOfSection</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ZwMapViewOfSection"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
