<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using NTSTATUS Values</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Using NTSTATUS Values">
<META NAME="MS-HKWD" CONTENT="NT_SUCCESS">
<META NAME="MS-HKWD" CONTENT="NT_INFORMATION">
<META NAME="MS-HKWD" CONTENT="NT_WARNING">
<META NAME="MS-HKWD" CONTENT="NT_ERROR">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_using_ntstatus_values_kg"></A>Using NTSTATUS Values</H2>

<P>Many kernel-mode <A HREF="drvrrtns_99rm.htm">standard driver routines</A> and <A HREF="k101_5qnm.htm">driver support routines</A> use the NTSTATUS type for return values. Additionally, drivers provide an NTSTATUS-typed value in an IRP's <A HREF="k112_08qa.htm">IO_STATUS_BLOCK</A> structure when <A HREF="irps_6crr.htm">completing IRPS</A>. The NTSTATUS type is defined in <I>ntdef.h</I>, and system-supplied status codes are defined in <I>ntstatus.h</I>. (Vendors can also define private status codes, although they rarely need to. For more information, see <A HREF="other_861z.htm">Defining New NTSTATUS Values</A>.)</P>

<P>NTSTATUS values are divided into four types: success values, informational values, warnings, and error values. </P>

<P>Numerous values are assigned to each type. A common mistake, when testing for a successful return from a routine, is to compare the routine's return value with STATUS_SUCCESS. This comparison checks for only one of several success values.</P>

<P>When testing a return value, you should use one of the following system-supplied macros (defined in <I>ntdef.h</I>):</P>



<DL>
<DT><A NAME="ddk_nt_success_status_kg"></A>NT_SUCCESS(<I>Status</I>) </DT>

<DD>Evaluates to TRUE if the return value specified by <I>Status</I> is a success type or an informational type (0 – 0x7FFFFFFF).</DD>

<DT><A NAME="ddk_nt_information_status_kg"></A>NT_INFORMATION(<I>Status</I>)</DT>

<DD>Evaluates to TRUE if the return value specified by <I>Status</I> is an informational type (0x40000000 – 0x7FFFFFFF).</DD>

<DT><A NAME="ddk_nt_warning_status_kg"></A>NT_WARNING(<I>Status</I>)</DT>

<DD>Evaluates to TRUE if the return value specified by <I>Status</I> is a warning type (0x80000000 – 0xBFFFFFFF).</DD>

<DT><A NAME="ddk_nt_error_status__kg"></A>NT_ERROR(<I>Status</I>)</DT>

<DD>Evaluates to TRUE if the return value specified by <I>Status</I> is an error type (0xC0000000 - 0xFFFFFFFF).
</DD>
</DL>



<P>For example, suppose a driver calls <A HREF="k104_27n6.htm"><B>IoRegisterDeviceInterface</B></A> to register a device interface. If the driver checks the return value using the NT_SUCCESS macro, the macro will evaluate to TRUE if the routine returns STATUS_SUCCESS, which indicates no errors, or if it returns the informational status STATUS_OBJECT_NAME_EXISTS, which indicates that the device interface is already registered. </P>

<P>As another example, suppose a driver calls <A HREF="k111_3wvm.htm"><B>ZwEnumerateKey</B></A> to enumerate the subkeys of a specified registry key. If the NT_SUCCESS macro evaluates to FALSE, it might be because the routine returned STATUS_INVALID_PARAMETER, which is an error code, or because the routine returned STATUS_NO_MORE_ENTRIES, which is a warning code. </P>

<P>As a final example, suppose a driver sends an IRP that causes a lower-level driver to read information from a device. If the requesting driver specifies a buffer that is too small to receive any information, the lower-level driver might respond by returning STATUS_BUFFER_TOO_SMALL, which is an error code. If the first driver specifies a buffer that can receive some, but not all, of the requested information, the lower-level driver might respond by supplying as much data as possible and then returning STATUS_BUFFER_OVERFLOW, which is a warning code. Note that if the first driver tests the status value using NT_SUCCESS or NT_ERROR incorrectly, it might inadvertently drop some of the information received.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Using%20NTSTATUS%20Values"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
