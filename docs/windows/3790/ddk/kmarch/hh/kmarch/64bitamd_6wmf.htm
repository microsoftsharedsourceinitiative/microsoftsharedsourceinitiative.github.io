<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Register Usage for AMD 64 Bit</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Register Usage for AMD 64 Bit">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_register_usage_for_amd_64_bit_kg"></A>Register Usage for AMD 64 Bit</H3>

<P>The AMD64 architecture provides for 16 general-purpose registers (also called integer registers) as well as 16 XMM registers available for floating-point use. Volatile registers are scratch registers that the user can assume are destroyed across a call. Nonvolatile registers are required to retain their values across a function call and must be saved by the called function if used. The following table describes how each register is used across function calls.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Register</TH>
<TH align=left width=21%>Status</TH>
<TH align=left width=56%>Use</TH>
</TR>

<TR VALIGN="top">
<TD width=23%>RAX</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Return value register.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RCX</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>First integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RDX</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Second integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>R8</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Third integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>R9</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Fourth integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>R10:R11</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Must be preserved as required by caller; used in syscall/sysret instructions.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>R12:R15</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RDI</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RSI</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RBX</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RBP</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Can be used as a frame pointer. Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>RSP</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Stack Pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM0</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>First FP argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM1</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Second FP argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM2</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Third FP argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM3</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Fourth FP argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM4:XMM5</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Must be preserved as required by caller.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM6:XMM15 (low 64 bits)</TD>
<TD width=21%>Nonvolatile</TD>
<TD width=56%>Must be preserved by called function.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>XMM6:XMM15 (high 64 bits)</TD>
<TD width=21%>Volatile</TD>
<TD width=56%>Must be preserved as required by caller.</TD>
</TR>
</TABLE><BR>

<P>In the case of the nonvolatile XMM registers, only the lower 64 bits must be preserved by the called function. </P>

<P>The 128-bit values that are stored in the XMM register should not be unregistered across calls.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Register%20Usage%20for%20AMD%2064%20Bit"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
