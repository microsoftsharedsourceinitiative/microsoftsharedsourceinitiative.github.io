<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DispatchDeviceControl</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DispatchDeviceControl">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_dispatchdevicecontrol_kr"></A><I>DispatchDeviceControl</I></H1>

<P>The <I>DispatchDeviceControl</I> routine services IRPs containing the <A HREF="k113_0hiq.htm">IRP_MJ_DEVICE_CONTROL</A> I/O function code.</P>

<PRE class=syntax><B>NTSTATUS
</B><I>  Xxx</I><B>DispatchDeviceControl(</B>
<B>    IN PDEVICE_OBJECT  </B><I>DeviceObject</I><B>,</B>
<B>    IN PIRP  </B><I>Irp</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DeviceObject</I></DT>

<DD>Caller-supplied pointer to a <A HREF="k112_32cy.htm">DEVICE_OBJECT</A> structure. This is the device object for the target device, previously created by the driver's <I>AddDevice</I> routine.</DD>

<DT><I>Irp</I></DT>

<DD>Caller-supplied pointer to an <A HREF="k112_3z5e.htm">IRP</A> structure that describes the requested I/O operation.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the routine succeeds, it must return STATUS_SUCCESS. Otherwise, it must return one of the error status values defined in <I>ntstatus.h</I>.</P>

<H4>Comments</H4>

<P>A driver's <I>DispatchDeviceControl</I> routine should be named <I>Xxx</I><B>DispatchDeviceControl</B>, where <I>Xxx</I> is a driver-specific prefix. The driver's <B>DriverEntry</B> routine must store the <I>DispatchDeviceControl</I> routine's address in <B>DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL]</B>.</P>

<P>Input parameters for all <I>Dispatch</I> routines are supplied in the <A HREF="k112_3z5e.htm">IRP</A> structure pointed to by <I>Irp</I>. Additional parameters are supplied in the driver's associated I/O stack location, which is described by the <A HREF="k112_49bm.htm">IO_STACK_LOCATION</A> structure and can be obtained by calling <A HREF="k104_89pu.htm"><B>IoGetCurrentIrpStackLocation</B></A>. The I/O stack location contains the I/O control code specifying the device control operation to be performed.</P>

<P>The system uses the FILE_<I>XXX</I> flags in the I/O control code to determine whether or not the IRP sender has the privileges to send the IRP to the device object. Drivers for Windows Server 2003 and later operating systems can use the <A HREF="k104_3oz6.htm"><B>IoValidateDeviceIoControlAccess</B></A> routine to perform stricter access checks within <I>DispatchDeviceControl</I>.</P>

<P>Generally, all <I>Dispatch</I> routines execute in an arbitrary thread context at IRQL&nbsp;= PASSIVE_LEVEL, but there are exceptions. For more information, see <A HREF="drvcomps_1ezr.htm"><I>Dispatch</I> Routines and IRQLs</A>.</P>

<P>For more information about <I>DispatchDeviceControl</I> routines, see <A HREF="drvcomps_11uv.htm">Writing Dispatch Routines</A>. For more information about IRPs, see <A HREF="irps_0uuf.htm">Handling IRPs</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DispatchDeviceControl"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
