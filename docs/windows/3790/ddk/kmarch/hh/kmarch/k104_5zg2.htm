<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoReleaseRemoveLockAndWait</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoReleaseRemoveLockAndWait">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ioreleaseremovelockandwait_kr"></A>IoReleaseRemoveLockAndWait</H1>

<P>The <B>IoReleaseRemoveLockAndWait</B> routine releases a remove lock acquired with a previous call to <A HREF="k104_6tde.htm"><B>IoAcquireRemoveLock</B></A> and waits until all acquisitions of the lock have been released. </P>

<PRE class=syntax><B>VOID
</B>  <B>IoReleaseRemoveLockAndWait(</B>
    <B>IN PIO_REMOVE_LOCK </B> <I>RemoveLock</I><B>,</B>
    <B>IN PVOID </B> <I>Tag</I> 
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>RemoveLock</I></DT>

<DD>Pointer to an IO_REMOVE_LOCK structure that the caller passed to a previous call to <B>IoAcquireRemoveLock</B>. </DD>

<DT><I>Tag</I></DT>

<DD>Pointer to a caller-supplied tag that was passed to a previous call to <B>IoAcquireRemoveLock</B>. 

<P>If a driver specified a <I>Tag</I> when it acquired the lock, the driver must specify the same <I>Tag</I> when releasing the lock. If the tags do not match, this routine asserts on a checked build.


<P>If the call to <B>IoAcquireRemoveLock</B> did not specify a <I>Tag</I>, then this parameter is NULL.


<P>The I/O system only uses this parameter on checked builds.

</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h. </I>Include <I>ntddk.h.</I></P>

<H4>Comments</H4>

<P>A driver typically calls this routine in its dispatch code for an <A HREF="pnp-irps_4noy.htm">IRP_MN_REMOVE_DEVICE</A> request. To allow queued I/O requests to complete, each driver should call <B>IoReleaseRemoveLockAndWait</B> <I>before</I> it passes the remove IRP to the next-lower driver, and before it releases memory, calls <A HREF="k104_4s36.htm"><B>IoDetachDevice</B></A>, or calls<A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A>.</P>

<P>A driver must acquire the remove lock before calling <B>IoReleaseRemoveLockAndWait</B>. Typically, a driver calls <A HREF="k104_6tde.htm"><B>IoAcquireRemoveLock</B></A> early in its <A HREF="drvrrtns_8uya.htm"><I>DispatchPnp</I></A> routine, before the switch statement. As a result, the lock is acquired for each PnP operation, including the acquisition that is required before calling <B>IoReleaseRemoveLockAndWait</B> in the code that handles IRP_MN_REMOVE_DEVICE.</P>

<P>To release a lock from code other than the IRP_MN_REMOVE_DEVICE dispatch code, use <A HREF="k104_8n5e.htm"><B>IoReleaseRemoveLock</B></A>.</P>

<P>After <B>IoReleaseRemoveLockAndWait</B> has been called for a particular remove lock, subsequent calls to <B>IoAcquireRemoveLock</B> for the same remove lock will fail.</P>

<P>Callers of <B>IoReleaseRemoveLockAndWait</B> must be running at IRQL&nbsp;= PASSIVE_LEVEL. </P>

<P>For more information, see <A HREF="plugplay_80iv.htm">Using Remove Locks</A>.</P>

<P></P>

<H4>SeeAlso</H4>

<P><A HREF="k104_6tde.htm"><B>IoAcquireRemoveLock</B></A>, <A HREF="k104_814i.htm"><B>IoInitializeRemoveLock</B></A>, <A HREF="k104_8n5e.htm"><B>IoReleaseRemoveLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoReleaseRemoveLockAndWait"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
