<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoCreateDevice</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoCreateDevice">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iocreatedevice_kr"></A>IoCreateDevice</H1>

<P>The <B>IoCreateDevice</B> routine creates a device object for use by a driver. </P>

<PRE class=syntax><B>NTSTATUS 
</B>  <B>IoCreateDevice(</B>
<B>    IN PDRIVER_OBJECT</B>  <I>DriverObject</I><B>,</B>
<B>    IN ULONG</B>  <I>DeviceExtensionSize</I><B>,</B>
<B>    IN PUNICODE_STRING</B>  <I>DeviceName</I>  <B>OPTIONAL,</B>
<B>    IN DEVICE_TYPE</B>  <I>DeviceType</I><B>,</B>
<B>    IN ULONG</B>  <I>DeviceCharacteristics</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>Exclusive</I><B>,</B>
<B>    OUT PDEVICE_OBJECT</B>  <I>*DeviceObject</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DriverObject</I></DT>

<DD>Pointer to the driver object for the caller. Each driver receives a pointer to its driver object in a parameter to its <A HREF="drvrrtns_6r76.htm"><B>DriverEntry</B></A> routine. WDM function and filter drivers also receive a driver object pointer in their <A HREF="drvrrtns_4d6a.htm"><I>AddDevice</I></A> routines. </DD>

<DT><I>DeviceExtensionSize</I></DT>

<DD>Specifies the driver-determined number of bytes to be allocated for the <A HREF="devobjts_1gdj.htm">device extension</A> of the device object. The internal structure of the device extension is driver-defined.  For more information about device extensions, see <A HREF="devobjts_1gdj.htm">Device Extensions</A>.</DD>

<DT><I>DeviceName</I></DT>

<DD>Optionally points to a buffer containing a zero-terminated Unicode string that names the device object. The string must be a full path name.  WDM filter and function drivers do not name their device objects.  For more information, see <A HREF="devobjts_4zl3.htm">Named Device Objects</A>.</DD>

<DT><I>DeviceType</I></DT>

<DD>Specifies one of the system-defined FILE_DEVICE_<I>XXX</I> constants that indicate the type of device (such as FILE_DEVICE_DISK, FILE_DEVICE_KEYBOARD, etc.) or a vendor-defined value for a new type of device. For more information, see <A HREF="devobjts_5hnr.htm">Specifying Device Types</A>. </DD>

<DT><I>DeviceCharacteristics</I></DT>

<DD>Specifies one or more system-defined constants, ORed together, that provide additional information about the driver's device.  For a list of possible device characteristics, see<A HREF="k112_32cy.htm"> DEVICE_OBJECT</A>.  For more information on how to specify device characteristics, see <A HREF="devobjts_7usn.htm">Specifying Device Characteristics</A>.  Most drivers specify FILE_DEVICE_SECURE_OPEN for this parameter.</DD>

<DT><I>Exclusive</I></DT>

<DD>Reserved for system use. Drivers set this parameter to FALSE.</DD>

<DT><I>DeviceObject</I></DT>

<DD>Pointer to a variable that receives a pointer to the newly created <A HREF="k112_32cy.htm">DEVICE_OBJECT</A> structure.    The DEVICE_OBJECT structure is allocated from nonpaged pool.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoCreateDevice</B> returns STATUS_SUCCESS on success, or the appropriate NTSTATUS error code on failure. A partial list of the failure codes returned by this function include:</P>

<P class=indent1>STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_OBJECT_NAME_EXISTS<BR>
STATUS_OBJECT_NAME_COLLISION</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P><B>IoCreateDevice</B> creates a device object and returns a pointer to the object. The caller is responsible for deleting the object when it is no longer needed by calling <A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A>.</P>

<P><B>IoCreateDevice</B> can only be used to create an unnamed device object, or a named device object for which a security descriptor is set by an INF file. Otherwise, drivers must use <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A> to create named device objects.  For more information, see <A HREF="devobjts_3y93.htm">Creating a Device Object</A>.  The caller is responsible for setting certain members of the returned device object.  For more information, see <A HREF="devobjts_8zdz.htm">Initializing a Device Object</A> and the device-type-specific documentation for your device. </P>

<P>Be careful to specify the <I>DeviceType</I> and <I>DeviceCharacteristics</I> values in the correct parameters. Both parameters use system-defined FILE_<I>XXX</I> constants and some driver writers specify the values in the wrong parameters by mistake.</P>

<P>Device objects for disks, tapes, CD-ROMs, and RAM disks are given a Volume Parameter Block (VPB) that is initialized to indicate that the volume has never been mounted on the device.</P>

<P>If a driver's call to <B>IoCreateDevice</B> returns an error, the driver should release any resources that it allocated for that device. </P>

<P>Callers of <B>IoCreateDevice</B> must be running at IRQL&nbsp;&lt; DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k112_32cy.htm">DEVICE_OBJECT</A>, <A HREF="k104_3zci.htm"><B>IoAttachDevice</B></A>, <A HREF="k104_9tiq.htm"><B>IoAttachDeviceToDeviceStack</B></A>, <A HREF="k104_1ycy.htm"><B>IoCreateDeviceSecure</B></A>, <A HREF="k104_28xe.htm"><B>IoCreateSymbolicLink</B></A>, <A HREF="k104_3wky.htm"><B>IoDeleteDevice</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoCreateDevice"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
