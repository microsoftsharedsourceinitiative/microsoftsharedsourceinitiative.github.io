<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RtlStringCbPrintfEx</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="RtlStringCbPrintfEx">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_rtlstringcbprintfex_kr"></A>RtlStringCbPrintfEx</H1>

<P>The <B>RtlStringCbPrintfExW</B> and <B>RtlStringCbPrintfExA</B> functions create a byte-counted text string, with formatting that is based on supplied formatting information.</P>

<PRE class=syntax><B>NTSTATUS
  RtlStringCbPrintfExW(
    OUT LPWSTR  </B><I>pszDest</I><B>  OPTIONAL,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    OUT LPWSTR*  </B><I>ppszDestEnd</I><B>  OPTIONAL,</B>
<B>    OUT size_t*  </B><I>pcbRemaining</I><B>  OPTIONAL,</B>
<B>    IN DWORD  </B><I>dwFlags</I><B>,</B>
<B>    IN LPCWSTR  </B><I>pszFormat</I><B>  OPTIONAL,</B>
<B>    ...</B>
<B>    );</B>

<B>NTSTATUS</B>
<B>  RtlStringCbPrintfExA(</B>
<B>    OUT LPSTR  </B><I>pszDest </I><B> OPTIONAL,</B>
<B>    IN size_t  </B><I>cbDest</I><B>,</B>
<B>    OUT LPSTR*  </B><I>ppszDestEnd</I><B>  OPTIONAL,</B>
<B>    OUT size_t*  </B><I>pcbRemaining</I><B>  OPTIONAL,</B>
<B>    IN DWORD  </B><I>dwFlags</I><B>,</B>
<B>    IN LPCSTR  </B><I>pszFormat</I><B>  OPTIONAL,</B>
<B>    ...</B>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pszDest</I> </DT>

<DD>Optional. Supplies a pointer to a caller-supplied buffer that receives a formatted, null-terminated string. The function creates this string from both the formatting string that is supplied by <I>pszFormat</I> and the function's argument list. The <I>pszDest</I> pointer can be NULL, but only if STRSAFE_IGNORE_NULLS is set in <I>dwFlags</I>.</DD>

<DT><I>cbDest</I> </DT>

<DD>Supplies the size of the destination buffer, in bytes. The buffer must be large enough to contain the formatted string plus the terminating NULL character. 

<P>For Unicode strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(char). 


<P>For ANSI strings, the maximum number of bytes is STRSAFE_MAX_CCH * sizeof(WCHAR). 


<P>If <I>pszDest</I> is NULL, <I>cbDest</I> must be zero.
</DD>

<DT><I>ppszDestEnd</I> </DT>

<DD>Optional. If the caller supplies a non-NULL address pointer then, after the operation completes, the function loads that address with a pointer to the destination buffer's resulting NULL string terminator. </DD>

<DT><I>pcbRemaining</I> </DT>

<DD>Optional. If the caller supplies a non-NULL address pointer, the function loads the address with the number of unused bytes that are in the buffer pointed to by <I>pszDest</I>, including bytes used for the terminating NULL character.</DD>

<DT><I>dwFlags</I> </DT>

<DD>Supplies one or more flags and, optionally, a fill byte. The flags are defined as follows: 

<DL>
<DT>STRSAFE_FILL_BEHIND_NULL </DT>

<DD>If set and the function succeeds, the low byte of <I>dwFlags</I> is used to fill the portion of the destination buffer that follows the terminating NULL character. </DD>

<DT>STRSAFE_IGNORE_NULLS </DT>

<DD>If set, either <I>pszDest </I>or<I> pszSrc</I>,<I> </I>or both, can be NULL. Null <I>pszSrc</I> pointers are treated like empty strings (TEXT("")), which can be copied. Null <I>pszDest</I> pointers cannot receive nonempty strings. </DD>

<DT>STRSAFE_FILL_ON_FAILURE </DT>

<DD>If set and the function fails, the low byte of <I>dwFlags</I> is used to fill the entire destination buffer, and the buffer is null-terminated. This operation overwrites any preexisting buffer contents. </DD>

<DT>STRSAFE_NULL_ON_FAILURE </DT>

<DD>If set and the function fails, the destination buffer is set to an empty string (TEXT("")). This operation overwrites any preexisting buffer contents. </DD>

<DT>STRSAFE_NO_TRUNCATION </DT>

<DD>If set and the function returns STATUS_BUFFER_OVERFLOW, the contents of the destination buffer are not modified.</DD>
</DL>
</DD>

<DT><I>pszFormat</I> </DT>

<DD>Optional. Supplies a pointer to a null-terminated text string that contains <B>printf</B>-styled formatting directives. The <I>pszFormat</I> pointer can be NULL, but only if STRSAFE_IGNORE_NULLS is set in <I>dwFlags</I>.</DD>

<DT><I>...</I> </DT>

<DD>Optional. Supplies a list of arguments that are interpreted by the function, based on formatting directives contained in the <I>pszFormat</I> string.</DD>
</DL>

<H4>Return Value</H4>

<P>The function returns one of the NTSTATUS values that are listed in the following table. For information about how to test NTSTATUS values, see <A HREF="other_8hlz.htm">Using NTSTATUS Values</A>.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=51%>Return Value</TH>
<TH align=left width=49%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_SUCCESS</TD>
<TD width=49%>This <I>success</I> status means source data was present, the output string was created without truncation, and the resultant destination buffer is null-terminated.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=49%>This <I>warning</I> status means the operation did not complete due to insufficient space in the destination buffer. If STRSAFE_NO_TRUNCATION is set in <I>dwFlags</I>, the destination buffer is not modified. If the flag is not set, the destination buffer contains a truncated version of the created string.</TD>
</TR>

<TR VALIGN="top">
<TD width=51%>STATUS_INVALID_PARAMETER</TD>
<TD width=49%>This <I>error</I> status means the function received an invalid input parameter. For more information, see the following paragraph.</TD>
</TR>
</TABLE><BR>

<P>The function returns the STATUS_INVALID_PARAMETER value when:

<UL>
	<LI>An invalid flag was specified.</LI>

	<LI>The value in <I>cbDest</I> is larger than the maximum buffer size.</LI>

	<LI>The destination buffer was already full.</LI>

	<LI>A NULL pointer was present without the STRSAFE_IGNORE_NULLS flag.</LI>

	<LI>The destination buffer pointer was NULL, but the buffer size was not zero.</LI>

	<LI>The destination buffer pointer was NULL, or its length was zero, but a nonzero length source string was present.</LI>
</UL>

<H4>Headers</H4>

<P>Declared in <I>ntstrsafe.h</I>. Include <I>ntstrsafe.h</I>. Link to <I>ntstrsafe.lib</I>.</P>

<H4>Comments</H4>

<P><B>RtlStringCbPrintfExW</B> and <B>RtlStringCbPrintfExA</B> should be used instead of the following functions: 

<UL>
	<LI><B>sprintf</B> </LI>

	<LI><B>swprintf</B> </LI>

	<LI>_<B>snprintf</B> </LI>

	<LI>_<B>snwprintf</B> </LI>
</UL>

<P>All of these functions accept a format string and a list of arguments, interpret them, and create a formatted string. The size, in bytes, of the destination buffer is provided to <B>RtlStringCbPrintfExW</B> and <B>RtlStringCbPrintfExA</B> to ensure that they do not write past the end of the buffer.</P>

<P><B>RtlStringCbPrintfExW</B> and <B>RtlStringCbPrintfExA</B> add to the functionality of <A HREF="safestrings_7zua.htm"><B>RtlStringCbPrintf</B></A> by returning a pointer to the end of the destination string, as well as the number of bytes left unused in that string. Flags can be passed to the function for additional control.</P>

<P>Use <B>RtlStringCbPrintfExW</B> to handle Unicode strings and <B>RtlStringCbPrintfExA</B> to handle ANSI strings. The form you use depends on your data, as shown in the following table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=31%>String Data Type</TH>
<TH align=left width=26%>String Literal</TH>
<TH align=left width=43%>Function</TH>
</TR>

<TR VALIGN="top">
<TD width=31%>WCHAR</TD>
<TD width=26%>L"string"</TD>
<TD width=43%><B>RtlStringCbPrintfExW</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>char</B></TD>
<TD width=26%>"string"</TD>
<TD width=43%><B>RtlStringCbPrintfExA</B></TD>
</TR>
</TABLE><BR>

<P>If <I>pszDest</I> and <I>pszFormat </I>point to overlapping strings or if any argument strings overlap, the behavior of the function is undefined.</P>

<P>Neither <I>pszFormat</I> nor <I>pszDest</I> can be NULL unless the STRSAFE_IGNORE_NULLS flag is set, in which case either or both can be NULL. If <I>pszDest</I> is NULL, <I>pszFormat</I> must either be NULL or point to an empty string.</P>

<P>For more information about the safe string functions, see <A HREF="other_4tgn.htm">Using Safe String Functions</A>.</P>

<H4>See Also</H4>

<P><A HREF="safestrings_5msy.htm"><B>RtlStringCbVPrintfEx</B></A>, <A HREF="safestrings_5b8y.htm"><B>RtlStringCchPrintf</B></A>, <B> <A HREF="safestrings_8wtu.htm">RtlStringCchPrintfEx</A></B>  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: RtlStringCbPrintfEx"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
