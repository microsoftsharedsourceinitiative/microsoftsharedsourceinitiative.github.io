<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoAllocateIrp</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoAllocateIrp">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ioallocateirp_kr"></A>IoAllocateIrp</H1>

<P>The <B>IoAllocateIrp</B> routine allocates an IRP, given the number of I/O stack locations for each driver layered under the caller, and, optionally, for the caller.</P>

<PRE class=syntax><B>PIRP 
</B>  <B>IoAllocateIrp(</B>
<B>    IN CCHAR</B>  <I>StackSize</I><B>,</B>
<B>    IN BOOLEAN</B>  <I>ChargeQuota</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>StackSize</I></DT>

<DD>Specifies the number of I/O stack locations to be allocated for the IRP. This value must be at least equal to the <B>StackSize</B> of the next-lower driver’s device object, but can be one greater than this value. The calling driver need not allocate a stack location in the IRP for itself.</DD>

<DT><I>ChargeQuota</I></DT>

<DD>Should be set to FALSE by intermediate drivers. This can be set to TRUE only by highest-level drivers that are called in the context of the thread that originates the I/O request for which the driver is allocating another IRP.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoAllocateIrp</B> returns a pointer to an IRP, which was allocated from nonpaged system space, or NULL if an IRP could not be allocated.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>. </P>

<H4>Comments</H4>

<P>An intermediate or highest-level driver can call <B>IoAllocateIrp</B> to create IRPs for requests it sends to lower-level drivers. Such a driver must initialize the IRP and must set its <A HREF="drvrrtns_4rsi.htm"><I>IoCompletion</I></A> routine in the IRP it creates so the caller can dispose of the IRP when lower-level drivers have completed processing of the request.</P>

<P><B>IoAllocateIrp</B> automatically initializes the IRP's members. Do not use <B>IoInitializeIrp</B> to initialize the IRP before its first use. (You can use <B>IoInitializeIrp</B> to reuse an IRP that you have already used under certain special circumstances. See <A HREF="irps_5pyf.htm">Reusing IRPs</A> for details.)</P>

<P>An intermediate or highest-level driver also can call <A HREF="k104_8ble.htm"><B>IoBuildDeviceIoControlRequest</B></A>, <A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A> or <A HREF="k104_61pu.htm"><B>IoBuildSynchronousFsdRequest</B></A> to set up requests it sends to lower-level drivers. Only a highest-level driver can call <A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A>.</P>

<P>Callers of <B>IoAllocateIrp</B> must be running at IRQL&nbsp;&lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="k112_49bm.htm">IO_STACK_LOCATION</A>, <A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A>, <A HREF="k104_8ble.htm"><B>IoBuildDeviceIoControlRequest</B></A>, <A HREF="k104_61pu.htm"><B>IoBuildSynchronousFsdRequest</B></A>, <A HREF="k104_82wj.htm"><B>IoFreeIrp</B></A>, <A HREF="k104_1quq.htm"><B>IoMakeAssociatedIrp</B></A>, <A HREF="k104_4drm.htm"><B>IoReuseIrp</B></A>, <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A>, <A HREF="k112_3z5e.htm">IRP</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoAllocateIrp"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
