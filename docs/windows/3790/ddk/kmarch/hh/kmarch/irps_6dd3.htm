<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registering an IoCompletion Routine</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registering an IoCompletion Routine">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_registering_an_iocompletion_routine_kg"></A>Registering an <I>IoCompletion</I> Routine</H3>

<P>To register an <I>IoCompletion</I> routine, a dispatch routine calls <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A>, supplying the <I>IoCompletion</I> routine's address and the IRP that it will subsequently pass on to lower drivers using <A HREF="k104_1agi.htm"><B>IoCallDriver</B></A>. </P>

<P>When it calls <B>IoSetCompletionRoutine</B>, the dispatch routine specifies the circumstances in which the I/O manager should call the specified <I>IoCompletion</I> routine. You can choose to have the <I>IoCompletion</I> routine called if a lower level driver completes the IRP successfully (<I>InvokeOnSuccess</I>), completes the IRP with an error status value (<I>InvokeOnError</I>), or cancels the IRP (<I>InvokeOnCancel</I>), in any combination.</P>

<P>The purpose of an <I>IoCompletion</I> routine is to monitor what lower-level drivers did with the IRP and to do additional completion processing, if necessary. Specifically, the most common uses for a driver's <I>IoCompletion</I> routines are the following: 

<UL>
	<LI>To dispose of an IRP that the driver allocated with <A HREF="k104_42pe.htm"><B>IoAllocateIrp</B></A> or <A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A>
<P>Any higher-level driver that allocates an IRP using either of these support routines <I>must</I> supply an <I>IoCompletion</I> routine for that IRP. The <I>IoCompletion</I> routine <I>must</I> call <A HREF="k104_82wj.htm"><B>IoFreeIrp</B></A> to dispose of driver-allocated IRPs. 
</LI>

	<LI>To reuse an incoming IRP to request that lower drivers complete some number of operations, such as partial transfers, until the original request can be satisfied and completed by the <I>IoCompletion</I> routine</LI>

	<LI>To retry a request that a lower driver completed with an error
<P>Highest-level drivers, such as file systems, are more likely to have <I>IoCompletion</I> routines that attempt to retry requests than are intermediate drivers, except possibly class drivers layered above a closely coupled port driver. However, any intermediate driver use <I>IoCompletion</I> routines to retry requests.
</LI>
</UL>

<P>While a highest-level or intermediate driver’s <I>DispatchReadWrite</I> routine is most likely to process IRPs that require an <I>IoCompletion</I> routine, any dispatch routine in any driver that passes IRPs on to lower drivers can register an <I>IoCompletion</I> routine.</P>

<P>For driver-allocated IRPs and reused IRPs, the dispatch routine <I>must</I> call <A HREF="k104_5w6q.htm"><B>IoSetCompletionRoutine</B></A> with the following Boolean parameters:

<UL>
	<LI><I>InvokeOnSuccess</I> set to TRUE</LI>

	<LI><I>InvokeOnError</I> set to TRUE</LI>

	<LI><I>InvokeOnCancel</I> set to TRUE if any lower driver in the chain might handle cancelable IRPs 
<P>Usually, <I>InvokeOnCancel</I> is set to TRUE, whether or not an IRP might be returned with STATUS_CANCELLED, to ensure that the <I>IoCompletion</I> routine frees each driver-allocated IRP or checks the completion status of each reuse of an IRP. 
</LI>
</UL>

<P>A dispatch routine that allocates IRPs for lower drivers using <B>IoAllocateIrp</B> or <B>IoBuildAsynchronousFsdRequest</B> <I>must</I> set an <I>IoCompletion</I> routine for each driver-allocated IRP. 

<UL>
	<LI>The dispatch routine must set up state about both the original IRP and its allocated IRP(s) for the <I>IoCompletion</I> routine to use. At a minimum, the <I>IoCompletion</I> routine needs access to the original IRP and a count of how many additional IRPs were allocated. </LI>

	<LI>The dispatch routine should call <B>IoSetCompletion Routine</B> with all <I>InvokeOnXxx</I> parameters set to TRUE for the IRP(s) it allocates. </LI>
</UL>

<P>A dispatch routine that reuses IRPs for a sequence of operations, or that retries I/O operation, must call <B>IoSetCompletionRoutine</B> for each IRP that will be reused or retried.

<UL>
	<LI>The dispatch routine must save the original IRP's state information, for subsequent use by the <I>IoCompletion</I> routine. 
<P>For example, a <I>DispatchReadWrite</I> routine must save the relevant transfer parameters of an input IRP for the <I>IoCompletion</I> routine before setting up a partial transfer for the next-lower driver in that IRP. Saving the parameters is particularly important if the <I>DispatchReadWrite</I> routine modifies any parameters that the <I>IoCompletion</I> routine needs to determine when the original request has been satisfied. 
</LI>

	<LI>If the <I>IoCompletion</I> routine can retry the request, the dispatch routine must set up a driver-determined upper limit for the number of retries its <I>IoCompletion</I> routine should attempt before it completes the original IRP with an error. </LI>

	<LI>If an IRP is to be reused, the dispatch routine should call <B>IoSetCompletionRoutine</B> with all <I>InvokeOnXxx</I> parameters set to TRUE. </LI>

	<LI>For an asynchronous request, the dispatch routine of any intermediate driver must call <B>IoMarkIrpPending</B> for the original IRP. It must then return STATUS_PENDING after it has sent the IRP on to lower drivers.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registering%20an%20IoCompletion%20Routine"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
