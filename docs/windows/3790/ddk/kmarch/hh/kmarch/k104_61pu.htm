<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IoBuildSynchronousFsdRequest</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IoBuildSynchronousFsdRequest">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iobuildsynchronousfsdrequest_kr"></A>IoBuildSynchronousFsdRequest</H1>

<P>The <B>IoBuildSynchronousFsdRequest</B> routine allocates and builds an IRP to be sent synchronously to lower driver(s).</P>

<PRE class=syntax><B>PIRP
</B>  <B>IoBuildSynchronousFsdRequest(</B>
<B>    IN ULONG</B>  <I>MajorFunction</I><B>,</B>
<B>    IN PDEVICE_OBJECT</B>  <I>DeviceObject</I><B>,</B>
<B>    IN OUT PVOID</B>  <I>Buffer</I>  <B>OPTIONAL,</B>
<B>    IN ULONG</B>  <I>Length</I>  <B>OPTIONAL,</B>
<B>    IN PLARGE_INTEGER</B>  <I>StartingOffset</I>  <B>OPTIONAL,</B>
<B>    IN PKEVENT</B>  <I>Event</I><B>,</B>
<B>    OUT PIO_STATUS_BLOCK</B>  <I>IoStatusBlock</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MajorFunction</I></DT>

<DD>Specifies the major function code, one of IRP_MJ_PNP, IRP_MJ_READ, IRP_MJ_WRITE, IRP_MJ_FLUSH_BUFFERS, or IRP_MJ_SHUTDOWN.</DD>

<DT><I>DeviceObject</I></DT>

<DD>Pointer to the next-lower driver’s device object representing the target device for the read, write, flush, or shutdown operation.</DD>

<DT><I>Buffer</I></DT>

<DD>Pointer to a buffer containing data to be written when <I>MajorFunction</I> is IRP_MJ_WRITE, or is the location to receive data read when <I>MajorFunction</I> is IRP_MJ_READ. This parameter must be NULL for the <I>MajorFunction</I> IRP_MJ_FLUSH_BUFFERS or IRP_MJ_SHUTDOWN.</DD>

<DT><I>Length</I></DT>

<DD>Specifies the length, in bytes, of <I>Buffer</I>. For devices such as disks, this value must be an integral of 512. This parameter is required for read/write requests, but must be zero for flush and shutdown requests.</DD>

<DT><I>StartingOffset</I></DT>

<DD>Pointer to the offset on the disk to read/write from/to. This parameter is required for read/write requests, but must be zero for flush and shutdown requests.</DD>

<DT><I>Event</I></DT>

<DD>Pointer to an initialized event object for which the caller provides the storage. The event is set to the Signaled state when the requested operation completes. The caller can wait on the event object for the completion of the IRP allocated by this routine.</DD>

<DT><I>IoStatusBlock</I></DT>

<DD>Pointer to the I/O status block that is set when the IRP is completed by the lower driver(s).
</DD>
</DL>

<H4>Return Value</H4>

<P><B>IoBuildSynchronousFsdRequest</B> returns a pointer to the IRP, or NULL if an IRP cannot be allocated.</P>

<H4>Headers</H4>

<P>Declared in <I>wdm.h</I> and <I>ntddk.h</I>. Include <I>wdm.h</I> or <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>Intermediate or highest-level drivers can call <B>IoBuildSynchronousFsdRequest</B> to set up IRPs for requests sent to lower-level drivers, only if the caller is running in a nonarbitrary thread context and at IRQL&nbsp;= PASSIVE_LEVEL.</P>

<P><B>IoBuildSynchronousFsdRequest</B> allocates and sets up an IRP that can be sent to a device driver to perform a synchronous read, write, flush, or shutdown operation. The IRP contains only enough information to get the operation started.</P>

<P>Lower-level drivers might impose restrictions on parameters supplied to this routine. For example, disk drivers might require that values supplied for <I>Length</I> and <I>StartingOffset</I> be integrals of the device's sector size.</P>

<P>The caller can determine when the I/O has completed by calling <B>KeWaitForSingleObject</B> with the <I>Event</I>. Performing this wait operation causes the current thread to wait. Therefore, this operation can be requested during the initialization of an intermediate driver or from an FSD in the context of a thread requesting a synchronous I/O operation. A driver cannot wait for a nonzero interval on the <I>Event</I> at raised IRQL in an arbitrary thread context.</P>

<P>Because the caller can wait on a given <I>Event</I>, the caller need not set an <I>IoCompletion</I> routine in the caller-allocated IRP before calling <B>IoCallDriver</B>. When the caller completes the IRP, the I/O Manager releases it.</P>

<P>IRPs created using <B>IoBuildSynchronousFsdRequest</B> must be completed by calling <B>IoCompleteRequest</B> and not by merely deallocating the IRP with <B>IoFreeIrp</B>. <B>IoBuildSynchronousFsdRequest</B> queues the IRPs it creates in the IRP queue of the current thread. Freeing these IRPs without completing them might result in a system crash when the thread terminates as the thread attempts to deallocate the IRP's memory.</P>

<H4>See Also</H4>

<P><A HREF="k112_49bm.htm">IO_STACK_LOCATION</A>, <A HREF="k104_42pe.htm"><B>IoAllocateIrp</B></A>, <A HREF="k104_4gqa.htm"><B>IoBuildAsynchronousFsdRequest</B></A>, <A HREF="k104_1fhu.htm"><B>IoCompleteRequest</B></A>, <A HREF="k112_3z5e.htm">IRP</A>, <A HREF="k105_8jaq.htm"><B>KeInitializeEvent</B></A>, <A HREF="k105_40c2.htm"><B>KeWaitForSingleObject</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IoBuildSynchronousFsdRequest"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
