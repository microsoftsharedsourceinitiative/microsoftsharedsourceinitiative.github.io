<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeAcquireInStackQueuedSpinLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KeAcquireInStackQueuedSpinLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_keacquireinstackqueuedspinlock_kr"></A>KeAcquireInStackQueuedSpinLock</H1>

<P>The <B>KeAcquireInStackQueuedSpinLock</B> routine acquires a queued spin lock.</P>

<PRE class=syntax><B>VOID
FASTCALL
  KeAcquireInStackQueuedSpinLock (
    IN PKSPIN_LOCK</B><I>  SpinLock</I>,
<B>    IN PKLOCK_QUEUE_HANDLE</B><I>  LockHandle</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SpinLock</I></DT>

<DD>Specifies the spin lock to acquire. This parameter must have been initialized with <A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A>.</DD>

<DT><I>LockHandle</I></DT>

<DD>Pointer to a caller-supplied <A HREF="k112_7pyq.htm">KLOCK_QUEUE_HANDLE</A> variable that the routine can use to return the spin lock queue handle. The caller passes this value to <A HREF="k105_23zm.htm"><B>KeReleaseInStackQueuedSpinLock</B></A> when releasing the lock.
</DD>
</DL>

<H4>Return Value</H4>

<P>None</P>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I>. Include <I>ntddk.h</I>.</P>

<H4>Comments</H4>

<P>This routine is only available in Windows&nbsp;XP and later.</P>

<P><B>KeAcquireInStackQueuedSpinLock</B> acquires a spin lock as a <I>queued spin lock</I>. Queued spin locks are a more efficient version of spin locks. For more information, see <A HREF="synchro_8ftz.htm">Queued Spin Locks</A>. The caller releases the spin lock with <A HREF="k105_23zm.htm"><B>KeReleaseInStackQueuedSpinLock</B></A>.</P>

<P>Like ordinary spin locks, queued spin locks must only be used in very special circumstances. For a description of when to use spin locks, see <A HREF="k105_40qa.htm"><B>KeAcquireSpinLock</B></A>.</P>

<P>This routine raises the IRQL level to DISPATCH_LEVEL when acquiring the spin lock. If the caller is guaranteed to already be running at DISPATCH_LEVEL, it is more efficient to call <A HREF="k105_5u42.htm"><B>KeAcquireInStackQueuedSpinLockAtDpcLevel</B></A>.</P>

<P>Drivers must not combine calls to <B>KeAcquireSpinLock</B> and <B>KeAcquireInStackQueuedSpinLock</B> on the same spin lock. A spin lock must always be acquired or released as either a queued spin lock, or as an ordinary spin lock.</P>

<H4>See Also</H4>

<P><A HREF="k105_40qa.htm"><B>KeAcquireSpinLock</B></A>, <A HREF="k105_5u42.htm"><B>KeAcquireInStackQueuedSpinLockAtDpcLevel</B></A>, <A HREF="k105_60xe.htm"><B>KeInitializeSpinLock</B></A>, <A HREF="k105_23zm.htm"><B>KeReleaseInStackQueuedSpinLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KeAcquireInStackQueuedSpinLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
