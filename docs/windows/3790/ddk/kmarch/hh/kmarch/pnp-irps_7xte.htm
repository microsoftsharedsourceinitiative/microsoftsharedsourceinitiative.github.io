<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IRP_MN_CANCEL_REMOVE_DEVICE</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IRP_MN_CANCEL_REMOVE_DEVICE">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Kernel-Mode&nbsp;Driver&nbsp;Architecture:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_irp_mn_cancel_remove_device_dr"></A>IRP_MN_CANCEL_REMOVE_DEVICE</H1>

<P>All PnP drivers must handle this IRP.</P>

<H4>Major Code</H4>

<P><A HREF="k113_8ur6.htm">IRP_MJ_PNP</A></P>

<H4>When Sent</H4>

<P>The PnP Manager sends this IRP to inform the drivers for a device that the device will not be removed.</P>

<P>The PnP Manager sends this IRP at IRQL PASSIVE_LEVEL in the context of a system thread.</P>

<H4>Input</H4>

<P>None</P>

<H4>Output</H4>

<P>None</P>

<H4>I/O Status Block</H4>

<P>A driver must set <B>Irp-&gt;IoStatus.Status</B> to STATUS_SUCCESS for this IRP. If a driver fails this IRP, the device is left in an inconsistent state.</P>

<H4>Operation</H4>

<P>This IRP must be handled first by the parent bus driver for a device and then by each higher driver in the device stack.</P>

<P>In response to this IRP, drivers return the device to the state it was in prior to receiving the IRP_MN_QUERY_REMOVE_DEVICE request.</P>

<P>If the device is already started when the driver receives this IRP, the driver simply sets status to success and passes the IRP to the next driver (or completes the IRP if the driver is a bus driver). For such a cancel-remove IRP, a function or filter driver need not set a completion routine. The device may not be in the remove-pending state, because, for example, the driver failed the previous IRP_MN_QUERY_REMOVE_DEVICE. </P>

<P>The PnP Manager calls any <B>EventCategoryTargetDeviceChange</B> notification callbacks with GUID_TARGET_DEVICE_REMOVE_CANCELLED <I>after</I> the IRP_MN_CANCEL_REMOVE_DEVICE request completes. Such callbacks were registered on the device by calling <A HREF="k104_7diq.htm"><B>IoRegisterPlugPlayNotification</B></A>. The PnP Manager also calls any user-mode components that registered for notification on the device by calling <B>RegisterDeviceNotification</B>.</P>

<P>If a file system is mounted on the device, it must undo any operations it did in response to the query-remove notification. </P>

<P>See <A HREF="plugplay_15t3.htm">Plug and Play</A> for detailed information on handling remove IRPs and for the general rules for handling all <A HREF="pnp-irps_9bzm.htm">Plug and Play Minor IRPs</A>.</P>

<H4>Sending This IRP</H4>

<P>Reserved for system use. Drivers must not send this IRP.</P>

<H4>See Also</H4>

<P><A HREF="k104_7diq.htm"><B>IoRegisterPlugPlayNotification</B></A>, <A HREF="pnp-irps_22k2.htm">IRP_MN_QUERY_REMOVE_DEVICE</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IRP_MN_CANCEL_REMOVE_DEVICE"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
