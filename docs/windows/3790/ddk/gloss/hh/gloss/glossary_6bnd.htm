<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>P</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="page frame">
<META NAME="MS-HKWD" CONTENT="paged pool">
<META NAME="MS-HKWD" CONTENT="paging file">
<META NAME="MS-HKWD" CONTENT="palette">
<META NAME="MS-HKWD" CONTENT="palette realization">
<META NAME="MS-HKWD" CONTENT="PALOBJ">
<META NAME="MS-HKWD" CONTENT="partial print provider">
<META NAME="MS-HKWD" CONTENT="PATHOBJ">
<META NAME="MS-HKWD" CONTENT="PC 97">
<META NAME="MS-HKWD" CONTENT="PC 98">
<META NAME="MS-HKWD" CONTENT="PC card">
<META NAME="MS-HKWD" CONTENT="PCI">
<META NAME="MS-HKWD" CONTENT="PCM">
<META NAME="MS-HKWD" CONTENT="PCMCIA">
<META NAME="MS-HKWD" CONTENT="PCR">
<META NAME="MS-HKWD" CONTENT="PDEV">
<META NAME="MS-HKWD" CONTENT="PDO">
<META NAME="MS-HKWD" CONTENT="PEB">
<META NAME="MS-HKWD" CONTENT="PFN">
<META NAME="MS-HKWD" CONTENT="phantom device">
<META NAME="MS-HKWD" CONTENT="PDO">
<META NAME="MS-HKWD" CONTENT="physical layer">
<META NAME="MS-HKWD" CONTENT="PIC">
<META NAME="MS-HKWD" CONTENT="pin">
<META NAME="MS-HKWD" CONTENT="pin factory">
<META NAME="MS-HKWD" CONTENT="pin instance">
<META NAME="MS-HKWD" CONTENT="PIO">
<META NAME="MS-HKWD" CONTENT="Plain Old Telephone Service">
<META NAME="MS-HKWD" CONTENT="plex">
<META NAME="MS-HKWD" CONTENT="PCD">
<META NAME="MS-HKWD" CONTENT="PNF file">
<META NAME="MS-HKWD" CONTENT="PnP">
<META NAME="MS-HKWD" CONTENT="pointer exclusion">
<META NAME="MS-HKWD" CONTENT="polling">
<META NAME="MS-HKWD" CONTENT="pool memory">
<META NAME="MS-HKWD" CONTENT="port driver">
<META NAME="MS-HKWD" CONTENT="port monitor">
<META NAME="MS-HKWD" CONTENT="port object">
<META NAME="MS-HKWD" CONTENT="portal">
<META NAME="MS-HKWD" CONTENT="POSIX">
<META NAME="MS-HKWD" CONTENT="PPD">
<META NAME="MS-HKWD" CONTENT="POTS">
<META NAME="MS-HKWD" CONTENT="power policy">
<META NAME="MS-HKWD" CONTENT="PRCB">
<META NAME="MS-HKWD" CONTENT="prediction address">
<META NAME="MS-HKWD" CONTENT="prediction block">
<META NAME="MS-HKWD" CONTENT="prediction macroblock">
<META NAME="MS-HKWD" CONTENT="prediction plane">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_drvsetpalette_gg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_print_providers_gg">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_writing_a_network_print_provider_gg">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_debuggers_tools">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_types_of_wdm_device_objects_kg">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ioctl_volume_read_plex_kr">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_plug_and_play_kg">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_system_power_policy_kg">
</OBJECT>
<OBJECT ID="hhobj_10" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_managing_device_power_policy_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Glossary:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_p_kg_gly"></A>P</H1>



<DL>
<DT><A NAME="ddk_page_frame_kg_gly"></A><B>page frame</B></DT>

<DD>A block of contiguous physical memory used to store the contents of a virtual page. Note that the virtual page size and page frame size are usually identical, but that a page frame size is actually microprocessor-dependent.

<P><I>See also</I> <A HREF="#ddk_pfn_kg_gly">PFN</A>.
</DD>

<DT><A NAME="ddk_paged_pool_kg_gly"></A><B>paged pool</B></DT>

<DD><I>See</I> <A HREF="#ddk_pool_memory_kg_gly">pool memory</A>.</DD>

<DT><A NAME="ddk_paging_file_kg_gly"></A><B>paging file</B></DT>

<DD>A system file containing the contents of virtual pages that have been paged out of memory.

<P><I>See also</I> <A HREF="glossary_6gmf.htm#ddk_backing_store_kg_gly">backing store</A> <I>and </I><A HREF="glossary_6vsp.htm#ddk_system_paging_file_kg_gly">system paging file</A>.
</DD>

<DT><A NAME="ddk_palette_gg_gly"></A><B>palette</B></DT>

<DD>A mapping between color indexes and 24-bit RGB color values. The color indexes can be any bit depth, but are typically 1-, 4-, or 8-bits per pixel. GDI typically uses the palette mapping in reverse. That is, an application specifies an RGB color value for drawing and GDI must locate the color index that causes the device to display that color.

<P>A driver specifies its palette so that GDI can determine how different color indexes are to appear on the device. If the palette for a device can be changed to hold a different set of colors, it is called a <I>settable palette</I>. 


<P>A <I>device palette</I> is the palette for a physical device. When the device sends image data to the monitor, the device palette is used. A device can have only one device palette.
</DD>

<DT><A NAME="ddk_palette_realization_gg_gly"></A><B>palette realization</B></DT>

<DD>A palette is "realized" when a display driver sets its internal hardware palette to match changes in a device palette. 

<P>For video hardware that supports palettes that can be set, GDI calls the <A HREF="JavaScript:hhobj_1.Click()"><B>DrvSetPalette</B></A> DDI in the display driver when it has finished mapping colors into the device palette requested by the application. GDI passes the new palette to the display driver, and the driver queries the <A HREF="#ddk_palobj_gg_gly">PALOBJ</A> to set its internal hardware palette to match the palette changes for the video hardware.
</DD>

<DT><A NAME="ddk_palobj_gg_gly"></A><B>PALOBJ</B></DT>

<DD>A GDI user object that represents an indexed color palette.</DD>

<DT><A NAME="ddk_partial_print_provider_gg_gly"></A><B>partial print provider</B></DT>

<DD>A <A HREF="JavaScript:hhobj_2.Click()">print provider</A> that supplies limited functionality and works in conjunction with an NT-based operating system local print provider. 

<P>For more information see the topic, <A HREF="JavaScript:hhobj_3.Click()">Writing a Network Print Provider</A>.
</DD>

<DT><A NAME="ddk_pathobj_gg_gly"></A><B>PATHOBJ</B></DT>

<DD>A GDI user object used to describe a set of lines and Bezier curves that are to be stroked or filled. Associated functions allow the lines and curves to be enumerated for the driver.</DD>

<DT><A NAME="_pc_97_glossary"></A><B>PC 97</B></DT>

<DD>The 1997–98 requirements for PC system and peripheral design for the "Designed for Microsoft Windows" logo, as defined in the <I>PC&nbsp;97 Hardware Design Guide</I>.</DD>

<DT><A NAME="_pc_98_glossary"></A><B>PC 98</B></DT>

<DD>The 1998–99 requirements for PC system and peripheral design for the <I>Designed for Microsoft Windows</I> logo, as defined in the <I>PC&nbsp;98 Checklist,</I> which is an addendum to the <I>PC&nbsp;97 Hardware Design Guide</I>.</DD>

<DT><A NAME="_pc_card_glossary"></A><B>PC card</B></DT>

<DD>A trademark of PCMCIA. A removable device that is designed to be plugged into a PCMCIA slot and used as a memory-related peripheral. </DD>

<DT><A NAME="ddk_pci_kg_gly"></A><B>PCI</B></DT>

<DD>Peripheral component interconnect. A dynamically configurable I/O bus, described by the <I>PCI Local Bus Specification</I> published by the PCI SIG.</DD>

<DT><A NAME="ddk_pcm_ks"></A><B>PCM</B></DT>

<DD>Pulse code modulation (PCM) is a subclass of the Microsoft waveform (<I>.wav</I>) file format. In PCM, data for <I>.wav</I> files is stored using linear samples. In contrast, ADPCM records the deltas between samples. </DD>

<DT><A NAME="ddk_pcmcia_kg_gly"></A><B>PCMCIA</B></DT>

<DD>Personal Computer Memory Card International Association.</DD>

<DT><A NAME="ddk_pcr_kg_gly"></A><B>PCR</B></DT>

<DD>Processor control region. An internal data structure in which the kernel stores per-processor information, and which can be viewed by using <A HREF="JavaScript:hhobj_4.Click()">debuggers</A>.</DD>

<DT><A NAME="ddk_pdev_gg_gly"></A><B>PDEV</B></DT>

<DD>A logical representation of a physical device. A PDEV is a private, driver-defined data structure containing all the information and data that represents the associated physical device. As part of enabling a PDEV, a driver provides information to GDI that describes the requested device and its capabilities. Important information that the driver gives GDI is a set of flags that allow GDI to determine what kinds of operations the PDEV (and the requested device) supports. For example, GDI can test the flags returned as part of the PDEV to determine whether or not the requested device can handle Bezier curves and geometric wide lines. 

<P>The term <I>pdev</I>, in lower-case, is typically used as the name of a function parameter or structure member of type PDEV.


<P>A related type, DHPDEV, is a device handle of a PDEV structure. The term <I>dhpdev</I>, in lower-case, is typically used as the name of a function parameter or structure member of type DHPDEV.
</DD>

<DT><A NAME="ddk_pdo_dg_gly"></A><B>PDO</B></DT>

<DD><I>See</I> <A HREF="#ddk_pdo_gg_gly">physical device object</A>.</DD>

<DT><A NAME="ddk_peb_kg_gly"></A><B>PEB</B></DT>

<DD>Process environment block.</DD>

<DT><A NAME="ddk_pfn_kg_gly"></A><B>PFN</B></DT>

<DD>Page frame number. The PFN database is the database in which the Memory Manager maintains information about every physical page in the system. Each PFN is an index for a physical page in the array of records that makes up the PFN database. 

<P><I>See also</I> <A HREF="glossary_8juh.htm#ddk_pte_kg_gly">PTE</A>.
</DD>

<DT><A NAME="ddk_phantom_device_dg"></A><B>phantom device</B></DT>

<DD><I>See </I><A HREF="glossary_7gmx.htm#ddk_nonpresent_device_dg_gly">nonpresent device</A>.</DD>

<DT><A NAME="ddk_pdo_gg_gly"></A><B>physical device object (PDO)</B></DT>

<DD> A device object created by a bus driver using <A HREF="JavaScript:hhobj_5.Click()"><B>IoCreateDevice</B></A>. The PDO, which represents the device for the bus driver, is at the bottom of the device stack for a device.

<P>For more information see the topic, <A HREF="JavaScript:hhobj_6.Click()">Types of WDM Device Objects</A>.
</DD>

<DT><A NAME="ddk_physical_layer_gg"></A><B>physical layer</B></DT>

<DD>The 802.11 physical layer provides wireless hardware services. These services are required to support the services that the media access control (MAC) layer provides.

<P>The IEEE 802.11-1997 standard provides several options for the physical layer:


<UL>
	<LI>Frequency-hopping spread spectrum providing 1 Mbps operation, with 2 Mbps optional.</LI>

	<LI>Direct-sequence spread spectrum providing both 1 Mbps and 2 Mbps operation.</LI>

	<LI>Infrared providing 1 Mbps operation, with 2 Mbps optional.</LI>
</UL>
</DD>

<DT><A NAME="_pic_glossary"></A><B>PIC</B></DT>

<DD>Programmable interrupt controller.</DD>

<DT><A NAME="_pin_glossary"></A><B>pin</B></DT>

<DD>A set of filter-defined properties in Kernel Streaming and DirectShow® that specify a connection endpoint. For example, audio input can be described by a pin on a filter. </DD>

<DT><A NAME="ddk_pin_factory_ks"></A><B>pin factory</B></DT>

<DD>A set of properties that describes a potential connection point to a filter, and is used to generate pin instances of that category. Each pin factory has a filter-unique identifier that allows support of pin-specific properties or data formats. This is a zero-based count by which the pin factory can be identified. The count stays constant between creation of pin instances.</DD>

<DT><A NAME="ddk_pin_instance_ks"></A><B>pin instance</B></DT>

<DD>An instance created by a pin factory representing one end of a connection point between filters. A pin instance represents the embodiment of a connection using a particular data format and communications methodology. Used for control and data flow. Pin instances support, at minimum, a connection property<I> </I>set.</DD>

<DT><A NAME="ddk_pio_kg_gly"></A><B>PIO</B></DT>

<DD>Programmed input/output. A technique for making data transfers between a device and system memory, using remapped system-space virtual addresses rather than DMA.</DD>

<DT><A NAME="ddk_plain_old_telephone_service_gg"></A><B>Plain Old Telephone Service</B></DT>

<DD>Plain Old Telephone Service (POTS) is analog telecommunications service. Until the 1970s, POTS was the only telephone service offered by local telecommunications providers. 

<P><I>See also</I> PSTN.
</DD>

<DT><A NAME="ddk_plex_kg_gly"></A><B>plex</B></DT>

<DD>Single complete copy of a volume. A volume is composed of one or more plexes. Since all plexes are identical, the volume manager can retrieve data from any of the volume's plexes during a read operation. The volume manager spreads reads among volume plexes, in order to balance the I/O load on the physical media and maximize read performance. 

<P>An application or a kernel-mode component can read data from a particular plex instead of letting the volume manager pick one by using the <A HREF="JavaScript:hhobj_7.Click()">IOCTL_VOLUME_READ_PLEX</A> I/O control code.
</DD>

<DT><A NAME="ddk_pcd_gg_gly"></A><B>plotter characterization data (PCD)</B></DT>

<DD>A DLL that provides device-specific information to a graphics plotter driver.</DD>

<DT><A NAME="ddk_pnf_file_pg"></A><B>PNF file</B></DT>

<DD>A precompiled <A HREF="glossary_50mx.htm#ddk_inf_file_dg_gly">INF file</A>. Windows creates a PNF file for each INF file to facilitate efficient processing. A PNF file includes information about the content of the original INF file, as well as the name of the INF file and other file attributes. Setup uses the PNF file instead of the original INF file. If a PNF file does not exist, Setup generates one for the INF file. For vendor-supplied INF files, the information contained in a PNF file also includes the location of the original INF file.</DD>

<DT><A NAME="ddk_pnp_kg_gly"></A><B>PnP</B></DT>

<DD>Plug and Play. For more information see the topic, <A HREF="JavaScript:hhobj_8.Click()">Plug and Play</A>.</DD>

<DT><A NAME="ddk_pointer_exclusion_gg_gly"></A><B>pointer exclusion</B></DT>

<DD>A bit-block transfer in which the pointer's image is not copied to the destination. This means that if you are copying a portion of the screen, and the pointer is currently in that portion of the screen, the pointer should not be included in the copy. In the past, pointer exclusion was implemented by turning the pointer off before the copy, and turning it back on after the copy. This is no longer required with windows layering.</DD>

<DT><A NAME="ddk_polling_kg_gly"></A><B>polling</B></DT>

<DD>A coding technique that wastes CPU cycles in a driver while waiting for a physical device to update its registers. Drivers should never implement polling loops and should minimize the interval they specify in calls to <B>KeStallExecutionProcessor</B> (no longer than 50 microseconds) if they must poll their devices.</DD>

<DT><A NAME="ddk_pool_memory_kg_gly"></A><B>pool memory</B></DT>

<DD>Regions located in kernel space from which memory blocks can be allocated and deallocated dynamically. (Some other systems call this "heap memory.") The Memory Manager creates two kinds of pools for system use and for use by drivers via <B>Ex</B>(ecutive) Support routine calls:

<UL>
	<LI><I>Paged pool</I> is a based region that can be paged in and out of a process’s working set. Each process has its own set of PTEs (Page Table Entries) that map paged pool into its address space. Touching a page in this pool can cause a page fault at any time, so drivers should allocate only those data structures accessed exclusively at IRQL PASSIVE_LEVEL or APC_LEVEL (see <I>IDT</I>) from paged pool.</LI>

	<LI><I>Nonpaged pool</I> is a based region for which all processes share a set of PTEs. The Memory Manager guarantees that nonpaged pool is resident in physical memory at all times; therefore, this region can be accessed from any process’s address space without causing a page fault. However, nonpaged pool is a limited system resource.</LI>
</UL>


<P>Drivers should allocate from paged pool for entities that are accessed exclusively at or below IRQL APC_LEVEL and in a nonarbitrary thread context. They should minimize their usage of nonpaged pool by "saving" it for data that must be accessed at or above IRQL DISPATCH_LEVEL. Allocations of contiguous or noncached memory come from nonpaged pool.


<P>The Memory Manager allocates entities from both pools using a buddy scheme. 


<P><I>See also</I> <A HREF="glossary_5e2h.htm#ddk_kernel_space_kg_gly">kernel space</A>.
</DD>

<DT><A NAME="ddk_port_driver_kg_gly"></A><B>port driver</B></DT>

<DD>A lowest-level driver that responds to a set of system-defined device control requests and, possibly, to an additional set of driver-defined (private) device control requests, sent down by a corresponding class driver. A port driver insulates class drivers from the specifics of HBAs and synchronizes operations for all its class drivers. Some examples of system-supplied port drivers include the following:</DD>
</DL>



<OL>
	<LI>The SCSI port driver that supports a set of device-type-specific class drivers, and possibly SFDs, above it and one or more HBA-specific miniport drivers, and possibly non-SCSI mass-storage device drivers, which link themselves to this OS-dependent port driver (implemented as a dynamic-link library) and call its <B>ScsiPort</B><I>Xxx</I> routines.</LI>

	<LI>The video port driver that supports display drivers and adapter-specific, kernel-mode miniport drivers, which link themselves to the OS-dependent port driver (implemented as a dynamic-link library) and call its <B>VideoPort</B><I>Xxx</I> routines.</LI>

	<LI>The parallel port driver.
<P>In general, any driver of a device that is a so-called "intelligent controller" or a bus adapter can be a port driver if it communicates with one or more class drivers according to an established protocol and synchronizes access to the controller or bus.

<P><I>See also </I><A HREF="glossary_5svt.htm#ddk_class_driver_kg_gly">class driver</A>, <A HREF="glossary_5ri1.htm#ddk_miniport_driver_kg_gly">miniport driver</A>, <A HREF="glossary_6vsp.htm#ddk_scsiport_routines_kg_gly"><B>ScsiPort</B> routines</A>, <I>and</I> <A HREF="glossary_7fy1.htm#ddk_videoport_routines_kg_gly"><B>VideoPort</B> routines</A>.
</LI>
</OL>



<DL>
<DT><A NAME="ddk_port_monitor_gg_gly"></A><B>port monitor</B></DT>

<DD>A type of <A HREF="glossary_8juh.htm#ddk_print_monitor_gg_gly">print monitor</A> that is responsible for providing a communications path between the user-mode print spooler and the kernel-mode port drivers that access I/O port hardware.</DD>

<DT><A NAME="ddk_port_object_kg_gly"></A><B>port object</B></DT>

<DD>An instance of an object type representing a conduit for messages between local (server/client) processes. It is used in the LPC (Local Procedure Call) model as an object accessible to user-mode processes through system services. The server (called) process defines a named connection port object and sets up two (unnamed) communication port objects when a client (caller) process connects to the named port.</DD>

<DT><A NAME="ddk_portal_gg"></A><B>portal</B></DT>

<DD>A portal is a device that connects an 802.11 LAN with another 802 LAN, or with the distribution system.</DD>

<DT><A NAME="ddk_posix_kg_gly"></A><B>POSIX</B></DT>

<DD>Portable operating system for UNIX. A protected subsystem that supports the POSIX standard.</DD>

<DT><A NAME="ddk_ppd_gg_gly"></A><B>PostScript printer description (PPD)</B></DT>

<DD>A file read by the generic PostScript driver as part of device initialization. PPD files conform to specifications published by Adobe Corporation and are supplied by PostScript printer manufacturers.</DD>

<DT><A NAME="ddk_pots_gg"></A><B>POTS</B></DT>

<DD><I>See</I> <A HREF="#ddk_plain_old_telephone_service_gg">Plain Old Telephone Service</A>. </DD>

<DT><A NAME="ddk_power_policy_dg_gly"></A><B>power policy</B></DT>

<DD>The set of rules that determine how and when a system or device changes power state. 

<P>For more information see the topics, <A HREF="JavaScript:hhobj_9.Click()">System Power Policy</A> and <A HREF="JavaScript:hhobj_10.Click()">Managing Device Power Policy</A>.
</DD>

<DT><A NAME="ddk_prcb_kg_gly"></A><B>PRCB</B></DT>

<DD>Processor control block. An extension of the PCR.</DD>

<DT><A NAME="ddk_prediction_address_kg_gly"></A><B>prediction address</B></DT>

<DD>In DirectX® video acceleration, the location of the prediction block within an implementation-specific design.</DD>

<DT><A NAME="ddk_prediction_block_kg_gly"></A><B>prediction block</B></DT>

<DD>In DirectX® video acceleration, the block filtered from reference block.</DD>

<DT><A NAME="ddk_prediction_macroblock_kg_gly"></A><B>prediction macroblock</B></DT>

<DD>In DirectX® video acceleration, the macroblock prediction including all color channels.</DD>

<DT><A NAME="ddk_prediction_plane_kg_gly"></A><B>prediction plane</B></DT>

<DD>In DirectX® video acceleration, the array of samples formed prior to combining of macroblock prediction. Each plane represents a set of prediction blocks, usually collected from one frame location. Planes are combined to form a single macroblock prediction.</DD>
</DL>


<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: P"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
