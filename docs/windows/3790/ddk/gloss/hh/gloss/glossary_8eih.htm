<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>F</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="FAT">
<META NAME="MS-HKWD" CONTENT="fault tolerance">
<META NAME="MS-HKWD" CONTENT="FCB">
<META NAME="MS-HKWD" CONTENT="FDC">
<META NAME="MS-HKWD" CONTENT="FDO">
<META NAME="MS-HKWD" CONTENT="file object">
<META NAME="MS-HKWD" CONTENT="filter">
<META NAME="MS-HKWD" CONTENT="filter device object">
<META NAME="MS-HKWD" CONTENT="flush mechanism">
<META NAME="MS-HKWD" CONTENT="FONTOBJ">
<META NAME="MS-HKWD" CONTENT="FOURCC">
<META NAME="MS-HKWD" CONTENT="fps">
<META NAME="MS-HKWD" CONTENT="fragmentation threshold">
<META NAME="MS-HKWD" CONTENT="frame buffer">
<META NAME="MS-HKWD" CONTENT="free build">
<META NAME="MS-HKWD" CONTENT="FS">
<META NAME="MS-HKWD" CONTENT="FSCTL">
<META NAME="MS-HKWD" CONTENT="FSD">
<META NAME="MS-HKWD" CONTENT="FSP">
<META NAME="MS-HKWD" CONTENT="full duplex">
<META NAME="MS-HKWD" CONTENT="full-motion video">
<META NAME="MS-HKWD" CONTENT="functional device object">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_types_of_wdm_device_objects_kg">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_types_of_wdm_device_objects_kg">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_devinfo_gg">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_drvsynchronizesurface_gg">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_drvsynchronizesurface_gg">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_extensions_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Glossary:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_f_gg_gly"></A>F</H1>



<DL>
<DT><A NAME="ddk_fat_kg_gly"></A><B>FAT</B></DT>

<DD>File allocation table. As an <I>adjective</I>, a file system, originally a type of file system native to MS-DOS®.

<P>As a <I>noun</I>, the logical structure describing a disk partition for the FAT file system.
</DD>

<DT><A NAME="ddk_fault_tolerance_kg_gly"></A><B>fault tolerance</B></DT>

<DD>A feature of the NT-based operating system that includes the end-user-visible Win32® Disk Administrator utility supported by a system-supplied intermediate driver, ftdisk. The ftdisk driver handles disk partition mirroring, striping, and volume set management.</DD>

<DT><A NAME="ddk_fcb_kg_gly"></A><B>FCB</B></DT>

<DD>File control block. An internal file system structure in which a file system maintains state for an open file.</DD>

<DT><A NAME="_fdc_glossary"></A><B>FDC</B></DT>

<DD>Floppy disk drive controller. A special-purpose chip and associated circuitry that directs and controls reading from and writing to a computer's floppy disk drive. </DD>

<DT><A NAME="ddk_fdo_dg_gly"></A><B>FDO</B></DT>

<DD>Functional device object. A device object created by a PnP function driver using <A HREF="JavaScript:hhobj_1.Click()"><B>IoCreateDevice</B></A>. The FDO represents the device for the function driver. 

<P>For more information see the topic, <A HREF="JavaScript:hhobj_2.Click()">Types of WDM Device Objects</A>.


<P><I>See also</I> <A HREF="glossary_6bnd.htm#ddk_pdo_gg_gly">physical device object</A><I> and</I> <A HREF="#ddk_filter_device_object_gg_gly">filter device object</A>. 
</DD>

<DT><A NAME="ddk_file_object_kg_gly"></A><B>file object</B></DT>

<DD>An object that is visible in user mode and that represents an open instance of a file, device, directory, or volume. A file object is accessed through the file handle that is returned by a protected subsystem's API function. This function calls down to a system service that opens (or creates) a file. Callers of the I/O system services can wait on a file handle.

<P>At any given moment, several file objects can be associated with a single, shared data file, but each such file object has a unique handle and an object-specific value for the current file pointer.


<P>A file object is sometimes called a <I>persistent object</I> because the entity that backs any run-time set of file objects is retained across system boots.
</DD>

<DT><A NAME="ddk_filter_ks"></A><B>filter</B></DT>

<DD>An entity that represents a collection of related connection points called pins, which have some internal routing. Under DirectShow® this is a user-mode entity (an instance of a COM object normally implemented by a DLL), and under WDM Streaming this is a kernel-mode entity (a device object that is normally implemented by a kernel driver).</DD>

<DT><A NAME="ddk_filter_device_object_gg_gly"></A><B>filter device object</B></DT>

<DD>A device object created by a filter driver. The filter device object (filter DO) represents the device for the filter driver. 

<P>For more information see the topic, <A HREF="JavaScript:hhobj_3.Click()">Types of WDM_Device Objects</A>.
</DD>

<DT><A NAME="ddk_flush_mechanism_gg_gly"></A><B>flush mechanism</B></DT>

<DD>A mechanism that enables GDI to synchronize itself to the current state of a surface. In addition to providing a <A HREF="glossary_6vsp.htm#ddk_synchronization_routine_gg_gly"><I>synchronization routine</I></A>, a display driver can also activate either a <I>time-based flush mechanism </I>or <I>programmatic flush mechanism</I>. It does this by setting the <B>flGraphicsCaps2</B> member of the <A HREF="JavaScript:hhobj_4.Click()">DEVINFO</A> structure to one of the following flag values:</DD>
</DL>



<UL>
	<LI>GCAPS2_SYNCTIMER—Causes the driver's synchronization routine to be called periodically (GDI calls the driver's synchronization routine every 50 ms.). Drivers that batch DDI calls must specify this flag. By doing so, these drivers avoid problems such as lag in a software cursor's movement or in drawing that is performed in bursts. 
<P>GDI passes the DSS_TIMER_EVENT flag to <A HREF="JavaScript:hhobj_5.Click()"><B>DrvSynchronizeSurface</B></A> when this synchronization routine is called due to a periodic event.
</LI>

	<LI>GCAPS2_SYNCFLUSH—Causes the driver's synchronization routine to be called whenever the Win32® <B>GdiFlush</B> function (described in the Platform SDK documentation) is called. Drivers that perform asynchronous rendering must specify this flag and provide a synchronization routine. 
<P>GDI passes the DSS_FLUSH_EVENT flag to <A HREF="JavaScript:hhobj_6.Click()"><B>DrvSynchronizeSurface</B></A> when this synchronization routine is called due to a flush-based event.

<P><I>See also</I> <A HREF="glossary_3iwp.htm#ddk_asynchronous_rendering_gg_gly">asynchronous rendering</A>.
</LI>
</UL>



<DL>
<DT><A NAME="ddk_fontobj_gg_gly"></A><B>FONTOBJ</B></DT>

<DD>A GDI user object that is used to give a driver access to information about a particular instance of a font. As an accelerator, the driver is allowed to access the public members of the FONTOBJ structure.</DD>

<DT><A NAME="ddk_fourcc_gg_gly"></A><B>FOURCC</B></DT>

<DD>In the original Microsoft® Windows® multimedia APIs, media types were tagged with 32-bit values created from four 8-bit character codes, known as FOURCCs.</DD>

<DT><A NAME="_fps_glossary"></A><B>fps</B></DT>

<DD>Frames per second.</DD>

<DT><A NAME="ddk_fragmentation_threshold_gg"></A><B>fragmentation threshold</B></DT>

<DD>The size at which packets are divided into smaller packets to be transmitted on an 802.11 LAN. The IEEE 802.11-1997 standard requires packets that exceed the fragmentation threshold to be divided into smaller packets and transmitted as a sequence of data/ACK transactions. The fragmentation threshold is determined on a station-by-station basis. </DD>

<DT><A NAME="ddk_frame_buffer_gg_gly"></A><B>frame buffer</B></DT>

<DD>Dedicated memory on a video adapter that can hold the contents of a single screen image. One type of frame buffer is the linear frame buffer, in which memory is mapped linearly into CPU address space. The other type of frame buffer is the banked frame buffer, so-called because its memory is partitioned into contiguous segments, or "banks." Most currently-manufactured video accelerators have linear frame buffers.</DD>

<DT><A NAME="ddk_free_build_kg_gly"></A><B>free build</B></DT>

<DD>A "production" or "retail" build of the operating system. Free builds of the system are compiled and built without symbols or support for debugging under-development components. This makes the <I>free build</I> smaller in size and faster than a <I>checked build</I> due to the lack of debugging symbols and checks. 

<P><I>See also</I> <A HREF="glossary_5svt.htm#ddk_checked_build_kg_gly">checked build</A>.
</DD>

<DT><A NAME="ddk_fs_kg_gly"></A><B>FS</B></DT>

<DD>A file system. An FS is a file system driver that registers itself with the I/O Manager as an active file system. Several file systems can be active at the same time. File systems are dynamically located when a volume is mounted or when a remote name is being resolved. The I/O Manager calls the registered FSs in turn until one file system "recognizes" the volume structure or remote name.

<P>Examples of system-supplied file systems are FAT, NTFS, CDFS, the LAN&nbsp;Manager redirector, NPFS (named pipe file system), and RAW. 


<P><I>See also</I> <A HREF="glossary_50mx.htm#ddk_ifs_kg_gly">IFS</A>. 
</DD>

<DT><A NAME="ddk_fsctl_kg_gly"></A><B>FSCTL</B></DT>

<DD>File system control code.  A system-defined or vendor-defined control code used to identify file system control operations that are requested by sending the IRP_MJ_FILE_SYSTEM_CONTROL IRP.  Only file systems and file system filter drivers receive these requests.

<P>For more information, see the Platform SDK or the IFS Kit.
</DD>

<DT><A NAME="ddk_fsd_kg_gly"></A><B>FSD</B></DT>

<DD>File system driver. The FSD refers to the portion of a driver that executes in the context of the caller, to which an I/O request is dispatched when the request is originally made. The FSD has no process virtual address space and no particular thread context because it operates in the context of whoever happens to call it.

<P>An FSD also executes in the context of the lower-level (intermediate or mass-storage device) driver's DPC routine when the I/O operation is being completed if the FSD indicated that it should be called upon completion of the IRP.


<P>The term FSD normally refers to the device driver part of a file system driver when the driver also has an FSP associated with it; otherwise, it is simply called a <I>file system</I>.
</DD>

<DT><A NAME="ddk_fsp_kg_gly"></A><B>FSP</B></DT>

<DD>File system process. FSP usually refers to a set of device-dedicated or system-worker threads that assist a file system driver (FSD), but can also refer to a kernel-mode process set up by an FSD. FSP threads are generally used when a file system driver requires a thread context in which to work. An example is when the driver must wait without tying up the calling thread. An FSP kernel-mode process is used only when an FSD must have a driver-specific process address space in which its device-dedicated threads execute. Most file system drivers conserve system memory and improve performance by <I>not</I> creating their own kernel-mode processes.

<P>Communication between the FSD and the FSP threads is performed through the use of a communication region. This region is generally allocated in a device object's device extension and consists of an interlocked queue and a synchronization event. 


<P>Note that any driver (not just file systems) can create one or more device-dedicated threads, and a file system driver can use system worker threads. In particular, a driver should create a thread for I/O operations that use synchronization mechanisms (such as events, timers, semaphores, mutexes, and so on) other than spin locks. Such a driver's thread can wait for an indefinite, nonzero interval on a kernel-defined dispatcher object, but context switches to the thread slow down such a driver's I/O operations.


<P><I>See also</I> <A HREF="glossary_4321.htm#ddk_device_object_kg_gly">device object</A>, <A HREF="JavaScript:hhobj_7.Click()">device extension</A>, <I>and</I> <A HREF="glossary_3bfr.htm#ddk_event_object_kg_gly">event object</A>.
</DD>

<DT><A NAME="_full_duplex_glossary"></A><B>full duplex</B></DT>

<DD>In terms of data flow, full duplex indicates a bidirectional data flow.</DD>

<DT><A NAME="_full_motion_video_glossary"></A><B>full-motion video</B></DT>

<DD>Video reproduction at 30 frames per second (NTSC-original signals) or 25 frames per second (PAL-original signals). </DD>

<DT><A NAME="ddk_functional_device_object_gg_gly"></A><B>functional device object</B></DT>

<DD><I>See</I> <A HREF="#ddk_fdo_dg_gly">FDO</A>.</DD>
</DL>


<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: F"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
