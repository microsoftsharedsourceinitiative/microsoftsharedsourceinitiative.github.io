<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Hooking Callback Events</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Hooking Callback Events">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_hooking_callback_events"></A>Hooking Callback Events</H2>

<P>A VDD can hook a callback event if it polls DOS events for which there is no explicit close operation, such as printing using int17h.The <B>VDDInstallUserHook</B> and <B>VDDDeInstallUserHook</B> functions allow a VDD to control events such as:

<UL>
	<LI>PDB (DOS process) creation and termination</LI>

	<LI>VDM block</LI>

	<LI>VDM resume</LI>
</UL>

<P>A VDM in which a DOS application runs is attached to the console window in which the DOS application is running. When the first DOS binary runs in that console, the VDM is created, and the DOS binary is terminated. The VDM remains with the console window and waits for the next DOS binary to be launched. While the VDM waits, it should block all its components, including VDDs. A VDD can hook VDM Block and Resume events for this purpose. On block events, a VDD should block all worker threads and clean up any other operation it may have started. On Resume events, the VDD can restart a worker thread. <B>VDDDeInstallUserHook</B> de-installs all events hooked earlier.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Hooking%20Callback%20Events"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
