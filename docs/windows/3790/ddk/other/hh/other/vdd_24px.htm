<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Virtual Device Drivers for MS-DOS Applications or Special Hardware</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Virtual Device Drivers for MS-DOS Applications or Special Hardware">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_virtual_device_drivers_for_ms_dos_applications_or_special_hardware"></A>Virtual Device Drivers for MS-DOS Applications or Special Hardware</H1>

<P class=note><B>Note</B>&nbsp;&nbsp;A VDD need only be written to support special-purpose hardware devices that operate under an MS-DOS® application. The provided VDM has built-in support for commonly used hardware such as serial communication ports, video, mouse, and keyboard. Consequently, you should not need a VDD to virtualize access to these common devices. </P>

<P>The NT-based 32-bit operating system provides a virtual DOS machine (VDM) within the Microsoft® Win32® subsystem to support real-mode and protected-mode MS-DOS applications. The VDM creates an environment where unmodified 16-bit MS-DOS binaries can execute without threatening the security and integrity of the 32-bit system. The VDM environment serves programs such as:

<UL>
	<LI>MS-DOS applications</LI>

	<LI>16-bit drivers</LI>

	<LI>16-bit Windows applications in the Windows on Windows (WOW) subsystem</LI>

	<LI>Terminate and stay resident (TSR) programs</LI>
</UL>

<P>The NT-based operating system launches a VDM as necessary to support 16-bit applications launched by the user. There can be several VDMs running at any one time, each in its own process. Every VDM sets up a self-contained virtual DOS machine environment. Each individual VDM is dynamically configured to run either a Windows&nbsp;3.<I>x</I> application or an MS-DOS application. When any Windows&nbsp;3.<I>x</I> application is launched, the VDM in which it runs loads the WOW subsystem, which is a simulation of the Windows®&nbsp;95 16-bit environment. Any Windows&nbsp;3.<I>x</I> application can run either in a separate VDM or in the default shared-WOW VDM. In addition, a console session launches a VDM whenever the user starts an MS-DOS application from the command prompt. </P>

<P>When the VDM is launched, it:

<UL>
	<LI>Allocates memory in which to create a virtual DOS machine.</LI>

	<LI>Reads the files<I> \system32\config.nt </I>and <I>\system32\autoexec.nt</I>.</LI>

	<LI>Loads drivers and executes batch files as specified.</LI>

	<LI>Loads the application and executes it.</LI>
</UL>

<P>The application runs as it would in a native MS-DOS environment because the VDM provides virtual equivalents of all the functionality MS-DOS would supply to the application. All drivers and batch files execute within the virtual DOS environment set up by the VDM.</P>

<P>Given the functionality of the VDM, most MS-DOS applications can run without any modification or additions in the Windows&nbsp;NT/Windows&nbsp;2000 environment. However, there are some MS-DOS applications that depend on custom hardware, such as a fax board or a 3270 communications board. Generally, these applications have a plug-in hardware board they manipulate directly through 80386/80486 I/O port IN and OUT instructions and by writing directly to memory on the board. These applications might also use DMA to transfer data to and from the board. In an MS-DOS environment, these operations allow the application or its 16-bit driver to get direct access to the hardware device, as shown in the following figure .</P>

<P><B><IMG SRC="images/401-01.gif" ALT="" BORDER=0></B></P>

<P><B>Normal MS-DOS hardware device access</B></P>

<P>In an MS-DOS system, an application can perform these operations directly. In some cases, the application uses a 16-bit device driver or a TSR to communicate with the hardware. The application makes calls to the driver or calls the TSR through a software interrupt. For the purposes of this document, the 16-bit driver or TSR is considered to be an extension of the application that requests services. Thus, when this document talks about an MS-DOS application, it refers to either an MS-DOS application that manipulates a hardware device directly, or to a combination of an MS-DOS application and a 16-bit driver or TSR that manipulates the hardware.</P>

<P>On the NT-based operating system, MS-DOS application programs (and 16-bit drivers or TSRs) do not have sufficient processor privilege to use 80386/80486 I/O ports, and the virtual addressing mode of the system does not permit the real-mode addressing techniques of DMA to the board.</P>

<P>To support an MS-DOS application using special hardware in an NT-based 32-bit environment, the application developer must write a 32-bit kernel-mode device driver to access the board hardware. The developer must also write a VDD to translate operations performed by the MS-DOS application into the corresponding kernel-mode device driver calls for the particular board. The paired kernel-mode device driver and VDD for the device enable the original MS-DOS application to run in the VDM layer.</P>

<P>In addition to I/O port and memory access arbitration, a VDD can also support DMA, register manipulation, translation of real-mode addresses to 32-bit full pointers, and hardware interrupt simulation. The following sections describe how to write a VDD.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Virtual%20Device%20Drivers%20for%20MS-DOS%20Applications%20or%20Special%20Hardware"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
