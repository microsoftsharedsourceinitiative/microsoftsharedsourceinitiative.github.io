<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VDDInstallMemoryHook</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="VDDInstallMemoryHook">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_vddinstallmemoryhook"></A>VDDInstallMemoryHook</H1>

<P><B>VDDInstallMemoryHook</B> releases the memory-mapped I/O addresses a VDD controls.</P>

<PRE class=syntax><B>BOOL
  VDDInstallMemoryHook(</B>
    <B>IN HANDLE </B> <I>hVdd</I>,
    <B>IN PVOID</B>  <I>pStart</I>,
    <B>IN DWORD </B> <I>count</I>
    <B>IN PVDD_MEMORY_HANDLER </B> <I>MemoryHandler
<B>    </B></I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>hVdd</I></DT>

<DD>Identifies the VDD.</DD>

<DT><I>pStart</I></DT>

<DD>Points to the starting linear address.</DD>

<DT><I>count</I></DT>

<DD>Identifies the number of bytes of mapped memory.</DD>

<DT><I>MemoryHandler</I></DT>

<DD>Points to the VDD handler for the memory address range.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>VDDInstallMemoryHook</B> returns TRUE if successful. Otherwise, it returns FALSE and logs one of the following errors: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=40%>Value</TH>
<TH align=left width=60%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=40%>ERROR_ACCESS_DENIED</TD>
<TD width=60%>One of the requested ports is already hooked.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>ERROR_OUTOFMEMORY</TD>
<TD width=60%>There are insufficient resources.</TD>
</TR>
</TABLE><BR>

<H4>Comments</H4>

<P>The first VDD to hook an address will get control of the memory. There is no chaining of hooks. A VDD should grab the memory during its initialization routine. After all VDDs are loaded, the EMM component will use all remaining memory ranges for UMB support.</P>

<P>Installing a hook on a memory range results in the consumption of memory based on page boundaries. The <I>pStart</I> is rounded down. <I>count</I> is rounded up to the next page boundary. The VDD’s memory hook handler is called for all addresses within the page(s) used. The page(s) are set aside as mapped reserved sections, and will no longer be available for use by the Win32 VDM component or other VDDs. The VDD is permitted to manipulate the memory (commit, free, etc.). Only one VDD is allowed to have memory hooks in a particular page.</P>

<P>The VDD’s memory handler will be called with the address of any page fault and with a flag identifying whether the fault was caused by a read or write operation.</P>

<P>On return from the VDD hook handler, the system will assume that the page fault was handled and returns control to the VDM component.</P>

<P>After calling the VDD’s <I>MemoryHandler</I>, VDM returns to the faulting <B>cs:ip</B> in the 16-bit application. If the VDD doesn’t need this, it can adjust the <B>cs:ip</B> using the <B>setCS</B> and <B>setIP</B> functions.</P>

<H4>See Also</H4>

<P><A HREF="vddfn_44vf.htm"><B>VDDDeinstallMemoryHook</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VDDInstallMemoryHook"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
