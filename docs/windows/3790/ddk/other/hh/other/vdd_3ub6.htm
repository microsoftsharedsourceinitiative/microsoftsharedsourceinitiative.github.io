<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Single Buffer DMA Transfer</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Single Buffer DMA Transfer">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_single_buffer_dma_transfer"></A>Single Buffer DMA Transfer</H3>

<P>In the single-buffer strategy, the VDD again determines a DMA request is pending by receiving a command from the application. To avoid copying the data to its own memory space, the VDD calls <B>VDDQueryDMA</B> to determine the source, destination, and other DMA parameters. It then sends the DMA information to the kernel-mode device driver and allows that driver to transfer the data directly from the application’s buffer to the device, as shown in the following figure. The kernel-mode device driver can program the DMA controller through the platform-specific HAL to carry out the transfer or it can use some other means to transfer the data. In the other direction, the VDD can request that the driver transfer data directly from the device to the application’s buffer. In either direction, VDDs using this second strategy must call <B>VDDSetDMA</B> to update the DMA state after the transfer is complete.</P>

<P><B><IMG SRC="images/401-05.gif" ALT="" BORDER=0></B></P>

<P><B>Direct virtual DMA transfer</B></P>

<P>Because DMA registers contain physical addresses, a VDD that uses <B>VDDQueryDMA</B> must correctly convert these addresses to Win32 linear addresses in the VDM process address space.</P>

<P>The following figure shows how the virtual DOS machine can be laid out in memory relative to the VDM process. On an <I>x</I>86 machine, linear zero of the VDM process is the same as 0:0 for DOS. On a non<I>x</I>86 machine these addresses might be different. The addresses returned by <B>VDDQueryDMA</B> are relative to the DOS 0:0.</P>

<P><B><IMG SRC="images/401-06.gif" ALT="" BORDER=0></B></P>

<P><B>Memory Layout for DMA addresses</B></P>

<P>On an <I>x</I>86 machine, there is no difference between a DMA address, as programmed by the MS-DOS application to the DMA chip, and a Win32 address. On a non<I>x</I>86 machine, you must add the offset from VDM 0 to DOS 0:0 to convert a DMA address to a Win32 address. To get the offset from VDM to DOS, call <B>GetVDMPointer(0,0,0)</B>. On an <I>x</I>86 machine, this call returns zero. On a RISC machine, it returns the difference between VDM 0 and DOS 0:0. Thus, adding <B>GetVDMPointer(0,0,0) </B>to a DMA address always gives the correct Win32 linear pointer, regardless of machine type.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Single%20Buffer%20DMA%20Transfer"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
