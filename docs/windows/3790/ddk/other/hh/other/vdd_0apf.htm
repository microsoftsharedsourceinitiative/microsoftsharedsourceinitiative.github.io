<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Memory Access</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Memory Access">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_memory_access"></A>Memory Access</H2>

<P>MS-DOS applications are written to use the <I>x</I>86 segmented memory architecture. They use pointers composed of a 16-bit segment or selector and a 16-bit offset into the segment. Windows&nbsp;NT/Windows&nbsp;2000, on the other hand, uses a flat memory model, in which pointers are simply 32-bit linear addresses. Because a VDD can receive a segmented address pointer from an MS-DOS application, NT-based systems provide the function <B>GetVDMPointer</B> to translate MS-DOS segment:offset or selector:offset style pointers to 32-bit linear address pointers. The VDD can use the 32-bit pointer to access memory by using Win32 functions, such as <B>VDDAllocMem</B>.</P>

<P>Do not manually convert segmented addresses (by shifting the segment by four and adding the offset). On a non-<I>x</I>86 machine, the VDM might not be based at physical address zero. The <B>GetVDMPointer</B> function converts a segmented address to a 32-bit address in a platform-independent manner.</P>

<P>If the VDD is running on a RISC-based machine, the <I>x</I>86 emulator precompiles instructions in memory to increase performance. When a VDD uses a pointer returned by <B>GetVDMPointer</B> to modify memory in a particular range, it is important to tell the emulator that a change has occurred so the emulator can recompile the instructions in that range. Calling <B>FlushVDMPointer</B> or <B>FreeVDMPointer</B> tells the emulator the memory is no longer subject to modification and the instructions in that range can be precompiled again. These functions simply return to the caller on an <I>x</I>86 machine.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Memory%20Access"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
