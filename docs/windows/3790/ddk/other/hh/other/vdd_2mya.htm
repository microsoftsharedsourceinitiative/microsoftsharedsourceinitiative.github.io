<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Modifying an MS-DOS Application or 16-bit Driver</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Modifying an MS-DOS Application or 16-bit Driver">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Other&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_modifying_an_ms_dos_application_or_16_bit_driver"></A>Modifying an MS-DOS Application or 16-bit Driver</H1>

<P>NT-based platforms provide the functions <B>RegisterModule</B>, <B>UnregisterModule</B>, and <B>DispatchCall</B> for a 16-bit driver or MS-DOS application to call a 32-bit VDD. These functions can be included in a 16-bit application program or driver to bridge the gap between the 16- and 32-bit environments.</P>

<P>During its initialization, the 16-bit driver or MS-DOS application calls <B>RegisterModule</B>, specifying the name of the VDD, the name of the VDD initialization routine, and the name of the VDD dispatch routine to be called each time the 16-bit application or driver calls <B>DispatchCall</B>. The <B>RegisterModule</B> function returns a handle to the VDD. If the VDD has not yet been loaded, <B>RegisterModule</B> loads and initializes it before returning. The application or driver can then use the VDD handle when using <B>DispatchCall</B>, which calls the VDD dispatch function specified in <B>RegisterModule</B>. When the application or driver is finished with the VDD, it can call <B>UnregisterModule</B> to unload the VDD and release its resources.</P>

<P>It is not necessary to modify an MS-DOS application or 16-bit device driver unless you want to directly call your VDD. An unmodified MS-DOS application’s attempts to directly access the hardware are intercepted by the VDM and routed to the appropriate VDD. Modify your application only if you need the additional performance provided by direct high-level interceptions of device access requests.</P>

<P>If the VDD needs to use <B>VDDSimulate16</B>, the 16-bit device driver or its stub will need to change as well. For <B>VDDSimulate16</B> to complete, the 16-bit driver needs to call <B>VDDUnsimulate16</B>.</P>

<P>The following functions (macros) are provided for 16-bit drivers or MS-DOS applications:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=36%>Function</TH>
<TH align=left width=64%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=36%><B>DispatchCall</B></TD>
<TD width=64%>Passes a request to a DLL.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%><B>RegisterModule</B></TD>
<TD width=64%>Registers a third-party DLL with the VDM.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%><B>UnRegisterModule</B></TD>
<TD width=64%>Unregisters a third-party DLL with the VDM.</TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Modifying%20an%20MS-DOS%20Application%20or%2016-bit%20Driver"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
