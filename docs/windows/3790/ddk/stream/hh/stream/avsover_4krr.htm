<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Pin-Centric Processing</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Pin-Centric Processing">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_pin_centric_processing_ksg"></A>Pin-Centric Processing</H3>

<P>The AVStream minidriver writer provides filters that use one of two processing paradigms: pin-centric processing or <A HREF="avsover_702v.htm">filter-centric processing</A>.</P>

<P>In a pin-centric filter, AVStream attempts processing when new data (or a new buffer) arrives into a previously empty queue.</P>

<P>A filter that uses pin-centric processing provides a processing dispatch in each <A HREF="avstruct_4u9f.htm">KSPIN_DISPATCH</A> table and omits the processing dispatch in the <A HREF="avstruct_04oj.htm">KSFILTER_DISPATCH</A> table. Once you have supplied the descriptor structures and registered them by calling <A HREF="avfunc_2to3.htm"><B>KsInitializeDriver</B></A>, you can instantiate and use your filter.</P>

<P>When it sends a pin-centric dispatch, AVStream provides a pointer to the pin object that has available data. The minidriver’s processing dispatch can then acquire a pointer into the data stream with <A HREF="avfunc_7cj7.htm"><B>KsPinGetLeadingEdgeStreamPointer</B></A>. Minidrivers should perform all data manipulation using the <A HREF="avsover_0dgn.htm">stream pointer</A> API.</P>

<P>A pin-centric minidriver can force processing regardless of the existing queue contents by specifying the KSPIN_FLAG_INITIATE_PROCESSING_ON_EVERY_ARRIVAL flag in <A HREF="avstruct_1fw3.htm">KSPIN_DESCRIPTOR_EX</A>. If this flag is set, AVStream attempts processing every time a data frame or buffer arrives into the queue, .</P>

<P>If the minidriver exposes a pin that AVStream should never directly call to process, the vendor should specify KSPIN_FLAG_DO_NOT_INITIATE_PROCESSING on <A HREF="avstruct_1fw3.htm">KSPIN_DESCRIPTOR_EX</A>. In this case, the minidriver can call <A HREF="avfunc_4chf.htm"><B>KsPinAttemptProcessing</B></A> to initiate a pin process dispatch.</P>

<P>A processing attempt can fail if the minidriver is holding the processing mutex through <A HREF="avfunc_1j8z.htm"><B>KsPinAcquireProcessingMutex</B></A>. Problems may also arise if the minidriver directly manipulates a gate by using the <B>KsGate</B><I>*</I> calls.</P>

<P>In general, software filters use filter-centric processing and hardware filters use pin-centric processing. For instance, hardware that transforms or renders data could route data on a pin-centric filter. There are rare cases in which these roles may be reversed.</P>

<P>The <I>Avshws</I> sample in the DDK is a pin-centric capture driver for a simulated piece of hardware. This sample shows how to implement <A HREF="avsover_3u7b.htm">DMA through AVStream</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Pin-Centric%20Processing"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
