<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IMXF::SetState</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IMXF::SetState">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_imxf_setstate_ks"></A>IMXF::SetState</H1>

<P>The <B>SetState</B> method is used to set the state of the MIDI transform interface.</P>

<PRE class=syntax><B>NTSTATUS
  SetState(
    IN KSSTATE  </B><I>kState</I>
<B>    );</B></PRE>

<H4>Parameter</H4>

<DL>
<DT><I>kState</I></DT>

<DD>Specifies the state that the filter graph is to be set to. This parameter is a <A HREF="ks-struct_1ooj.htm">KSSTATE</A> enumeration value. See the following <B>Comments</B> section.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>SetState</B> returns STATUS_SUCCESS if the call was successful. Otherwise, the method returns an appropriate error code.</P>

<H4>Headers</H4>

<P>Declared in <I>dmusicks.h</I>. Include <I>dmusicks.h</I>.</P>

<H4>Comments</H4>

<P>For an audio filter graph, the four <A HREF="ks-struct_1ooj.htm">KSSTATE</A> enumeration values are interpreted as follows:

<UL>
	<LI>KSSTATE_RUN
<P>Everything is running and functioning as normal. In this state, the <B>IMXF</B> interface will be active and pass messages as usual.
</LI>

	<LI>KSSTATE_ACQUIRE
<P>This is a transitional state that helps manage the transition between KSSTATE_RUN and KSSTATE_STOP. In this state, messages cannot be passed downstream in the filter graph. 
</LI>

	<LI>KSSTATE_PAUSE
<P>This is a transitional state that helps manage the transition between KSSTATE_RUN and KSSTATE_STOP. 
</LI>

	<LI>KSSTATE_STOP
<P>Everything is stopped in the current filter graph.
</LI>
</UL>

<P>The behavior of the miniport driver depends on the state of the filter graph. This behavior differs for render (output) and capture (input).</P>

<P>On the output side, if the current state is anything other than KSSTATE_RUN, the <B>IMXF</B> interface should hold onto the data and not pass it to the hardware. If the current state is KSTATE_STOP then the miniport driver should discard any data it is given by passing that data to the allocator.</P>

<P>On the input side, if the input stream is in either KSSTATE_RUN or KSSTATE_PAUSE, it is legal for the miniport driver to get messages from the allocator and send them upstream to the capture sink. If the state is KSSTATE_STOP or KSSTATE_ACQUIRE and the hardware is trying to produce data, that data should be thrown away.</P>

<H4>See Also</H4>

<P><A HREF="ks-struct_1ooj.htm">KSSTATE</A>, <A HREF="ks-prop_7vhv.htm">KSPROPERTY_CONNECTION_STATE</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IMXF::SetState"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
