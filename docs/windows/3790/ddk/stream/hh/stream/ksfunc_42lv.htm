<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KsWriteFile</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KsWriteFile">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_kswritefile_ks"></A>KsWriteFile</H3>

<P>The <B>KsWriteFile</B> function performs a write against the specified file object. It is assumed that the caller is serializing access to the file for operations against a FO_SYNCHRONOUS_IO file object. The function attempts to use <B>FastIoDispatch</B> if possible, or it generates a write request against the device object. All relevant statistics are updated.</P>

<PRE class=syntax><B>KSDDKAPI NTSTATUS NTAPI
  KsWriteFile(</B>
    <B>IN PFILE_OBJECT </B> <I>FileObject</I><B>,</B>
    <B>IN PKEVENT</B>  <I>Event</I>  <B>OPTIONAL,</B>
    <B>IN PVOID</B>  <I>PortContext</I>  <B>OPTIONAL,</B>
    <B>OUT PIO_STATUS_BLOCK </B> <I>IoStatusBlock</I><B>,</B>
    <B>IN PVOID </B> <I>Buffer</I><B>,</B>
    <B>IN ULONG</B>  <I>Length</I><B>,</B>
    <B>IN ULONG</B>  <I>Key</I>  <B>OPTIONAL,</B>
    <B>IN KPROCESSOR_MODE </B> <I>RequestorMode</I>
    <B>); </B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>FileObject</I></DT>

<DD>Specifies the file object to perform the read against.</DD>

<DT><I>Event</I></DT>

<DD>Optionally contains the event to use in the write. If no event is passed, the call is assumed to be on a synchronous file object or the caller is waiting on the file object’s event. If the call is not on a synchronous file object, it can be asynchronously completed. If the file has been opened for synchronous I/O, this variable must be NULL. If this variable is used, it must be an event allocated by the object manager.</DD>

<DT><I>PortContext</I></DT>

<DD>Optionally contains context information for a completion port.</DD>

<DT><I>IoStatusBlock</I></DT>

<DD>Indicates the location in which to return the status information. This is always assumed to be a valid address, regardless of the requester mode.</DD>

<DT><I>Buffer</I></DT>

<DD>Specifies the buffer from which to write the data. If the buffer needs to be probed and locked, an exception handler is used, along with <I>RequesterMode</I>.</DD>

<DT><I>Length</I></DT>

<DD>Specifies the size of the buffer passed.</DD>

<DT><I>Key</I></DT>

<DD>Optionally contains a key, or zero if none.</DD>

<DT><I>RequestorMode</I></DT>

<DD>Indicates the processor mode to place in the read IRP if one needs to be generated. Additionally, it is used if a buffer needs to be probed and locked. This variable also determines if a fast I/O call can be performed. If the requester mode is not KernelMode, but the previous mode was, then fast I/O cannot be used.
</DD>
</DL>

<H4>Return Value</H4>

<P>The <B>KsWriteFile</B> function returns STATUS_SUCCESS if successful, STATUS_PENDING if action is pending, or it returns a read error if unsuccessful.</P>

<H4>Headers</H4>

<P>Declared in <I>ks.h</I>. Include <I>ks.h</I>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KsWriteFile"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
