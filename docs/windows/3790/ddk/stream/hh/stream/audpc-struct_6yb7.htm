<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PCCONNECTION_DESCRIPTOR</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PCCONNECTION_DESCRIPTOR">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_pcconnection_descriptor_ks"></A>PCCONNECTION_DESCRIPTOR</H1>

<P>The PCCONNECTION_DESCRIPTOR structure describes a single data-path connection inside a KS filter. A filter's internal topology can be specified by an array of PCCONNECTION_DESCRIPTOR structures. A WDM audio adapter driver returns an array of these structures in response to a <A HREF="audmp-routines_5k1f.htm"><B>IMiniport::GetDescription</B></A> call or a <A HREF="ks-prop_6ucz.htm">KSPROPERTY_TOPOLOGY_CONNECTIONS</A> <I>get</I>-property request. PCCONNECTION_DESCRIPTOR is an alias for <A HREF="ks-struct_3fhv.htm">KSTOPOLOGY_CONNECTION</A>. </P>

<PRE class=syntax>typedef struct
{
  ULONG  FromNode;
  ULONG  FromNodePin;
  ULONG  ToNode;
  ULONG  ToNodePin;
} PCCONNECTION_DESCRIPTOR, *PPCCONNECTION_DESCRIPTOR;</PRE>

<H4>Members</H4>

<DL>
<DT><B>FromNode</B> </DT>

<DD>Specifies a node ID. This member identifies the node on the upstream end of the connection. If this end of the connection is an input (sink) pin on the filter—not a logical pin on a node—set this member to the null node-ID value, <A HREF="audpc-struct_8xbn.htm">PCFILTER_NODE</A>.</DD>

<DT><B>FromNodePin</B> </DT>

<DD>Specifies a pin ID. This member identifies the pin on the upstream end of the connection. If the <B>FromNode</B> member is set to PCFILTER_NODE, the pin on this end of the connection is an input (sink) pin on the filter. Otherwise, it is a logical pin on an internal node.</DD>

<DT><B>ToNode</B> </DT>

<DD>Specifies a node ID. This member identifies the node on the downstream end of the connection. If this end of the connection is an output (source) pin on the filter—not a logical pin on a node—set this member to the null node-ID value, PCFILTER_NODE.</DD>

<DT><B>ToNodePin</B> </DT>

<DD>Specifies a pin ID. This member identifies the pin on the downstream end of the connection. If the <B>ToNode</B> member is set to PCFILTER_NODE, the pin on this end of the connection is an output (source) pin on the filter. Otherwise, it is a logical pin on an internal node. </DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>portcls.h</I>. Include <I>portcls.h</I>.</P>

<H4>Comments</H4>

<P>The PCCONNECTION_DESCRIPTOR structure specifies a single connection inside a filter. The connection can be one of the following:

<UL>
	<LI>A connection between two internal nodes</LI>

	<LI>A connection between an internal node and a pin on the filter</LI>

	<LI>A connection between two pins on the filter</LI>
</UL>

<P>The last type of connection occurs when an input pin on a filter streams data directly to an output pin on the same filter.</P>

<P>An adapter driver uses an array of PCCONNECTION_DESCRIPTOR structures to specify the internal topology of a filter.</P>

<P>The data stream flows from the <B>FromNode</B> end to the <B>ToNode</B> end of the connection.</P>

<P>To use the PCCONNECTION_DESCRIPTOR structure, the driver writer assigns "logical" pins to the nodes inside the filter. These "pins" are connection points on the nodes and are analogous to the external pins that the filter uses to connect to other filters. However, logical pins on nodes are used solely to specify the connections inside the filter.</P>

<P>A simple node with a single input and a single output typically numbers its input and output pins one and zero, respectively. By convention, this numbering is based on the direction of IRP flow rather than data flow.</P>

<P>More complex nodes might require standardized pin IDs in order to allow clients to more easily determine the assignment of functions to specific pins. For example, the <A HREF="aud-prop_01wz.htm">KSNODETYPE_ACOUSTIC_ECHO_CANCEL</A> node uses standardized IDs for its four pins.</P>

<P>When the pin on one end of a connection is an input or output pin on the filter rather than a logical pin on a node, set the <B>FromNode</B> or <B>ToNode</B> member (depending on which end of the connection you are specifying) to the null node-ID value, <A HREF="audpc-struct_8xbn.htm">PCFILTER_NODE</A>.</P>

<P>Avoid confusing logical pins, which are used solely to describe connection points on nodes within a filter, with the external pins that filters use to connect to other filters. Logical pins are rarely used outside of the PCCONNECTION_DESCRIPTOR structure. In this document, the term <I>pin</I> refers to a pin on a KS filter rather than a logical pin on a node unless noted otherwise.</P>

<P>The <A HREF="audmp-routines_5k1f.htm"><B>IMiniport::GetDescription</B></A> method outputs a <A HREF="audpc-struct_0otv.htm">PCFILTER_DESCRIPTOR</A> structure that contains a pointer to a PCCONNECTION_DESCRIPTOR array.</P>

<P>For a simple code example that shows how the PCCONNECTION_DESCRIPTOR structure is used, see <A HREF="pcdesign_1b1j.htm">Exposing Miniport Topology</A>.</P>

<H4>See Also</H4>

<P><A HREF="audmp-routines_5k1f.htm"><B>IMiniport::GetDescription</B></A>, <A HREF="ks-prop_6ucz.htm">KSPROPERTY_TOPOLOGY_CONNECTIONS</A>, <A HREF="ks-struct_3fhv.htm">KSTOPOLOGY_CONNECTION</A>, <A HREF="audpc-struct_8xbn.htm">PCFILTER_NODE</A>, <A HREF="audpc-struct_0otv.htm">PCFILTER_DESCRIPTOR</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PCCONNECTION_DESCRIPTOR"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
