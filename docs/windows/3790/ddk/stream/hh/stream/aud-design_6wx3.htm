<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MIDI and DirectMusic Filters</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MIDI and DirectMusic Filters">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_midi_and_directmusic_filters_ksg"></A>MIDI and DirectMusic Filters</H3>

<P>MIDI and DirectMusic filters represent devices that synthesize, output, or capture MIDI music data. Applications typically access the capabilities of these devices either through the DirectMusic API or through the Windows Multimedia <B>midiOut<I>Xxx</I></B> and <B>midiIn<I>Xxx</I></B> functions. For more information about these interfaces, see the Windows SDK documentation.</P>

<P>A MIDI or DirectMusic <I>synthesizer</I> filter receives as input a MIDI stream consisting of time-stamped MIDI events. The filter outputs either of the following:

<UL>
	<LI>A wave-formatted digital audio stream</LI>

	<LI>Analog audio signals that can drive a set of speakers</LI>
</UL>

<P>A MIDI or DirectMusic <I>output</I> filter receives as input a MIDI stream consisting of time-stamped MIDI events. The filter outputs raw MIDI messages to an external MIDI sound module.</P>

<P>A MIDI or DirectMusic <I>capture</I> filter takes as input a series of raw MIDI messages from a MIDI keyboard or other external MIDI device. The filter outputs a MIDI stream consisting of time-stamped MIDI events.</P>

<P>A single MIDI or DirectMusic filter can perform a combination of the three functions above — synthesis, output, and capture — depending on the capabilities of the device that the filter represents. For example, a pure MPU-401 device performs output and capture but not synthesis.</P>

<H4>MIDI Filter</H4>

<P>A MIDI filter is implemented as a port/miniport driver pair. A MIDI filter factory creates a MIDI filter as follows:

<UL>
	<LI>It instantiates a MIDI miniport driver object.</LI>

	<LI>It instantiates a MIDI port driver object by calling <A HREF="audpc-routines_58s3.htm"><B>PcNewPort</B></A> with GUID value <B>CLSID_PortMidi</B>.</LI>

	<LI>It calls the port driver's <A HREF="audmp-routines_7qcz.htm"><B>IPort::Init</B></A> method to bind the miniport driver to the port driver.</LI>
</UL>

<P>The code example in <A HREF="pcdesign_68mf.htm">Subdevice Creation</A> illustrates this process. The port and miniport drivers communicate with each other through their <A HREF="audmp-routines_49pv.htm"><B>IPortMidi</B></A> and <A HREF="audmp-routines_1fsj.htm"><B>IMiniportMidi</B></A> interfaces.</P>

<P>To support MIDI output and synthesizer devices, the MIDI port driver contains a software sequencer that outputs raw MIDI messages to the miniport driver with a timer resolution of one millisecond.</P>

<H4>DirectMusic Filter</H4>

<P>A DirectMusic filter provides a superset of the functionality of a MIDI filter. The superset includes these additional capabilities:

<UL>
	<LI>DLS (downloadable sound) resources that contain waveform and articulation data describing MIDI instruments. A <A HREF="aud-prop_50ab.htm">KSPROPERTY_SYNTH_DLS_DOWNLOAD</A> <I>set</I>-property request downloads a DLS resource to a filter.</LI>

	<LI>Channel groups for expanding the number of selectable instruments. The <A HREF="aud-prop_10kz.htm">DMUS_KERNEL_EVENT</A> structure, which is used to package each time-stamped MIDI message in a MIDI stream, specifies which channel group to use for that message.</LI>

	<LI>64-bit time stamps with 100-nanosecond resolution in support of hardware MIDI sequencing. The DMUS_KERNEL_EVENT structure specifies the high-resolution time stamp for a MIDI message.</LI>
</UL>

<P>With channel groups, the number of notes that can be played simultaneously is no longer limited to the 16 channels of the original MIDI specification. It is limited only by the number of voices available in the synthesizer.</P>

<P>A DirectMusic filter is implemented as a port/miniport driver pair. A DirectMusic filter factory creates a DirectMusic filter as follows:

<UL>
	<LI>It instantiates a DMus (DirectMusic) miniport driver object.</LI>

	<LI>It instantiates a DMus port driver object by calling <A HREF="audpc-routines_58s3.htm"><B>PcNewPort</B></A> with GUID value <B>CLSID_PortDMus</B>.</LI>

	<LI>It calls the port driver's <A HREF="audmp-routines_7qcz.htm"><B>IPort::Init</B></A> method to bind the miniport driver to the port driver.</LI>
</UL>

<P>The code example in <A HREF="pcdesign_68mf.htm">Subdevice Creation</A> illustrates this process. The port and miniport drivers communicate with each other through their <A HREF="audmp-routines_7pgz.htm"><B>IPortDMus</B></A> and <A HREF="audmp-routines_4vjn.htm"><B>IMiniportDMus</B></A> interfaces.</P>

<P>To support DirectMusic synthesizer devices, the DMus port driver contains a low-resolution (one millisecond) software sequencer that can output time-stamped MIDI events to the hardware sequencer’s buffer in advance of when they are scheduled to be played. To support DirectMusic output devices, the port driver's software sequencer can also be configured to output raw MIDI messages at the times they are to be played.</P>

<H4>Enumerating MIDI and DirectMusic Devices</H4>

<P>When enumerating MIDI input or output devices through the Windows Multimedia <B>midiIn<I>Xxx</I></B> or <B>midiOut<I>Xxx</I></B> functions, an application can see only WDM devices whose miniport drivers expose MIDI pins. These are pins that support MIDI streams (see <A HREF="aud-design_01lz.htm">MIDI Stream Data Range</A>). When enumerating devices through DirectMusic, however, an application can see WDM devices with both DirectMusic (see <A HREF="aud-design_65uv.htm">DirectMusic Stream Data Range</A>) and MIDI pins.</P>

<P>When implementing a custom miniport driver, a hardware vendor typically writes either a MIDI miniport driver or a DMus miniport driver, but not both. A DMus miniport driver can expose both MIDI and DirectMusic pins, which eliminates the need to write a separate MIDI miniport driver.</P>

<P>In Windows&nbsp;98/Me, DirectMusic sometimes enumerates the same MPU-401 device twice. The reason is that some hardware vendors expose their MPU-401 devices both as legacy, pre-WDM MIDI devices and as WDM devices. For the legacy device, DirectMusic enumerates an MPU-401 device that represents the direct path from <I>DMusic.dll</I> to <I>IHVAudio.dll</I>. For the WDM device, DirectMusic enumerates the same MPU-401 device through a circuitous path consisting of the following sequence of components:

<OL>
	<LI><I>DMusic.dll</I> </LI>

	<LI><I>DMusic16.dll</I> </LI>

	<LI><I>MMSystem.dll</I> </LI>

	<LI><I>WDMAud.drv</I> </LI>

	<LI><I>WDMAud.sys</I> </LI>

	<LI>The vendor's miniport driver </LI>
</OL>

<P>The MIDI synthesizer that shows up in the multimedia control panel (<I>mmsys.cpl</I>) will have the same name as the WDM device.</P>

<H4>System-Supplied Port and Miniport Drivers</H4>

<P>Several system-supplied MIDI and DirectMusic miniport drivers are built into the PortCls system driver:

<UL>
	<LI>The FMSynth miniport driver provides an interface to a MIDI device that implements OPL3-style FM synthesis.</LI>

	<LI>The UART miniport driver supports a MIDI device with an MPU-401 hardware interface, but this driver is now obsolete (after Windows&nbsp;98 Gold) and is supported only for existing adapter drivers. New adapter driver code should instead use the DMusUART miniport driver (in Windows&nbsp;98&nbsp;SE and Windows&nbsp;Me, and in Windows&nbsp;2000 and later), which supercedes UART and implements a superset of its functionality.</LI>
</UL>

<P>Adapter drivers can access the system-supplied miniport drivers by calling the <A HREF="audpc-routines_4dyr.htm"><B>PcNewMiniport</B></A> function. The FMSynth and DMusUART miniport drivers are also included as sample audio drivers in the Windows DDK. By modifying the source code in these samples, hardware vendors can extend the drivers to manage their devices' proprietary features.</P>

<P>DMusUART is an example of a DirectMusic miniport driver that exposes both MIDI and DirectMusic pins, but does not support either DLS downloads or hardware sequencing. The miniport driver's DirectMusic rendering pin has a synth node (<A HREF="aud-prop_8lyr.htm">KSNODETYPE_SYNTHESIZER</A>) that supports several <A HREF="aud-prop_72nn.htm">KSPROPSETID_Synth</A> properties. The miniport driver includes itself in categories KSCATEGORY_RENDER and KSCATEGORY_CAPTURE, but not in KSCATEGORY_SYNTHESIZER (because it does not contain an <I>internal</I> synthesizer). For details, see the DMusUART sample audio driver in the Windows DDK.</P>

<P>Note that in Windows&nbsp;XP and later, the MIDI and DirectMusic port drivers use the same internal software implementation. This means that the <B>CLSID_PortMidi</B> and <B>CLSID_PortDMus</B> GUIDs are equivalent when calling <B>PcNewPort</B>. Applications written for previous versions of Windows should see no change in behavior resulting from consolidation of the MIDI and DirectMusic port drivers.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MIDI%20and%20DirectMusic%20Filters"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
