<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Data-Intersection Handlers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Data-Intersection Handlers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_data_intersection_handlers_ksg"></A>Data-Intersection Handlers</H2>

<P>This section discusses data-intersection handlers in WDM audio drivers. For a broader discussion of data-intersection handling for KS filters in general, see <A HREF="avconcep_1wvb.htm">Data Range Intersections in AVStream</A>.</P>

<P>The <A HREF="aud-design_1kiv.htm#ddk_sysaudio_system_driver_ksg">SysAudio system driver</A> constructs an audio filter graph by connecting together pairs of audio-filter pins. Before a source pin on one filter can be connected to a sink pin of another, SysAudio must negotiate a common format that the two pins can use to exchange data. The details of this negotiation are largely delegated to the data-intersection handlers that are implemented in the individual filters.</P>

<P>An adapter driver creates a filter for an audio device (WavePci, for example) by binding one of its miniport drivers to the corresponding port driver from <I>portcls.sys</I>. When connecting a KMixer source pin to the sink pin of a WavePci filter, for example, SysAudio calls the WavePci port driver's data-intersection handler to determine a common format for the two pins. The port driver always gives the miniport driver's proprietary data-intersection handler the first opportunity to determine a common format. If the proprietary handler declines this opportunity, however, the port driver's default data-intersection handler determines the format instead.</P>

<P>The port driver's default data-intersection handler is designed to deal with the most common hardware features. For simple audio devices, the default handler provides a convenient alternative to implementing a proprietary handler in the adapter driver. However, adapters with more advanced features might need proprietary handlers in order to expose the full capabilities of the hardware.</P>

<P>The remainder of this section describes some of the limitations of the port driver's default data-intersection handler and presents the techniques that are needed to design a proprietary data-intersection handler for an adapter driver. The following topics are discussed:</P>

<P class=indent1><A HREF="aud-design_0r3b.htm">Data Intersection</A></P>

<P class=indent1><A HREF="aud-design_5d7r.htm">Default Data-Intersection Handlers</A></P>

<P class=indent1><A HREF="aud-design_3axz.htm">Proprietary Data-Intersection Handlers</A></P>

<P class=indent1><A HREF="aud-design_05d3.htm">Hardware Constraints on Sample Frequency</A></P>

<P class=indent1><A HREF="aud-design_8gmf.htm">Output Buffer Size</A></P>

<P class=indent1><A HREF="aud-design_36zr.htm">Data Ranges with Discrete Values</A></P>

<P class=indent1><A HREF="aud-design_50vb.htm">Wild Cards</A></P>

<P class=indent1><A HREF="aud-design_41if.htm">Data-Range Properties</A></P>

<P class=indent1><A HREF="aud-design_4tnr.htm">KMixer Behavior</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Data-Intersection%20Handlers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
