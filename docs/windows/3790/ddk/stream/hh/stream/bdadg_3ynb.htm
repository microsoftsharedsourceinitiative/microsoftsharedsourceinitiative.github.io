<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Determining the Controlling Pin of a Node</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Determining the Controlling Pin of a Node">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_determining_the_controlling_pin_of_a_node_ksg"></A>Determining the Controlling Pin of a Node</H2>

<P>Unlike filters and pins, nodes do not have an associated file handle by which applications in Ring 3 can access them. Because nodes are internal components within a filter, they exist somewhere between the filter's input and output pins. The network provider must determine which filter pin to use, then use the pin to access a node. This filter pin is called the controlling pin for that node. To determine the controlling pin for each node in the BDA template connection list of a filter, the network provider queries the KSPROPERTY_BDA_CONTROLLING_PIN_ID property of the <A HREF="bdaref_8chf.htm">KSPROPSETID_BdaTopology</A> property set. The BDA minidriver in turn calls the <A HREF="bdaref_6yib.htm"><B>BdaPropertyGetControllingPinId</B></A> support function for each node. In this call, the minidriver passes a pointer to a <A HREF="bdaref_7ttf.htm">KSP_BDA_NODE_PIN</A> structure. This structure identifies the property request to retrieve the controlling pin for a specific node type and a pair of the filter's input and output pins. The BDA support library returns the identifier of the controlling pin for the node type. </P>

<P>A BDA minidriver does not typically intercept the KSPROPERTY_BDA_CONTROLLING_PIN_ID property. The minidriver automatically dispatches the <B>BdaPropertyGetControllingPinId</B> support function from the KSPROPSETID_BdaTopology property set. See <A HREF="bdadg_73c7.htm">Determining BDA Device Topology</A> for more information. </P>

<P>The support library is able to do all the work of determining the identifier of the controlling pin because the BDA minidriver provided the support library with a pointer to the <A HREF="bdaref_6mgj.htm">BDA_FILTER_TEMPLATE</A> structure when the BDA minidriver started operating. See <A HREF="bdadg_3fvr.htm">Starting a BDA Minidriver</A> for more information. A BDA minidriver informs the BDA support library how to determine controlling pins through information contained in BDA_FILTER_TEMPLATE. This information includes:

<UL>
	<LI>An array of connections. This array is a <A HREF="ks-struct_3fhv.htm">KSTOPOLOGY_CONNECTION</A> array that provides a representation of all the possible connections between node and pin types that can be made within a filter or between a filter and adjoining filters. See <A HREF="bdadg_5vdz.htm">Mapping Connection Topology</A> for more information on the KSTOPOLOGY_CONNECTION array. </LI>

	<LI>An array of joint values. A joint is a point in the topology where one input splits into one or more paths to different outputs, or one or more inputs join into a single output path. The value given to a joint corresponds to the index of an element in the KSTOPOLOGY_CONNECTION array. Most topologies will have only one joint. </LI>

	<LI>An array of <A HREF="bdaref_0gmr.htm">BDA_PIN_PAIRING</A> structures. These structures identify input and output pin types, the maximum number of input-type instances that can be created on the filter, and the maximum number of output-type instances that can be created on the filter. These structures also contain a pointer to the array of joint values between the input and output pins. See <A HREF="bdadg_3fvr.htm">Starting a BDA Minidriver</A> for more information on the BDA_PIN_PAIRING array.</LI>
</UL>

<P>The following figure shows how the support library determines the filter pin that controls a specific node:</P>

<P><IMG SRC="images/bdajoint.gif" ALT="" BORDER=0></P>

<P><B>Determination of controlling pin</B></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Determining%20the%20Controlling%20Pin%20of%20a%20Node"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
