<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Property Set Functions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Property Set Functions">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_property_set_functions_ks"></A>Property Set Functions</H1>

<P>This section specifies the helper functions for property sets and property set handlers. When a device object presents a property set to a client, these functions can perform some of the basic parameter validation and routing based on a property set table.</P>

<P>The following functions are provided:</P>

<P class=indent1><A HREF="ksfunc_06ur.htm"><B>KsFastPropertyHandler</B></A> </P>

<P class=indent1><A HREF="ksfunc_7sqb.htm"><B>KsPropertyHandler</B></A> </P>

<P class=indent1><A HREF="ksfunc_9yk3.htm"><B>KsPropertyHandlerWithAllocator</B></A></P>

<P class=indent1><A HREF="ksfunc_0s6r.htm"><B>KsUnserializeObjectPropertiesFromRegistry</B></A> </P>

<P>The property set handlers include <B>PFNKSHANDLER</B> and <B>PFNKSFASTHANDLER</B>, and are described in the following text.</P>

<H4>PFNKSHANDLER</H4>

<P><B>PFNKSHANDLER </B>defines the entry point for a specific handler of a property within a property set and is the type of function that is called by a general property set handler for a specific property. A pointer to the <A HREF="ks-struct_2rsj.htm"><B>KSPROPERTY_SET</B></A> to which the property belongs is then placed in the KSPROPERTY_SET_IRP_STORAGE(Irp) field.</P>

<PRE>typedef NTSTATUS (*PFNKSHANDLER)(
  IN PIRP  Irp,
  IN PKSIDENTIFIER  Request,
  IN OUT PVOID  Data
  );</PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Specifies the original IRP passed to the property handler function.</DD>

<DT><I>Request</I></DT>

<DD>Specifies an aligned copy of the property parameter.</DD>

<DT><I>Data</I></DT>

<DD>Specifies an aligned copy of the property data parameter or a place in which to return data.
</DD>
</DL>

<H4>Return Value</H4>

<P>The callback <B>PFNKSHANDLER </B>returns STATUS_SUCCESS if successful, or an error specific to the property being handled if unsuccessful. If data is being returned, it sets the Irp-&gt;IoStatus.Information field, but does not set the<I> </I>Irp-&gt;IoStatus.Status field nor does it complete the IRP. It can mark the IRP pending if it is to be completed asynchronously.</P>

<H4>PFNKSFASTHANDLER </H4>

<P><B>PFNKSFASTHANDLER </B>circumvents the creation of an IRP in order to process a request if a property set contains fast I/O implementations. If implemented, it is in addition to and not a replacement for, typical IRP handlers. These handlers must deal with unaligned data and possible access violations; they are only used when the property can be quickly processed.</P>

<PRE>typedef BOOLEAN (*PFNKSFASTHANDLER)(
  IN PFILE_OBJECT  FileObject,
  IN PKSIDENTIFIER UNALIGNED  Request,
  IN ULONG  RequestLength,
  IN OUT PVOID UNALIGNED  Data,
  IN ULONG  DataLength,
  OUT PIO_STATUS_BLOCK  IoStatus
  ); </PRE>

<H4>Parameters</H4>

<DL>
<DT><I>FileObject</I></DT>

<DD>Specifies the file object on which the request was made.</DD>

<DT><I>Request</I></DT>

<DD>Specifies the original property parameter. This will always be on FILE_LONG_ALIGNMENT, but can not be on FILE_QUAD_ALIGNMENT.</DD>

<DT><I>RequestLength</I></DT>

<DD>Specifies the length indicated by the caller of the property parameter.</DD>

<DT><I>Data</I></DT>

<DD>Specifies the original unaligned data parameter.</DD>

<DT><I>DataLength</I></DT>

<DD>Specifies the length indicated by the caller of the data parameter.</DD>

<DT><I>IoStatus</I></DT>

<DD>Specifies an aligned structure that is used to return error status and information. This information is then copied to the original I/O status structure on completion.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>PFNKSFASTHANDLER </B>returns TRUE if the call was handled. If the call was not handled, it returns FALSE and an IRP is generated to handle the request.</P>

<H4>Headers</H4>

<P>Declared in <I>ks.h</I>. Include <I>ks.h</I>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Property%20Set%20Functions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
