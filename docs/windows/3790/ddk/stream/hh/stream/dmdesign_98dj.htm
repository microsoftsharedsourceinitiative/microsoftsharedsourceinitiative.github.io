<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MIDI Transport</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MIDI Transport">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_midi_transport_ksg"></A>MIDI Transport</H4>

<P>The DirectMusic port driver, PortDMus, is involved on the front and back sides of the miniport driver's synthesizer work. PortDMus inputs a MIDI stream that consists of time-stamped MIDI data and routes the stream to the sequencer. The sequencer removes the time stamps and passes the raw MIDI messages to the miniport driver when their time stamps are due. (DLS data passes right through PortDMus to the miniport driver with no preprocessing.)</P>

<P>When miniport driver input gets converted to wave data, its output is managed by the synth sink (also called a "render sink" or "wave sink") in PortDMus.</P>

<P>PortDMus is a kernel-streaming filter with an input pin that accepts DirectMusic data from the DirectMusic user-mode component, <I>dmusic.dll</I>. PortDMus also has a wave-output pin that emits the synthesized audio stream. The synth sink manages this pin and tells the synth where in memory to write its data. This arrangement insulates the synth from the details of kernel streaming. Your DMus miniport driver needs only to deal with the details of synthesizing wave data from the input MIDI stream. PortDMus sends the wave data out to the system, and SysAudio's filter graph connects the filters to make everything flow correctly.</P>

<P><IMG SRC="images/dmportmi.gif" ALT="" BORDER=0></P>

<P><B>Flow of MIDI and DLS Data Through PortDMus Driver</B></P>

<P>As shown in the preceding diagram, MIDI data comes into the port driver (PortDMus) and, after sequencing, is passed to the miniport driver. The miniport driver converts the MIDI data to wave format, which is rendered into a buffer that is designated by another part of the PortDMus, the synth sink. Then, instead of going out to DirectSound as it does in user mode, the wave output goes to the audio hardware through the <A HREF="aud-design_1kiv.htm#ddk_kmixer_system_driver_ksg">KMixer system driver</A>. DirectSound is really just an API that exposes KMixer, and DirectSound acceleration consists of the mixer functions being accelerated in hardware instead of emulated in software by KMixer.</P>

<P>The <A HREF="aud-design_1kiv.htm#ddk_sysaudio_system_driver_ksg">SysAudio system driver</A>, which builds the audio filter graph, connects PortDMus to a piece of hardware. The synth sink portion of the PortDMus hands the data out through its wave-out pin, which SysAudio can connect to the hardware device. It pulls wave data from the miniport driver (without regard to whether it is a hardware or software synth), and handles all timing issues. Compared to user mode, the miniport driver is analogous to the synth, whereas the synth sink is just part of PortDMus.</P>

<P>If a miniport driver can provide its output back to the host, it exposes a wave pin with a data direction of KSPIN_DATAFLOW_OUT (see <A HREF="avstruct_5s4z.htm">KSPIN</A>), which SysAudio recognizes and connects to KMixer.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MIDI%20Transport"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
