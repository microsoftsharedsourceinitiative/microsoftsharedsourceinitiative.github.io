<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>AVC_FUNCTION_SEND_RESPONSE</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="AVC_FUNCTION_SEND_RESPONSE">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_avc_function_send_response_ks"></A>AVC_FUNCTION_SEND_RESPONSE</H1>

<P>The AVC_FUNCTION_SEND_RESPONSE function code is used to respond to AV/C unit and subunit requests.</P>

<H4>I/O Status Block</H4>

<P>If successful, the AV/C protocol driver may set <B>Irp-&gt;IoStatus.Status </B>to either:</P>

<P class=indent1>STATUS_SUCCESS if the response is discarded due to one or more bus resets since original request, or</P>

<P class=indent1>STATUS_PENDING if the response is successfully delivered to <I>61883.sys</I> (implies successful delivery to the request initiator).</P>

<P>Possible error return values include:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=39%>Error Status</TH>
<TH align=left width=61%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=39%>STATUS_INSUFFICIENT_RESOURCES</TD>
<TD width=61%>An internal buffer allocation failed.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>avc.h</I>. Include <I>avc.h</I>.</P>

<H4>Comments</H4>

<P>This function uses the AVC_COMMAND_IRB structure as shown below.</P>

<PRE class=syntax>typedef struct _AVC_COMMAND_IRB {
  AVC_IRB  Common;
  UCHAR  SubunitAddrFlag : 1;
  UCHAR  AlternateOpcodesFlag : 1;
  UCHAR  TimeoutFlag : 1;
  UCHAR  RetryFlag : 1;
  union {
    UCHAR  CommandType;
    UCHAR  ResponseCode;
  };
  PUCHAR  SubunitAddr;
  PUCHAR  AlternateOpcodes;
  LARGE_INTEGER  Timeout;
  UCHAR  Retries;
  UCHAR  Opcode;
  ULONG  OperandLength;
  UCHAR  Operands[MAX_AVC_OPERAND_BYTES];
  NODE_ADDRESS  NodeAddress;
  ULONG  Generation;
} AVC_COMMAND_IRB, *PAVC_COMMAND_IRB;</PRE>

<H4>AVC_COMMAND_IRB Input</H4>

<DL>
<DT><B>Common</B></DT>

<DD>The <B>Function</B> submember of this member must be set to AVC_FUNCTION_SEND_RESPONSE from the AVC_FUNCTION enumeration.</DD>

<DT><B>SubunitAddrFlag</B></DT>

<DD>Set to the value obtained from the AVC_FUNCTION_GET_REQUEST completion.</DD>

<DT><B>AlternateOpcodesFlag</B></DT>

<DD>Ignored.</DD>

<DT><B>TimeoutFlag</B></DT>

<DD>Ignored.</DD>

<DT><B>RetryFlag</B></DT>

<DD>Ignored.</DD>

<DT><B>CommandType</B></DT>

<DD>Ignored for responses.</DD>

<DT><B>ResponseCode</B></DT>

<DD>This member must be set to one of the values from the <B>AvcResponseCode</B> enumeration.</DD>

<DT><B>SubunitAddr</B></DT>

<DD>Set to the value obtained from the AVC_FUNCTION_GET_REQUEST completion.</DD>

<DT><B>AlternateOpcodes</B></DT>

<DD>Ignored.</DD>

<DT><B>Timeout</B></DT>

<DD>Ignored.</DD>

<DT><B>Retries</B></DT>

<DD>Ignored.</DD>

<DT><B>Opcode</B></DT>

<DD>This must contain the AV/C unit opcode appropriate for the response (may be different than the opcode provided in the original request).</DD>

<DT><B>OperandLength</B></DT>

<DD>Set to the number of bytes in the operand list of the response.</DD>

<DT><B>Operands</B></DT>

<DD>The operand list of the response.</DD>

<DT><B>NodeAddress</B></DT>

<DD>The node address of the source of the original request.</DD>

<DT><B>Generation</B></DT>

<DD>The generation ID obtained from the original request.
</DD>
</DL>

<P>In the context of the GUID_AVC_CLASS device interface, the AVC_FUNCTION_SEND_RESPONSE function code is used to respond only to AV/C unit requests.</P>

<P>In the case of virtual instances of <I>avc.sys</I> (that is, instances that register the GUID_VIRTUAL_AVC_CLASS device interface), the AVC_FUNCTION_SEND_RESPONSE function code is used to respond to AV/C unit <I>and</I> subunit requests.</P>

<P>If the first response uses the AVC_RESPONSE_INTERIM response code (from the <B>AvcResponseType</B> enumeration), then follow-up processing is expected. The <B>NodeAddress</B> and <B>Generation</B> members, obtained by the completion of the AVC_FUNCTION_GET_REQUEST original function, must be used in subsequent responses. In any case, the next AVC_FUNCTION_GET_REQUEST function should be submitted before returning from the initial AVC_FUNCTION_SEND_RESPONSE completion routine, so that the next unit request may be received.</P>

<P>The recommended use of this structure is to use the contents of the original request, and update the <B>Opcode</B>, <B>OperandLength</B>, and <B>Operands</B> members as appropriate for the response.</P>

<P>This must be called at IRQL &lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="avcref_4xir.htm">AVC_FUNCTION_GET_REQUEST</A>, <A HREF="avcref_25kj.htm">AvcResponseCode</A>, <A HREF="avcref_8xir.htm">AVC_FUNCTION</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: AVC_FUNCTION_SEND_RESPONSE"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
