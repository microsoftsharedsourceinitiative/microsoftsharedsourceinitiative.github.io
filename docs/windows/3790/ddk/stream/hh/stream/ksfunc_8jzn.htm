<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KsRemoveIrpFromCancelableQueue</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="KsRemoveIrpFromCancelableQueue">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_ksremoveirpfromcancelablequeue_ks"></A>KsRemoveIrpFromCancelableQueue</H3>

<P>The <B>KsRemoveIrpFromCancelableQueue</B> function pops the next noncanceled IRP from the specified queue that can be canceled and removes its cancel status. The function searches the list until an IRP is found that has a cancel routine or until the end of the list is reached. The function minimizes the use of the cancel spinlock by using the provided spinlock to synchronize access in most cases. The function may be called at IRQ level DISPATCH_LEVEL or lower.</P>

<PRE class=syntax><B>KSDDKAPI PIRP NTAPI
  KsRemoveIrpFromCancelableQueue(</B>
    <B>IN OUT PLIST_ENTRY</B>  <I>QueueHead</I><B>,</B>
    <B>IN PKSPIN_LOCK</B>  <I>SpinLock</I><B>,</B>
    <B>IN KSLIST_ENTRY_LOCATION</B>  <I>ListLocation</I><B>,</B>
    <B>IN KSIRP_REMOVAL_OPERATION</B>  <I>RemovalOperation</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>QueueHead</I></DT>

<DD>Points to the head of the queue from which to remove the IRP.</DD>

<DT><I>SpinLock</I></DT>

<DD>Points to driver’s spin lock for queue access.</DD>

<DT><I>ListLocation</I></DT>

<DD>Indicates whether this IRP should come from the beginning or end of the queue.</DD>

<DT><I>RemovalOperation</I></DT>

<DD>Specifies whether or not the IRP is removed from the list or just acquired by setting the cancel function to NULL. If it is only acquired, the IRP must be later released with <B>KsReleaseIrpOnCancelableQueue</B> or completely removed with <B>KsRemoveSpecificIrpFromCancelableQueue</B>.
</DD>
</DL>

<H4>Return Value</H4>

<P>The <B>KsRemoveIrpFromCancelableQueue</B> function returns the next noncanceled IRP on the list, or it returns NULL if none is found or if an IRP that has not already been acquired cannot be found.</P>

<H4>Headers</H4>

<P>Declared in <I>ks.h</I>. Include <I>ks.h</I>.</P>

<H4>Comments</H4>

<P>These enumerations are used in the previous parameters to control where the IRP is removed from and how.</P>

<PRE>typedef enum {
    KsListEntryTail,
    KsListEntryHead
} KSLIST_ENTRY_LOCATION;

typedef enum {
    KsAcquireOnly,
    KsAcquireAndRemove
} KSIRP_REMOVAL_OPERATION;
 </PRE>

<H4>See Also</H4>

<P><A HREF="ksfunc_9pgz.htm"><B>KsReleaseIrpOnCancelableQueue</B></A>, <A HREF="ksfunc_8zlf.htm"><B>KsRemoveSpecificIrpFromCancelableQueue</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: KsRemoveIrpFromCancelableQueue"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
