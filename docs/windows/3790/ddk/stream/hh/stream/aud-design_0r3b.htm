<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Data Intersection</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Data Intersection">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_data_intersection_ksg"></A>Data Intersection</H3>

<P>The <A HREF="aud-design_1kiv.htm#ddk_sysaudio_system_driver_ksg">SysAudio system driver</A> constructs an audio filter graph by connecting pairs of filter pins that support compatible audio data formats. SysAudio uses a technique called <I>data intersection </I>(short for data-range intersection) to negotiate a common format between two pins.</P>

<P>A <A HREF="aud-design_7ixz.htm">pin factory</A> specifies the set of formats that each pin supports as an array of data ranges, where each data range is a structure of type <A HREF="aud-prop_6p0z.htm">KSDATARANGE_AUDIO</A>. A data range specifies a general format type, which can be <A HREF="aud-prop_7v77.htm">KSDATAFORMAT_WAVEFORMATEX</A> or <A HREF="aud-prop_5d83.htm">KSDATAFORMAT_DSOUND</A>. In addition, the data range specifies a range of values for each of the following parameters:

<UL>
	<LI>Bits per sample</LI>

	<LI>Sample frequency</LI>

	<LI>Number of channels</LI>
</UL>

<P>The KSDATARANGE_AUDIO structure specifies both minimum and maximum values for the bits-per-sample and sample-frequency ranges but only a maximum for the number-of-channels range. The minimum number of channels is implicitly one.</P>

<P>The job of negotiating a common data format for two pins consists of finding two data ranges—one from each pin—that intersect each other. A pair of data ranges intersect if:

<UL>
	<LI>They support the same general wave format (KSDATAFORMAT_WAVEFORMATEX or KSDATAFORMAT_DSOUND).</LI>

	<LI>Their bits-per-sample ranges overlap.</LI>

	<LI>Their sample-frequency ranges overlap.</LI>
</UL>

<P>As mentioned previously, the KSDATAFORMAT_AUDIO structure implies a hardware model in which the minimum number of channels supported by a pin is always one. According to this model, the number-of-channels ranges for any two pins should always overlap because both pins support at least one channel. Obviously, a hardware adapter with a minimum number of channels greater than one does not conform to this model, but the adapter driver can include a proprietary data-intersection handler to deal with issues like this (see the example in <A HREF="aud-design_3axz.htm">Proprietary Data-Intersection Handlers</A>).</P>

<P>Once the handler finds a pair of intersecting data ranges for the two pins, a common data format can be selected from the region of intersection:

<UL>
	<LI>The number of bits per sample is selected from the region in which the two bits-per-sample ranges overlap.</LI>

	<LI>The sample frequency is selected from the region in which the two sample-frequency ranges overlap.</LI>

	<LI>The number of channels is selected from the region in which the two number-of-channels ranges overlap.</LI>
</UL>

<P>When negotiating a common format for an audio port driver's sink pin and the source pin of another filter (KMixer, for example), SysAudio first obtains the source pin's data-range array. SysAudio then sends a KSPROPERTY_DATA_INTERSECTION request to the sink pin and includes the source pin's data-range array with this request. The kernel-streaming layer intercepts the request and iteratively calls the port driver's data-intersection handler once for each successive element in the source pin's data-range array, beginning with the first element, until the handler succeeds in finding a data intersection.</P>

<P>With each call that SysAudio makes to the port driver's data-intersection handler, the handler first obtains the sink pin's data-range array from the miniport driver. It then iterates through the array, beginning with the first element, until it succeeds in finding an intersection between a sink-pin data range and the current source-pin data range. The handler selects a common format that lies within the intersection and outputs this format to the caller.</P>

<P>At each step in the iteration, the port driver calls the miniport driver's proprietary data-intersection handler with the two data ranges—one for each of the two pins. If at any step the proprietary handler declines to handle a data-intersection check between the two data ranges, the port driver's data-intersection handler performs the check instead.</P>

<P>To summarize, the search for an intersection between a source-pin data range and a sink-pin data range is an iterative process:

<UL>
	<LI>In the outer loop, the kernel-streaming layer iterates through successive elements in the source pin's data-range array, beginning with the first array element.</LI>

	<LI>In the inner loop, the port driver iterates through successive elements in the sink pin's data-range array, beginning with the first array element.</LI>
</UL>

<P>The search stops upon finding the first data intersection. This process tends to favor the elements toward the beginning of each pin's data-range array. When specifying an array of data ranges for a pin, an adapter driver should order the array elements by placing data ranges for preferred formats toward the beginning of the array.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Data%20Intersection"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
