<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IAllocatorMXF</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IAllocatorMXF">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Streaming&nbsp;Devices&nbsp;(Video&nbsp;and&nbsp;Audio):&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_iallocatormxf_ks"></A>IAllocatorMXF</H1>

<P>The <B>IAllocatorMXF</B> interface manages buffer storage for DirectMusic streams. This interface is implemented by the DMus port driver and exposed to the DMus miniport driver. The DMus port driver creates an <B>IAllocatorMXF</B> object and passes a pointer to this object to the DMus miniport driver's <A HREF="audmp-routines_8oqb.htm"><B>IMiniportDMus::NewStream</B></A> method. <B>IAllocatorMXF</B> inherits from the <A HREF="audmp-routines_9fw3.htm"><B>IMXF</B></A> interface.</P>

<P><B>IAllocatorMXF</B> is the interface through which the miniport driver communicates with the port driver's internal allocator, which allocates and manages the reuse of a pool of <A HREF="aud-prop_10kz.htm">DMUS_KERNEL_EVENT</A> structures. Each structure can contain a time-stamped MIDI event.</P>

<P>The allocator also abstracts the allocation of the additional memory that is needed to store large events. The <B>uData </B>member of DMUS_KERNEL_EVENT is a union that is the size of a pointer: four bytes on a 32-bit system and eight bytes on a 64-bit system. If the data is small enough to fit in that space, then <B>uData</B> will contain the actual MIDI data. If the data for that event is larger than the four- or eight-byte pointer, however, the <B>cbEvent</B> member indicates this fact and <B>uData </B>contains a pointer to a buffer instead of the actual MIDI data. This buffer is managed by the allocator and is a constant size for any port-driver implementation.</P>

<P>In addition to the methods that <B>AllocatorMXF</B> inherits from the <B>IMXF</B> interface, <B>IAllocatorMXF</B> supports the following methods:</P>

<P class=indent1><A HREF="audmp-routines_5n3n.htm"><B>IAllocatorMXF::GetMessage</B></A> </P>

<P class=indent1><A HREF="audmp-routines_5hgz.htm"><B>IAllocatorMXF::GetBufferSize</B></A> </P>

<P class=indent1><A HREF="audmp-routines_5r5f.htm"><B>IAllocatorMXF::GetBuffer</B></A> </P>

<P class=indent1><A HREF="audmp-routines_50dv.htm"><B>IAllocatorMXF::PutBuffer</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IAllocatorMXF"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
