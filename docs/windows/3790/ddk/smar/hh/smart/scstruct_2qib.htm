<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SCARD_CARD_CAPABILITIES</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="SCARD_CARD_CAPABILITIES">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Smart&nbsp;Card&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_ntstruct_scard_card_capabilities"></A>SCARD_CARD_CAPABILITIES</H1>

<P>The SCARD_CARD_CAPABILITIES structure declaration defines the data stored in the <B>CardCapabilites</B> member of the <A HREF="scstruct_50a6.htm">SMARTCARD_EXTENSION</A> structure and holds all information that is specific to the particular card that is currently in use. </P>

<PRE class=syntax>typedef struct _SCARD_CARD_CAPABILITIES{
  BOOLEAN  InversConvention;
  ULONG  etu;
  struct {
    UCHAR Buffer[64];
    UCHAR Length;
  } ATR;
  struct {
    UCHAR Buffer[16];
    UCHAR Length;
  } HistoricalChars;

  PCLOCK_RATE_CONVERSION  ClockRateConversion;
  PBIT_RATE_ADJUSTMENT  BitRateAdjustment;
  UCHAR  Fl;
  UCHAR  Dl;
  UCHAR  II;
  UCHAR  P;
  UCHAR  N;
  ULONG  GT;
  struct {
    ULONG  Supported;
    ULONG  Selected;
  } Protocol;
  struct {
    UCHAR  WI;
    ULONG  WT;
  } T0;
  struct {
    UCHAR  IFSC;
    UCHAR  CWI;
    UCHAR  BWI;
    UCHAR  EDC;
    ULONG  CWT;
    ULONG  BWT;
    ULONG  BGT;
  } T1;
  PTS_DATA PtsData;
  UCHAR Reserved[100 - sizeof(PTS_DATA)];
} SCARD_CARD_CAPABILITIES, *PSCARD_CARD_CAPABILITIES;
 </PRE>

<H4>Members</H4>

<P>The following members can be altered by the reader driver:

<DL>
<DT><B>InversConvention</B></DT>

<DD>Contains a flag that indicates that the current card uses the inverse convention. </DD>

<DT><B>etu</B></DT>

<DD>Contains the elementary time unit (etu). The etu indicates the space of transmission time occupied by a single bit of data.  </DD>

<DT><B>ATR.Buffer</B></DT>

<DD>Pointer to the buffer that receives the answer to reset (ATR) information that the smart card provides to the reader after a warm or cold reset.</DD>

<DT><B>ATR.Length</B></DT>

<DD>Contains the length of the ATR.</DD>

<DT><B>HistoricalChars.Buffer</B></DT>

<DD>Contains the historical characters. Historical characters designate general information, such as the card manufacturer, the chip inserted in the card, the masked ROM in the chip, and the life cycle of the card. For more information on historical characters, see the <I>ISO 7816-3 specification </I>and part 4 of the <I>ISO 7816 specification</I>. </DD>

<DT><B>HistoricalChars.Length</B></DT>

<DD>Indicates the length of the historical character information. </DD>
</DL>

<P>The following members must not be altered by the reader driver:

<DL>
<DT><B>ClockRateConversion</B></DT>

<DD>Contains the clock conversion rate table. Using the clock rate conversion factor, <B>F1</B>, as an index in this array yields the maximum allowable frequency. For more information on clock conversion rate, see the <I>ISO 7816-3 specification</I>. </DD>

<DT><B>BitRateAdjustment</B></DT>

<DD>Contains the bit rate adjustment table. Using the bit rate adjustment factor, <B>D1</B>, as an index into this array yields the maximum allowable bit rate. For more information on bit rate adjustment factor, see the <I>ISO 7816-3 specification</I>. </DD>

<DT><B>F1</B></DT>

<DD>Contains the clock rate conversion. This factor is used as an index into a table of maximum operating frequencies. When the card is reset, the smart card driver library uses this value to calculate a new clock frequency. </DD>

<DT><B>D1</B></DT>

<DD>Contains the bit rate adjustment. When the card is reset, the smart card driver library uses this value to calculate a new data bit rate. </DD>

<DT><B>I1</B></DT>

<DD>Contains the maximum programming current. </DD>

<DT><B>P</B></DT>

<DD>Contains the programming voltage in units of 0.1 volts. </DD>

<DT><B>N</B></DT>

<DD>Contains the extra guard time in units of the elementary time unit (etu). The etu indicates the space of transmission time occupied by a single bit of data. The guard time is the minimum space of transmission time that separates two consecutive characters. </DD>

<DT><B>GT</B></DT>

<DD>Contains the guard time, in units of microseconds (including the extra guard time). This is the minimum delay between two consecutive characters.</DD>

<DT><B>Protocol.Supported</B></DT>

<DD>Contains a bit mask of the supported protocols. </DD>

<DT><B>Protocol.Selected</B></DT>

<DD>Contains the currently-selected protocol. </DD>

<DT><B>T0.WI</B></DT>

<DD>Contains the work waiting integer for the T=0 protocol. </DD>

<DT><B>T0.WT</B></DT>

<DD>Contains the work waiting time, in microseconds, for the T=0 protocol. This is the maximum delay allowed between two consecutive characters.</DD>

<DT><B>T1.IFSC</B></DT>

<DD>Contains the size of the card's information field. </DD>

<DT><B>T1.CWI</B></DT>

<DD>Contains the character waiting integer. </DD>

<DT><B>T1.BWI</B></DT>

<DD>Contains the block waiting integer.  </DD>

<DT><B>T1.EDC</B></DT>

<DD>Contains the error detection code. </DD>

<DT><B>T1.CWT</B></DT>

<DD>Contains the character waiting time, in microseconds, for the T=1 protocol. This is the maximum permissible delay between two consecutive characters. </DD>

<DT><B>T1.BWT</B></DT>

<DD>Contains the block waiting time, in microseconds, for the T=1 protocol. This is the maximum delay between the end of a block and the start of the next block sent in the opposite direction.</DD>

<DT><B>T1.BGT</B></DT>

<DD>Contains the block guarding time, in microseconds, for the T=1 protocol. This is the minimum delay between the end of a block and the start of the next block sent in the opposite direction.</DD>

<DT><B>PtsData</B></DT>

<DD>Contains a <A HREF="scstruct_7hsx.htm">PTS_DATA</A> structure that holds all the information required to perform a PTS (protocol type selection) request for the currently inserted smart card.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>smclib.h</I>. Include <I>smclib.h</I>.</P>

<H4>Comments</H4>

<P>The SCARD_CARD_CAPABILITIES structure describes the currently-inserted smart card. If the reader driver uses the Smart Card Driver Library, <B>ATR</B> is the only member that the reader driver should fill in. The driver library will automatically update all other fields when it receives an <A HREF="scioctls_6f8s.htm">IOCTL_SMARTCARD_SET_PROTOCOL</A> request. </P>

<H4>See Also</H4>

<P><A HREF="scstruct_6j03.htm">SCARD_READER_CAPABILITIES</A>, <A HREF="scstruct_7hsx.htm">PTS_DATA</A>, <A HREF="scioctls_6f8s.htm">OCTL_SMARTCARD_SET_PROTOCOL</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: SCARD_CARD_CAPABILITIES"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
