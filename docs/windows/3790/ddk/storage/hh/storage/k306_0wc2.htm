<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DISK_GEOMETRY_EX</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DISK_GEOMETRY_EX">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_disk_geometry_ex_kr"></A>DISK_GEOMETRY_EX</H1>

<P>The DISK_GEOMETRY_EX structure is a variable-length structure composed of a <A HREF="k306_3p6a.htm">DISK_GEOMETRY</A> structure followed by a <A HREF="k306_9anm.htm">DISK_PARTITION_INFO</A> structure followed, in turn, by a <A HREF="k306_4z3m.htm">DISK_DETECTION_INFO</A> structure. </P>

<PRE class=syntax>typedef struct _DISK_GEOMETRY_EX {
  DISK_GEOMETRY  Geometry;
  LARGE_INTEGER  DiskSize;
  UCHAR  Data[1];
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Geometry</B></DT>

<DD>See <A HREF="k306_3p6a.htm">DISK_GEOMETRY</A> for a description of this member. </DD>

<DT><B>DiskSize</B></DT>

<DD>Contains the size in bytes of the disk. </DD>

<DT><B>Data</B></DT>

<DD>Pointer to a variable length area containing a <A HREF="k306_9anm.htm">DISK_PARTITION_INFO</A> structure followed by a <A HREF="k306_4z3m.htm">DISK_DETECTION_INFO</A> structure.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntddk.h</I> and <I>ntdddisk.h</I>. Include <I>ntddk.h</I> or <I>ntdddisk.h</I>. </P>

<H4>Comments</H4>

<P>DISK_GEOMETRY_EX is used in conjunction with the <A HREF="k307_08qa.htm">IOCTL_DISK_GET_DRIVE_GEOMETRY_EX</A> and the <A HREF="k307_55te.htm">IOCTL_DISK_GET_MEDIA_TYPES</A> IOCTLs, in order to retrieve information about the geometry of a physical disk (media type, number of cylinders, tracks per cylinder, sectors per track, and bytes per sector).</P>

<P>Since the partition and detect information are not at fixed locations within the DISK_GEOMETRY_EX structure, <I>htdddisk.h</I> provides two macros for accessing this information. Both macros take a pointer to a structure of type DISK_GEOMETRY_EX as an argument:</P>

<PRE>#define DiskGeometryGetPartition(Geometry)\
   ((PDISK_PARTITION_INFO)((Geometry)+1))

#define DiskGeometryGetDetect(Geometry)\
 ((PDISK_DETECTION_INFO)(((PBYTE)DiskGeometryGetPartition(Geometry) + DiskGeometryGetPartition(Geometry) -&gt; SizeOfPartitionInfo)))</PRE>

<H4>See Also</H4>

<P><A HREF="k306_3p6a.htm">DISK_GEOMETRY</A>, <A HREF="k306_9anm.htm">DISK_PARTITION_INFO</A>, <A HREF="k306_4z3m.htm">DISK_DETECTION_INFO</A>, <A HREF="k307_6awi.htm">IOCTL_DISK_GET_DRIVE_GEOMETRY</A>, <A HREF="k307_55te.htm">IOCTL_DISK_GET_MEDIA_TYPES</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DISK_GEOMETRY_EX"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
