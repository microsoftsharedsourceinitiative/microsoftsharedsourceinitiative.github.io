<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handling SRB_FUNCTION_WMI</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Handling SRB_FUNCTION_WMI">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_windows_management_instrumentation_kg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_windows_management_instrumentation_kg">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_windows_management_instrumentation_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_handling_srb_function_wmi_kg"></A>Handling SRB_FUNCTION_WMI</H2>

<P>If the HBA supports <A HREF="JavaScript:hhobj_1.Click()">Windows Management Instrumentation</A> (WMI), the port driver will send WMI requests to the miniport driver. The HBA indicates that it supports WMI by setting the WmiDataProvider field of the PORT_CONFIGURATION_INFORMATION structure to TRUE in its <B>DriverEntry</B> routine.</P>

<P>The writer of a miniport prepares the miniport to handle WMI requests as follows:

<UL>
	<LI>If the miniport exposes custom data blocks or event blocks, it should define such blocks in a MOF file and compile it as a binary resource in the miniport's binary image. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Windows Management Instrumentation</A>.</LI>

	<LI>Implement required and optional HwScsiWmi<I>Xxx</I> callback routines, as described in <A HREF="k302_49iq.htm">SCSI Miniport Driver Routines</A>.</LI>

	<LI>Handle SRB_FUNCTION_WMI.</LI>
</UL>

<P>If a miniport might pend WMI requests, its <B>DriverEntry</B> routine should request that memory be allocated for SRB extensions so the miniport can maintain request context throughout the processing of an SRB.</P>

<P>Before the miniport handles its first WMI request, it must allocate a SCSI_WMILIB_CONTEXT structure in its device extension and initialize the structure with the following:

<UL>
	<LI>The number of data and event blocks supported by the miniport, including standard blocks defined by the system in <I>wmicore.mof</I> as well as the miniport's custom blocks, if any. </LI>

	<LI>A pointer to an array of SCSIWMIGUIDREGINFO structures, one for each block supported. </LI>

	<LI>Entry points to the miniport's HwScsiWmiXxx callback routines. At a minimum, a miniport must provide entry points to an HwScsiWmiQueryReginfo routine and an HwScsiWmiQueryDataBlock routine.</LI>
</UL>

<P>A miniport is not required to take any action to register its data and event blocks other than setting the WmiDataProvider field of the PORT_CONFIGURATION_INFO structure to TRUE and implement the required HwScsiWmiQueryReginfo routine. The port driver is responsible for registering the miniport's blocks with the WMI kernel component. </P>

<P>On receipt of an SRB in which the <B>Function</B> member is set to SRB_FUNCTION_WMI, a miniport's <I>HwScsiStartIo</I> routine does the following:

<UL>
	<LI>Allocates a SCSIWMI_REQUEST_CONTEXT structure from the SRB extension if the request might pend, or from the stack if the request could never pend.</LI>

	<LI>Checks <B>Srb</B><B>–</B><B>&gt;WMIFlags</B> to determine whether the request is for the adapter or a logical unit.</LI>

	<LI>Calls <B>ScsiPortWmiDispatchFunction</B> with pointers to the miniport's SCSI_WMILIB_CONTEXT, its device extension, and the request context, and the following parameters from the SRB:
<P class=indent1><B>Srb</B><B>–</B><B>&gt;WMISubFunction</B><BR>
<B>Srb</B><B>–</B><B>&gt;DataPath</B><BR>
<B>Srb</B><B>–</B><B>&gt;DataTransferLength</B><BR>
<B>Srb</B><B>–</B><B>&gt;DataBuffer</B></P>
</LI>

	<LI>Calls <B>ScsiPortWmiPostProcess</B> when the driver has finished processing the request. If the driver does not pend the request, then <B>ScsiPortWmiPostProcess</B> would most likely be called in the callback. If the driver pends the request then <B>ScsiPortWmiPostProcess</B> should be called when the request is completed.</LI>

	<LI>Sets <B>Srb</B><B>–</B><B>&gt;DataTransferLength</B> and <B>Srb</B><B>–</B><B>&gt;SrbStatus</B> to the values returned by <B>ScsiPortWmiGetReturnSize</B> and <B>ScsiPortWmiGetReturnStatus</B>, respectively,</LI>

	<LI>Calls <B>ScsiPortNotification</B> with <B>RequestComplete</B> and again with <B>NextRequest</B> or (<B>NextLuRequest</B>). </LI>
</UL>

<P>For more information about WMI, see <A HREF="JavaScript:hhobj_3.Click()">Windows Management Instrumentation</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Handling%20SRB_FUNCTION_WMI"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
