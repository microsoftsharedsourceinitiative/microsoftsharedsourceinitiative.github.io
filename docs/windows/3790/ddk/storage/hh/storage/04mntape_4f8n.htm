<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing Tape Device Control Requests</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Processing Tape Device Control Requests">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_processing_tape_device_control_requests_kg"></A>Processing Tape Device Control Requests</H1>

<P>All tape miniclass drivers must report status using the values listed in the <A HREF="k306_6cky.htm">TAPE_STATUS</A> enumerator. However, when the tape class driver completes an I/O control request, it reports status using the equivalent NT Status Values. The following table provides a mapping between TAPE_STATUS values and their equivalent NT status values:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=47%>NT Status Value</TH>
<TH align=left width=53%>Tape Status Value</TH>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_INSUFFICIENT_RESOURCES</TD>
<TD width=53%>TAPE_STATUS_INSUFFICIENT_RESOURCES</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_NOT_IMPLEMENTED</TD>
<TD width=53%>TAPE_STATUS_NOT_IMPLEMENTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_INVALID_DEVICE_REQUEST</TD>
<TD width=53%>TAPE_STATUS_INVALID_DEVICE_REQUEST</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_INVALID_PARAMETER</TD>
<TD width=53%>TAPE_STATUS_INVALID_PARAMETER</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_VERIFY_REQUIRED</TD>
<TD width=53%>TAPE_STATUS_MEDIA_CHANGED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_BUS_RESET</TD>
<TD width=53%>TAPE_STATUS_BUS_RESET</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_SETMARK_DETECTED</TD>
<TD width=53%>TAPE_STATUS_SETMARK_DETECTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_FILEMARK_DETECTED</TD>
<TD width=53%>TAPE_STATUS_FILEMARK_DETECTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_BEGINNING_OF_MEDIA</TD>
<TD width=53%>TAPE_STATUS_BEGINNING_OF_MEDIA</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_END_OF_MEDIA</TD>
<TD width=53%>TAPE_STATUS_END_OF_MEDIA</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_BUFFER_OVERFLOW</TD>
<TD width=53%>TAPE_STATUS_BUFFER_OVERFLOW</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_NO_DATA_DETECTED</TD>
<TD width=53%>TAPE_STATUS_NO_DATA_DETECTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_EOM_OVERFLOW</TD>
<TD width=53%>TAPE_STATUS_EOM_OVERFLOW</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_NO_MEDIA</TD>
<TD width=53%>TAPE_STATUS_NO_MEDIA</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_IO_DEVICE_ERROR</TD>
<TD width=53%>TAPE_STATUS_IO_DEVICE_ERROR</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_UNRECOGNIZED_MEDIA</TD>
<TD width=53%>TAPE_STATUS_UNRECOGNIZED_MEDIA</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DEVICE_NOT_READY</TD>
<TD width=53%>TAPE_STATUS_DEVICE_NOT_READY</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_MEDIA_WRITE_PROTECTED</TD>
<TD width=53%>TAPE_STATUS_MEDIA_WRITE_PROTECTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DEVICE_DATA_ERROR</TD>
<TD width=53%>TAPE_STATUS_DEVICE_DATA_ERROR</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_NO_SUCH_DEVICE</TD>
<TD width=53%>TAPE_STATUS_NO_SUCH_DEVICE</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_INVALID_BLOCK_LENGTH</TD>
<TD width=53%>TAPE_STATUS_INVALID_BLOCK_LENGTH</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_IO_TIMEOUT</TD>
<TD width=53%>TAPE_STATUS_IO_TIMEOUT</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DEVICE_NOT_CONNECTED</TD>
<TD width=53%>TAPE_STATUS_DEVICE_NOT_CONNECTED</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DATA_OVERRUN</TD>
<TD width=53%>TAPE_STATUS_DATA_OVERRUN</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DEVICE_BUSY</TD>
<TD width=53%>TAPE_STATUS_DEVICE_BUSY</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_DEVICE_REQUIRES_CLEANING</TD>
<TD width=53%>TAPE_STATUS_REQUIRES_CLEANING</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STATUS_CLEANER_CARTRIDGE_INSTALLED</TD>
<TD width=53%>TAPE_STATUS_CLEANER_CARTRIDGE_INSTALLED</TD>
</TR>
</TABLE><BR>

<P>Whenever the class driver must call a miniclass routine more than once to complete a request, the miniclass driver uses the return status to indicate whether the request is complete or whether the routine should be called again. The tape class driver maintains a zero-based count of the number of times that it has called the miniclass routine for a given request and passes that count to the routine as the <I>CallNumber</I> parameter. </P>

<P>A miniclass routine returns one of the following status values to indicate that the class driver should call the routine again:

<UL>
	<LI>TAPE_STATUS_SEND_SRB_AND_CALLBACK
<P>This return value directs the tape class driver to send the SRB to the device. A tape miniclass routine usually returns this status after filling in the SRB passed by the tape class driver. If the operation is successful, the class driver increments <I>CallNumber</I> and calls the miniclass routine again. If the SRB fails, the class driver calls the miniclass routine again depending on the value of <I>RetryFlags</I>.
</LI>

	<LI>TAPE_STATUS_CHECK_TEST_UNIT_READY
<P>This return value directs the tape class driver to create an SRB for the TEST UNIT READY command and to send the SRB to the device. 
</LI>

	<LI>TAPE_STATUS_CALLBACK
<P>This return value directs the tape class driver to increment <I>CallNumber</I> without sending an SRB to the device. This streamlines case statements that support several devices. For example, suppose that most of the tape devices supported by a particular miniclass driver require three SRBs to process a certain request. One device, however, requires only the first and third SRBs. For the unique device the tape miniclass driver can return TAPE_STATUS_CALLBACK to skip the second SRB, allowing the driver to use the same code to process the request for all the devices it supports.
</LI>

	<LI>TAPE_STATUS_REQUIRES_CLEANING 
<P>If a tape device supports cleaning notification in sense data rather than as an error, a tape miniclass driver's TapeMiniGetStatus routine returns this status to indicate to the tape class driver that the drive needs cleaning. 
</LI>
</UL>

<P>When the miniclass routine finishes processing a request—either successfully or with an error after retries are exhausted—it returns to the tape class driver with a TAPE_STATUS_<I>XXX</I> that indicates the success or failure of the request.</P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Processing%20Tape%20Device%20Control%20Requests"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
