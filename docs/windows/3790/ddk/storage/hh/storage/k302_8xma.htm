<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>HwScsiAdapterControl</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="HwScsiAdapterControl">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Storage&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_hwscsiadaptercontrol_kr"></A><I>HwScsiAdapterControl</I></H1>

<P>A miniport driver's <I>HwScsiAdapterControl</I> routine is called to perform synchronous operations to control the state or behavior of an HBA, such as stopping or restarting the HBA for power management.</P>

<PRE class=syntax><B>SCSI_ADAPTER_CONTROL_STATUS
  HwScsiAdapterControl(
    IN PVOID </B> <I>HwDeviceExtension</I><B>,</B>
<B>    IN SCSI_ADAPTER_CONTROL_TYPE</B>  <I>ControlType</I><B>,</B> 
<B>    IN PVOID</B>  <I>Parameters</I> 
<B>    )</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>HwDeviceExtension</I></DT>

<DD>Points to the miniport driver's per-HBA storage area.</DD>

<DT><I>ControlType</I></DT>

<DD>Specifies one of the following adapter-control operations.

<DL>
<DT><B>ScsiQuerySupportedControlTypes</B></DT>

<DD>Reports the adapter-control operations implemented by the miniport. The port driver calls <I>HwScsiAdapterControl</I> with this control type after the HBA has been initialized but before the first I/O. The miniport fills in the SCSI_SUPPORTED_CONTROL_TYPE_LIST structure at <I>Parameters</I> with the operations it supports. After <I>HwScsiAdapterControl</I> returns from this call, the port driver calls the miniport's <I>HwScsiAdapterControl</I> only for supported operations.</DD>

<DT><B>ScsiStopAdapter</B></DT>

<DD>Shuts down the HBA. The port driver calls <I>HwScsiAdapterControl</I> with this control type when the HBA has been removed from the system, stopped for resource reconfiguration, shut down for power management, or otherwise reconfigured or disabled. The port driver ensures that there are no uncompleted requests and issues an SRB_FUNCTION_FLUSH request to the miniport before calling this routine. 

<P>The miniport disables interrupts on its HBA, halts all processing, (including background processing not subject to interrupts or processing of which the port driver is unaware, such as reconstructing fault-tolerant volumes), flushes any remaining cached data to persistent storage, and puts the HBA into a state from which it can be reinitialized or restarted. 


<P>The miniport should not free its resources when stopping its HBA. If the HBA was removed or stopped for PnP resource reconfiguration, the port driver releases resources on behalf of the miniport driver. If the HBA is shut down for power management, the miniport's resources are preserved so the HBA can be restarted. 


<P>After <I>HwScsiAdapterControl</I> returns from stopping the HBA, any data structures allocated on behalf of the miniport for the HBA should be considered invalid until the miniport is asked to restart. 


<P>Note that the port driver might call <I>HwScsiAdapterControl</I> to stop the adapter after the HBA has already been physically removed from the system, so the miniport's <I>HwScsiAdapterControl</I> routine must not perform any operations that require the HBA to be physically present while it is stopping the HBA.


<P>The miniport driver is not called again for the HBA until either the PnP Manager requests that the HBA be started, in which case the port driver (re)initializes by calling its <I>HwScsiFindAdapter</I> and <I>HwScsiInitialize</I> routines, or an HBA that was stopped for power management is powered up, in which case the port driver calls the miniport's <I>HwScsiAdapterControl</I> routine with <B>ScsiRestartAdapter</B> or, if the miniport does not implement that control type, repeats the initialization sequence for the HBA. 
</DD>

<DT><B>ScsiRestartAdapter</B></DT>

<DD>Reinitializes an HBA. The port driver calls <I>HwScsiAdapterControl</I> with this control type to power up an HBA that was shut down for power management. All resources previously assigned to the miniport are still available, and its device extension and logical unit extensions, if any, are intact.

<P>The miniport performs the same operations as in its <I>HwScsiInitialize</I> routine, such as setting up the HBA's registers and its initial state, if any.


<P>The miniport must not call routines that can only be called from <I>HwScsiFindAdapter</I> or from <I>HwScsiAdapterControl</I> when the control type is ScsiSetRunningConfig, such as <B>ScsiPortGetBusData</B> and <B>ScsiPortSetBusDataByOffset</B>. If the miniport must call such routines to restart its HBA, it must also implement <B>ScsiSetRunningConfig</B>.


<P>If the miniport does not implement <B>ScsiRestartAdapter</B>, the port driver calls the miniport's <I>HwScsiFindAdapter</I> and <I>HwScsiInitialize</I> routines. However, because such routines might do detection work unnecessary for restarting the HBA, such a miniport will not power up its HBA as quickly as a miniport that implements <B>ScsiRestartAdapter</B>. 
</DD>

<DT><B>ScsiSetBootConfig</B></DT>

<DD>Restores any settings on an HBA that the BIOS might need to reboot. The port driver calls <I>HwScsiAdapterControl</I> with this control type after calling this routine with <B>ScsiStopAdapter</B>. 

<P>A miniport must implement <B>ScsiSetBootConfig</B> if it must call <B>ScsiPortGetBusData</B> or <B>ScsiPortSetBusDataByOffset</B> before the system will be able to reboot. 
</DD>

<DT><B>ScsiSetRunningConfig</B></DT>

<DD>Restores any settings on an HBA that the miniport might need to control the HBA while the system is running. The port driver calls <I>HwScsiAdapterControl</I> with <B>ScsiSetRunningConfig</B> before calling this routine with <B>ScsiRestartAdapter</B> if the miniport implements that control type.

<P>The HBA's interrupt is not yet connected when the port driver makes this call, so the miniport must take care not to generate an interrupt.


<P>A miniport must implement <B>ScsiSetRunningConfig </B>if it must call <B>ScsiPortGetBusData</B> and <B>ScsiPortSetBusDataByOffset</B> to restore the appropriate running configuration to the HBA before it can be restarted.
</DD>
</DL>
</DD>

<DT><I>Parameters</I></DT>

<DD>If <I>ControlType</I> is <B>ScsiStopAdapter</B>, <B>ScsiSetBootConfig</B>, <B>ScsiSetRunningConfig</B>, or <B>ScsiRestartAdapter</B>, <I>Parameters</I> is NULL. 

<P>If <I>ControlType</I> is <B>ScsiQuerySupportedControlTypes</B>, <I>Parameters </I>points to a caller-allocated SCSI_SUPPORTED_CONTROL_TYPE_LIST structure, which is defined as follows:


<PRE>typedef struct _SCSI_SUPPORTED_CONTROL_TYPE_LIST { 
    IN ULONG MaxControlType;
    OUT BOOLEAN SupportedTypeList[0];
} SCSI_SUPPORTED_CONTROL_TYPE_LIST, *PSCSI_SUPPORTED_CONTROL_TYPE_LIST;</PRE>


<DL>
<DT><B>MaxControlType</B></DT>

<DD>Specifies the number of entries in the <B>SupportedTypeList</B> array.</DD>

<DT><B>SupportedTypeList</B></DT>

<DD>Points to a caller-allocated array of BOOLEAN values that indicate the control types implemented by the miniport driver. The port driver initializes each element to FALSE. 

<P>The miniport sets the corresponding array element to TRUE for each operation it supports:


<P><B>SupportedTypeList[ScsiQuerySupportedControlTypes]<BR>
SupportedTypeList[ScsiStopAdapter]<BR>
SupportedTypeList[ScsiRestartAdapter]<BR>
SupportedTypeList[ScsiSetBootConfig] <BR>
SupportedTypeList[ScsiSetRunningConfig]</B>


<P>The miniport must not set any element beyond <B>SupportedTypeList[MaxControlType </B><B>–</B><B> 1]</B>.

</DD>
</DL>
</DD>
</DL>

<H4>Return Value</H4>

<P>Depending on the control type, <I>HwScsiAdapterControl</I> might return one of the following SCSI_ADAPTER_CONTROL_STATUS values:

<DL>
<DT><B>ScsiAdapterControlSuccess</B></DT>

<DD>The miniport completed the requested operation successfully. Currently, <I>HwScsiAdapterControl</I> must return this value for all control types.</DD>

<DT><B>ScsiAdapterControlUnsuccessful</B></DT>

<DD>Reserved for future use.
</DD>
</DL>

<H4>Headers</H4>

<P>Include <I>miniport.h</I> and <I>scsi.h</I>. </P>

<H4>Comments</H4>

<P>A PnP miniport must implement <I>HwScsiAdapterControl</I> for PnP and Power Management operations. At a minimum, a miniport's <I>HwScsiAdapterControl</I> routine must support <B>ScsiQuerySupportedControlTypes</B> and <B>ScsiStopAdapter</B>.</P>

<P>A legacy (non-PnP) miniport should set the <I>HwScsiAdapterControl</I> entry point to NULL in its HW_INITIALIZATION_DATA structure. PnP and power management are effectively disabled for an HBA controlled by a legacy miniport. </P>

<P>The name <I>HwScsiFindAdapter</I> is just a placeholder. The actual prototype of this routine is defined in <I>srb.h</I> as follows:</P>

<PRE>typedef
SCSI_ADAPTER_CONTROL_STATUS
(*PHW_ADAPTER_CONTROL) (
  IN PVOID  DeviceExtension,
  IN SCSI_ADAPTER_CONTROL_TYPE  ControlType,
  IN PVOID  Parameters
  );</PRE>

<P>For more information on the <I>HwScsiFindAdapter</I> routine, see <A HREF="02mnport_9huv.htm">SCSI Miniport Driver’s HwScsiFindAdapter Routine</A>. </P>

<H4>See Also</H4>

<P><A HREF="k306_5s1e.htm">HW_INITIALIZATION_DATA</A>, <A HREF="k302_9vsi.htm"><I>HwScsiFindAdapter</I></A>, <A HREF="k302_9iya.htm"><I>HwScsiInitialize</I></A>, <A HREF="k301_3mia.htm"><B>ScsiPortGetBusData</B></A>, <A HREF="k301_2yb6.htm"><B>ScsiPortSetBusDataByOffset</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: HwScsiAdapterControl"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
