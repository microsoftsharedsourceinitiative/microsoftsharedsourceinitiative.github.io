<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FS_DirectDiskIO</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4376"></A>FS_DirectDiskIO</H3>

<PRE>FS_DirectDiskIO(
 PIOREQ pir
 )
 </PRE>

<P>Absolute disk read and write operations are performed through <B>FS_DirectDiskIO</B>. This supports the DOS functions: INT 25h and INT 26h. 

<DL>
<DT><I>ir_rh</I> </DT>

<DD>Supplies handle to resource. </DD>

<DT><I>ir_flags</I> </DT>

<DD>Supplies flags for the type of operation. 

<TABLE>

<TR VALIGN="top">
<TD width=36%><B>Operation Type Flags:</B> </TD>
<TD width=64%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=36%>Value </TH>
<TH align=left width=64%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=36%>DIO_ABS_READ_SECTORS </TD>
<TD width=64%>Absolute disk read operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DIO_ABS_WRITE_SECTORS </TD>
<TD width=64%>Absolute disk write operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DIO_SET_LOCK_CACHE_STATE </TD>
<TD width=64%>Set the cache state while a volume lock is in progress. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_user</I> </DT>

<DD>Supplies user ID for this request. </DD>

<DT><I>ir_pid</I> </DT>

<DD>Supplies process ID for this request. 

<TABLE>

<TR VALIGN="top">
<TD width=36%><B>Operation Type </B>DIO_ABS_READ_SECTORS and DIO_ABS_WRITE_SECTOR<B>S:</B> </TD>
<TD width=64%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=36%><I>ir_pos</I> </TD>
<TD width=64%>Supplies the absolute sector number the read or write operation starts at. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%><I>ir_length</I> </TD>
<TD width=64%>Supplies the number of sectors to be read or written. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%><I>ir_data</I> </TD>
<TD width=64%>Supplies a pointer to the buffer the data is to be read from or written into. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=36%><B>Operation Type </B>DIO_SET_LOCK_CACHE_STATE: </TD>
<TD width=64%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=36%><I>ir_options</I> </TD>
<TD width=64%>Supplies options for setting the cache state while a volume lock is in progress. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=36%><B>Cache State Values:</B> </TD>
<TD width=64%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=36%>Value </TH>
<TH align=left width=64%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=36%>DLC_LEVEL0LOCK_TAKEN </TD>
<TD width=64%>Set the cache state for a Level 0 lock type. The cache should be invalidated when a Level 0 lock is taken and the cache must remain in the writethrough mode for the duration of this lock until the FSD is called with the DLC_LEVEL0LOCK_RELEASED option. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DLC_LEVEL0LOCK_RELEASED </TD>
<TD width=64%>Revert the cache state to what it was before the lock was taken. The FSD should store the previous cache state so that it can restore it when the lock is released. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DLC_LEVEL3LOCK_TAKEN </TD>
<TD width=64%>Set the cache state for a Level 3 lock type. The cache should be invalidated when a Level 0 lock is taken and the cache must remain in the writethrough mode for the duration of this lock until the FSD is called with the DLC_LEVEL3LOCK_RELEASED option. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DLC_LEVEL3LOCK_RELEASED </TD>
<TD width=64%>Revert the cache state to what it was before the lock was taken. The FSD should store the previous cache state so that it can restore it when the lock is released. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%><I>ir_error</I> </TD>
<TD width=66%>Returns status of the operation (zero if no error, the error code otherwise). </TD>
</TR>
</TABLE><BR>


</DD>
</DL>

<P>The operation to set the cache state while the volume lock is in progress is part of the support necessary for exclusive access support. Volume locking is described in detail in the volume locking specification. Any FSD that does not support direct disk operations should fail this function, for example, network FSDs. The IFS does not explicitly fail these calls on any particular kind of FSD. In order to access FAT32 volumes, the ABS_EXTENDED_DASDIO bit must be set in ir_options or the request will fail.  This bit is defined in the IFS.H header file found in the Windows 98 DDK.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FS_DirectDiskIO"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
