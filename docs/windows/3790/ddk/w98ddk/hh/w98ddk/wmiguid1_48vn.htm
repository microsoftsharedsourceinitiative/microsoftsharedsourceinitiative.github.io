<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Generating Events</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_wmiguid1_generating_events"></A>Generating Events</H2>

<P>An event is considered to be a query result pushed by the data provider to any data consumer who has registered to accept it. Any data block can be an event; WMI makes no distinction between data blocks and event blocks. Events should be used for exceptional events in the life of a device, because there are a limited number of events that can be queued at one time. </P>

<P>Event items should be defined as small-sized data types because there is a fixed size limit of 1Kb for the entire WNODE_EVENT_ITEM containing the generated event, although this can be overridden using the registry. For very large notifications, a WNODE_EVENT_REFERENCE can be fired. WNODE_EVENT_REFERENCE specifies a single instance of a data block that is queried by WMI to obtain the actual event data. Also, there is no guarantee for the timeliness for delivery of events to the user-mode data consumer. Events may only be fired at a level equal to or less than DPC level. </P>

<P>Drivers should be designed so their events are off by default. When a data consumer registers for an event associated with an event item within a data block, it will register with WMI and WMI will send an IRP_MN_ENABLE_EVENTS containing the <B>DataPath</B> of the GUID that represents the event. When all data consumers have unregistered for the event, WMI will send an IRP_MN_DISABLE_EVENTS with the <B>DataPath</B> of the data item that is the event to disable it. WMI will manage any reference counting issues in the case that multiple data consumers register for event items from the same GUID.</P>

<P>Events are fired in a <B>WNODE_EVENT_ITEM</B> data structure that can contain WNODE_ALL_DATA, WNODE_SINGLE_INSTANCE, or WNODE_SINGLE_ITEM. A device driver can fire an event by calling the kernel-mode <B>IoWMIWriteEvent</B> function at PASSIVE_LEVEL or DPC_LEVEL. This function queues the WNODE_EVENT_ITEM passed for delivery to all user-mode agents that have registered for the event. A data provider should only need to fire the same event once.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Generating%20Events"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
