<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>_HeapReAllocate</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1238"></A>_HeapReAllocate</H1>

<PRE>//C syntax
#include &lt;vmm.h&gt;

ULONG EXTERNAL _HeapReAllocate(ULONG hAddress, ULONG nbytes, ULONG flags);

; assembler syntax
include vmm.inc

VMMCall _HeapReAllocate, &lt;hAddress, nbytes, flags&gt;

or      eax, eax        ; zero if error
jz      error
mov     [Address], eax  ; address of reallocated block
 </PRE>

<P>Reallocates or reinitializes a memory block in the system heap. Uses EAX, ECX, EDX, and Flags. </P>

<P>Returns the address of the reallocated block in the EAX register if successful, zero otherwise. 

<DL>
<DT><I>hAddress</I></DT>

<DD>Address of the memory block. This address must have been previously returned by the <B>_HeapAllocate</B> or <B>_HeapReAllocate</B> service. </DD>

<DT><I>nbytes</I></DT>

<DD>New size, in bytes, of the block. Must not be zero. </DD>

<DT><I>flags</I></DT>

<DD>Allocation flags. Can be zero or more of these values: 

<TABLE>

<TR VALIGN="top">
<TH align=left width=24%>Value </TH>
<TH align=left width=76%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=24%>HEAPNOCOPY </TD>
<TD width=76%>Does not preserve contents of existing bytes. If this value is <I>not</I> given, the service preserves the contents of existing bytes by copying the contents of the old memory block into the new block. </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>HEAPZEROINIT </TD>
<TD width=76%>Fills any new bytes in the memory block with zeros. All existing bytes remain unchanged. </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>HEAPZEROREINIT </TD>
<TD width=76%>Fills all bytes, new and existing, with zeros. </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved. 

</DD>
</DL>

<P>If this service is successful, it frees the old memory block, making the old address invalid. Virtual devices must <I>never</I> rely on the old and new addresses being the same. If this service returns an error, the old memory block is not freed and the old address remains valid. </P>

<P>Since the system offers no protection on the heap, virtual devices must provide their own protection to prevent overrunning allocated blocks. </P>

<P>The system offers no compaction on the heap; all memory blocks on the heap are fixed. Virtual devices must not use the heap in such a way as to severely fragment it. </P>

<P>Although the system can usually recover from an attempt to reallocate an invalid address, you should not rely on this. </P>

<H4>See Also</H4>

<P><B>_HeapAllocate</B>, <B>_HeapFree</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: _HeapReAllocate"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
