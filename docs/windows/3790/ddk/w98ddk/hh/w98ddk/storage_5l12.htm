<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Input and Output Requests</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4066"></A>Input and Output Requests</H2>

<P>File system drivers and other clients use I/O requests to direct a device to carry out a given I/O operation. To submit a request, a client fills the members of an <B>IOR</B> structure (part of an <B>IOP</B> structure) and passes the address of the <B>IOR</B> to the <B>IOS_SendCommand</B> service. The IOS passes the <B>IOR</B> to the various drivers in the calldown chain. The IOS and device drivers update this structure as the request progresses through the chain. There are the following I/O requests: </P>

<TABLE>

<TR VALIGN="top">
<TD width=40%>IOR_ABORT_QUEUE (0x24) </TD>
<TD width=60%>Cancels queued requests. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_CANCEL (0x03) </TD>
<TD width=60%>Cancels a previously issued command. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_CLEAR_QUEUE (0x10) </TD>
<TD width=60%>Requests to clear NEC queues for device. Returns when queue is clear. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_COMPUTE_GEOM (0x0C) </TD>
<TD width=60%>Determine device geometry information. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_DOS_RESET (0x11) </TD>
<TD width=60%>Corresponds to INT 13h reset. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_EJECT_MEDIA (0x08) </TD>
<TD width=60%>Ejects media. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_FLUSH_DRIVE (0x27) </TD>
<TD width=60%>Flushes dirty data. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_FLUSH_DRIVE_AND_DISCARD (0x28) </TD>
<TD width=60%>Flushes dirty data and discards queued data. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_FORMAT (0x0E) </TD>
<TD width=60%>Formats a track. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_FSD_EXT (0x29) </TD>
<TD width=60%>Sends private data to FSD layer. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_GEN_IOCTL (0x0D) </TD>
<TD width=60%>Carries out a generic I/O control function. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_LOAD_MEDIA (0x07) </TD>
<TD width=60%>Loads media. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_LOCK_MEDIA (0x09) </TD>
<TD width=60%>Locks media. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_MEDIA_CHECK (0x05) </TD>
<TD width=60%>Gets disk change status. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_MEDIA_CHECK_RESET (0x06) </TD>
<TD width=60%>Gets and resets disk change status. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_READ (0x00) </TD>
<TD width=60%>Reads data from device. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_REQUEST_SENSE (0x0B) </TD>
<TD width=60%>Returns drive sense data. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_RESTART_QUEUE (0x23) </TD>
<TD width=60%>Restarts the queue in the same manner as the IOS queuing services. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_SCSI_PASS_THROUGH (0x0F) </TD>
<TD width=60%>Passes a SCSI command through to device. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_SCSI_REQUEST (0x12) </TD>
<TD width=60%>Request for SCSI device. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_SET_WRITE_STATUS (0x22) </TD>
<TD width=60%>Sets or clears write protect status.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_SPIN_DOWN (0x25) </TD>
<TD width=60%>Directs the drive to stop spinning. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_SPIN_UP (0x26) </TD>
<TD width=60%>Directs the drive to start spinning. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_UNLOCK_MEDIA (0x0A) </TD>
<TD width=60%>Unlocks media. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_VERIFY (0x02) </TD>
<TD width=60%>Verifies data on device. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_WRITE (0x01) </TD>
<TD width=60%>Writes data to device. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>IOR_WRITEV (0x04) </TD>
<TD width=60%>Writes and verifies data to device. </TD>
</TR>
</TABLE><BR>

<P>To generate a read request, for example, the client allocates an <B>IOP</B> using the ISP_CREATE_IOP service, fills the <B>IOR</B> with the data for the request, and passes the address of the <B>IOR</B> to the <B>IOS_SendCommand</B> service. The IOS passes the <B>IOR</B> to the volume tracker, which makes sure the correct media is loaded. The volume tracker passes the <B>IOR</B> to the disk TSD, which converts the volume relative address to a media relative address. The disk TSD passes the <B>IOR</B> to the port driver, which initiates a read operation at the device and returns control to the disk TSD. Throughout this process each driver that receives the <B>IOR</B> takes ownership of it. The port driver retains ownership of the <B>IOR</B>. </P>

<P>A client typically allocates the <B>IOP</B> by using the ISP_CREATE_IOP service. This ensures that the IOS can provide request time-out support and other services. The <B>IOR</B> is the only portion of the <B>IOP</B> that the client may access with the exception of the first 32-bit field of the <B>IOP</B>, which contains the 32-bit physical address of the <B>IOP</B>. The correct size for the <B>IOP</B> is contained in the <B>VRP_max_req_size</B> member in the <B>VRP</B> structure. The correct offset into the <B>IOP</B> of the <B>IOR</B> is the sum of the <B>VRP_delta_to_ior</B> member and the <B>IOP</B> address. A client can retrieve the <B>VRP</B> for a given device by using the IRS_GET_VRP function of the <B>IOS_Requestor_Service</B> service. </P>

<P>When the IOS receives an <B>IOP</B>, it sets the following <B>IOP</B> members: </P>

<TABLE>

<TR VALIGN="top">
<TD width=25%><B>IOP_physical_dcb</B> </TD>
<TD width=75%>Address of the physical <B>DCB</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>IOP_original_dcb</B> </TD>
<TD width=75%>Address of the logical <B>DCB</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>IOP_timer</B> </TD>
<TD width=75%>Time-out value to 7.5 seconds </TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>IOP_calldown_ptr</B> </TD>
<TD width=75%>Address of the first layer in the calldown chain </TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>IOP_callback_ptr</B> </TD>
<TD width=75%>Address of <B>IOS_iop_callback </B>callback routine </TD>
</TR>
</TABLE><BR>

<P>After setting these members, the IOS calls the first layer in the calldown chain, typically the volume tracking driver. When the request is called back to IOS at <B>IOS_iop_callback</B>, contents of <B>IOR_req_req_handle</B> is placed on the stack, and <B>IOR_callback</B> is called. </P>

<H4>See Also</H4>

<P><B>IOP</B>, <B>IOR</B>, <B>IOS_SendCommand</B>, <B>VRP</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Input%20and%20Output%20Requests"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
