<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Introduction</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_wmiguid1_introduction"></A>Introduction</H1>

<P>Windows Management Instrumentation (WMI) is a middleware layer that allows measurement and instrumentation information to be collected from kernel mode data providers and then to be provided to local or remote user-mode data consumers through the use of a common set of interfaces (Web-based enterprise management called WBEM). WMI is a data-independent pipeline between the data consumer and the data provider and makes no assumptions about the format of the data sets. </P>

<P>WMI allows both a push and pull model for data delivery; data consumers can poll or register for events generated by the data provider. Data consumers are user-mode applications or services, while data providers can be kernel-mode drivers. This documentation describes what a WDM-compliant device driver needs to do in order to provide data and events to WMI.</P>

<P>WMI provides mechanisms for:

<UL>
	<LI>Publishing instrumentation data</LI>

	<LI>Configuring device settings
<P>WMI allows method execution and setting of data blocks in the device driver. For example, an IR device driver can define a data block that has information about how the IR device is configured. The IR device can be reconfigured by performing a WMI set or executing a WMI method.
</LI>

	<LI>Publishing custom data</LI>

	<LI>Event notification</LI>

	<LI>Efficient data collection
<P>WMI provides a mechanism for a driver to efficiently collect data that is expensive to collect. Driver writers who are implementing WMI within their code can decide which data is expensive to collect. By default, data blocks that are marked as expensive to collect are not enabled for collection. When a management application accesses one of these data blocks, WMI signals the driver to start collecting data. When the last management application accessing an expensive data block closes access to the data block, WMI signals the driver to stop collecting data. 
</LI>

	<LI>Data security
<P>WMI provides a security mechanism for the data. An administrator can configure security such that certain data generated through WMI is only available to certain users or groups. 
</LI>
</UL>

<P>The WMI architecture allows the device driver flexibility in defining and naming the data to be provided. However, this flexibility imposes some complexity. To simplify the task of the driver writer, WMILIB provides support routines for handling most of the WMI functionality. Most devices do not need the complete flexibility of writing directly to WMI and can use WMILIB instead.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Introduction"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
