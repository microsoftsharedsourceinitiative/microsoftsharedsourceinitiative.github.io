<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DIB_Brush</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_621"></A>DIB_Brush</H3>

<P>Specifies the attributes, mask, and bits of brushes for the DIB engine. There are separate structures for 1bpp, 4bpp, 8bpp, 16bpp, 24bpp, and 32bpp displays. </P>

<PRE>typedef struct {
    BYTE  dp1BrushFlags;
    BYTE  dp1BrushBpp;
    WORD  dp1BrushStyle;
    DWORD dp1FgColor;
    WORD  dp1Hatch;
    DWORD dp1BgColor;
    BYTE dp1BrushMono [BRUSHSIZE*4];
    BYTE dp1BrushMask [BRUSHSIZE*4];
    BYTE dp1BrushBits [BRUSHSIZE*4];
} DIB_Brush1;

typedef struct {
    BYTE  dp4BrushFlags;
    BYTE  dp4BrushBpp;
    WORD  dp4BrushStyle;
    DWORD dp4FgColor;
    WORD  dp4Hatch;
    DWORD dp4BgColor;
    BYTE dp4BrushMono [BRUSHSIZE*4];
    BYTE dp4BrushMask [BRUSHSIZE*4];
    BYTE dp4BrushBits [BRUSHSIZE*4];
} DIB_Brush4;

typedef struct {
    BYTE  dp8BrushFlags;
    BYTE  dp8BrushBpp;
    WORD  dp8BrushStyle;
    DWORD dp8FgColor;
    WORD  dp8Hatch;
    DWORD dp8BgColor;
    BYTE dp8BrushMono [BRUSHSIZE*4];
    BYTE dp8BrushMask [BRUSHSIZE*4];
    BYTE dp8BrushBits [BRUSHSIZE*8];
} DIB_Brush8;

typedef struct {
    BYTE  dp16BrushFlags;
    BYTE  dp16BrushBpp;
    WORD  dp16BrushStyle;
    DWORD dp16FgColor;
    WORD  dp16Hatch;
    DWORD dp16BgColor;
    BYTE dp16BrushMono [BRUSHSIZE*4];
    BYTE dp16BrushMask [BRUSHSIZE*4];
    BYTE dp16BrushBits [BRUSHSIZE*16];
} DIB_Brush16;

typedef struct {
    BYTE  dp24BrushFlags;
    BYTE  dp24BrushBpp;
    WORD  dp24BrushStyle;
    DWORD dp24FgColor;
    WORD  dp24Hatch;
    DWORD dp24BgColor;
    BYTE dp24BrushMono [BRUSHSIZE*4];
    BYTE dp24BrushMask [BRUSHSIZE*4];
    BYTE dp24BrushBits [BRUSHSIZE*24];
} DIB_Brush24;

typedef struct {
    BYTE  dp32BrushFlags;
    BYTE  dp32BrushBpp;
    WORD  dp32BrushStyle;
    DWORD dp32FgColor;
    WORD  dp32Hatch;
    DWORD dp32BgColor;
    BYTE dp32BrushMono [BRUSHSIZE*4];
    BYTE dp32BrushMask [BRUSHSIZE*4];
    BYTE dp32BrushBits [BRUSHSIZE*32];
} DIB_Brush32;
 </PRE>

<H4>Members</H4>

<DL>
<DT><B>dpxBrushFlags</B> </DT>

<DD>Flags describing the brush. Must be one of the following. 

<TABLE>

<TR VALIGN="top">
<TD width=21%>COLORSOLID </TD>
<TD width=79%>Color part is solid. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>MONOSOLID </TD>
<TD width=79%>Monochrome part is solid. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>PATTERNMONO </TD>
<TD width=79%>Pattern brush came from a monochrome bitmap. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>MONOVALID </TD>
<TD width=79%>Monochrome part is valid. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>MASKVALID </TD>
<TD width=79%>Transparency mask part is valid. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>PRIVATEDATA </TD>
<TD width=79%>Vendor specific bit for pens and brushes. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>dpxBrushBpp</B> </DT>

<DD>The number of bits per pixel. Must be 1, 4, 8, 16, 24, or 32. </DD>

<DT><B>dpxBrushStyle</B> </DT>

<DD>Style of the brush. Must be one of the following. 

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Value </TH>
<TH align=left width=75%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_SOLID (0) </TD>
<TD width=75%>Solid brush. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_NULL (1) </TD>
<TD width=75%>Same as BS_HOLLOW. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_HOLLOW (1) </TD>
<TD width=75%>Hollow brush. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_HATCHED (2) </TD>
<TD width=75%>Hatched brush. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_PATTERN (3) </TD>
<TD width=75%>Pattern brush defined by a memory bitmap. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_INDEXED (4) </TD>
<TD width=75%>Indexed brush. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_DIBPATTERN (5) </TD>
<TD width=75%>A pattern brush defined by a device-independent bitmap (DIB) specification. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_DIBPATTERNPT (6) </TD>
<TD width=75%>A pattern brush defined by a device-independent bitmap (DIB) specification. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_PATTERN8X8 (7) </TD>
<TD width=75%>Same meaning as BS_PATTERN. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>BS_DIBPATTERN8X8 (8) </TD>
<TD width=75%>Same meaning as BS_DIBPATTERN. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>dpxFgColor</B> </DT>

<DD>Foreground color. For the <B>dp8FgColor</B> member of <B>DIB_Brush8, </B>the color is a logical color if the brush style is BS_SOLID or BS_PATTERN. If the brush style is BS_HATCHED, <B>dp8FgColor</B> contains a physical color. </DD>

<DT><B>dpxHatch</B> </DT>

<DD>Specifies a hatch style. The meaning depends on the brush style defined by <B>dpxBrushStyle</B>. 

<P>If <B>dpxBrushStyle</B> is BS_DIBPATTERN, the <B>dpxHatch</B> member contains a handle to a packed DIB. If <B>dpxBrushStyle</B> is BS_DIBPATTERNPT, the <B>dpxHatch</B> member contains a pointer to a packed DIB. 


<P>If <B>dpxBrushStyle</B> is BS_HATCHED, the <B>dpxHatch</B> member specifies the orientation of the lines used to create the hatch. It can be one of the following values. 


<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Value </TH>
<TH align=left width=77%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_BDIAGONAL </TD>
<TD width=77%>A 45-degree upward, left-to-right hatch </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_CROSS </TD>
<TD width=77%>Horizontal and vertical cross-hatch </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_DIAGCROSS </TD>
<TD width=77%>45-degree crosshatch </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_FDIAGONAL </TD>
<TD width=77%>A 45-degree downward, left-to-right hatch </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_HORIZONTAL </TD>
<TD width=77%>Horizontal hatch </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>HS_VERTICAL </TD>
<TD width=77%>Vertical hatch </TD>
</TR>
</TABLE><BR>



<P>If <B>dpxBrushStyle</B> is BS_PATTERN, <B>dpxHatch</B> is a handle to the bitmap that defines the pattern. 


<P>If <B>dpxBrushStyle</B> is BS_SOLID or BS_HOLLOW, <B>dpxHatch</B> is ignored. 
</DD>

<DT><B>dpxBgColor</B> </DT>

<DD>Background color. This member is only used with BS_HATCHED style brushes and it is a physical color. </DD>

<DT><B>dpxBrushMono</B> </DT>

<DD>Bits describing monochrome version of the brush. </DD>

<DT><B>dpxBrushMask</B> </DT>

<DD>Bits describing the transparency mask (hatch pattern) portion of the brush. </DD>

<DT><B>dpxBrushBits</B> </DT>

<DD>The bits describing the brush. The size is 8 rows by 8 columns with either 1, 4, 8, 16, 24, or 32 bits per pixel. 
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DIB_Brush"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
