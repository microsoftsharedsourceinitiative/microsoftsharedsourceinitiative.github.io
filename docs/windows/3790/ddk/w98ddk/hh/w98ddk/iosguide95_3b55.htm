<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IOS Sample Code</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IOS Sample Code">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_ios_sample_code_si"></A>IOS Sample Code</H2>

<P>Unless otherwise indicated, the following storage samples are available in either or both of the Windows 95 DDK and the Windows 98 DDK:</P>

<TABLE border=1 frame=box rules=all>

<TR VALIGN="top">
<TD width=19%><B>Sample type</B></TD>
<TD width=13%><B>Sample name</B></TD>
<TD width=68%><B>Comments</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%>SCSI Miniport Driver</TD>
<TD width=13%>PC2X</TD>
<TD width=68%>This is the miniport driver for the Iomega PC2x 8-bit SCSI adapter card. Instead of using this sample, the ATAPI miniport sample described below is the recommended sample.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>SCSI Miniport Driver</TD>
<TD width=13%>ATAPI</TD>
<TD width=68%><B>(Located in the Windows NT 4.0 DDK, <U>not</U> the Windows 95 or Windows 98 DDK)</B> A SCSI miniport driver that when compiled, can be binary compatible between Windows 95/98 and NT-based versions of the operating system (but is not binary compatible if Windows system calls using VMMCall are compiled in).</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>IOS Port Driver</TD>
<TD width=13%>PORT</TD>
<TD width=68%>This is an IOS Port device driver sample, serving only as a template for developing a new Port driver. It is written in assembly language. Port drivers reside at the bottom of the IOS layered hierarchy, and typically communicate with storage device hardware. This sample demonstrates how to use ILB_enqueue_IOP and ILB_dequeue_IOP in order to buffer IOPs sent to the driver while the driver is already busy processing an IOP.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>IOS Vendor Supplied Driver</TD>
<TD width=13%>VSD</TD>
<TD width=68%>This is an IOS Vendor Supplied Driver device driver sample, serving only as a template for developing a new VSD. This type of driver is sometimes called a helper VSD. VSD drivers reside in the middle of the IOS layered hierarchy, between port drivers and File System Drivers. They can be used to monitor and filter communications between FSDs and port drivers. They can be used to interface ring 3 applications to ring 0 IOS components. The sample is written in assembly language. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>IOS Vendor Supplied Driver</TD>
<TD width=13%>PASSTHRU</TD>
<TD width=68%>(Located on the <a href="http://go.microsoft.com/fwlink/?linkid=8713&clcid=0x409" target="_blank">Microsoft support</A> Web site.)
<P>A sample VSD based on the HELPVSD sample, which demonstrates how to issue a command to a SCSI device using the SCSI Passthrough technique.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Win 32 Application</TD>
<TD width=13%>WNASPI</TD>
<TD width=68%>A sample ASPI for an Win32 application program linking the WNASPI32.DLL export functions. This application demonstrates how an application can issue pass-through commands to SCSI devices and ATAPI CD-ROMs. For example, tape backup utility programs use this mechanism. Note that Windows 95 also comes with WINASPI.DLL, which is used to support ASPI communications from a 16-bit Windows application.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>S.M.A.R.T. Application</TD>
<TD width=13%>SMARTAPP</TD>
<TD width=68%>(Located in Knowledge Base article Q208048.)
<P>SmartApp.exe is a sample Win32 application that demonstrates how to access the SMART (Self Monitoring, Analysis and Reporting Technology) capabilities built into IDE disk drives. <BR>
<BR>
SMART technology is used to monitor disk drive degradation, in an effort to predict future catastrophic disk failure.</P>
</TD>
</TR>
</TABLE><BR>

<H4>Setting up and compiling sample code</H4>

<P>With the exception of the SMARTAPP sample, the above samples will compile successfully using NMAKE when the Windows 95 DDK is used, or BUILD when the Windows 98 DDK is used. Refer to the corresponding DDK for details. The SMARTAPP sample will build using Visual Studio.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IOS%20Sample%20Code"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
