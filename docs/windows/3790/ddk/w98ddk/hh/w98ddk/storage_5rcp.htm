<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IOR</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4269"></A>IOR</H3>

<PRE>#include &lt;ior.h&gt;

typedef struct _IOR { 
    ULONG  IOR_next;            // client link; see below
    USHORT IOR_func;            // function; see below
    USHORT IOR_status;          // request status; see below
    ULONG  IOR_flags;           // request flags; see below
    CMDCPLT IOR_callback;       // address of callback; see below
    ULONG  IOR_start_addr[2];   // starting address; see below
    ULONG  IOR_xfer_count;      // # of sectors/bytes; see below
    ULONG  IOR_buffer_ptr;      // client buffer; see below
    ULONG  IOR_private_client;  // BlockDev/IOS client reserved
    ULONG  IOR_private_IOS;     // reserved space for IOS
    ULONG  IOR_private_port;    // private area for port driver
    union  urequestor_usage _ureq;  // requester usage; see below
    ULONG  IOR_req_req_handle;  // request handle; see below
    ULONG  IOR_req_vol_handle;  // media handle; see below
    ULONG  IOR_sgd_lin_phys;    // first physical SGD; see below
    UCHAR  IOR_num_sgds;        // number of physical SGDs
    UCHAR  IOR_vol_designtr;    // drive letter; see below
    USHORT IOR_ios_private_1;   // reserved by IOS to force alignment
    ULONG  IOR_reserved_2[2];   // reserved for internal use
} IOR, *PIOR;
 </PRE>

<P>Contains information about an I/O request. 

<DL>
<DT><B>IOR_next</B></DT>

<DD>Client link for BCBs. Must be zero if <B>IOR_flags</B> is set to IORF_VERSION_002. </DD>

<DT><B>IOR_func</B></DT>

<DD>I/O request function. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=32%>IOR_READ </TD>
<TD width=68%>Reads the number of sectors/bytes as specified in <B>IOR_xfer_count</B>. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_WRITE </TD>
<TD width=68%>Writes the number of sectors/bytes as specified in <B>IOR_xfer_count</B>. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_VERIFY </TD>
<TD width=68%>Verifies the number of sectors/bytes as specified in <B>IOR_xfer_count</B>. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_CANCEL </TD>
<TD width=68%>NOT SUPPORTED. Cancels the specified IOR. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_WRITEV </TD>
<TD width=68%>Writes and verifies the number of sectors/bytes as specified in <B>IOR_xfer_count</B>. Some hardware (IDE, for example) does not support this function. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_MEDIA_CHECK </TD>
<TD width=68%>Obsolete. Use IOR_MEDIA_CHECK_RESET instead. (Checks to see if media has changed, and returns status in <B>IOR_status.)</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_MEDIA_CHECK_RESET </TD>
<TD width=68%>Checks to see if media has changed, and returns status in <B>IOR_status</B>. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_LOAD_MEDIA </TD>
<TD width=68%>Performs a LOAD MEDIA operation on removable drives. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_EJECT_MEDIA </TD>
<TD width=68%>Performs an EJECT MEDIA operation on removable drives. For disk and CD-ROM devices, applications are queried before eject, and the lock count is checked for zero. If one of these checks fails, the user is queried to see if he wants to proceed. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_LOCK_MEDIA </TD>
<TD width=68%>Performs a LOCK MEDIA operation on removable drives. LOCK and UNLOCK MEDIA calls must be synchronized, as a depth counter is maintained by the IOS. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_UNLOCK_MEDIA </TD>
<TD width=68%>Performs an UNLOCK MEDIA operation on removable drives. LOCK and UNLOCK MEDIA calls must be synchronized, as a depth counter is maintained by IOS. UNLOCK MEDIA is delayed by about 5 seconds. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_REQUEST_SENSE </TD>
<TD width=68%>Performs REQUEST SENSE operation on removable drives. Currently supported for SCSI devices only. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_COMPUTE_GEOM </TD>
<TD width=68%>Results in a reexamination of volume and device characteristics. When this command is received, each IOS layer assumes the device has changed, and performs whatever initialization required. For example, the disk TSD will reexamine the partitions of a device. </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>IOR_GEN_IOCTL </TD>
<TD width=68%>Function permits device-specific IOCTLs to be issued to IOS drivers. Standard 16-bit, MS-DOS IOCTLs (INT 21h Function 44<I>xx</I>) are supported, but 32-bit IOCTLs are not yet defined. For 16-bit IOCTLs, <B>IOR_flags</B> is set to IORF_16BIT_IOCTL and members of <B>sdeffsd_req_usage</B> structure in <B>_ureq</B> member are defined in the following. Note that macros are defined that provide an alias reference to these members. The macro names are equivalent to the member names listed in the following, with the leading underscore omitted. For example, <B>_ureq.sdeffsd_req_usage._IOR_ioctl_drive</B> can be referenced with the macro <B>IOR_ioctl_drive</B>. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=27%>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_drive </TD>
<TD width=43%>Input. 1-based drive number or device handle (from BX register) </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_function </TD>
<TD width=43%>Input. Function number (from AX register) </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_control_param </TD>
<TD width=43%>Input. Function parameter zero-extended to 32 bits (from CX register) </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_buffer_ptr </TD>
<TD width=43%>Input. Address of buffer, mapped to flat address (from DS:DX register) </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_client_params </TD>
<TD width=43%>Input. Address of additional parameters passed in from the caller. The <B>IORF_16BIT_IOCTL</B> flag must be used to determine the structure type. If it is a 16-bit IOCTL, the pointer will be to the CLIENT_REGS structure. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_return </TD>
<TD width=43%>Output. Return value to be mapped to the IOCTL caller upon exit. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD width=30%>_IOR_ioctl_buffer_length </TD>
<TD width=43%>Output. Size of buffer pointed to by <B>_IOR_ioctl_buffer_ptr</B>. Not used by INT 21h Function 440Dh IOCTL calls. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%>IOR_FORMAT </TD>
<TD width=66%>Allows issuance of a low-level format packet as defined in the INT 13h specification. The <B>IOR_format_address_field</B> (same as <B>IOR_sgd_lin_phys</B>) member contains the low level sector map. See the <B>IOP_format_</B>* members of the <B>IOP</B> structure for additional information. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_SCSI_PASS_THROUGH </TD>
<TD width=66%>Each layer passes this request down with modification to the SCSI port driver. The <B>IOR</B> must contain a pointer to a valid <B>SRB</B>. Also, the EBX register must point to the BDD portion of the DCB when <B>IOS_SendCommand</B> is called with a passthrough request. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_CLEAR_QUEUE </TD>
<TD width=66%>Callback of request; indicates all requests issued prior to this request have been completed. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_DOS_RESET </TD>
<TD width=66%>Issued in response to an INT 13h reset by the INT 13h VxD. Currently used only by and for the IOS floppy driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_SCSI_REQUEST </TD>
<TD width=66%>A generic function that indicates the request is for SCSI. The SRB member in the <B>IOR</B> must be valid. Normally used by IOS layers to send internal requests to SCSI devices. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_SET_WRITE_STATUS </TD>
<TD width=66%>Results in the correct setting of DCB_DEV_WRITABLE flag in the <B>DCB</B> if SUCCESS status is returned. Currently only supported by the IOS floppy driver. The IOS floppy driver must set or clear the DCB_DEV_WRITABLE bit in the physical DCB, and associated logical DCBs as applicable.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_RESTART_QUEUE </TD>
<TD width=66%>A placeholder function that results in restarting of the queue provided by the IOS queuing services. Has no other effect. Should be sent after the DCB_QUEUE_FREEZE field has been decremented to zero. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_ABORT_QUEUE </TD>
<TD width=66%>Causes each layer to call back each queued request with status of IORS_CANCELED. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_SPIN_DOWN </TD>
<TD width=66%>Causes the specified drive to be spun down. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_SPIN_UP </TD>
<TD width=66%>Causes the specified drive to be spun up. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_FLUSH_DRIVE </TD>
<TD width=66%>Causes layer drivers to flush out dirty data. This is a synchronous function and should not be called at event/interrupt time. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_FLUSH_DRIVE_AND_DISCARD </TD>
<TD width=66%>Causes layer drivers to flush out dirty data and then discard cached data. This is a synchronous function and should not be called at event/interrupt time. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>IOR_FSD_EXT </TD>
<TD width=66%>Sends private command from an IOS client to the FSD extension layer (DRP_FSD_EXT_1 or DRP_FSD_EXT_2) such as a Compressed Volume Manager (CVM). This call is similar in intent and usage to IOR_GEN_IOCTL; however, it can be used in the swapper path, so, in general, the handling driver should not touch pageable code or data. </TD>
</TR>
</TABLE><BR>



<P>Not all drivers support all functions. 
</DD>

<DT><B>IOR_status</B> </DT>

<DD>Status value. The function sets this member to IORS_SUCCESS (0) if it is successful. Otherwise, it sets the member to one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>IORS_BIG_IO_BREAKUP_FAILED </TD>
<TD width=57%>Attempt to split big I/O failed. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_BUSY </TD>
<TD width=57%>Device is busy. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_CANCELED </TD>
<TD width=57%>Command was canceled. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_CMD_IN_PROGRESS </TD>
<TD width=57%>Command is in progress, and can't be canceled. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_DEVICE_ERROR </TD>
<TD width=57%>Error on recalib. drive, etc. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_ERROR_DESIGNTR </TD>
<TD width=57%>Error occurred. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_HW_FAILURE </TD>
<TD width=57%>General hardware failure. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_ILLEGAL_ACCESS_MODE </TD>
<TD width=57%>CD-ROM read on audio or attempt play on data. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_INVALID_CMD_PTR </TD>
<TD width=57%>Cancel of an invalid command. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_INVALID_COMMAND </TD>
<TD width=57%>Command not supported or invalid. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_INVALID_PARM </TD>
<TD width=57%>Invalid parameter. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_INVALID_SECTOR </TD>
<TD width=57%>Old blockdev error code for requests on an invalid sector number. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_LOCK_COUNT_EXCEEDED </TD>
<TD width=57%>Volume lock count exceeded. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_LOCK_VIOLATION </TD>
<TD width=57%>Illegal access to locked device. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_MEDIA_ERROR </TD>
<TD width=57%>Media failure. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_MEMORY_ERROR </TD>
<TD width=57%>Error allocating DMA buffer space for I/O. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_NO_DEVICE </TD>
<TD width=57%>Physical or logical device nonexistent. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_NO_MEDIA </TD>
<TD width=57%>Media removed from device. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_NOT_READY </TD>
<TD width=57%>Device not ready. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_OUT_OF_SPACE </TD>
<TD width=57%>No space on media. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_SUCCESS_WITH_ECC </TD>
<TD width=57%>Successful, but with ECC. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_SUCCESS_WITH_RETRY </TD>
<TD width=57%>Successful, but retries required. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_TIME_OUT </TD>
<TD width=57%>Device timed out. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_UNCERTAIN_MEDIA </TD>
<TD width=57%>Media may have changed. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_UNFORMATTED_MEDIA </TD>
<TD width=57%>Unformatted media. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_UNREC_ERROR </TD>
<TD width=57%>Unrecoverable error. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_VALID_EJECT_FAILED </TD>
<TD width=57%>Eject command was not accepted. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_VOL_IN_USE </TD>
<TD width=57%>Volume is in use ; used for eject. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_VOL_LOCKED </TD>
<TD width=57%>Eject received with drive locked. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_VOL_NOT_LOCKED </TD>
<TD width=57%>Volume received unlock without lock. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_VOL_NOT_REMOVABLE </TD>
<TD width=57%>Removable request to nonremovable drive. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_WRITE_PROTECT </TD>
<TD width=57%>Write protect error. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORS_WRONG_MEDIA </TD>
<TD width=57%>Wrong media in drive. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>IOR_flags</B> </DT>

<DD>Flags. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>IORF_16BIT_IOCTL </TD>
<TD width=57%>If set, 16-bit IOCTL; 32-bit otherwise. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_AUDIO_DATA_READ </TD>
<TD width=57%>Indicates an audio data read. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_BLOCKDEV_EMULATE </TD>
<TD width=57%>Request started as a BCB </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_BYPASS_A_B </TD>
<TD width=57%>Indicates that VOLTRK should bypass AB check. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_BYPASS_QUEUE </TD>
<TD width=57%>Request should bypass IOS queuing (internal IOS driver use only). </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_BYPASS_VOLTRK </TD>
<TD width=57%>Request will not be volume tracked. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_CHAR_COMMAND </TD>
<TD width=57%>Indicates transfer counts and scatter/gather buffer sizes are byte values. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_CHAR_DEVICE </TD>
<TD width=57%>Indicates character device. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_DATA_IN </TD>
<TD width=57%>Indicates a data read operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_DATA_OUT </TD>
<TD width=57%>Indicates a data write operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_DIRECT_IO </TD>
<TD width=57%>Such as INT 25h or INT 26h. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_DONT_CACHE </TD>
<TD width=57%>Indicates that the BDCB data should not be cached. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_DOUBLE_BUFFER </TD>
<TD width=57%>Indicates that the request is to be completed using double buffering. Client must ensure that both the SGD buffer pointers and <B>IOR_sgd_lin_phys</B> are virtual pointers. Typically, set this flag before the IOS_SendCommand, if the ILB_int_io_criteria_rtn call returned an error.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_HIGH_PRIORITY </TD>
<TD width=57%>Binary priority indication. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_IDE_RESERVED </TD>
<TD width=57%>Indicates I/O is for a physical device. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_INHIBIT_GEOM_RECOMPUTE </TD>
<TD width=57%>Force inhibit of device geometry recomputation. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_IO_TOO_BIG </TD>
<TD width=57%>Indicates I/O is too big for single pass (set by IOS criteria code). </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_LOGICAL_START_SECTOR </TD>
<TD width=57%><B>IOR_start_addr</B> is logical. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_NO_COMPRESS </TD>
<TD width=57%>Do not compress data. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_PARTITION_BIAS_ADDED </TD>
<TD width=57%>Set by TSD only to indicate that it has added in the bias, as required by IORF_LOGICAL_START_SECTOR. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_PHYS_CMD </TD>
<TD width=57%>Indicates I/O is for a physical device. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_PHYS_SGDS </TD>
<TD width=57%>Indicates <B>IOR_sgd_lin_phys</B> valid. This flag is set if the ILB_io_criteria_rtn has created a list of physical scatter-gather descriptors in IOR_sgd_lin_phys.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_POSTPONED_VOL_OPS </TD>
<TD width=57%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_QUIET_VOLTRK </TD>
<TD width=57%>Indicates that volume tracking just return error when wrong media in drive (no dialog box). </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_SCATTER_GATHER </TD>
<TD width=57%>Indicates BDCB logical (linear) SGD list present. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_SRB_VALID </TD>
<TD width=57%>Indicates that <B>IOP_srb</B> points to a valid <B>SRB</B>. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_SWAPPER_IO </TD>
<TD width=57%>Request is from the swapper. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_SYNC_CMD_DONE </TD>
<TD width=57%>Set by IOS only to indicate completion of synchronous command. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_SYNC_COMMAND </TD>
<TD width=57%>Indicates synchronous command (complete before return from IOS). </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_VERSION_002 </TD>
<TD width=57%>Indicates use of extended BCB (IOR) format for request. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_VOL_RETRY </TD>
<TD width=57%>Indicates volume tracking retried request (internal use only). </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>IORF_WIN32 </TD>
<TD width=57%>Indicates I/O is from 32 bit API. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>IOR_callback</B> </DT>

<DD>Address of the callback routine for asynchronous requests. The callback receives control after the request completes. This member is ignored if <B>IOR_flags</B> is set to IORF_SYNC_COMMAND. </DD>

<DT><B>IOR_start_addr</B> </DT>

<DD>Volume-relative start address if <B>IOR_flags</B> is set to IORF_LOGICAL_START_SECTOR; otherwise, this member is a physical address. <B>IOR_start_addr</B>[0] contains the low order 32 bits and <B>IOR_start_addr</B>[1] contains the high order 32 bits. </DD>

<DT><B>IOR_xfer_count</B> </DT>

<DD>Number of bytes to transfer if <B>IOR_flags</B> is set to IORF_CHAR_COMMAND; otherwise, number of sectors to transfer. Must be set to zero if the requested function does not involve a data transfer. </DD>

<DT><B>IOR_buffer_ptr</B> </DT>

<DD>Address of the BlockDev client buffer. Contains the address of the data buffer or of a null-terminated list of <B>SGD</B> structures, depending on whether <B>IOR_flags</B> is set to IORF_SCATTER_GATHER. This member is ignored if the requested function does not involve a data transfer. </DD>

<DT><B>_ureq</B> </DT>

<DD>Usage area for requester. Is used for storing parameters and return values for IOCTLs. </DD>

<DT><B>IOR_req_req_handle</B> </DT>

<DD>Request handle, a 32-bit value that is passed on the stack to the callback routine specified by the <B>IOR_callback</B> member. Any 32 bit value may be used, but this member often contains the address of this <B>IOR</B> or of the <B>IOP</B> which contains this <B>IOR</B>. </DD>

<DT><B>IOR_req_vol_handle</B> </DT>

<DD>Requester-provided media handle designating the media on which to carry out the requested function (<B>VRP</B>). </DD>

<DT><B>IOR_sgd_lin_phys</B> </DT>

<DD>Address of the first physical scatter/gather descriptor (<B>SGD</B>). (Contrast with <B>IOR_buffer_ptr</B>, which points to the logical <B>SGD</B>s.) This is either a linear or physical address, depending on the drivers as indicated by the <B>DCB</B> demand bits. </DD>

<DT><B>IOR_num_sgds</B> </DT>

<DD>Number of physical <B>SGD</B>s pointed to by the <B>IOR_sgd_lin_phys</B> member. </DD>

<DT><B>IOR_vol_designtr</B> </DT>

<DD>Numeric representation of the drive letter designating the volume to perform the function on. A is zero, B is 1, C is 2, and so on. 
</DD>
</DL>

<H4>See Also</H4>

<P><B>IOP</B>, <B>SGD</B>, <B>urequestor_usage</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IOR"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
