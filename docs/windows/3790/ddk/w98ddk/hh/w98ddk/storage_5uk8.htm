<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FS_EnumerateHandle</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4378"></A>FS_EnumerateHandle</H3>

<PRE>FS_EnumerateHandle(
 PIOREQ pir
 )
 </PRE>

<P>This function handles the Win32 function: GetFileInformationByHandle() and the DOS INT 21h function: 440dh, subfunction 086dh. In addition, it also handles certain operations that are needed for volume locking support in the IFS manager. 

<DL>
<DT><I>ir_rh</I> </DT>

<DD>Supplies handle to disk volume or network resource that contains the file. </DD>

<DT><I>ir_sfn</I> </DT>

<DD>Supplies system file number. </DD>

<DT><I>ir_flags</I> </DT>

<DD>Supplies operation type. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Operation Type Values:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_GETFILEINFO </TD>
<TD width=66%>Get information about the file. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_GETFILENAME </TD>
<TD width=66%>Get the path name of the file. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_GETFINDINFO </TD>
<TD width=66%>Get information about the find handle so that a find can be resumed after a volume lock is released. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_RESUMEFIND </TD>
<TD width=66%>Resume a find based on the information returned on the ENUMH_GETFINDINFO operation called previously. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_RESYNCFILEDIR </TD>
<TD width=66%>Resynchronize the directory cluster and position for a file that could have been moved. However, the file's data blocks will not have moved. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>ENUMH_MAPCACHEBLOCK</TD>
<TD width=66%>(Windows 98 and later) This service maps a zero-relative page number (4K) within a file into a VCACHE buffer and returns the address of the VCACHE buffer header to the caller. This API is strictly intended for use by the operating system. Its purpose is to make more efficient use of system memory by reducing double caching of EXE and DLL files.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_fh</I> </DT>

<DD>Supplies the FSD file handle on the ENUMH_GETFILEINFO, ENUMH_GETFILENAME and the ENUMH_RESYNCFILEDIR operations. Supplies the FSD find handle on the ENUMH_GETFINDINFO and ENUMH_RESUMEFIND operations. </DD>

<DT><I>ir_ppath</I> </DT>

<DD>Supplies the path name on ENUMH_RESUMEFIND and ENUMH_RESYNCFILEDIR operations. Supplies a pointer to a buffer the path name is to be returned in on the ENUMH_GETFINDINFO and ENUMH_GETFILENAME operations. This parameter is not valid on the ENUMH_GETFILEINFO operation. </DD>

<DT><I>ir_data</I> </DT>

<DD>Supplies a pointer to the structure filled in on the ENUMH_GETFILEINFO operation. The contents of this structure are described in the following. This parameter is not valid on other operations. </DD>

<DT><I>ir_options</I> </DT>

<DD>Supplies special options. This field is valid only on the ENUMH_RESYNCFILEDIR operation. 

<TABLE>

<TR VALIGN="top">
<TD width=34%>ENUMH_RESYNCFILEDIR <B>Options:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>RESYNC_INVALIDATEMETACACHE </TD>
<TD width=66%>Indicates that any metacaches associated with this open file should be flushed. This could include file extent caches, name caches, etc. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_user</I> </DT>

<DD>Supplies user ID for this request. </DD>

<DT><I>ir_pid</I> </DT>

<DD>Supplies process ID for this request. </DD>

<DT><I>ir_error</I> </DT>

<DD>Contains status of the operation (zero if no error, the error code otherwise) for all operations. 


<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Operation Type ENUMHGETFILEINFO:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_data</I> </TD>
<TD width=66%>Returns information about the file filled into the BY_HANDLE_FILE_INFORMATION structure described in the following. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%><B>BY_HANDLE_FILE_INFORMATION Structure:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_dwFileAttributes </TD>
<TD width=66%>Returns the attributes of the file. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_ftCreationTime </TD>
<TD width=66%>Returns the creation time of the file in the Win32 FileTime structure format described in the following. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Win32 FileTime Structure:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>dwLowDateTime </TD>
<TD width=66%>Returns the low double word of the time in Win32 format. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>dwHighDateTime </TD>
<TD width=66%>Returns the high double word of the time in Win32 format. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%>bhfi_ftLastAccessTime </TD>
<TD width=66%>Returns the last access time of the file in the Win32 FileTime structure format described above. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_ftLastWriteTime </TD>
<TD width=66%>Returns the last access time of the file in the Win32 FileTime structure format described above. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_dwVolumeSerialNumber </TD>
<TD width=66%>Returns the serial number of the volume the file is on. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_nFileSizeHigh </TD>
<TD width=66%>Returns the high 32-bits of the file size. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_nFileSizeLow </TD>
<TD width=66%>Returns the low 32-bits of the file size. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_nNumberOfLinks </TD>
<TD width=66%>Returns the number of links to the file. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_nFileIndexHigh </TD>
<TD width=66%>Returns the high 32-bits of a unique index to the file. This index needs to be valid only while the file is open and is typically used to determine if multiple handles point to the same open file. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>bhfi_nFileIndexLow </TD>
<TD width=66%>Returns the low 32-bits of a unique index to the file. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Operation Type ENUMHGETFILENAME:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_ppath</I> </TD>
<TD width=66%>Returns the path name to the open file in a Unicode canonicalized path format. This path can be passed back to the FSD to open the file. </TD>
</TR>
</TABLE><BR>



<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Operation Type ENUMHGETFINDINFO:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_ppath</I> </TD>
<TD width=66%>Returns the path name to the last file found on the find handle in a Unicode canonicalized path format. This path can be passed back to the FSD to resume the find at this path name. This is typically done during volume locking. </TD>
</TR>
</TABLE><BR>


</DD>
</DL>

<P>The following function is applicable to Windows 98 and later. See Knowledge Base article Q223282 for more information about the ENUMH_MAPCACHEBLOCK function:</P>

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Operation Type ENUMH_MAPCACHEBLOCK:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_pos</I></TD>
<TD width=66%>Supplies zero-relative cache block number to map (from beginning of file)</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_length</I></TD>
<TD width=66%>Number of cache blocks to map (1)</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_data</I></TD>
<TD width=66%>Set to 0 initially.  If successful, returns VCACHE handle for cache block.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>ir_error</I></TD>
<TD width=66%>Returns 0 if successful. Returns ERROR_ACCESS_DENIED if unsuccessful.</TD>
</TR>
</TABLE><BR>

<P>Details about volume-locking support and about how these volume-locking operations are used to ensure a consistent system while a volume lock is in progress are given in the volume-locking specification. Any local FSD that allows direct disk operations must also support the volume-locking support functions. Note that the ENUMH_RESYNCFILEDIR operation can only be called on files that are left open by the IFS manager across a Level 3 volume lock. Typically, memory-mapped files and Win32 executables and DLLs fall into this category of files. However, disk utilities are allowed to move these files even though they are open, with certain restrictions. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FS_EnumerateHandle"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
