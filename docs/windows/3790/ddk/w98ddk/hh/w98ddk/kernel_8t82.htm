<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Call_When_VM_Returns</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1132"></A>Call_When_VM_Returns</H1>

<PRE>include vmm.inc

mov     eax, TimeOut            ; milliseconds until time out
mov     edx, RefData            ; reference data
mov     esi, OFFSET32 Callback  ; address of callback function
VMMCall Call_When_VM_Returns
 </PRE>

<P>Installs a callback function that receives control when a virtual machine executes the <B>iret</B> instruction for the current interrupt. Uses Client_CS, Client_EIP, Flags. </P>

<P>No return value. 

<DL>
<DT><I>TimeOut</I></DT>

<DD>Number of milliseconds to wait before calling the callback procedure. The time out occurs only if the <B>iret</B> instruction is not executed before the specified time elapses. If this parameter is positive, the system calls the callback when time elapses. If this parameter is negative, the system calls the callback when time elapses and calls it again when the <B>iret</B> instruction is executed. If this parameter is zero, the system ignores the time out. </DD>

<DT><I>RefData</I></DT>

<DD>Reference data to be passed to the callback procedure. Can be any 32-bit value, but is typically the address of a driver-defined structure. </DD>

<DT><I>Callback</I></DT>

<DD>Address of the callback procedure. For more information about the callback procedure, see below. 
</DD>
</DL>

<P>A virtual device typically uses this service in a callback procedure that it installed using the <B>Hook_V86_Int_Chain</B> service. This service directs the system to replace the return address for the interrupt with the address of the callback procedure. That is, the system pushes the callback procedure address on the stack when it creates the stack frame for the interrupt. The system then passes the interrupt to the virtual machine. </P>

<P>When the virtual machine executes the <B>iret</B> instruction, the callback procedure receives control and can carry out tasks. After the callback procedure returns, the system restores the original interrupt return address and execution continues as if returning from the interrupt. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Call_When_VM_Returns"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
