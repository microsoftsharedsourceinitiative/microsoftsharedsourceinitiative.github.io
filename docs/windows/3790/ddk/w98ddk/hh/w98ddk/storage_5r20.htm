<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DriveSpace Functions and Structures</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4208"></A>DriveSpace Functions and Structures</H2>



<H4><A NAME="_pss_4209"></A>DSRawRead</H4>

<PRE>mov    ax, 4404h             ; IOCTL command
mov    bl, Drive             ; drive number (one-based)
mov    cx, size DataPacket   ; size of data packet
mov    dx, seg DataPacket    ; address of data packet
mov    ds, dx
mov    dx, offset DataPacket 
int    21h

jc     error
cmp    DataPacket.dspResult, ; 'OK' ; test for success
jne    failure               ; call failed
</PRE>

<P>Reads raw data from a compressed volume file (CVF) into a buffer. 

<UL>
	<LI>Returns with the carry flag clear and the dspResult of the DSHDR structure set to 'OK' if the function succeeds; otherwise, the carry flag is set and AX contains one of these error values: </LI>
</UL>

<TABLE>

<TR VALIGN="top">
<TH align=left width=23%>Value </TH>
<TH align=left width=77%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=23%>0001h </TD>
<TD width=77%>ERROR_INVALID_FUNCTION </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>0005h </TD>
<TD width=77%>ERROR_ACCESS_DENIED </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>0006h </TD>
<TD width=77%>ERROR_INVALID_HANDLE </TD>
</TR>

<TR VALIGN="top">
<TD width=23%>000Dh </TD>
<TD width=77%>ERROR_INVALID_DATA </TD>
</TR>
</TABLE><BR>

<DL>
<DT><I>Drive</I> </DT>

<DD>One-based driver number for a DriveSpace driver (1 = A, 2 = B, and so on). If there is more than one DriveSpace drive, any one of the corresponding drive numbers can be given. </DD>

<DT><I>DataPacket</I> </DT>

<DD>Data packet consisting of a <B>DSHDR</B> structure, a <B>DSRAWIO</B> structure, and an array of <B>RawClusterInfo</B> structures. The <B>dspCommand</B> field of the DSHDR structure must be set to the letter 'R'. The buffer pointed to by the <B>rci_pdata</B> field of the <B>RawClusterInfo</B> structure receives the raw data. 
</DD>
</DL>

<H4>See Also</H4>

<P><B>DSHDR</B>, <B>DSRAWIO</B>, <B>RawClusterInfo</B> </P>



<H4><A NAME="_pss_4210"></A>DSRawWrite</H4>

<PRE>mov    ax, 4404h             ; IOCTL command
mov    bl, Drive             ; drive number (one-based)
mov    cx, size DataPacket   ; size of data packet
mov    dx, seg DataPacket    ; address of data packet
mov    ds, dx
mov    dx, offset DataPacket 
int    21h

jc     error
cmp    DataPacket.dspResult, ; 'OK' ; test for success
jne    failure               ; call failed
</PRE>

<P>Writes raw data from a buffer into a compressed volume file (CVF). 

<UL>
	<LI>Returns with the carry flag clear and the dspResult of the DSHDR structure set to 'OK' if the function succeeds; otherwise, the carry flag is set and AX contains one of these error values: </LI>
</UL>

<TABLE>

<TR VALIGN="top">
<TH align=left width=21%>Value </TH>
<TH align=left width=79%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=21%>0001h </TD>
<TD width=79%>ERROR_INVALID_FUNCTION </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>0005h </TD>
<TD width=79%>ERROR_ACCESS_DENIED </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>0006h </TD>
<TD width=79%>ERROR_INVALID_HANDLE </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>000Dh </TD>
<TD width=79%>ERROR_INVALID_DATA </TD>
</TR>
</TABLE><BR>

<DL>
<DT><I>Drive</I> </DT>

<DD>One-based driver number for a DriveSpace driver (1 = A, 2 = B, and so on). If there is more than one DriveSpace drive, any one of the corresponding drive numbers can be given. </DD>

<DT><I>DataPacket</I> </DT>

<DD>Data packet consisting of a <B>DSHDR</B> structure, a <B>DSRAWIO</B> structure, and an array of <B>RawClusterInfo</B> structures. The <B>dspCommand</B> field of the DSHDR structure must be set to the letter 'W'. The buffer pointed to by the <B>rci_pdata</B> field of the <B>RawClusterInfo</B> structure receives the raw data. 
</DD>
</DL>

<H4>See Also</H4>

<P><B>DSHDR</B>, <B>DSRAWIO</B>, <B>RawClusterInfo</B> </P>



<H4><A NAME="_pss_4211"></A>DSHDR</H4>

<PRE>DSHDR STRUC
    dspStamp    dw  ?  ; Identifying stamp ('DM')
    dspCommand  db  ?  ; Command ('R' or 'W')
    dspResult   dw  ?  ; see below
DSHDR ENDS
</PRE>

<P>Defines the portion of the IOCTL header that is common to all DriveSpace Receive Control Data IOCTLs. Notice that WORD alphanumeric constants are shown as they would be defined for MASM. Thus, 'DM' is equivalent to 444Dh, and 'OK' is equivalent to 4B4Fh. When dumped as two consecutive bytes or as a text string, these values would appear as "MD" and "KO" respectively. The <B>dspCommand</B> field is typically an ASCII character. For the raw read IOCTL, <B>dspCommand</B> is set to 'r'; for raw writes, it is set to 'w'. 

<DL>
<DT><B>dsp_result</B> </DT>

<DD>Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TH align=left width=32%>Value </TH>
<TH align=left width=68%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRROK ('OK') </TD>
<TD width=68%>Success </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRWRITE (0001h) </TD>
<TD width=68%>Intervening write occurred </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRLOCK (0002h) </TD>
<TD width=68%>Buffer lock failed </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRIO (0003h) </TD>
<TD width=68%>I/O error </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRBADCLUS (0004h) </TD>
<TD width=68%>Invalid MDFAT index </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRUNALLOC (0005h) </TD>
<TD width=68%>Attempt to read unallocated cluster </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRBADSECTOR (0006h) </TD>
<TD width=68%>Bad starting sector </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRBADSIZE (0007h) </TD>
<TD width=68%>Bad cluster size </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRNOSIZE (0008h) </TD>
<TD width=68%>Uncompressed size unknown </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRNOTFREE (0009h) </TD>
<TD width=68%>Some target sectors were not free </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRXBOUND (000Ah) </TD>
<TD width=68%>Allocation crosses BitFAT boundary </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRNULLPTR (000Bh) </TD>
<TD width=68%>NULL pointer passed to write </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRSECCOUNT (000Ch) </TD>
<TD width=68%>Sector count mismatch </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRPKTSIZE (000Dh) </TD>
<TD width=68%>Packet size is too small </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRDATAWRITE (000Eh) </TD>
<TD width=68%>Data was written </TD>
</TR>

<TR VALIGN="top">
<TD width=32%>DSRRBADFRAG (000Fh) </TD>
<TD width=68%>Bad fragment table </TD>
</TR>
</TABLE><BR>



</DD>
</DL>



<H4><A NAME="_pss_4212"></A>DSRAWIO</H4>

<PRE>DSRAWIO STRUC
    dsr_hdr        db  SIZE DSHDR dup(?) ; Packet header
    dsr_flags      db  ?     ; Flags
    dsr_cclus      dw  ?     ; Count of clusters to operate on
    dsr_reserved0  dd  0     ; Reserved
    dsr_reserved1  dd  0     ; Reserved
DSRAWIO ENDS
</PRE>

<P>Contains information about a raw I/O IOCTL operation. Immediately precedes an array of <B>RawClusterInfo</B> structures. 

<DL>
<DT><B>dsr_hdr</B> </DT>

<DD>DSHDR structure that defines the header common to all DriveSpace Receive Control Data IOCTLs. </DD>

<DT><B>dsr_flags</B> </DT>

<DD>Can be DSRFLOCKED (01h) if buffers are locked. Under normal circumstances, this field must be set to zero when the IOCTL is issued. </DD>

<DT><B>dsr_cclus</B> </DT>

<DD>Number of <B>RawClusterInfo</B> structures follow the <B>DSRAWIO</B> structure. This is the same as the number of clusters on which to perform the action. </DD>

<DT><B>dsr_reserved0</B> and <B>dsr_reserved1</B> </DT>

<DD>Reserved; must be zero. 
</DD>
</DL>

<H4>See Also</H4>

<P><B>RawClusterInfo</B> </P>



<H4><A NAME="_pss_4213"></A>RawClusterInfo</H4>

<PRE>RawClusterInfo STRUC
    rci_pdata      dd  ?  ; Pointer to raw cluster data buffer
    rci_isecstart  dd  ?  ; Starting sector in sector heap
    rci_ifat       dw  ?  ; FAT index
    rci_csec       db  ?  ; Count of raw sectors
    rci_flags      db  ?  ; Flags
    rci_reserved   dd  0  ; Reserved
RawClusterInfo ENDS
</PRE>

<P>Contains information used by the raw cluster I/O IOCTLs. All pointers are flat model pointers. The same structure is used for both reads and writes, but the fields are treated somewhat differently. 

<DL>
<DT><B>rci_pdata</B> </DT>

<DD>Address of the buffer from which data is written or into which data is read. The size of the buffer, in sectors, is specified by <B>rci_csec</B>. The client must always specify a flat address regardless of the client's mode of execution. (For an MS-DOS program, the flat address is simply <I>segment</I>*16 + <I>offset</I>.) The data read or written is raw data; no compression or decompression is applied to the data. Reads return the data as it appears on the disk; writes do not modify the data before writing it to the disk. The address passed in <B>rci_pdata</B> may be valid only in the context of the client thread. For example, for V86 or Win32 clients. </DD>

<DT><B>rci_isecstart</B> </DT>

<DD>Starting sector of the cluster specified by <B>rci_imdfat</B>. On reads, this field is ignored on input and filled with the value from the MDFAT entry before returning to the client. On writes, this field specifies the starting sector at which to write the cluster. A set of writes fails if any of the target sectors are not free, or if any of the target extents overlap. </DD>

<DT><B>rci_ifat</B> </DT>

<DD>FAT index of the target cluster. </DD>

<DT><B>rci_csec</B> </DT>

<DD>Count of sectors that the cluster actually occupies on the disk. On reads, if the actual size of the cluster does not exactly match this value, the read is canceled. </DD>

<DT><B>rci_flags</B> </DT>

<DD>Receives the values of the specified flags in the MDFAT entry to the client. On writes, this field specifies the settings of the flags for the cluster to be written. Setting RCFMARK on a write to a CVF whose version is less than 3.0 has no effect. The mark bit is intended for the use of the off-line recompressor to prevent it from trying to recompress clusters it either successfully or unsuccessfully recompressed the last time it ran. Raw write is the only means by which this bit can be set, and normal writes to a cluster clear the bit. 

<P>The rci_flags field can a combination of these values: 


<TABLE>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>RCFMARK (01h) </TD>
<TD width=66%>Marked cluster </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RCFFRAG (02h) </TD>
<TD width=66%>Fragmented cluster </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RCFUNCOMP (04h) </TD>
<TD width=66%>Uncompressed cluster </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>RCFALLOC (08h) </TD>
<TD width=66%>Allocated cluster </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>rci_reserved</B> </DT>

<DD>Reserved. 
</DD>
</DL>



<H4><A NAME="_pss_4214"></A>FRAGHDR</H4>

<PRE>FRAGHDR STRUC
    fhcFrag    dd  ?         ; Count of fragments
    fhaFrag    dd  ? DUP (?) ; Variable size array of fragment entries
FRAGHDR ENDS
</PRE>

<P>Contains information about fragmented clusters. The first sector of fragmented sections contains a <B>FRAGHDR</B> structure. </P>

<P>The count of sectors stored for each fragment header entry is actually the count of sectors in the fragment minus one. Also, the first entry in <B>fhaFrag</B> describes the first fragment in the cluster, just as the MDFAT entry does. </P>

<P>You can use the following values to retrieve information from a segment entry in the <B>fhaFrag</B> array: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=40%>Value </TH>
<TH align=left width=60%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_SECTORWIDTH (23) </TD>
<TD width=60%>Width of sector number </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_SECTORSHIFT (0) </TD>
<TD width=60%>Shift sector number to low end </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_SECTORMASK (((1 SHL FG_SECTORWIDTH) - 1) SHL FG_SECTORSHIFT) </TD>
<TD width=60%>Mask for sector number </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_RESERVEDWIDTH (3) </TD>
<TD width=60%>Width of reserved bits </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_RESERVEDSHIFT (FG_SECTORSHIFT + FG_SECTORWIDTH) </TD>
<TD width=60%>Shift reserved bits to low end </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_RESERVEDMASK (((1 SHL FG_RESERVEDWIDTH) - 1) SHL FG_RESERVEDSHIFT) </TD>
<TD width=60%>Mask for reserved bits </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_CSECWIDTH (6) </TD>
<TD width=60%>Width of sector count </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_CSECSHIFT (FG_RESERVEDSHIFT + FG_RESERVEDWIDTH) </TD>
<TD width=60%>Shift sector count to low end </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>FG_CSECMASK (((1 SHL FG_CSECWIDTH) - 1) SHL FG_CSECSHIFT) </TD>
<TD width=60%>Mask for sector count </TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DriveSpace%20Functions%20and%20Structures"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
