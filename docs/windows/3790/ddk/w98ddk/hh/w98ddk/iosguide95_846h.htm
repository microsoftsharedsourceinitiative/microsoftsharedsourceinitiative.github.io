<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Dynamic Device Removal/Installation (Hot-swapping)</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Dynamic Device Removal/Installation (Hot-swapping)">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_dynamic_device_removal_installation_hot_swapping__si"></A>Dynamic Device Removal/Installation (Hot-swapping)</H2>

<P>SCSIPORT.PDR, working in concert with IOS, supports hot swapping. In order to detect hardware changes, a custom-written IOS layer VxD can periodically check for hardware insertion or removal. When either event is detected, the custom VxD can call CONFIGMG_Reenumerate_Devnode() at AppyTime. This will cause SCSI device reenumeration. SCSI device reenumeration issues a SCSI Device Inquiry command to all devices associated with SCSI miniports, to detect the arrival or disappearance of SCSI physical devices (see IOS Registration Flowchart, chart 5 for details).</P>

<P>IOS detects new devices and devices which have disappeared, and issues the corresponding system messages to inform the operating system of the device change(s).</P>

<P>If you are developing your own ATAPI miniport driver, you can take the necessary actions within the miniport driver itself when the hardware is inserted or removed. Modify the driver to make sure it completes pending I/O that has become stuck because the hardware was unplugged (or while in the process of plugging the device in). This prevents causing the system to hang, waiting for any orphaned IOPs to complete. </P>

<P>In order to locate the devnode associated with the hot-swappable device, one method is to use the SETUPX API DiGetClassDevices to find all instances of the class you are interested in (for SCSI the class is “SCSIAdapter”). </P>

<H4>ScsiPortSetBusDataByOffset</H4>

<P>This function is intended only for use when first initializing the bus. If you wish to read or write PCI Configuration Space after initialization, refer to Knowledge Base article Q140730 for more information.</P>

<P>This function was missing from the original Windows 95 DDK documentation but can be found in the original header file \DDK\BLOCK\INC\SRB.H.</P>

<P>In SCSIPORT.PDR, this routine actually is simply a wrapper to the following call: CONFIGRET CONFIGMG_Call_Enumerator_Function(DEVNODE dnDevNode, ENUMFUNC  PCI_ENUM_FUNC_SET_DEVICE_INFO, ULONG Offset, PFARVOID Buffer, ULONG Length, ULONG 0).</P>

<P>ScsiPortSetBusDataByOffset automatically accommodates non-DWORD granular boundaries by selectively preceding and/or post pending I/O accesses with byte or word  granular accesses to PCI configuration space. Thus you can write one BYTE, one WORD or one DWORD, with the correct I/O data width being issued to the PCI chip.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Dynamic%20Device%20Removal%2FInstallation%20(Hot-swapping)"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
