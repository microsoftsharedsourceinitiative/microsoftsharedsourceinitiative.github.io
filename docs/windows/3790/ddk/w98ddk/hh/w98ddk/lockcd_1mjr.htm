<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>LOCKCD Demonstration</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="LOCKCD Demonstration">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_lockcd_demonstration_ng"></A>LOCKCD Demonstration</H1>

<H4>Summary</H4>

<P>Demonstrates the use of the drive locking mechanism provided by IOS, which is used to provide exclusive access to a removable media storage device. Exclusive access prevents any other processes from interfering with the operations on that drive. Included are the necessary VxD source files as well as a simple C console application to exercise the code. This is a combination of C and 386 assembler code.</P>

<H4>Code Tour</H4>

<P><B>File Manifest</B></P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>File</TH>
<TH align=left width=52%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>App\Ld.c</TD>
<TD width=52%>Main code base for simple demonstration.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>App\Ld.h</TD>
<TD width=52%>Private header file.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>INC\Ldif.h</TD>
<TD width=52%>Public interface for the VxD.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>INC\Ldif.inc</TD>
<TD width=52%>ASM include file for previous.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>VxD\LdIOCtl.c</TD>
<TD width=52%>Sample C interface to CD for demo VxD.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>VxD\LdIOS.asm</TD>
<TD width=52%>Assembler code for IOS interface.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>VxD\LdVxD.asm</TD>
<TD width=52%>Assembler code for VxD interface.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>LockCD.rc</TD>
<TD width=52%>Simple resource file for .EXE.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>LDVXD.rc</TD>
<TD width=52%>Simple resource file for .VxD.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>LDVXD.def</TD>
<TD width=52%>Definition file for the assembler.</TD>
</TR>
</TABLE><BR>

<P>The LdVxD directory contains all the code to interface to the IOS routines for manipulating the lock mechanisms on a CDROM drive. This is generic code and may be used as a standard CDROM interface for any application, but other device types may require modification to these files.</P>

<P>The main code base for the sample application (Ld.c and Ld.h) is meant to show one interpretation of how to use the locking mechanisms in a simple wrapper. The locking mechanism itself is intended mostly for removable read/write media such as a CD-R/W, but this demo application accesses the first local CDROM drive to exercise the functionality without forcing the user to have special equipment beyond a simple CDROM drive. Note that any removable media is supported by the IOS itself, even a floppy disk drive, so one must merely decide how elaborate to make the supporting VxD. </P>

<P><B>Functions</B></P>

<P>The lowest level IOS routines offer several functions to use for the purpose of selectively controlling the locks on removable media devices.

<UL>
	<LI>_IOS_LockDrive     ; call IOS to lock the specified drive</LI>

	<LI>_IOS_UnlockDrive   ; call IOS to unlock the specified drive</LI>

	<LI>_IOS_IsDriveLocked ; call IOS to query the lock status</LI>
</UL>

<P>These in turn are used in this demo in the source file ldios.asm. Within this file there are four functions of concern:

<UL>
	<LI>LD_LockDrive</LI>

	<LI>LD_UnlockDrive</LI>

	<LI>LD_IsDriveLocked</LI>

	<LI>LD_RefreshLock</LI>
</UL>

<P>Because the IOS locking mechanism has a safety timeout to avoid deadlocks from dead processes or other faults, LD_RefreshLock allows you to refresh the locking mechanism to hold the lock when necessary. This function calls the IOS locking routine with an empty parameter, effectively resetting the timer without otherwise modifying the state of the lock. </P>

<P>Even if you only need to write C code, you will still need to use the included ASM files as well as at least part of LdIOCtl.c and Ldif.h as your coupling into the IOS library. If you choose to modify or rewrite the ASM files, be sure to follow all of the IOS routine access rules in addition to understanding the functions specific to this demo. </P>

<P>Because the IOS locking mechanism has a safety timeout to avoid deadlocks from dead processes or other faults, LD_RefreshLock allows you to refresh the locking mechanism to hold the lock when necessary. This function calls the IOS locking routine with an empty parameter, effectively resetting the timer without otherwise modifying the state of the lock. </P>

<P>Even if you only need to write C code, you will still need to use the included ASM files as well as at least part of LdIOCtl.c and Ldif.h as your coupling into the IOS library. If you choose to modify or rewrite the ASM files, be sure to follow all of the IOS routine access rules in addition to understanding the functions specific to this demonstration. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: LOCKCD%20Demonstration"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
