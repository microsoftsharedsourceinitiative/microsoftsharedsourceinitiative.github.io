<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IDA (IOS Data Area)</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="IDA (IOS Data Area)">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_ida_ios_data_area__si"></A>IDA (IOS Data Area)</H3>

<P>Use .IDIDA from debugger for list (using the debug version of IOS.VXD)</P>

<TABLE border=1 frame=box rules=all>

<TR VALIGN="top">
<TD width=6%><B>Offset</B></TD>
<TD width=39%>
<PRE><B>Element</B></PRE>
</TD>
<TD width=55%><B>Comments</B></TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>08</CODE></B></TD>
<TD width=39%><B><CODE>ULONG   IDA_ios_mem_phys</CODE></B></TD>
<TD width=55%>Physical address of IOS memory pool</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>10</CODE></B></TD>
<TD width=39%><B><CODE>ULONG   IDA_ios_timer</CODE></B></TD>
<TD width=55%>Counter - ticks every 250 milliseconds </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>20</CODE></B></TD>
<TD width=39%><B><CODE>CHAR    IDA_esdi_p_in_use</CODE></B></TD>
<TD width=55%>Nonzero = ESDI_506 has claimed  the primary esdi i/o addresses  (1f0 through 1f7, 3f6 and 3f7) and  irq (irq 14). </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>21</CODE></B></TD>
<TD width=39%><B><CODE>CHAR    IDA_esdi_s_in_use</CODE></B></TD>
<TD width=55%>Nonzero = ESDI_506 has claimed  the secondary esdi I/O addresses(170 through 177, 376 and 377) and IRQ (IRQ 15). </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>22</CODE></B></TD>
<TD width=39%><B><CODE>CHAR    IDA_Num_Floppies</CODE></B></TD>
<TD width=55%>Number of floppies in the system as determined by the real-mode init portion of IOS.VXD.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>24</CODE></B></TD>
<TD width=39%><B><CODE>USHORT  IDA_platform</CODE></B></TD>
<TD width=55%>Platform (machine type) code. 
<P>#define IS_ISA     0x0001  // platform is isa</P>

<P><CODE>#define IS_EISA    0x0002  // platform is eisa</CODE></P>

<P><CODE>#define IS_MCA     0x0004  // platform is microchannel</CODE></P>

<P><CODE>#define IS_FAMILY3 0x0008  // platform is Family 3</CODE></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>28</CODE></B></TD>
<TD width=39%><B><CODE>ULONG   IDA_flags</CODE></B></TD>
<TD width=55%>Various state flags, see below for value definitions.
<P><CODE>IDAF_BOOT_COMPLETE  0x0001 // boot complete</CODE></P>

<P><CODE>IDAF_REAL_MODE_ONLY 0x0002 // no prot mode port</CODE></P>

<P><CODE>drivers may load</CODE></P>

<P><CODE>IDAF_BIG_MEMORY     0x0040 // &gt;16MB system memory.</CODE></P>

<P><CODE>IDAF_PUNT_CDS       0x0800 // force CD access through</CODE></P>

<P><CODE>real mode (unsafe CD </CODE></P>

<P><CODE>driver found)</CODE></P>

<P><CODE>IDAF_MSCDEX_PRESENT 0x1000 // indicates MSCDEX in the</CODE></P>

<P><CODE>system</CODE></P>

<P><CODE>IDAF_DOS_PAGER      0x2000 // system is paging </CODE></P>

<P><CODE>through DOS</CODE></P>

<P><CODE>IDAF_SHUTDOWN       0x4000 // system is shutting down</CODE></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>6C</CODE></B></TD>
<TD width=39%><B><CODE>USHORT  IDA_rm_irq</CODE></B></TD>
<TD width=55%>Bitmap of unrecognized real-mode drivers' IRQs. Used to identify which IRQs cannot be used by protected-mode drivers.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>2C</CODE></B></TD>
<TD width=39%><B><CODE>PVOID   IDA_platform_config_data</CODE></B></TD>
<TD width=55%>Pointer to PCD chain (containing structures PCD_fixed_disk, and PCD_floppy_disk obtained prior to switch to protected mode) as computed in the real-mode init portion of IOS.VXD. See Listing 1 for structure.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>30</CODE></B></TD>
<TD width=39%><B><CODE>PVOID   IDA_first_dcb</CODE></B></TD>
<TD width=55%>
<PRE>Pointer to first DCB.</PRE>
</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>34</CODE></B></TD>
<TD width=39%><B><CODE>PVOID   IDA_logical_dev_map</CODE></B></TD>
<TD width=55%>Pointer to an array of LDM structures (see Listing 2). Logical device map for real-mode devices.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>38</CODE></B></TD>
<TD width=39%><B><CODE>PVOID   IDA_physical_dev_map</CODE></B></TD>
<TD width=55%>Pointer to struct IDM array Int13 disk map. Structure used to  audit and reconcile boot record vs. drive letter when assigning drive letters during IOS conversion from real-mode to protected-mode drivers. First built during real-mode IOS init phase. Contains list of these structures:
<P><CODE>typedef struct IDM { </CODE></P>

<P><CODE>UCHAR IDM_int13_number; // int 13 unit; FFh if end</CODE></P>

<P><CODE>of table </CODE></P>

<P><CODE>ULONG IDM_signature;    // signature from boot</CODE></P>

<P><CODE>record</CODE></P>

<P><CODE>ULONG IDM_checksum;     // checksum of boot record </CODE></P>

<P><CODE>USHORT IDM_flags;       // bit flags; 0x1=sig is</CODE></P>

<P><CODE>checksum method, </CODE></P>

<P><CODE>0x2=has been claimed by         </CODE></P>

<P><CODE>protected-mode driver</CODE></P>

<P><CODE>} IDM</CODE></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>3C</CODE></B></TD>
<TD width=39%><B><CODE>PVOID  IDA_rmm_phys_dcb</CODE></B></TD>
<TD width=55%>Pointer to the RMM (Real-Mode Mapper for handling real-mode drivers) DCB if there is one.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>40</CODE></B></TD>
<TD width=39%><B><CODE>PVOID  IDA_first_vrp</CODE></B></TD>
<TD width=55%>Pointer to first Volume Request Parameters structure (VRPs are chained together using VRP_next_vrp. See VRP.H.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>44</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_drive_letter_map</CODE></B></TD>
<TD width=55%>Logical drive bitmap for assigning logical disk numbers. </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>48</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_cdrom_letter_map</CODE></B></TD>
<TD width=55%>Logical drive bitmap for CD-ROM devices. </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>4C</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_rmd_ptr</CODE></B></TD>
<TD width=55%>Flat pointer to start of INT 2fh startup chain (Pointer to RMD list head), obtained using INT 2fh function 16h, subfunction 90h.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>50</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_aspi_cam_rmds</CODE></B></TD>
<TD width=55%>Start of ASPI/CAM RMDs. </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>54</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_big_mem_buf_virt</CODE></B></TD>
<TD width=55%>Big memory buffer pointers. </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>58</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_big_mem_buf_phys</CODE></B></TD>
<TD width=55%>Physical address of big memory buffer.</TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>5C</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_big_mem_buf_size</CODE></B></TD>
<TD width=55%>Size of big memory buffer. </TD>
</TR>

<TR VALIGN="top">
<TD width=6%><B><CODE>60</CODE></B></TD>
<TD width=39%><B><CODE>ULONG  IDA_ios_mem_pool_size</CODE></B></TD>
<TD width=55%>Size of IOS local heap - size of IDA structure (memory available for IOS layer driver or port driver memory requests). </TD>
</TR>
</TABLE><BR>

<P>Miscellaneous internal IOS static information (also displayed using .IDIDA)</P>

<TABLE border=1 frame=box rules=all>

<TR VALIGN="top">
<TD width=7%><B>Offset</B></TD>
<TD width=38%>
<PRE><B>Element</B></PRE>
</TD>
<TD width=55%><B>Comments</B></TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>DCB * logical_drive_table[26]</CODE></B></TD>
<TD width=55%>This table maps the logical drive letters to their corresponding DCB.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>DCB * physical_drive_table[24]</CODE></B></TD>
<TD width=55%>This table maps pointers to the DCBs corresponding to INT13 nondiskette physical disk storage unit numbers (starting with BIOS unit 0x80).</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>DCB * physical_floppy_table[8]</CODE></B></TD>
<TD width=55%>This table maps pointers to the DCBs corresponding to INT13 diskette physical disk storage unit numbers (starting with BIOS unit 0x00).</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>void * IOSPanicHead </CODE></B></TD>
<TD width=55%>Panic buffer list head; used when IOS is blocked from being able to allocate memory from heap.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>IOSInitFlags</CODE></B></TD>
<TD width=55%>Assorted these flags, mostly used internally by IOS to manage the handling of real-mode ASPI and CAM drivers. Bit 0x400 indicates IOS has completed its initialization (IOS_Init_Complete).</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>IOS_Int13_Device_Chain</CODE></B></TD>
<TD width=55%>This is a linked list consisting of the DCB_bdd portion of each DCB supporting INT13. The DCB_bdds are linked using the DCB_BDD_Next field.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>Void * MemSem</CODE></B></TD>
<TD width=55%>Wait_semaphore() semaphore handle data used by the IOS memory manager. Blocks while waiting for some other IOS client to free some memory up. See also, MemBlockers.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>BYTE MemBlockers</CODE></B></TD>
<TD width=55%>Count of threads awaiting memory allocation using the MemSem semaphore.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>Void * SemTabSem</CODE></B></TD>
<TD width=55%>Semaphore, initially allocated with 8 credits. Blocks if more than 8 threads attempt to go through IOS. If does not block, then one of the SemTab[] semaphores is used to accommodate the synchronous mechanism.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>Void * SemTab[8]</CODE></B></TD>
<TD width=55%>Eight semaphores are allocated to accommodate synchronous commands. The byte in SemTabInd indicates free/busy semaphores in SemTab.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>BYTE SemTabInd</CODE></B></TD>
<TD width=55%>Bit map indicating which SemTab[] semaphores are in use. Bit clear (0) indicates semaphore is in use.</TD>
</TR>

<TR VALIGN="top">
<TD width=7%><B><CODE>-</CODE></B></TD>
<TD width=38%><B><CODE>DCB * inquiry_dcb</CODE></B></TD>
<TD width=55%>Pointer to the inquiry DCB used by IOS during AEP_DEVICE_INQUIRY phase of layer driver initialization. Used for testing for the existence of physical devices attached to port drivers. NOTE: This DCB is deallocated from memory after IOS completes initialization.</TD>
</TR>
</TABLE><BR>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: IDA%20(IOS%20Data%20Area)"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
