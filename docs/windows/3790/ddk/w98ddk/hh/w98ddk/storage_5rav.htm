<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DRP</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4257"></A>DRP</H3>

<PRE>#include &lt;drp.h&gt;

typedef struct DRP { 
    CHAR   DRP_eyecatch_str[8];  // eye catcher string
    ULONG  DRP_LGN;              // load group number; see below
    PVOID  DRP_aer;              // addr of asynchronous event routine
    PVOID  DRP_ilb;              // address of ILB; see below
    CHAR   DRP_ascii_name[16];   // driver name; see below
    BYTE   DRP_revision;         // driver revision
    ULONG  DRP_feature_code;     // feature code; see below
    USHORT DRP_if_requirements;  // I/F requirements; see below
    UCHAR  DRP_bus_type;         // type of I/O bus; see below
    USHORT DRP_reg_result;       // registration result; see below
    ULONG  DRP_reference_data;   // data to pass with AEP_INITIALIZE
    UCHAR  DRP_reserved1[2];     // reserved
    ULONG  DRP_reserved2[1];     // reserved; must be zero
} DRP, *PDRP;
</PRE>

<P>Contains driver registration packet information. 

<DL>
<DT><B>DRP_eyecatch_str</B> </DT>

<DD>Eye catcher string. Must be "XXXXXXXX". </DD>

<DT><B>DRP_LGN</B> </DT>

<DD>Load group mask for the driver. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=27%>DRP_IFS </TD>
<TD width=73%>Reserved for IFSMGR. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_FSD </TD>
<TD width=73%>Installable file system layer. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_FSD_EXT_1 </TD>
<TD width=73%>FSD extension, for example, DBLSPACE. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_FSD_EXT_2 </TD>
<TD width=73%>FSD extension, for example, encryption. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VOLTRK </TD>
<TD width=73%>Post-volume tracking value added driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_CLASS_DRV </TD>
<TD width=73%>Class driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_TSD </TD>
<TD width=73%>Type specific driver (TSD). </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_1 </TD>
<TD width=73%>Driver is in vendor enhancement layer 1. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_2 </TD>
<TD width=73%>Driver is in vendor enhancement layer 2. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_3 </TD>
<TD width=73%>Driver is in vendor enhancement layer 3. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_SCSI_LAYER </TD>
<TD width=73%>SCSI-izer. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_4 </TD>
<TD width=73%>Driver is in vendor enhancement layer 4. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_5 </TD>
<TD width=73%>Driver is in vendor enhancement layer 5. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_6 </TD>
<TD width=73%>Driver is in vendor enhancement layer 6. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_7 </TD>
<TD width=73%>Driver is in vendor enhancement layer 7. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_8 </TD>
<TD width=73%>Driver is in vendor enhancement layer 8. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_VSD_9 </TD>
<TD width=73%>Driver is in vendor enhancement layer 9. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_MISC_PD </TD>
<TD width=73%>Other port drivers. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_NT_MPD </TD>
<TD width=73%>SCSI miniport drivers. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_NT_PD </TD>
<TD width=73%>Windows NT/2000, hardware-independent port driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_ESDI_PD </TD>
<TD width=73%>ESDI port driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_ESDIEMUL_PD </TD>
<TD width=73%>Port drivers for ESDI emulators. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_ABIOS_PD </TD>
<TD width=73%>ABIOS port driver. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_ABIOS_PREMPT_PD </TD>
<TD width=73%>ABIOS preempting port drivers. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_NEC_FLOPPY </TD>
<TD width=73%>NEC floppy driver layer. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_SOC_SER_DRV </TD>
<TD width=73%>Socket service drivers. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_SOC_DRV </TD>
<TD width=73%>Socket drivers. </TD>
</TR>

<TR VALIGN="top">
<TD width=27%>DRP_IOS_REG </TD>
<TD width=73%>Reserved for IOS registry. </TD>
</TR>
</TABLE><BR>



<P>All other values are reserved and must not be used. 
</DD>

<DT><B>DRP_ilb</B> </DT>

<DD>Virtual address of the <B>ILB</B> structure that receives IOS linkage information. </DD>

<DT><B>DRP_ascii_name</B> </DT>

<DD>16-byte string specifying the name of the driver. </DD>

<DT><B>DRP_feature_code</B> </DT>

<DD>Feature code; must match the feature code in the <B>DVT</B>. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=37%>DRP_FC_SCAN_DOWN </TD>
<TD width=63%>BIOS scans targets from high to low. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_IO_FOR_INQ_AEP </TD>
<TD width=63%>Port driver needs to send I/O through IOP in response to an AEP_DEVICE_INQUIRY function. Results in AEP_CONFIG_DCB function for inquiry DCB. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_HALF_SEC </TD>
<TD width=63%>Notify driver every half second. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_1_SEC </TD>
<TD width=63%>Notify driver every second. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_2_SECS </TD>
<TD width=63%>Notify driver every two seconds. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_4_SECS </TD>
<TD width=63%>Notify driver every four seconds. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_DYNALOAD </TD>
<TD width=63%>Driver was dynamically loaded by IOS. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_NEED_PRELOAD </TD>
<TD width=63%>Driver needs to hook I/O even before the port driver. When set, the AEP_CONFIG_DCB function is received before the port driver. (NOTE: See DCB_dmd_preload flag, which corrects a DRP_FC_NEED_PRELOAD bug)</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>DRP_FC_NEED_PRE_POST_LOAD </TD>
<TD width=63%>Same as DRP_FC_NEED_PRELOAD except the drive will receive 2 AEP_CONFIG_DCB function calls for each DCB: one call before the port driver, and another after layers before its load group have been initialized. Note that care must be taken not to insert twice into the same DCB. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>DRP_if_requirements</B> </DT>

<DD>I/F requirements. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=33%>DRP_IF_ISA </TD>
<TD width=67%>Driver supports ISA platforms. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_IF_EISA </TD>
<TD width=67%>Driver supports EISA platforms. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_IF_MCA </TD>
<TD width=67%>Driver supports MCA platforms. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_IF_STD </TD>
<TD width=67%>Driver supports all standard platforms. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>DRP_bus_type</B> </DT>

<DD>Type of I/O bus if port driver. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=33%>DRP_BT_ESDI </TD>
<TD width=67%>ESDI or ESDI emulator. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_BT_SCSI </TD>
<TD width=67%>SCSI or SCSI emulator. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_BT_FLOPPY </TD>
<TD width=67%>NEC FLOPPY or FLOPPY emulator. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_BT_SMART </TD>
<TD width=67%>Smart device. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DRP_BT_ABIOS </TD>
<TD width=67%>ABIOS or ABIOS emulator. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>DRP_reg_result</B> </DT>

<DD>Registration result. Can be one of these values: 

<TABLE>

<TR VALIGN="top">
<TD width=43%>DRP_REMAIN_RESIDENT </TD>
<TD width=57%>Driver should remain resident. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>DRP_MINIMIZE </TD>
<TD width=57%>Driver should minimize. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>DRP_ABORT </TD>
<TD width=57%>Driver should not load. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>DRP_INVALID_LAYER </TD>
<TD width=57%>Bad layer number; abort driver. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>DRP_reference_data</B> </DT>

<DD>Data to pass with subsequent AEP_INITIALIZE functions. 
</DD>
</DL>

<H4>See Also</H4>

<P><B>IOS_Register</B>, <B>AEP</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DRP"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
