<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniVDD_Dynamic_Init</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_647"></A>MiniVDD_Dynamic_Init</H3>

<H4>Call With</H4>

<P>EBX: Contains the System (Windows) VM Handle </P>

<H4>Return Values</H4>

<P>You should preserve EBX; all other registers can be destroyed. Return with the carry flag clear to indicate that <B>Dynamic_Init</B> succeeded and that the mini-VDD did not detect any problems with the video hardware. Return with the carry flag set to indicate an error. </P>

<H4>Remarks</H4>

<P>Early in the Windows® 95 boot sequence, the Main VDD reads the Registry to get the correct mini-VDD to load and then proceeds to load the mini-VDD. As soon as the VxD loader loads the mini-VDD, <B>MiniVDD_Dynamic_Init</B> is called. The mini-VDD performs several checks of the video hardware at this time. If the mini-VDD does not detect any problems with the video hardware, the mini-VDD is successfully loaded. If the mini-VDD finds a problem such as running on the wrong hardware, <B>MiniVDD_Dynamic_Init </B>returns with the carry flag set indicating that there is a problem, and the Main VDD returns an error to the Plug &amp; Play subsystem. The Plug &amp; Play subsystem then displays an error message dialog box to the user concerning the problem with the display settings, and allows the user to run a hardware detection program to correct the problem. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>The mini-VDD must do several things during </B>MiniVDD_Dynamic_Init

<OL>
	<LI>It must check to make sure that it is running on the proper hardware by doing a non-destructive detection. If it is not running on a supported chipset, the mini-VDD should return immediately with the carry flag set to report the error. </LI>

	<LI>If the same mini-VDD is used on different chipsets, it should identify what chipset it is running on and save this chipset ID. For more information, see the description of the mini-VDD hook function <B>GET_CHIP_ID</B> as well as the ATI example mini-VDD. </LI>

	<LI>It should allocate space in the CB data area to save register and mode states on a per-VM basis. The data that your mini-VDD saves in the allocated space in the CB data area varies for every mini-VDD. For example, the Windows VM may set CRTC register 42h to one value and a MS-DOS VM might set register 42h to another value. Your register virtualization routines must virtualize CRTC register 42h and save each of its values in the CB data area. When called upon to restore the register 42h for a certain VM, it can restore the correct value for each VM's required state. If the CB data area allocation fails, then the system is in an unstable state and <B>MiniVDD_Dynamic_Init </B>should return with the carry flag set to indicate an error. </LI>

	<LI>It should obtain the address of the mini-VDD hook dispatch table using the service <B>VDD_Get_Mini_Dispatch_Table</B>. Then, the mini-VDD can install the address of the routines that it needs to hook in this table by using the <B>MiniVDDDispatch</B> macro found in MINIVDD.INC. See the example mini-VDDs included in the DDK for proper use of the <B>MiniVDDDispatch</B> macro. +The mini-VDD should also perform a version check at this point by comparing the total number of mini-VDD hook functions using the equate NBR_MINI_VDD_FUNCTIONS (included in MINIVDD.INC) to the number returned in ECX by the service <B>VDD_Get_Mini_Dispatch_Table</B>. If the NBR_MINI_VDD_FUNCTIONS is greater than the value returned in ECX, then it means that the mini-VDD has hook functions that the Main VDD does not know about. This would indicate that the mini-VDD is newer than the Main VDD. In this case, the mini-VDD should fail. </LI>

	<LI>The mini-VDD should get and save the special VM handles, Blue Screen Message Mode and Forced Planar Mode, that the Main VDD has setup. The mini-VDD function <B>RESTORE_REGISTERS </B>uses these handles to properly restore the blue-screen-message mode state or the forced planar state. See <B>RESTORE_REGISTERS </B>for details. </LI>
</OL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniVDD_Dynamic_Init"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
