<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Expansion Areas</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_4067"></A>Expansion Areas</H2>

<P>An <B>IOP</B> contains, among other members, the expansion areas required by each driver that receives the <B>IOP</B>. When a driver receives an <B>IOP</B>, it can access its expansion area by using the offset in the <B>DCB_cd_expan_off</B> field to calculate the starting address of the area. </P>

<P>The IOS creates the expansion area for a driver when the driver inserts itself in to the calldown chain. The IOS reserves the number of bytes specified by the <B>ISP_i_cd_expan_len</B> member for the expansion area for the driver. As drivers add themselves to the calldown chain, the IOS keeps a running total of the bytes reserved for all the expansion areas. It keeps this total in the <B>DCB_expansion_length</B> field. The IOS uses this field to determine the offset to a new expansion area whenever a driver requests one. </P>

<P>After all drivers inserted themselves in the calldown chain, the IOS calculates the size of an <B>IOP</B> as the sum of a static <B>IOP</B>, including the <B>IOP</B> header and <B>IOR</B> structure, and the total size of the expansion areas as given by the <B>DCB_expansion_length</B> field. The IOS places this total <B>IOP</B> size in the <B>VRP</B> structure so that IOS clients that prepare requests can allocate an <B>IOP</B> of the correct size. All expansion areas are placed in front of  the static <B>IOP </B>(the linear address is lower). </P>

<P>The expansion area offset a driver receives depends on the order in which the driver is initialized. The offsets into the expansion area are negative, so that a driver loading later will have a lower memory address pointing to its expansion offset. </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=33%>Insertion Order </TH>
<TH align=left width=33%>Size </TH>
<TH align=left width=34%>Offset </TH>
</TR>

<TR VALIGN="top">
<TD width=33%>3rd </TD>
<TD width=33%>Z </TD>
<TD width=34%>-(X+Y+Z) </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>2nd </TD>
<TD width=33%>Y </TD>
<TD width=34%>-(X+Y) </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>1st </TD>
<TD width=33%>X </TD>
<TD width=34%>-X</TD>
</TR>
</TABLE><BR>

<H4>See Also</H4>

<P><B>DCB</B>, <B>IOP</B>, <B>VRP</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Expansion%20Areas"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
