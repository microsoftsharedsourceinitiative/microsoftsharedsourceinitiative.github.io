<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Abort SCSI I/O Command</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4131"></A>Abort SCSI I/O Command</H3>

<P>Prototype: DWORD SendASPI32Command(LPSRB) </P>

<P>Declaration: LPSRB lpSRB; </P>

<P>The SendASPI32Command function with command code SC_ABORT_SRB is used to request that a pending SRB be aborted. It should be issued on any I/O request that has not completed if the application wishes to time-out on that request. Success of the abort command is never assured. </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=31%>Parameter </TH>
<TH align=left width=69%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=31%>lpSRB </TD>
<TD width=69%>Points to the following SCSI request block </TD>
</TR>
</TABLE><BR>

<PRE>typedef struct {

 BYTE  SRB_Cmd;    // ASPI command code = SC_ABORT_SRB  
 BYTE  SRB_Status;   // ASPI command status byte
 BYTE  SRB_HaId;    // ASPI host adapter number
 BYTE  SRB_Flags;   // Reserved
 DWORD  SRB_Hdr_Rsvd;  // Reserved
 void  *SRB_ToAbort;  // Pointer to SRB to abort

} SRB_Abort, *PSRB_Abort;
</PRE>

<P>Table 4-8. Abort SCSI I/O Command </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Member </TH>
<TH align=left width=75%>Description </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Cmd </TD>
<TD width=75%>[IN] This field must contain SC_ABORT_SRB. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Status </TD>
<TD width=75%>[OUT] On return, this field will be the same as the return status defined in the following. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_HaId </TD>
<TD width=75%>[IN] This field specifies which installed host adapter the request is intended for. Host adapter numbers are always assigned by the ASPI manager layer beginning with zero. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Flags </TD>
<TD width=75%>[IN] Reserved = zero </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_Hdr_Rsvd </TD>
<TD width=75%>Reserved = zero </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SRB_ToAbort </TD>
<TD width=75%>[IN] This fields contains a pointer to the SRB which is to be aborted. The actual failure or success of the abort operation is indicated by the status eventually returned in this SRB. </TD>
</TR>
</TABLE><BR>

<P>Table 4-9. Return Values from Abort SCSI I/O Command </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=25%>Value </TH>
<TH align=left width=75%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=25%>SS_COMP </TD>
<TD width=75%>SCSI/ASPI request has completed without error. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SS_INVALID_HA </TD>
<TD width=75%>Invalid host adapter number. </TD>
</TR>

<TR VALIGN="top">
<TD width=25%>SS_INVALID_SRB </TD>
<TD width=75%>One or more parameters in the SCSI Request Block (SRB) are set incorrectly. </TD>
</TR>
</TABLE><BR>

<P><B>Example</B> </P>

<P>This example shows how to abort a "stuck" SCSI I/O. </P>

<PRE> SRB_ExecSCSICmd StuckSRB;
 SRB_Abort AbortSRB;
 DWORD ASPIStatus;
  .
  .
 AbortSRB.SRB_Cmd    = SC_ABORT_SRB;
 AbortSRB.SRB_HaId   = 0;
 AbortSRB.SRB_Flags   = 0;
 AbortSRB.SRB_Hdr_Rsvd  = 0;
 AbortSRB.SRB_ToAbort  = (LPSRB) &amp;StuckSRB;
 ASPIStatus      = SendASPI32Command ( (LPSRB) &amp;AbortSRB );
  .
  .
</PRE>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Abort%20SCSI%20I%2FO%20Command"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
