<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>USBCAMD_DEVICE_DATA</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_usbcamd_usbcamd_device_data"></A>USBCAMD_DEVICE_DATA</H2>

<P>The following structure contains pointers to all the cam minidriver's entry points and creates a basic description for a camera. It needs to be initialized prior to use and all the functions must be defined, although unused or inapplicable calls may be set to NULL. While the actual implementation is defined by the vendor, the format, in general, and the function prototype, in specific, are detailed in the following sections. Hardware vendors may create additional calls they feel necessary but they would not be supported by industry standards.</P>

<PRE class=syntax>typedef struct _USBCAMD_DEVICE_DATA
{
  ULONG  Sig;
  PCAM_INITIALIZE_ROUTINE  CamInitialize;
  PCAM_INITIALIZE_ROUTINE  CamUnInitialize
  PCAM_PROCESS_PACKET_ROUTINE  CamProcessUSBPacket;
  PCAM_NEW_FRAME_ROUTINE  CamNewVideoFrame;
  PCAM_PROCESS_RAW_FRAME_ROUTINE  CamProcessRawVideoFrame;
  PCAM_START_CAPTURE_ROUTINE  CamStartCapture;
  PCAM_STOP_CAPTURE_ROUTINE  CamStopCapture;
  PCAM_CONFIGURE_ROUTINE  CamConfigure;
  PCAM_STATE_ROUTINE  CamSaveState;
  PCAM_STATE_ROUTINE  CamRestoreState;
  PCAM_ALLOCATE_BW_ROUTINE  CamAllocateBandwidth;
  PCAM_FREE_BW_ROUTINE  CamFreeBandwidth;
} USBCAMD_DEVICE_DATA, *PUSBCAMD_DEVICE_DATA;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Sig</B></DT>

<DD>Data structure signature that a camera minidriver can fill in.</DD>

<DT><B>CamInitialize</B></DT>

<DD>Pointer to a function for initializing the minidriver.</DD>

<DT><B>CamUnInitialize</B></DT>

<DD>Pointer to a function for deallocation resources when a minidriver is no longer required.</DD>

<DT><B>CamProcessUSBPacket</B></DT>

<DD>Pointer to a function for deciding ownership of a video frame.</DD>

<DT><B>CamNewVideoFrame</B></DT>

<DD>Pointer to a function to initialize a new video frame.</DD>

<DT><B>CamProcessRawVideoFrame</B></DT>

<DD>Pointer to a function for decoding a generic video frame.</DD>

<DT><B>CamStartCapture</B></DT>

<DD>Pointer to a function to initialize a particular device stream.</DD>

<DT><B>CamStopCapture</B></DT>

<DD>Pointer to a function to deallocate bandwidth from a device stream.</DD>

<DT><B>CamConfigure</B></DT>

<DD>Pointer to a function to configure a stream prior to initializing a specific device.</DD>

<DT><B>CamSaveState</B></DT>

<DD>Pointer to a function to save the current device context.</DD>

<DT><B>CamRestoreState</B></DT>

<DD>Pointer to a function to restore the previously saved device context.</DD>

<DT><B>CamAllocateBandwidth</B></DT>

<DD>Pointer to a function to select the appropriate interface and bandwidth.</DD>

<DT><B>CamFreeBandwidth</B></DT>

<DD>Pointer to a function selecting an interface that uses no bandwidth after a stream has been stopped.
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: USBCAMD_DEVICE_DATA"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
