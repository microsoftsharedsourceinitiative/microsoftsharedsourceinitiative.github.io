<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Interrupt-Time and Reentrancy Considerations for modMessage</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_2369"></A>Interrupt-Time and Reentrancy Considerations for modMessage</H3>

<P>The <B>midiOutShortMsg</B> and <B>midiOutLongMsg</B> functions can be called by applications (and by device drivers) at interrupt time. Thus, the <B>modMessage</B> entry-point function in a MIDI output device driver can be accessed at interrupt time and must be written to be reentrant for the MODM_DATA and MODM_LONGDATA messages. </P>

<P class=note><B>Note</B>&nbsp;&nbsp;For internal MIDI synthesizer drivers, the interrupt-time reception of the MODM_DATA and MODM_LONGDATA messages has an additional consequence: The driver cannot access the disk at interrupt-time to load patch data if it receives a MIDI program-change request. </P>

<P>An example of the reentrancy situation is illustrated by an application that takes incoming MIDI events and sends them to a MIDI output port. The application's low-level callback function for MIDI input receives a MIDM_DATA message, accompanied by the incoming MIDI data. The callback function calls <B>midiOutShortMsg</B> to send the data to a MIDI output port. The <B>modMessage</B> entry-point function in the output port driver is called with a MODM_DATA message. This all happens at interrupt time. While <B>modMessage</B> is processing the MODM_DATA message, another MIDI event arrives at the input port, and the process starts again, with <B>modMessage</B> being reentered with another MODM_DATA message. </P>

<P>To handle being called at interrupt time, the <B>modMessage</B> entry-point function must follow these guidelines: 

<UL>
	<LI><B>modMessage</B> must reside in a FIXED code segment. Any functions called during processing of the MODM_DATA and MODM_LONGDATA messages must also be in a FIXED code segment. </LI>

	<LI><B>modMessage</B> can access only data in FIXED data segments when processing the MODM_DATA and MODM_LONGDATA messages. </LI>
</UL>

<P>One way for synchronous drivers to be reentrant is to detect when <B>modMessage</B> is reentered and return a MIDIERR_NOTREADY error. </P>

<P class=note><B>Note</B>&nbsp;&nbsp;A good way for a synchronous driver to handle being reentered is for the driver to maintain a small buffer to hold data received when it's reentered, instead of returning MIDIERR_NOTREADY. Before the driver returns from the original modMessage call (the one that was reentered), it makes sure that all data in this buffer is sent to the hardware. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Interrupt-Time%20and%20Reentrancy%20Considerations%20for%20modMessage"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
