<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Simulate_IO</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1206"></A>Simulate_IO</H1>

<PRE>include vmm.inc

mov     eax, Data          ; data for output operations
mov     ebx, VM            ; current VM handle
mov     ecx, IOType        ; type of I/O operation
mov     edx, Port          ; I/O port number
mov     ebp, OFFSET32 crs  ; address of Client_Reg_Struc
VMMJmp  Simulate_IO

mov     [Data], eax        ; data for input operation
 </PRE>

<P>Reduces complex I/O instructions to simpler I/O operations. An I/O callback procedure typically jumps to this service whenever the procedure receives a type of I/O that it does not directly support. Uses EAX, EBX, ECX, EDI, EDX, ESI, Flags. </P>

<P>Returns with the input data in the EAX register, if the IOType parameter specifies an input operation. The size of the value in the EAX register is implied by the operation type. 

<DL>
<DT><I>Data</I></DT>

<DD>Data for an output operation. This parameter is used only if the <I>IOType</I> parameter specifies an output operation. </DD>

<DT><I>VM</I></DT>

<DD>Handle of the current virtual machine. </DD>

<DT><I>IOType</I></DT>

<DD>Type of I/O operation, as specified in a call to an I/O trap procedure. Can be one or more of these values: 

<TABLE>

<TR VALIGN="top">
<TH align=left width=21%>Value </TH>
<TH align=left width=79%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=21%>Addr_32_IO </TD>
<TD width=79%>Uses 32-bit address offsets for input or output string operations. If this value is not given, the 16-bit offsets are used. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Byte_Input </TD>
<TD width=79%>Inputs a single byte; place in AL if String_IO is not given. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Byte_Output </TD>
<TD width=79%>Outputs a single byte from AL if String_IO is not given. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Dword_Input </TD>
<TD width=79%>Inputs a doubleword; place in EAX if String_IO is not given. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Dword_Output </TD>
<TD width=79%>Outputs a doubleword from EAX if String_IO is not given. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Rep_IO </TD>
<TD width=79%>Repeats the input or output string operation the number of times specified by the <B>Client_CX</B> field in the <B>Client_Reg_Struc</B> structure. (The number of repetitions is stored in the <B>Client_ECX</B> field if Addr_32_IO is also set.) </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Reverse_IO </TD>
<TD width=79%>Decrements string address on each input or output operation. If this value is not given, the string address is incremented on each operation. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>String_IO </TD>
<TD width=79%>Inputs or outputs a string. The high 16-bits specifies the segment address of the buffer containing the string to output, or to receive the string input. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Word_Input </TD>
<TD width=79%>Inputs a word; place in AX if String_IO is not given. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Word_Output </TD>
<TD width=79%>Outputs a word from AX if String_IO is not given. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>Port</I></DT>

<DD>Number of the I/O port through which to carry out the operation. If word I/O is requested, then Port+1 is also used. If dword I/O is requested, then Port+1 through Port+3 are also used. </DD>

<DT><I>crs</I></DT>

<DD>Address of a <B>Client_Reg_Struc</B> structure containing the register contents for the current virtual machine. 
</DD>
</DL>

<P>The parameters to this service are identical to the parameters passed to an I/O callback procedure. A callback procedure should jump to this service, using the <B>VMMJmp</B> macro, with all of the registers in the same state as when the procedure was called. The procedure may modify the ESI and EDI register before jumping, if necessary. </P>

<H4>See Also</H4>

<P><B>Dispatch_Byte_IO</B>, <B>Emulate_Non_Byte_IO</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Simulate_IO"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
