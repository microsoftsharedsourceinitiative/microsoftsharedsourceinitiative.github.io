<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Memcheck Errors</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Memcheck Errors">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_memcheck_errors_me"></A>Memcheck Errors</H2>

<P>Periodically, as Memcheck is running, the user may encounter an int 3 in the debugger that looks something like this: </P>

<PRE>ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR*ERROR
Caller Address: c186dec0
Module Name: UNKNOWN
<I>MEMCHECK EXTERNAL ERROR: Memcheck has detected a memory deallocation failure.</I>
<I>This WILL result in a memory leak. _HeapFree failed!</I>
eax=00000001 ebx=ca76e70c ecx=d21b8c40 edx=d21b8c78 esi=c2a0e960 edi=00000000
eip=c00e3a19 esp=d20d4dfc ebp=d20d4e00 iopl=0 -- -- -- nv up EI pl nz na po nc
cs=0028 ss=0030 ds=0030 es=0030 fs=0078 gs=0030 cr2=beb299f0 efl=00000202
0028:c00e3a19 cc int 3 
de##ln c186dec0
0028:c186de97 DSOUND.dsvxd:_PTEXT:?Terminate@CGrace@@UAEXXZ + 29
0028:c186dec8 ?MixEndingBuffer@CGrace@@AAEXPAVCMixSource@@JJJJ@Z - 8
de##ds ss:esp
0030:d20d4dfc = 00000000, %00000000 + 0
0030:d20d4e00 = d20d4f70, %d20d4f70 + 0
0030:d20d4e04 = c00e2c64, MEMCHECK(1)+2D2C + 0
0030:d20d4e08 = c001249c, _HeapFree + 0
0030:d20d4e0c = c186dec0, ?Terminate@CGrace@@UAEXXZ + 29
0030:d20d4e10 = 00000000, %00000000 + 0
0030:d20d4e14 = 00000000, %00000000 + 0
0030:d20d4e18 = c186dec0, ?Terminate@CGrace@@UAEXXZ + 29
0030:d20d4e1c = 00000000, %00000000 + 0
0030:d20d4e20 = 00000000, %00000000 + 0
0030:d20d4e24 = 00000000, %00000000 + 0
0030:d20d4e28 = c2a0e960, %c2a0e960 + 0
0030:d20d4e2c = ca76ec6d, ?Terminate@CKeGrace@@UAEXXZ + 1d
0030:d20d4e30 = c29a9030, %c29a9030 + 0
0030:d20d4e34 = c186d3ff, ?FreeMixer@CKeGrDest@@UAEXXZ + a
0030:d20d4e38 = d20d4e64, %d20d4e64 + 0
0030:d20d4e3c = c186d812, _ioctlMixDest_FreeMixer + 13
0030:d20d4e40 = ca76e720, DSOUND_DDB + 14
0030:d20d4e44 = d20d4e64, %d20d4e64 + 0
0030:d20d4e48 = ca76e8a9, ctrlDeviceIOControl + 19
de##d
0030:d20d4e4c = d20d4e64, %d20d4e64 + 0
0030:d20d4e50 = ca76e70c, DSOUND_DDB + 0
0030:d20d4e54 = d20d4e64, %d20d4e64 + 0
0030:d20d4e58 = ca76e720, DSOUND_DDB + 14
0030:d20d4e5c = c02a3510, vWin32_DIOC_Ex_End + 14
0030:d20d4e60 = c0009310, Return_To_VM + 0
0030:d20d4e64 = d20d4f70, %d20d4f70 + 0
0030:d20d4e68 = c2920074, %c2920074 + 0
0030:d20d4e6c = ca76e70c, DSOUND_DDB + 0
0030:d20d4e70 = 00000033, %00000033 + 0
0030:d20d4e74 = 07e8f1c0, %07e8f1c0 + 0
0030:d20d4e78 = 00000004, %00000004 + 0
0030:d20d4e7c = 00000000, %00000000 + 0
0030:d20d4e80 = 00000000, %00000000 + 0
0030:d20d4e84 = 07e8f1c4, %07e8f1c4 + 0
0030:d20d4e88 = 00000000, %00000000 + 0
0030:d20d4e8c = 453a4f5c, %453a4f5c + 0
0030:d20d4e90 = 81789fa4, %81789fa4 + 0
0030:d20d4e94 = 8178d400, %8178d400 + 0
0030:d20d4e98 = 00000000, %00000000 + 0
de##d
</PRE>

<P>These errors <I>are not</I> failures on the part of Memcheck when "Memcheck External Error" is displayed at the beginning of the description string. They are assertions raised when a component fails to allocate or deallocate memory and are put there to detect possible leaks or the potential for fatal exceptions. Generally, when one of these errors are it, the first thing that should be collected is a stack dump, going far enough down the stack to allow the owner of the component responsible for the int 3 to determine what failed. These errors are very difficult to debug due to the fact that user must, in essence, know what the offending driver is "thinking" at the time. For example, the user may encounter an error regarding some component failing to PageFree a memory block. This may or may not indicate a leak. If the driver modified the pointer it was using to refer to that memory and then passed it to PageFree, PageFree will fail and the memory will not be freed. In other words, the driver just leaked memory. On the other hand, it is possible for a driver to try to free a memory block that never existed to begin with, or try to free NULL. This also will cause PageFree to fail, but in this case, since the driver never actually allocated any memory to begin with, no leak has occurred. In fact, this case causes no undesirable effects whatsoever. </P>

<P>Note that whenever one of these errors occurs, the module name reported in the debugger is "UNKNOWN." This is because the driver is unable to fill in the module name at the time of the error. To find out the module name, go to the Memcheck menu and press 'e'. This will dump the error pool and fill in that value. There is a small chance that the debugger will cause a trap 14 by doing this. Should this happen, simply enter the 'gt' command into the debugger (Go Through). The trap 14 is totally recoverable. Then, try taking simply the caller address (shown directly above the module name in the error) and list the nearest symbol to it with the debugger's built-in "ln" command. </P>

<P>Should you be running automated stress testing and do not wish Memcheck to break into the debugger when this is running, a mechanism is provided to disable int 3s within the driver. Please note that this functionality should <I>not</I> be used except when running automated tests wherein simple int 3s cannot be afforded. The int 3s that the driver generates are there for a very good reason — to catch bugs. </P>

<P>To disable the Memcheck driver's int 3 mechanism, go to the Memcheck menu and issue the 'i' command. This will toggle the state of the int 3 mechanism between enabled and disabled. </P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Memcheck%20Errors"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
