<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Call_When_Not_Critical</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_1630"></A>Call_When_Not_Critical</H1>

<PRE>include vmm.inc

mov     esi, CritSecCallback
mov     edx, RefData
VMMCall Call_When_Not_Critical
 </PRE>

<P>This function is not implemented in Windows 95.  For Windows 3.11 and below, this function installs a critical-section callback function. The system calls this function when a virtual device releases the critical section. Uses Flags. 

<UL>
	<LI>No return value. </LI>
</UL>

<DL>
<DT><I>CritSecCallback</I></DT>

<DD>Address of the callback function to install. For more information, see <B>CritSecCallback.</B></DD>

<DT><I>RefData</I></DT>

<DD>Address of reference data to pass to the callback function. 
</DD>
</DL>

<P>The system does not execute the callback until the current virtual machine's execution priority is less than the Critical_Section_Boost value even if the current virtual machine is <I>not</I> in a critical section. This allows a virtual device to release the critical section and process any simulated interrupts before the system calls the callback function. </P>

<P>Virtual devices can install any number of callback functions, but the system calls only the most recent function on the list when the critical section is released. The system removes the callback function from the list as it calls the function. This is a common point of confusion. Unlike services like <B>Call_When_Task_Switched</B>, which install a hook permanently, the <B>Call_When_Not_Critical</B> service removes the callback once it is dispatched. </P>

<P>Under Windows 95, use <B>Call_Restricted_Event</B> with PEF_Wait_Not_Crit, and cancel it with Cancel_Restricted_Event instead, since the <B>Cancel_Call_When_Not_Critical</B> function is a no-op.</P>

<P>If the critical section is taken when this function is called (it is necessary to schedule the event instead of immediately calling your function), it schedules a restricted event as follows:</P>

<PRE>xor    eax, eax        ; no boost
xor    ebx, ebx        ; global
mov    ecx, PEF_Wait_Not_Crit
 </PRE>

<P><B>VMMCall Call_Restricted_Event</B></P>

<H4>See Also</H4>

<P><B>Call_When_Idle</B>, <B>Call_When_Task_Switched</B>, <B>CritSecCallback</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Call_When_Not_Critical"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
