<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Mouse_Instance</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_3066"></A>Mouse_Instance</H3>

<PRE>include VMD.INC
 
Mouse_Instance  STRUC
MI_Flags       DW 0  ; see below
MI_IO_Base     DW 0  ; base to read
MI_IRQNumber   DB 0  ; number of the IRQ
MI_PortNum     DB 0  ; port number (serial mice)
MI_MouseType   DW 0  ; type of mouse (defined above)
MI_Reference   DD 0  ; reference data
MI_hDevNode    DD 0  ; handle of the device node
MI_hIRQ        DD 0  ; handle of the IRQ used by VPICD
MI_HWINT       DD 0  ; hardware interrupt procedure
MI_Reset       DD 0  ; reset routine
MI_Disable     DD 0  ; see below
MI_Initialize  DD 0  ; see below
MI_LoadHandle  DD 0  ; load handle of loaded VxD.
Mouse_Instance  ENDS
 </PRE>

<P>Describes a mouse device. When loading a mouse minidriver, VMOUSE passes the address of this structure to the control procedure of a minidriver. If the minidriver detects the mouse device, it sets the appropriate flags in the <B>MI_Flags</B> field, and then fills the appropriate fields of the structure. This structure is also passed to the <B>VMD_Post_Pointer_Message</B> and <B>VMD_Manipulate_Pointer_Message</B> services. 

<DL>
<DT><B>MI_Flags</B> </DT>

<DD>Status flags. Can be a combination of these values: 

<TABLE>

<TR VALIGN="top">
<TH align=left width=43%>Value </TH>
<TH align=left width=57%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_Alloc </TD>
<TD width=57%>Instance is allocated </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_Active </TD>
<TD width=57%>Interrupt is active </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_Detected </TD>
<TD width=57%>Device detected </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_BadDevNode </TD>
<TD width=57%>Device not detected </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_NewConfig </TD>
<TD width=57%>No DevNode for device </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_BadIO </TD>
<TD width=57%>Wrong IO in DevNode </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_BadIRQ </TD>
<TD width=57%>Wrong IRQ in DevNode </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_NoIRQ </TD>
<TD width=57%>Do not virtualize IRQ </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_BUSMOUSE </TD>
<TD width=57%>BUSMOUSE </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_INPMOUSE </TD>
<TD width=57%>INPORT </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_AUXMOUSE </TD>
<TD width=57%>AUX (PS/2) mouse </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MIF_OTHERMOUSE </TD>
<TD width=57%>3rd party mouse </TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>MI_Disable</B> </DT>

<DD>Address of a function in the mouse minidriver that VMOUSE calls when the mouse is about to be disabled; for example, when the machine is put into a docking station. Set this field to zero if the minidriver has no disable function. </DD>

<DT><B>MI_Initialize</B> </DT>

<DD>Address of the mouse minidriver's initialization function. The function detects and virtualizes the mouse hardware. 
</DD>
</DL>

<P>See also <B>VMD_Manipulate_Pointer_Message</B>, <B>VMD_Post_Pointer_Message</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Mouse_Instance"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
