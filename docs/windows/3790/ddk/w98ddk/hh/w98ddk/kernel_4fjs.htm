<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VWIN32 Services</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_2148"></A>VWIN32 Services</H1>

<P>This section contains information about the VWIN32 services. The VWIN32 VxD provides developers of VxDs with a variety of useful services, some of which may be used when implementing asynchronous procedure calls (APC), synchronization, and device input and output control. </P>

<P>Some of the VWIN32 services may be used for asynchronous procedure calls and synchronization. APCs and Win32 events are both mechanisms which can be used to synchronize ring 3 code with ring 0 code. You can create a ring 3 event, get a VxD handle to that event with the function <B>OpenVxDHandle</B> exported by KERNEL32, then use either _<B>VWIN32_WaitSingleObject</B> or _<B>VWIN32_WaitMultipleObjects</B> from ring 0 to wait on the event. These must be called from task time, and not from within VMM events. </P>

<P>To signal the event, you can use the standard ring 3 functions for setting or pulsing events, or you can use the ring 0 services _<B>VWIN32_SetWin32Event</B> and <B>VWIN32_PulseWin32Event</B>. The ring 0 Win32 event services can be called from within VMM events. </P>

<P>The services <B>VWIN32_EnterCrstR0</B> and <B>VWIN32_LeaveCrstR0</B> may be used to manage access to critical sections. To enable mutually exclusive access to a shared resource, each thread calls <B>VWIN32_EnterCrstR0</B> to request ownership of the critical section before executing any section of code that accesses the protected resource. If another thread currently owns the critical section object, <B>VWIN32_EnterCrstR0</B> blocks the execution of the calling thread indefinitely until the other thread releases its ownership. If the critical section object is currently unowned, the system grants ownership to the requesting thread so it can access the resource. When it has finished executing the protected code, the thread uses the <B>VWIN32_LeaveCrstR0</B> function to relinquish ownership, enabling another thread to become owner and access the protected resource. </P>

<P>The VWIN32 services <B>VWIN32_DIOCCompletionRoutine</B> and <B>VWIN32_GetCurrentProcessHandle</B> are useful for VxDs that implement device input and output control (IOCTL) services. <B>VWIN32_DIOCCompletionRoutine</B> sets the state of the specified event object to signaled when I/O is complete. VxDs can use <B>VWIN32_GetCurrentProcessHandle</B> to tag the current device IOCTL connection or request with an ID. By using a process ID, the device can cleanup more easily on process termination. </P>

<P>There are a variety of other general purpose VWIN32 services such as <B>_VWIN32_Get_Thread_Context</B>, <B>_VWIN32_Set_Thread_Context</B>, <B>VWIN32_GetCurrentDirectory</B>, and <B>VWIN32_TerminateApp</B>. See the <A HREF="kernel_4fjt.htm">Reference</A> section for a complete listing of the various VWIN32 services. </P>

<P>The following VWIN32 services can only be called when the current VM is the system VM: </P>

<P><B>_VWIN32_PulseWin32Event</B> </P>

<P><B>_VWIN32_ResetWin32Event</B> </P>

<P><B>_VWIN32_SetWin32Event</B> </P>

<P><B>_VWIN32_WaitMultipleObjects</B> </P>

<P><B>_VWIN32_WaitSingleObject</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VWIN32%20Services"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
