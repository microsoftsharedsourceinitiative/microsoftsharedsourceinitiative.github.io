<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FS_RenameFile</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_4394"></A>FS_RenameFile</H3>

<PRE>FS_RenameFile(
 PIOREQ pir
 )
 </PRE>

<P>A file is renamed through <B>FS_RenameFile</B>. This routine handles the Win32 function, <B>MoveFile()</B>; and INT 21h functions: 17h, and 56h. 

<DL>
<DT><I>ir_ppath</I> </DT>

<DD>Supplies a pointer to the canonicalized Unicode source path name to be renamed. The path name may contain wildcards only if it is an 8.3 path name. Long file name paths will not contain wildcards. </DD>

<DT><I>ir_rh</I> </DT>

<DD>Supplies handle to disk volume or network resource that contains the file. </DD>

<DT><I>ir_attr</I> </DT>

<DD>Supplies wildcard search attributes and advisory path parsing flags for the source path. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Search Attribute Values:</B> 
<P>Any combination of the following attributes may be specified, causing those files to be included with normal files in the search. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_HIDDEN </TD>
<TD width=66%>Include hidden file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_SYSTEM </TD>
<TD width=66%>Include system file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_DIRECTORY </TD>
<TD width=66%>Include subdirectories in search. 
<P>The following attribute will only be specified by itself. It will not be combined with any of the other attributes. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_VOLUMELABEL </TD>
<TD width=66%>Search for volume label only. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Path Parsing Flags:</B> 
<P>The following path parsing flags are passed in. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_WILDCARDS </TD>
<TD width=66%>Wildcard characters present in path name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_LONG_PATH </TD>
<TD width=66%>Path has a long name component. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_KEEP_CASE </TD>
<TD width=66%>Preserve the case of the file name passed in when storing on disk. This also implies that this call should use long name semantics for its processing. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_HAS_DOT </TD>
<TD width=66%>File name component has a dot in its name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_IS_LFN </TD>
<TD width=66%>File name component is a long name. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_ppath2</I> </DT>

<DD>Supplies a pointer to the canonicalized Unicode destination path name to rename to. </DD>

<DT><I>ir_attr2</I> </DT>

<DD>Supplies wildcard search attributes and advisory path parsing flags for the destination path. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Search Attribute Values:</B> 
<P>Any combination of the following attributes may be specified, causing those files to be included with normal files in the search. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_HIDDEN </TD>
<TD width=66%>Include hidden file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_SYSTEM </TD>
<TD width=66%>Include system file in search. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_DIRECTORY </TD>
<TD width=66%>Include subdirectories in search. 
<P>The following attribute will only be specified by itself. It will not be combined with any of the other attributes. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_ATTRIBUTE_VOLUMELABEL </TD>
<TD width=66%>Search for volume label only. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Path Parsing Flags:</B> 
<P>The following path parsing flags are passed in. </P>
</TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_WILDCARDS </TD>
<TD width=66%>Wildcard characters present in path name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_LONG_PATH </TD>
<TD width=66%>Path has a long name component. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_KEEP_CASE </TD>
<TD width=66%>Preserve the case of the file name passed in when storing on disk. This also implies that this call should use long name semantics for its processing. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_HAS_DOT </TD>
<TD width=66%>File name component has a dot in its name. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>FILE_FLAG_IS_LFN </TD>
<TD width=66%>File name component is a long name. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_ptuninfo</I> </DT>

<DD>Supplies a pointer to a tunneling structure. A NULL pointer is passed in this field if there is no tunneling information. The tunneling structure is described in the following. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Tunneling Structure:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>tuni_bfContents</I> </TD>
<TD width=66%>Specifies flags for the tunneling information passed in. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Tunneling Info Flag Values:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%>TUNI_CONTAINS_ALTNAME </TD>
<TD width=66%>Alternate Unicode name is available in structure. This is the name to be used for the destination of the rename. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TUNI_CONTAINS_CREATIONT </TD>
<TD width=66%>Creation time for file available. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TUNI_CONTAINS_LASTACCESST </TD>
<TD width=66%>Last access time for file available. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>TUNI_CONTAINS_LASTWRITET </TD>
<TD width=66%>Last modification time for file available. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>tuni_pAltName</I> </DT>

<DD>Supplies the alternate name in Unicode that should be used for this file. </DD>

<DT><I>tuni_ftCreationTime</I> </DT>

<DD>Supplies the creation time in the Win32 FileTime structure format specified in the following. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><B>Win32 FileTime Structure:</B> </TD>
<TD width=66%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TH align=left width=34%>Value </TH>
<TH align=left width=66%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=34%><I>dwLowDateTime</I> </TD>
<TD width=66%>Supplies the low double word of the time in Win32 format. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>dwHighDateTime</I> </TD>
<TD width=66%>Supplies the low double word of the time in Win32 format. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>tuni_ftLastAccessTime</I> </TD>
<TD width=66%>Supplies the last access time in the Win32 FileTime structure format described above. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%><I>tuni_ftLastWriteTime</I> </TD>
<TD width=66%>Supplies the last modification time in the Win32 FileTime structure format described above. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>ir_uFname</I> </DT>

<DD>Pointer to the case-preserved file name component of the destination path in Unicode. </DD>

<DT><I>ir_user</I> </DT>

<DD>Supplies user ID for this request. </DD>

<DT><I>ir_pid</I> </DT>

<DD>Supplies process ID for this request. 

<TABLE>

<TR VALIGN="top">
<TD width=34%><I>ir_error</I> </TD>
<TD width=66%>Returns status of the operation (zero if no error, the error code otherwise). </TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<P>If an FSD does not support long file names on a volume and it gets a LFN API call on that volume, it should fail the call. Note that FS_RenameFile can also rename entire directory trees. Obviously, the FSD cannot validate if all paths of the renamed directory can be accessed, some subdirectories may not be accessible any more if the path becomes longer than the maximum allowed path. The FSD should check for cyclic directory renames and fail them. A rename of a file to itself should not failed, the FSD should just return success and do nothing. Local FSDs also need to honor the tunneling information if they do not implement tunneling on their own. Tunneling is not supported on network drives.  Therefore, network FSDs do not need to support this. Tunneling is described separately in another section of this document. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: FS_RenameFile"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
