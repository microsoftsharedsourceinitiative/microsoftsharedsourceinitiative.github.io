<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Typical Printing Process Scenario Using a Raw Spool File</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="_pss_3913"></A>Typical Printing Process Scenario Using a Raw Spool File</H2>

<P>This section illustrates the major relationships between the spooler components during the printing process by walking through the sequence of calls between components during the spooling of a raw format spool file and subsequent playback (despooling) of the file to a bidirectional printer. </P>

<P>The following illustration shows the sequence of calls that start with an application initiating a print request by calling GDI (labeled step 1 in the illustration) and end with the local print provider writing a spool file to the disk (step 8) and starting a background thread that will eventually initiate the despooling process (step 9). The sequence of steps in the despooling process are shown in a separate illustration. </P>

<P><IMG SRC="images/ch1_01.gif" ALT="" BORDER=0></P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>As illustrated above, a typical printing process scenario using a raw spool file would be executed as follows</B>

<OL>
	<LI>The application creates a DC and draws an object to the DC, for example a circle, and then calls GDI with a print request to a particular printer using that DC. </LI>

	<LI>GDI calls the printer driver with a request for instructions on how to render the circle on that particular printer. </LI>

	<LI>The printer driver returns the instructions on how to render the circle on the printer the driver is associated with. Note that all Windows 95 printer drivers are 16-bit code and communicate with 16-bit GDI. </LI>

	<LI>GDI passes the print request to 32-bit GDI because the Windows 95 spooler process is 32-bit code. </LI>

	<LI>GDI32 makes an interprocess call to the spooler process. </LI>

	<LI>SPOOL32.EXE calls the router to route the print job to the printer specified by the application. In this example, the router sends the print job to the local print provider. Note that the router could send the job to a printer on the network through the network print provider (which is not shown in the illustration). The default Windows 95 spooler spools the network jobs locally, so they show up on the local spooler queue, even those jobs bound for a Windows NT/Windows 2000 servers. A network print job is spooled and despooled on the client machine, not the server. It is only in the relatively late step of despooling that the remote print server is actually contacted. The way Windows 95 handles network print jobs contrasts with the way they are handled by Windows NT/Windows 2000 client machines, which use RPC to call the necessary printing APIs on the print server. This way, the print job never shows up on the local spooler queue and the spooling and despooling is handled by the print spooler on the print server. On Windows 95 RPC is not used by the default print spooler. A print spooler that does use RPC is available as an option for Windows 95 client machines. </LI>

	<LI>The router calls the local print provider with the print job. </LI>

	<LI>If the type of print job is not direct, the local print provider spools the print job to the disk as a raw-format spool file. Note that steps 1 through 8 can be repeated many times to build a complete spool file. In step 8, the local print provider appends each piece of the print job to the spool file until the application signals that the job is complete by issuing an <B>EndDoc</B> function. The difference between a direct print job and a spooled print job to the local print provider is apparent in the next illustration which shows the playback of this spooled file. When the local print provider is called by the print processor (through the router) with this same print job, the job type is direct instead of spooled. That results in the job going to the printer instead of being rewritten as another spool file. </LI>

	<LI>The local print provider starts a background thread that will determine the best time to start playing back the spool file to the printer. The next illustration shows the sequence of steps involved in playing back the raw spool file. </LI>
</OL>

<P>The following illustration shows the sequence of calls that start with the background thread application initiating the playback of a spooled file by calling a print processor (labeled step 10 in the illustration) and end with the local port monitor sending the print job through a port it controls to a connected printer (step 14). </P>

<P><IMG SRC="images/ch1_02.gif" ALT="" BORDER=0></P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>As illustrated above, the sequence of calls that start with the background thread application initiating the playback of a spooled file and ending with the local port monitor sending the print job is executed as follows</B>

<OL start=10>
	<LI>The main thread determines a good time to initiate the playback of a spooled file, based on the changing state of spooler subsystem resources monitors. When it is a good time, the main thread uses a <B>StartDoc</B> function call to start a new thread in the print processor to playback the spooled file. </LI>

	<LI>Because it is a <B>StartDoc</B> case, the print processor thread invokes the local print provider with a <B>ReadPrinter</B> function call to read part of the spool file off the disk. (Note that in this example case of a raw spool file, the print processor does not call GDI32. In the EMF spool file case, which are played back by the default print processor supplied by Microsoft, the print processor calls GDI32 to playback the metafile.) </LI>

	<LI>Because it is a <B>StartDoc</B> case, the print processor thread invokes the language monitor (through the local print provider) with a <B>WritePrinter</B> function call to send the data through the physical port connected with the bidirectional printer originally specified in step 1 of this whole process. For a raw spool file, the default print processor simply passes the data through, without changing or interpreting any of the information. Note that a language monitor is invoked in this example scenario because the destination printer is a bidirectional printer. For nonbidirectional printers, a port monitor would be invoked instead of a language monitor. Note also that although this example scenario shows the language monitor and port monitor as separate components, they can be integrated into one monitor. </LI>

	<LI>The language monitor calls the port monitor to send the data to the printer. </LI>

	<LI>The port monitor sends the raw data through the physical port to the connected printer. Note that steps 11 through 14 are repeated until the end-of-file is reached on the spool file (or the print job is canceled). Then the playback thread is terminated. </LI>
</OL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Typical%20Printing%20Process%20Scenario%20Using%20a%20Raw%20Spool%20File"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
