<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Symbols with debugger.exe</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Using Symbols with debugger.exe">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_using_symbols_with_debugger.exe_me"></A>Using Symbols with <I>debugger.exe</I></H3>

<P>With <I>debugger.exe</I>, all symbols are maintained into one single namespace. Symbols are explicitly managed using w, wr, and wa. You can selectively enable and disable entire symbol files. When disabled, the debugger ignores all symbols that belong to a symbol file ("map").</P>

<P>Symbols not loaded by debugger.exe can be loaded remotely by rterm.exe. By default, rterm will look for symbols in the directory it is launched from. You can modify where rterm looks for symbol files by choosing <B>Options</B> from the <B>Settings</B> menu, and selecting the <B>Symbol Search Paths</B> tab in the options dialog. Alternately, you can use the !sympath command on the rterm command line to set this path – for example:</P>

<P>1##!sympath</P>

<P>Symbol path is c:\rterm</P>

<P>1##!sympath d:\symbols</P>

<P>Symbol path is d:\symbols</P>

<P>The w command lists all the maps that are loaded, both enabled and disabled.</P>

<P>The lm command can also be used to list all loaded maps</P>

<P>The wr command disables a symbol file ("removes a map").</P>

<P>The wa command enables a symbol file ("adds a map").</P>

<P>For example, wr explorer will remove the explorer map from the debugger's symbol table. Keeping only the maps relevant to your project is important because the debugger's symbol table doesn't understand memory contexts. For another example, wa d:\symbols\myapp would load the myapp symbol from d:\symbols and add it to the list of loaded symbols.</P>

<P>As a shortcut, the asterisk means "all maps". So wr * disables all maps, and wa * re-enables them. Disabling all maps is useful if you want to discard all the symbolic information because the user is running with the wrong symbols.</P>

<P>Every symbol is mapped to a linear address, and that becomes its identity. In particular, the memory context and CPU mode are not factors in looking up a matching symbol. As a consequence, if you are running Win32® code, and you try to resolve an address that happens to match that of a Win16 driver or a DOS application, then you get symbols displayed that are irrelevant to the context of your code.</P>

<P>To search the active maps for symbols, you can us the ls (list symbols) or lse (list symbols by regular expression) commands. The argument is either a DOS-style (ls) or a UNIX-style (lse) pattern that will be looked up in all active maps. These are useful if you have the same symbol in multiple files and the debugger keeps picking the wrong one, and you choose not to go and disable all the maps that contain the invalid ones.</P>

<P>If you type a partial symbol name (at least five characters) and no perfect match is found, <I>debugger.exe</I> will search for symbols that start with the characters you specify and present them in a list. You can then pick the one you really want and continue onwards.</P>

<P>If, in spite of everything, <I>debugger.exe</I> can't find a symbol to match your address, it will search internal operating system data structures, hoping to find something. If it has some Win16 address, it will walk the Win16 module list, checking to see if the selector is a code or data segment that belongs to any module in memory. If so, then it displays the address in the form MODULE!(n), where MODULE is the module name and n is the object number (1-based).</P>

<P>If the address lives in VxD space, then <I>debugger.exe</I> will look at the list of in-memory VxDs and try to figure out which (if any) VxD contains the address. If found, the address is given in the form DDB(n)+zzzz, where DDB is the VxD DDB name, n is the object number, and zzzz is the offset within the object.</P>

<P>If the selector lives on the 16-bit global heap, but <I>debugger.exe</I> can figure out which task allocated the memory, it will display the address in the form TASK!, where TASK! is the module name of the owner.</P>

<P>If the address lives in the Win32 memory space, then <I>debugger.exe</I> will look at the page table entries and figure out which module table entry the memory belongs to. It will then display the address in the form IMTEnnnn+zzzz, where nnnn is the module table entry index, and zzzz is the rva. If <I>debugger.exe</I> can find the Win32 module table on its own, then it will do the conversion of the IMTE into a module name and display the result in the form MODULE.DLL+zzzz, where MODULE.DLL is the name of the module and zzzz is the rva.</P>

<P>In summary:</P>

<P>· MODULE!(n) Win16 module selector</P>

<P>· TASK! Win16 global heap</P>

<P>· IMTEnnnn+rva Win32 module</P>

<P>· nnnnnnnn:DDB(n) VxD</P>

<P>If the symbol address is listed with an at sign (@), it means that the module associated with the symbol is not in memory (or at least, is not in memory as far as <I>debugger.exe</I> can determine). You can set a breakpoint on it. When the module finally gets loaded, <I>debugger.exe</I> will instantiate the breakpoint.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Using%20Symbols%20with%20debugger.exe"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
