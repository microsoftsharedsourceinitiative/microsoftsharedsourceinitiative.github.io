<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BitBlt</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_735"></A>BitBlt</H1>

<PRE class=syntax><B>BOOL BitBlt(
  LPPDEVICE </B><I>lpDestDev</I><B>, </B>
<B>  WORD </B><I>wDestX</I><B>, </B>
<B>  WORD </B><I>wDestY</I><B>, </B>
<B>  LPPDEVICE </B><I>lpSrcDev</I><B>, </B>
<B>  WORD </B><I>wSrcX</I><B>, </B>
<B>  WORD </B><I>wSrcY</I><B>, </B>
<B>  WORD </B><I>wXext</I><B>,</B>
<B>  WORD </B><I>wYext</I><B>, </B>
<B>  long </B><I>Rop3</I><B>, </B>
<B>  LPBRUSH </B><I>lpPBrush</I><B>, </B>
<B>  LPDRAWMODE </B><I>lpDrawMode</I>
<B> );</B>
<B> </B></PRE>

<P>Transfers bits from a rectangle on a source device to a rectangle that has the same dimensions on a destination device. The transfer is controlled by a ternary raster operation value that specifies how corresponding bits from the source, destination, and pattern in a brush are combined to form the final bits in the destination. </P>

<P>Returns TRUE if successful, FALSE otherwise. 

<DL>
<DT><I>lpDestDev</I> </DT>

<DD>Address of <B>PDEVICE</B> or <B>PBITMAP</B> structure that specifies the destination device or bitmap. </DD>

<DT><I>wDestX </I>and <I>wDest</I>Y </DT>

<DD>The <I>x</I>- and y<I>-</I>coordinate, in device units, of the origin of the rectangle on the destination device that receives the transferred bits. </DD>

<DT><I>lpSrcDev</I> </DT>

<DD>Address of <B>PDEVICE</B> or <B>PBITMAP</B> structure that specifies the source device or bitmap. </DD>

<DT><I>wSrcX </I>and <I>wSrc</I>Y </DT>

<DD>The x- and y<I>-</I>coordinate, in device units, of the origin of the rectangle on the source device that contains the bits to transfer. </DD>

<DT><I>wXext </I>and <I>w</I>Y<I>ext</I> </DT>

<DD>Width and height, in device units, of the rectangles on both the source and destination devices. </DD>

<DT><I>Rop3</I> </DT>

<DD>A ternary raster-operation value. This value determines how <B>BitBlt</B> combines corresponding pixels from the source, destination, and brush that is used to produce the final pixels in the destination rectangle. This parameter can be any one of 256 ternary raster-operation values; the following lists the most common values. 

<TABLE>

<TR VALIGN="top">
<TH align=left width=30%>Value </TH>
<TH align=left width=70%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=30%>SRCCOPY (0x00CC0020) </TD>
<TD width=70%>Copies source bits to the destination rectangle: Destination = Source. </TD>
</TR>

<TR VALIGN="top">
<TD width=30%>SRCPAINT (0x00EE0086) </TD>
<TD width=70%>Combines the source and destination bits using the bitwise OR operator: 
<P>Destination = Source | Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>SRCAND (0x008800C6) </TD>
<TD width=70%>Combines the source and destination bits using the bitwise AND operator: 
<P>Destination = Source &amp; Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>SRCINVERT (0x00660046) </TD>
<TD width=70%>Combines the source and destination bits using the bitwise exclusive OR operator: 
<P>Destination = Source ^ Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>SRCERASE (0x00440328) </TD>
<TD width=70%>Combines the source and inverse of destination bits using the bitwise AND operator: 
<P>Destination = Source &amp; (~ Destination). </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>NOTSRCCOPY (0x00330008) </TD>
<TD width=70%>Copies the inverse of the destination bits to the destination rectangle: 
<P>Destination = ~ Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>NOTSRCERASE (0x001100A6) </TD>
<TD width=70%>Combines the inverse of the source and destination bits using the bitwise AND operator: 
<P>Destination = (~ Source) &amp; (~ Destination). </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>MERGECOPY (0x00C000CA) </TD>
<TD width=70%>Combines the source and brush bits using the bitwise AND operator: 
<P>Destination = Source &amp; Pattern. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>MERGEPAINT (0x00BB0226) </TD>
<TD width=70%>Combines the destination and inverse of the source bits using the bitwise OR operator: 
<P>Destination = (~ Source) | Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>PATCOPY (0x00F00021) </TD>
<TD width=70%>Copies the brush bits to the destination rectangle: 
<P>Destination = Pattern. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>PATPAINT (0x00FB0A09) </TD>
<TD width=70%>Combines the destination, pattern, and the inverse of source bits using the bitwise OR operator: 
<P>Destination = (~ Source) | Pattern | Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>PATINVERT (0x005A0049) </TD>
<TD width=70%>Combines the pattern and destination bits using the bitwise exclusive OR operator: 
<P>Destination = Pattern ^ Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>DSTINVERT (0x00550009) </TD>
<TD width=70%>Copies the inverse of the destination bits: 
<P>Destination = ~ Destination. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>BLACKNESS (0x00000042) </TD>
<TD width=70%>Set all destination bits to black. </TD>
</TR>

<TR VALIGN="top">
<TD width=30%>WHITENESS (0x00FF0062) </TD>
<TD width=70%>Set all bits to white. </TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>lpPBrush</I> </DT>

<DD>Address of a <B>PBRUSH</B> structure that specifies a physical brush. <B>BitBlt</B> uses this brush only if the <I>Rop3</I> parameter specifies a ternary raster operation that requires the brush that is used to be combined with source or destination or both. </DD>

<DT><I>lpDrawMode</I> </DT>

<DD>Address of a <B>DRAWMODE</B> structure that specifies the color information <B>BitBlt</B> needs to determine patterned brush colors and to carry color conversions and transparent copy operations. 
</DD>
</DL>

<P>The export ordinal for this function is 1. </P>

<P>A graphics driver must export the <B>BitBlt</B> function if the RC_BITBLT value is set in the <B>dpRaster</B> member of the driver's <B>GDIINFO</B> structure. </P>

<P>The <I>lpDestDev</I> and <I>lpSrcDev</I> parameters can specify the same device, and transferring bits from one part of a device to another is a valid operation. If the source and destination rectangle overlap, <B>BitBlt</B> must carefully transfer bits so that the transfer does not inadvertently overwrite source bits before they have been transferred to the destination. </P>

<P>The <I>Rop3</I> parameter specifies whether bits from the source, destination, and brush are used in the transfer. If the ternary raster operation specified by <I>Rop3</I> does not include the source, <B>BitBlt</B> ignores the source bits. If the operation does not include the destination, <B>BitBlt</B> replaces the original destination bits without using them to form the final bits. </P>

<P>If <I>Rop3</I> does not include the brush, <B>BitBlt</B> ignores the brush. If <I>Rop3</I> does include the brush, <B>BitBlt</B> must determine whether the brush is solid or patterned (that is, has an associated bitmap). If the brush has a bitmap, <B>BitBlt</B> must combine the corresponding bits of the bitmap with the source and destination bits (as specified by the raster operation) to form the final destination bits. </P>

<P>If the source and bitmap associated with the brush do not have the same color format as the destination, <B>BitBlt</B> must convert the source and brush bitmap to the destination's color format before transferring bits. <B>BitBlt</B> uses the text (foreground) and background colors specified by the <I>lpDrawMode</I> parameter to convert colors. </P>

<P>To convert a monochrome bitmap to a color bitmap, <B>BitBlt</B> converts white bits (1) to the background color and converts black bits (0) to the text (foreground) color. </P>

<P>To convert a color bitmap to a monochrome bitmap, <B>BitBlt</B> converts all pixels that match the background color to white (1), and converts all other pixels to black (0). </P>

<P>In some device drivers, <B>BitBlt</B> must check the <B>bkMode</B> member of the <B>DRAWMODE</B> structure pointed to by the <I>lpDrawMode</I> parameter as well as the <I>Rop3</I> parameter to determine how to carry out the transfer. If the <B>bkMode</B> member specifies the background mode TRANSPARENT1, <B>BitBlt</B> must not transfer source and brush bits that have the same color as the destination's background color (as specified by the <B>bkColor</B> member of the <B>DRAWMODE</B> structure pointed to by <I>lpDrawMode</I>). In other words, the corresponding destination bits must be left unchanged. Other background modes do not affect the transfer. Only device drivers that have set the C1_TRANSPARENT value in the <B>dpCaps1</B> member of the <B>GDIINFO</B> structure are required to check the background mode. </P>

<H4>See Also</H4>

<P><B>PDEVICE</B>, <B>PBITMAP</B>, <B>DRAWMODE</B> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: BitBlt"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
