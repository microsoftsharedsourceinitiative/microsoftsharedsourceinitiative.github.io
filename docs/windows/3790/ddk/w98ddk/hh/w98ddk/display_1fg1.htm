<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VDD_Takeover_VGA_Port</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_531"></A>VDD_Takeover_VGA_Port</H3>

<H4>Call With</H4>

<P>EDX contains the VGA port number to takeover (in the range 3C0h through 3DFh). ECX contains the address of the routine in the mini-VDD that will be the handler for this I/O port. </P>

<H4>Return Values</H4>

<P>ECX is returned with the address of the old port handling routine. EDX and ECX are destroyed by this call. The carry flag is set on failure. </P>

<H4>Remarks</H4>

<P>The Main VDD at <B>Device_Init</B> time takes over accesses to all of the standard VGA ports from port 3C0h up to and including port 3DFh. Some of these ports are not really used by the standard VGA or may be used in different ways by the mini-VDD. Sometimes, the mini-VDD may need to handle all aspects of virtualizing these ports instead of letting the Main VDD do any handling. In this case, the mini-VDD can call this service in order to have all virtualized I/O for the port vectored to the mini-VDD's handler. The Main VDD will not do any virtualization or interact in any way when the port is virtualized. The Main VDD will however, decide when to enable and disable trapping on the VGA port in question. The mini-VDD's handler is passed the usual port virtualization information in the registers (that is, EAX contains the value, EBX contains the VM Handle, ECX contains the I/O type, EDX contains the port number). </P>

<P>If you need some virtualization assistance from the Main VDD, do not use this function. For example, if the mini-VDD needs to virtualize some extensions to the CRTC ports and wants to let the Main VDD handle accesses to the standard VGA indices, it would hook <B>VIRTUALIZE_CRTC_IN</B> and/or <B>VIRTUALIZE_CRTC_OUT</B>, which would let it virtualize the CRTC registers. Only use this function if the mini-VDD does not need any virtualization assistance from the Main VDD. </P>

<P>The mini-VDD can also chain back to the Main VDD's handler for a VGA port. Using the S3 sample mini-VDD as an example, suppose you need to collect states for a VGA port that there's no mini-VDD virtualization hook for (in the case of S3, we need to virtualize the Miscellaneous Output Port 3CCH).You can call this service at <B>Dynamic_Init </B>time, but save the value returned in ECX. Then, your virtualization routine (in the S3 example, see <B>MiniVDD_VirtualMiscOutput</B> for details) can collect all of the necessary states that it needs, or modify the default virtualization, and then jump back to the old handler whose address was saved. This provides maximum flexibility in handling VGA ports. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VDD_Takeover_VGA_Port"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
