<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Step 1: Minidriver Initialization</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="_pss_481"></A>Step 1: Minidriver Initialization</H3>

<P>There are three stages of minidriver initialization: 

<UL>
	<LI>When the minidriver is first loaded into memory by the kernel. </LI>

	<LI>When GDI calls <B>Enable</B> to get the <B>GDIINFO</B> table. </LI>

	<LI>When GDI calls <B>Enable</B> to initialize the video hardware. </LI>
</UL>

<P>Note that the parameters passed to the <B>Enable</B> DDI indicate whether the driver should initialize the <B>GDIINFO</B> structure or the video hardware. Drivers should not rely on the order of the <B>Enable </B>calls. </P>



<H4><A NAME="_pss_482"></A>Init Routine (Before GDI)</H4>

<P>The kernel calls the display driver's initialization routine when it first loads the driver. At this point, neither GDI nor USER have been loaded, so no graphics operations are required. Instead, you can carry out initialization procedures that do not affect the display adapter. For an example of init code, see the INIT.ASM file in the display driver samples. </P>



<H4><A NAME="_pss_483"></A>Enable GDIINFO</H4>

<P>GDI calls <B>Enable</B> twice whenever it creates or restores a display DC. One of the calls is to get the <B>GDIINFO</B> block from your minidriver. For a code example, see the ENABLE.ASM file in the display driver samples. </P>

<P>You must set the following fields in the <B>GDIINFO</B> structure for your adapter. Do this after using the <B>DIB_Enable</B> function to get the information from the DIB engine.</P>

<TABLE>

<TR VALIGN="top">
<TD width=41%><B>dpVersion</B> </TD>
<TD width=59%><B>dpNumBrushes</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>dpHorzRes</B> </TD>
<TD width=59%><B>dpNumPens</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>dpVertRes</B> </TD>
<TD width=59%><B>dpNumFonts</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>dpBitsPixel</B> </TD>
<TD width=59%><B>dpNumColors</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>dpPlanes</B> </TD>
<TD width=59%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P>Note that the DIB engine may set capability bits in <B>GDIINFO</B> in addition to those set by the display minidriver. The driver should not modify the bits set by the engine. To achieve this, the driver should use the logical OR operator when setting bits. Minidrivers that do not have an accessible frame buffer should set the NOT_FRAMEBUFFER bit in the <B>deFlags </B>member of the DIBENGINE structure. </P>

<P>If your adapter does not provide a hardware graphics accelerator, set the C1_SLOW_CARD bit in the <B>dpCaps1</B> member. </P>

<P>When your minidriver has completed initializing the <B>GDIINFO</B> structure, return it to GDI. </P>



<H4><A NAME="_pss_484"></A>Initializing the Hardware</H4>

<P>Minidrivers initialize the video hardware and create their <B>PDEVICE </B>structure on one of the calls to <B>Enable</B>. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>Use the following steps to initialize your hardware</B>

<OL>
	<LI>Initialize the graphics adapter to be in the correct graphics mode. This should include setting the refresh rate based on the current monitor. For more information on refresh rates, see <I>About Refresh Rate Support</I>. </LI>

	<LI>A minidriver should not call FatalExit if it is not possible to enable the hardware. Instead, the Enable function should return zero, indicating failure. This causes the system to reboot into clean Windows with the default VGA driver. </LI>

	<LI>Create the driver's <B>PDEVICE</B> structure by calling the <B>CreateDIBPDevice</B> entry point in the DIB engine with a <B>BITMAPINFO</B> definition of its display surface. The DIB engine will create a <B>PDEVICE</B> structure. </LI>

	<LI>If display memory is banked switched, the driver should call VFLATD to register the frame buffer. The driver must provide a code template that performs bank switching to VFLATD so that the virtual display will work properly. VFLATD will return a selector for accessing the screen. This value is stored in the <B>deBits</B> field of the <B>PDEVICE</B> structure. If the display memory is linear, this step is not necessary. Instead, the driver must create a selector to its linear display memory and store it into the <B>PDEVICE</B> structure. The driver should use MS-DOS protected mode interface (DPMI) services to create the linear selector. Using VFLATD, the driver can ignore the system-memory limitations and obtain an address to a logical frame buffer that is large enough to store the color data for an entire screen. </LI>

	<LI>If the display adapter registers itself as requiring bank switching, whenever a page fault occurs during a drawing operation, the VxD maps the required block of memory from the logical frame buffer to A000:0000. By calling the VxD's Create_Virtual_Frame_Buffer function, a driver registers its bank-switching procedure and obtains a selector identifying the logical frame buffer. For more information about the VFLATD, see About Virtual Flat-Frame Buffer Device. </LI>

	<LI>Route all GDI calls to the DIB engine by including DIBLINK.ASM and DIBENG.LIB in your driver build environment. Note that the <B>Enable</B> call is not routed. Also note that cursor-related calls are handled by the DIB engine. </LI>
</OL>

<P>You now have a generic display minidriver. You need to follow the remaining steps in order to customize your minidriver for your display adapter. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Step%201:%20Minidriver%20Initialization"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
