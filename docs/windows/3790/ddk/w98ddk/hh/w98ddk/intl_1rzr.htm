<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>COMPOSITIONSTR</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Windows&nbsp;98/Me:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="_pss_917"></A>COMPOSITIONSTR</H1>

<PRE>typedef struct tagCOMPOSITIONSTR {
  DWORD  dwSize;
  DWORD  dwCompReadAttrLen;
  DWORD  dwCompReadAttrOffset;
  DWORD  dwCompReadClsLen;
  DWORD  dwCompReadClsOffset;
  DWORD  dwCompReadStrLen;
  DWORD  dwCompReadStrOffset;
  DWORD  dwCompAttrLen;
  DWORD  dwCompAttrOffset;
  DWORD  dwCompClsLen;
  DWORD  dwCompClsOffset;
  DWORD  dwCompStrLen;
  DWORD  dwCompStrOffset;
  DWORD  dwCursorPos;
  DWORD  dwDeltaStart;
  DWORD  dwResultReadClsLen;
  DWORD  dwResultReadClsOffset;
  DWORD  dwResultReadStrLen;
  DWORD  dwResultReadStrOffset;
  DWORD  dwResultClsLen;
  DWORD  dwResultClsOffset;
  DWORD  dwResultStrLen;
  DWORD  dwResultStrOffset;
  DWORD  dwPrivateSize;
  DWORD  dwPrivateOffset; 
} COMPOSITIONSTR;
 </PRE>

<P>Contains composition information. During conversion, IME puts conversion information into this structure. 

<DL>
<DT><B>dwSize</B> </DT>

<DD>Size, in bytes, of this structure. </DD>

<DT><B>dwCompReadAttrLen</B> </DT>

<DD>Length of the attribute information of the reading string of the composition string. </DD>

<DT><B>dwCompReadAttrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the attribute information. </DD>

<DT><B>dwCompReadClsLen</B> </DT>

<DD>Length of the clause information of the reading string of the composition. </DD>

<DT><B>dwCompReadClsOffset</B> </DT>

<DD>Offset from the beginning of this structure to the clause information. </DD>

<DT><B>dwCompReadStrLen</B> </DT>

<DD>Length of the reading string of the composition string. </DD>

<DT><B>dwCompReadStrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the reading string of the composition string. </DD>

<DT><B>dwCompAttrLen</B> </DT>

<DD>Length of the attribute information of the composition string. </DD>

<DT><B>dwCompAttrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the attribute information. </DD>

<DT><B>dwCompClsLen</B> </DT>

<DD>Length of the clause information of the composition string. </DD>

<DT><B>dwCompClsOffset</B> </DT>

<DD>Offset from the beginning of this structure to the clause information. </DD>

<DT><B>dwCompStrLen</B> </DT>

<DD>Length of the composition string. </DD>

<DT><B>dwCompStrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the composition string. </DD>

<DT><B>dwCursorPos</B> </DT>

<DD>Cursor position in the composition string. </DD>

<DT><B>dwDeltaStart</B> </DT>

<DD>Start position of change in the composition string. If the composition string has changed from the previous state, the first position of such a change is stored here. </DD>

<DT><B>dwResultReadClsLen</B> </DT>

<DD>Length of the clause information of the reading string of the result string. </DD>

<DT><B>dwResultReadClsOffset</B> </DT>

<DD>Offset from the beginning of this structure to the clause information of the reading string of the result string.. </DD>

<DT><B>dwResultReadStrLen</B> </DT>

<DD>Length of the reading string of the result string. </DD>

<DT><B>dwResultReadStrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the reading string of the result string. </DD>

<DT><B>dwResultClsLen</B> </DT>

<DD>Length of the clause information of the result string. </DD>

<DT><B>dwResultClsOffset</B> </DT>

<DD>Offset from the beginning of this structure to the clause information of the result string. </DD>

<DT><B>dwResultStrLen</B> </DT>

<DD>Length of the result string. </DD>

<DT><B>dwResultStrOffset</B> </DT>

<DD>Offset from the beginning of this structure to the result string. </DD>

<DT><B>dwPrivateSize</B> </DT>

<DD>Private area in this memory block. </DD>

<DT><B>dwPrivateOffset</B> </DT>

<DD>Offset from the beginning of this structure to the private area. 
</DD>
</DL>

<P>The attribute information is a single-byte array and specifies the attributes of the string. The contents of the array are as follows: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=41%>Value </TH>
<TH align=left width=59%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_xxxxxxxxxxxx </TD>
<TD width=59%>Specifies the status of the composition string. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_INPUT </TD>
<TD width=59%>Character currently being entered. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_TARGET_CONVERTED </TD>
<TD width=59%>Character currently being converted (already converted). </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_CONVERTED </TD>
<TD width=59%>Character given from conversion. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_TARGET_NOTCONVERTED </TD>
<TD width=59%>Character currently being converted (yet to be converted). </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ATTR_INPUT_ERROR </TD>
<TD width=59%>The character is an error character and cannot be converted by the IME. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>Other than the preceding: </TD>
<TD width=59%>Reserved </TD>
</TR>
</TABLE><BR>

<P>Each content is as follows: </P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=41%>Value </TH>
<TH align=left width=59%>Meaning </TH>
</TR>

<TR VALIGN="top">
<TD width=41%>Character currently being entered: </TD>
<TD width=59%>The character the user is entering. In Japanese, this character is a hiragana, katakana, or alphanumeric, which is yet to be converted by the IME. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>Character currently being converted (already converted): </TD>
<TD width=59%>The character that has been selected for conversion by the user and converted by the IME. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>Character given from conversion: </TD>
<TD width=59%>The character to which the IME has converted. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>Character currently being converted (yet to be converted): </TD>
<TD width=59%>The character that has been selected for conversion by the user and not yet converted by the IME. In Japanese, this character is a hiragana, katakana, or alphanumeric, which the user has entered. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>Character is an error character and cannot be converted by the IME: </TD>
<TD width=59%>The character is an error character, the IME cannot convert this character. For example, some consonants cannot be put together. </TD>
</TR>
</TABLE><BR>

<P>The length of the attribute information is the same as the length of the string. Each byte corresponds to each byte of the string. Even if the string includes DBCS characters, the attribute information has the information bytes of both the lead byte and the second byte. </P>

<P>The clause information is a double word array and specifies the numbers that are the positions of the clause. The position of the clause is one of the positions of the composition string and this clause starts from this position. At a minimum, the length of this information is two double words. This means the length of the clause information is eight bytes. The first double word has to be zero. This is the starting position of the first clause. The last double word has to be the length of this string. For example, if the string has three clauses, the clause information has four double words. The first double word is zero. The second double word specifies the starting position of the second clause. The third double word specifies the starting position of the third clause. The last double word is the length of this string. </P>

<P>The <B>dwCursorPos</B> member specifies the character in the composition string where the cursor is located, in terms of the count of that character. The counting starts at zero. If the cursor is to be positioned immediately after the composition string, this value is equal to the length of the composition string. In case there is no cursor (if such a condition exists), a value -1 is specified here. If a composition string does not exist, this member is invalid. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: COMPOSITIONSTR"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
