<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handling Lightweight MIP Map Textures</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT></HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_handling_lightweight_mip_map_textures_gg"></A>Handling Lightweight MIP Map Textures</H4>

<P>Because the MIP sublevels of lightweight MIP-map textures are implicit and do not have corresponding DirectDraw surface structures (<A HREF="ddstrcts_1vl4.htm">DD_SURFACE_LOCAL</A>, <A HREF="ddstrcts_392f.htm">DD_SURFACE_GLOBAL</A> and <A HREF="ddstrcts_3esn.htm">DD_SURFACE_MORE</A>), a DirectX 9.0 version driver can determine if a MIP-map texture is lightweight and thus avoid creating unnecessary driver surface structures to save memory. To determine if a MIP-map texture is lightweight, the driver verifies if the DDSCAPS3_LIGHTWEIGHTMIPMAP bit in the <B>dwCaps3</B> member of the DDSCAPSEX (<A HREF="ddstrcts_3jqf.htm">DDSCAPS2</A>) structure for the texture surface is set. </P>

<P>Note that all MIP-map textures in DirectX 9.0 are lightweight by default. </P>

<P>The DirectX 9.0 version driver observes the following rules when handling lightweight and heavyweight MIP-map textures: 

<UL>
	<LI>A DirectX 9.0 and later driver can receive a <A HREF="d3denum_0jon.htm#ddk_d3ddp2op_texblt_gg">D3DDP2OP_TEXBLT</A> operation code in which the source MIP-map texture is heavyweight and the destination MIP-map texture is lightweight or vice versa. Of course, the driver can also receive a D3DDP2OP_TEXBLT in which both source and destination MIP-map textures are lightweight.</LI>

	<LI>Because a system memory lightweight MIP-map texture consumes only a single surface of memory, the entire MIP map is visible to the driver within the top-level surface. The driver is never required to perform a texture operation directly from a system memory lightweight MIP-map texture. Such a MIP-map texture can only be the source of a D3DDP2OP_TEXBLT.</LI>

	<LI>The following MIP-mapped textures must be heavyweight because locks and direct writes to video or <A HREF="ddraw_3spz.htm">AGP</A> memory corresponding to each sublevel are possible with such textures:
<UL>
	<LI>Render target</LI>

	<LI>Depth stencil</LI>

	<LI>Dynamic </LI>

	<LI>Vendor formatted</LI>
</UL>

<P>Therefore, a full surface data structure is required per sublevel.
</LI>

	<LI>Because a video or AGP memory lightweight MIP-map texture is never locked or referenced by other DDIs, such as <A HREF="ddfncs_7lpj.htm"><I>DdBlt</I></A>, the driver determines the sublevel placement for such a MIP-map texture. Therefore, full surfaces (explicit <B>fpVidmem</B> members of the <A HREF="ddstrcts_392f.htm">DD_SURFACE_GLOBAL</A> structure) for the sublevels of such a MIP-map texture are not required.</LI>

	<LI>Driver-managed lightweight MIP-map textures are also restricted to a single surface and must use exactly the same layout that Direct3D uses with system memory lightweight MIP-map textures. Note that this has no adverse effect (other than implementation cost) because the corresponding resident (video and AGP) MIP-map textures can have their own implementation-specific layout.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Handling%20Lightweight%20MIP%20Map%20Textures"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
