<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DrvPrinterEvent</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DrvPrinterEvent">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_drvprinterevent_gg"></A>DrvPrinterEvent</H1>

<P>A printer interface DLL's <B>DrvPrinterEvent</B> function is called by the print spooler when processing printer-specific events that might require action by the printer driver.</P>

<PRE class=syntax><B>BOOL
  DrvPrinterEvent(</B>
    <B>LPWSTR  </B><I>pPrinterName</I><B>,</B>
    <B>INT  </B><I>DriverEvent</I><B>,</B>
    <B>DWORD  </B><I>Flags</I><B>,</B>
    <B>LPARAM  </B><I>lParam</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>pPrinterName</I></DT>

<DD>Caller-supplied pointer to a NULL-terminated printer name string. The string format can be <I>\\Machine\PrinterName</I> to specify a remote printer, or <I>PrinterName</I> to specify a local printer.</DD>

<DT><I>DriverEvent</I></DT>

<DD>Caller-supplied event code identifying the event. The following event codes are defined:

<TABLE>

<TR VALIGN="top">
<TH align=left width=40%>Event Code</TH>
<TH align=left width=60%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_ADD_CONNECTION</TD>
<TD width=60%>The spooler has just finished processing a call to its <B>AddPrinterConnection</B> function (described in the Platform SDK documentation), which allows a client user to connect to a previously created remote printer.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_ATTRIBUTES_CHANGED</TD>
<TD width=60%>The attribute bits for a printer have changed. In response to an application's call to the <B>SetPrinter</B> function (described in the Platform SDK documentation), the spooler calls the printer driver's <B>DrvPrinterEvent</B> function, passing the event code in the call. When this event code is used, the <I>lParam</I> parameter points to a <A HREF="drvrfnc_2syv.htm">PRINTER_EVENT_ATTRIBUTES_INFO</A> structure that describes the old and the new attributes.
<P>One use for this event code is to inform the driver through the user interface about whether the printer is shared or unshared.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_CACHE_DELETE</TD>
<TD width=60%>The spooler is deleting the client's file cache.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_CACHE_REFRESH</TD>
<TD width=60%>The spooler is updating the client's cached files.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_DELETE_CONNECTION</TD>
<TD width=60%>The spooler has just finished processing a call to its <B>DeletePrinterConnection</B> function (described in the Platform SDK documentation), which allows a client user to remove a printer connection.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_DELETE</TD>
<TD width=60%>The spooler has just finished processing a call to its <B>DeletePrinter</B> function (described in the Platform SDK documentation), which allows an administrator to delete a printer instance.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>PRINTER_EVENT_INITIALIZE</TD>
<TD width=60%>The spooler has just finished processing a call to its <B>AddPrinter</B> function, which allows an administrator to make a printer available on a server, or its <B>SetPrinter</B> function (both described in the Platform SDK documentation), which allows an administrator to modify a printer's state.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>Flags</I></DT>

<DD>Caller-supplied bit flag, defined as follows:

<TABLE>

<TR VALIGN="top">
<TH align=left width=49%>Value</TH>
<TH align=left width=51%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD width=49%>PRINTER_EVENT_FLAG_NO_UI</TD>
<TD width=51%>If set, the function <I>must</I> <I>not</I> display a user interface. During the installation of a print processor, print monitor, or printer driver, the only way in which a user interface is permitted is through the use of the <B>VendorSetup</B> directive. See <A HREF="prtinst_8zaf.htm">Printer INF File Entries</A> and <A HREF="prtinst_1spz.htm">Customized Printer Setup Operations</A> for more information.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>lParam</I></DT>

<DD>Not used, must be NULL.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the operation succeeds, the function should return TRUE; otherwise it should return FALSE. Currently, however, the only time the function's return value is checked is when the spooler has called <B>DrvPrinterEvent</B> during processing of the <B>AddPrinter</B> function, with <I>DriverEvent</I> set to PRINTER_EVENT_INITIALIZE. If <B>DrvPrinterEvent</B> returns FALSE in this case, the spooler does not create the printer and instead causes <B>AddPrinter</B> to fail.</P>

<H4>Headers</H4>

<P>Declared in <I>winddiui.h</I>. Include <I>winddiui.h</I>.</P>

<H4>Comments</H4>

<P>All <A HREF="drvarch_29pj.htm">printer interface DLLs</A> must provide a <B>DrvPrinterEvent</B> function, and the function must support the PRINTER_EVENT_INITIALIZE event code. Support for all other event codes is optional.</P>

<P>Registry settings stored when handling a PRINTER_EVENT_INITIALIZE event should be stored under the HKEY_LOCAL_MACHINE key by calling <B>SetPrinterData</B>. For the PRINTER_EVENT_INITIALIZE and PRINTER_EVENT_DELETE event codes, the spooler verifies that the caller has administrative privilege and calls <B>DrvPrinterEvent</B> while impersonating the caller.</P>

<P>In contrast, if you need to store settings in the registry when handling a PRINTER_EVENT_ADD_CONNECTION event, the printer interface DLL should write them under the HKEY_CURRENT_USER key so that they are stored on a per-user basis. Then if a user with a roaming profile logs onto another system, the connection follows the user. The <B>DrvPrinterEvent</B> function is called only when the user first makes the connection, and not when the user subsequently logs onto other systems using the roaming profile.</P>

<P>For the PRINTER_EVENT_ADD_CONNECTION and PRINTER_EVENT_DELETE_CONNECTION event codes, the <B>DrvPrinterEvent</B> function's execution context is the calling application (usually the Print Folder), and the function can display a user interface. For all other event codes, the execution context is the print spooler and a user interface cannot be displayed.</P>

<P>An example of a driver that might display a user interface when a connection is made is a FAX driver, which could prompt the user for the name and telephone number of the user (FAX sender), and save the information until the connection is deleted.</P>

<P>An example of the type of file that might be stored in a client cache is a large font metrics file that contains too much information to be written to the registry. When the <B>DrvPrinterEvent</B> function's event code is PRINTER_EVENT_CACHE_REFRESH, the printer interface DLL can reload the file from the server to ensure the cache is up to date.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DrvPrinterEvent"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
