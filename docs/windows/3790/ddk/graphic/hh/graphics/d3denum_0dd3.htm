<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Shader Operation Codes</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Shader Operation Codes">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_shader_operation_codes_gg"></A>Shader Operation Codes</H1>

<P>This section lists the operation codes that can be contained in the first 16 bits (0 - 15) of an <A HREF="d3denum_62sn.htm">instruction token</A>. The sections that follow describe the token format of the instructions that correspond to the operation codes.

<DL>
<DT>D3DSIO_ABS</DT>

<DD>The <A HREF="d3denum_8b6v.htm">ABS instruction</A> computes absolute value.</DD>

<DT>D3DSIO_ADD</DT>

<DD>The <A HREF="d3denum_8ejr.htm">ADD instruction</A> adds sources into the destination.</DD>

<DT>D3DSIO_BEM</DT>

<DD>The <A HREF="d3denum_9zjb.htm">BEM instruction</A> applies a bump environment-map transform.</DD>

<DT>D3DSIO_BREAK</DT>

<DD>The <A HREF="d3denum_982v.htm">BREAK instruction</A> breaks from a loop.</DD>

<DT>D3DSIO_BREAKC</DT>

<DD>The <A HREF="d3denum_2ntz.htm">BREAK_COMP instruction</A> breaks from a loop, depending on the results of a conditional compare.</DD>

<DT>D3DSIO_BREAKP</DT>

<DD>The <A HREF="d3denum_54iv.htm">BREAK PRED instruction</A> breaks from a loop, using predication.</DD>

<DT>D3DSIO_CALL</DT>

<DD>The <A HREF="d3denum_2so7.htm">CALL instruction</A> calls a subroutine.</DD>

<DT>D3DSIO_CALLNZ</DT>

<DD>The <A HREF="d3denum_6g4n.htm">CALLNZ instruction</A> calls a subroutine if not zero.</DD>

<DT>D3DSIO_CMP</DT>

<DD>The <A HREF="d3denum_5dwn.htm">CMP instruction</A> chooses between sources, based on a comparison to zero.</DD>

<DT>D3DSIO_CND</DT>

<DD>The <A HREF="d3denum_3hd3.htm">CND instruction</A> chooses between sources, based on a comparison to greater than 0.5.</DD>

<DT>D3DSIO_COMMENT</DT>

<DD>Specifies the <A HREF="d3denum_9gdj.htm">comment token</A>.</DD>

<DT>D3DSIO_CRS</DT>

<DD>The <A HREF="d3denum_36av.htm">CRS instruction</A> computes cross product.</DD>

<DT>D3DSIO_DCL</DT>

<DD>The <A HREF="d3denum_2u5j.htm">DCL instruction</A> declares registers.</DD>

<DT>D3DSIO_DEF</DT>

<DD>The <A HREF="d3denum_6tyf.htm">DEF instruction</A> defines constants.</DD>

<DT>D3DSIO_DEFB</DT>

<DD>The <A HREF="d3denum_18kn.htm">DEFB instruction</A> declares a Boolean constant.</DD>

<DT>D3DSIO_DEFI</DT>

<DD>The <A HREF="d3denum_9tt3.htm">DEFI instruction</A> declares an integer constant.</DD>

<DT>D3DSIO_DP2ADD</DT>

<DD>The <A HREF="d3denum_0f1j.htm">DP2ADD instruction</A> performs a 2-D dot product and scalar addition.</DD>

<DT>D3DSIO_DP3</DT>

<DD>The <A HREF="d3denum_0zzb.htm">DP3 instruction</A> computes three-component dot product.</DD>

<DT>D3DSIO_DP4</DT>

<DD>The <A HREF="d3denum_3nl3.htm">DP4 instruction</A> computes four-component dot product.</DD>

<DT>D3DSIO_DST</DT>

<DD>The <A HREF="d3denum_3ig7.htm">DST instruction</A> computes distance.</DD>

<DT>D3DSIO_DSX</DT>

<DD>The <A HREF="d3denum_44vb.htm">DSX instruction</A> computes rate of change in the x direction.</DD>

<DT>D3DSIO_DSY</DT>

<DD>The <A HREF="d3denum_6sh3.htm">DSY instruction</A> computes rate of change in the y direction.</DD>

<DT>D3DSIO_ELSE</DT>

<DD>The <A HREF="d3denum_6ofb.htm">ELSE instruction</A> begins an ELSE block.</DD>

<DT>D3DSIO_END</DT>

<DD>Specifies the <A HREF="d3denum_8co7.htm">end token</A>.</DD>

<DT>D3DSIO_ENDIF</DT>

<DD>The <A HREF="d3denum_3ycn.htm">ENDIF instruction</A> ends an IF...ELSE block.</DD>

<DT>D3DSIO_ENDLOOP</DT>

<DD>The <A HREF="d3denum_37af.htm">ENDLOOP instruction</A> marks the end of a loop block.</DD>

<DT>D3DSIO_ENDREP</DT>

<DD>The <A HREF="d3denum_3q1z.htm">ENDREP instruction</A> marks the end of a repeat block.</DD>

<DT>D3DSIO_EXP</DT>

<DD>The <A HREF="d3denum_0ffr.htm">EXP instruction</A> provides full precision exponential 2<SUP>x</SUP>.</DD>

<DT>D3DSIO_EXPP</DT>

<DD>The <A HREF="d3denum_8luv.htm">EXPP instruction</A> provides partial precision exponential 2<SUP>x</SUP>.</DD>

<DT>D3DSIO_FRC</DT>

<DD>The <A HREF="d3denum_3u3r.htm">FRC instruction</A> returns fractional component.</DD>

<DT>D3DSIO_IF</DT>

<DD>The <A HREF="d3denum_3rfr.htm">IF instruction</A> begins an IF block.</DD>

<DT>D3DSIO_IFC</DT>

<DD>The <A HREF="d3denum_4syv.htm">IF_COMP instruction</A> begins an if block with a comparison.</DD>

<DT>D3DSIO_LABEL</DT>

<DD>The <A HREF="d3denum_7llz.htm">LABEL instruction</A> marks the next instruction as label.</DD>

<DT>D3DSIO_LIT</DT>

<DD>The <A HREF="d3denum_5lwn.htm">LIT instruction</A> calculates lighting.</DD>

<DT>D3DSIO_LOG</DT>

<DD>The <A HREF="d3denum_0vc7.htm">LOG instruction</A> calculates full precision log<SUB>2</SUB>(x).</DD>

<DT>D3DSIO_LOGP</DT>

<DD>The <A HREF="d3denum_6vjb.htm">LOGP instruction</A> calculates partial precision log<SUB>2</SUB>(x).</DD>

<DT>D3DSIO_LOOP</DT>

<DD>The <A HREF="d3denum_6l9j.htm">LOOP instruction</A> begins a LOOP...ENDLOOP block.</DD>

<DT>D3DSIO_LRP</DT>

<DD>The <A HREF="d3denum_4nxj.htm">LRP instruction</A> interpolates linearly between registers.</DD>

<DT>D3DSIO_M3x2</DT>

<DD>The <A HREF="d3denum_2hif.htm">M3x2 instruction</A> performs 3x2 multiply.</DD>

<DT>D3DSIO_M3x3</DT>

<DD>The <A HREF="d3denum_5547.htm">M3x3 instruction</A> performs 3x3 multiply.</DD>

<DT>D3DSIO_M3x4</DT>

<DD>The <A HREF="d3denum_7spz.htm">M3x4 instruction</A> performs 3x4 multiply.</DD>

<DT>D3DSIO_M4x3</DT>

<DD>The <A HREF="d3denum_2uxz.htm">M4x3 instruction</A> performs 4x3 multiply.</DD>

<DT>D3DSIO_M4x4</DT>

<DD>The <A HREF="d3denum_5ijr.htm">M4x4 instruction</A> performs 4x4 multiply.</DD>

<DT>D3DSIO_MAD</DT>

<DD>The <A HREF="d3denum_14br.htm">MAD instruction</A> multiplies and adds sources.</DD>

<DT>D3DSIO_MAX</DT>

<DD>The <A HREF="d3denum_48fb.htm">MAX instruction</A> determines maximum.</DD>

<DT>D3DSIO_MIN</DT>

<DD>The <A HREF="d3denum_7e3r.htm">MIN instruction</A> determines minimum.</DD>

<DT>D3DSIO_MOV</DT>

<DD>The <A HREF="d3denum_8f8n.htm">MOV instruction</A> moves data between registers.</DD>

<DT>D3DSIO_MOVA</DT>

<DD>The <A HREF="d3denum_0f53.htm">MOVA instruction</A> moves data from floating-point register to integer register.</DD>

<DT>D3DSIO_MUL</DT>

<DD>The <A HREF="d3denum_1nhj.htm">MUL instruction</A> multiplies sources into the destination.</DD>

<DT>D3DSIO_NOP</DT>

<DD>The <A HREF="d3denum_07fr.htm">NOP instruction</A> performs a no-op, or no operation.</DD>

<DT>D3DSIO_NRM</DT>

<DD>The <A HREF="d3denum_24rr.htm">NRM instruction</A> normalizes a 4-D vector.</DD>

<DT>D3DSIO_PHASE</DT>

<DD>The <A HREF="d3denum_0fc7.htm">PHASE instruction</A> marks the transition between pixel shader version 1 and 2.</DD>

<DT>D3DSIO_POW</DT>

<DD>The <A HREF="d3denum_48br.htm">POW instruction</A> calculates full precision (src1)<SUP>src0</SUP>.</DD>

<DT>D3DSIO_RCP</DT>

<DD>The <A HREF="d3denum_1i5j.htm">RCP instruction</A> computes the reciprocal of source.</DD>

<DT>D3DSIO_REP</DT>

<DD>The <A HREF="d3denum_1fl3.htm">REP instruction</A> starts a REPEAT...ENDREP block.</DD>

<DT>D3DSIO_RET</DT>

<DD>The <A HREF="d3denum_2207.htm">RET instruction</A> returns from a subroutine.</DD>

<DT>D3DSIO_RSQ</DT>

<DD>The <A HREF="d3denum_3l7r.htm">RSQ instruction</A> computes reciprocal square root of source.</DD>

<DT>D3DSIO_SETP</DT>

<DD>The <A HREF="d3denum_6n53.htm">SETP instruction</A> sets the predicate register.</DD>

<DT>D3DSIO_SGE</DT>

<DD>The <A HREF="d3denum_9v6v.htm">SGE instruction</A> determines a greater than or equal comparison.</DD>

<DT>D3DSIO_SGN</DT>

<DD>The <A HREF="d3denum_3rmv.htm">SGN instruction</A> determines the sign of the source.</DD>

<DT>D3DSIO_SINCOS</DT>

<DD>The <A HREF="d3denum_0y07.htm">SINCOS instruction</A> computes sine and cosine of the source.</DD>

<DT>D3DSIO_SLT</DT>

<DD>The <A HREF="d3denum_9iuf.htm">SLT instruction</A> determines a less than comparison.</DD>

<DT>D3DSIO_SUB</DT>

<DD>The <A HREF="d3denum_1eef.htm">SUB instruction</A> subtracts sources and stores the result in the destination.</DD>

<DT>D3DSIO_TEX</DT>

<DD>The <A HREF="d3denum_842v.htm">TEX instruction</A> loads destination with color data (RGBA) that is sampled from the source texture.</DD>

<DT>D3DSIO_TEXBEM</DT>

<DD>The <A HREF="d3denum_07qf.htm">TEXBEM instruction</A> applies bump environment-map transform.</DD>

<DT>D3DSIO_TEXBEML</DT>

<DD>The <A HREF="d3denum_4aef.htm">TEXBEML instruction</A> applies bump environment-map transform with luminance correction.</DD>

<DT>D3DSIO_TEXCOORD</DT>

<DD>The <A HREF="d3denum_8plz.htm">TEXCOORD instruction</A> copies texture coordinate data (UVW1) as color data (RGBA).</DD>

<DT>D3DSIO_TEXDEPTH</DT>

<DD>The <A HREF="d3denum_8dyf.htm">TEXDEPTH instruction</A> calculates depth value to be used in pixel depth buffer comparison test.</DD>

<DT>D3DSIO_TEXDP3</DT>

<DD>The <A HREF="d3denum_186f.htm">TEXDP3 instruction</A> performs three-component dot product for a texture.</DD>

<DT>D3DSIO_TEXDP3TEX</DT>

<DD>The <A HREF="d3denum_6n1j.htm">TEXDP3TEX instruction</A> performs three-component dot product and uses the result to do a 1-D texture lookup.</DD>

<DT>D3DSIO_TEXKILL</DT>

<DD>The <A HREF="d3denum_0ffs.htm">TEXKILL instruction</A> cancels rendering of current pixel.</DD>

<DT>D3DSIO_TEXLDD</DT>

<DD>The <A HREF="d3denum_3iuf.htm">TEXLDD instruction</A> samples a texture with adjustable level of detail (LOD) bias.</DD>

<DT>D3DSIO_TEXLDL</DT>

<DD>The <A HREF="d3denum_4ron.htm">TEXLDL instruction</A> samples a texture with the LOD from the W component.</DD>

<DT>D3DSIO_TEXM3x2DEPTH</DT>

<DD>The <A HREF="d3denum_65d3.htm">TEXM3x2DEPTH instruction</A> calculates depth value to be used in pixel depth testing.</DD>

<DT>D3DSIO_TEXM3x2PAD</DT>

<DD>The <A HREF="d3denum_6c2v.htm">TEXM3x2PAD instruction</A> performs the first row multiplication of a two-row matrix multiply.</DD>

<DT>D3DSIO_TEXM3x2TEX</DT>

<DD>The <A HREF="d3denum_06cn.htm">TEXM3x2TEX instruction</A> performs the final row of a 3x2 matrix multiply and uses the result in a texture lookup.</DD>

<DT>D3DSIO_TEXM3x3</DT>

<DD>The <A HREF="d3denum_9prb.htm">TEXM3x3 instruction</A> performs 3x3 matrix multiply when used in conjunction with two <A HREF="d3denum_090n.htm">TEXM3x3PAD instructions</A>.</DD>

<DT>D3DSIO_TEXM3x3PAD</DT>

<DD>The <A HREF="d3denum_090n.htm">TEXM3x3PAD instruction</A> performs the first or second row multiply of a three-row matrix multiply.</DD>

<DT>D3DSIO_TEXM3x3SPEC</DT>

<DD>The <A HREF="d3denum_052f.htm">TEXM3x3SPEC instruction</A> performs a 3x3 matrix multiply and uses the result in a texture lookup. Used for specular reflection and environment mapping.</DD>

<DT>D3DSIO_TEXM3x3TEX</DT>

<DD>The <A HREF="d3denum_43af.htm">TEXM3x3TEX instruction</A> performs a 3x3 matrix multiply and uses the result in a texture lookup.</DD>

<DT>D3DSIO_TEXM3x3VSPEC</DT>

<DD>The <A HREF="d3denum_3vs7.htm">TEXM3x3VSPEC instruction</A> performs a 3x3 matrix multiply and uses the result in a texture lookup. Used for specular reflection and environment mapping where the eye-ray vector is not constant.</DD>

<DT>D3DSIO_TEXREG2AR</DT>

<DD>The <A HREF="d3denum_7yg7.htm">TEXREG2AR instruction</A> copies alpha and red (AR) color components of source as texture address data (UV).</DD>

<DT>D3DSIO_TEXREG2GB</DT>

<DD>The <A HREF="d3denum_592f.htm">TEXREG2GB instruction</A> copies green and blue color components of source as texture address data.</DD>

<DT>D3DSIO_TEXREG2RGB</DT>

<DD>The <A HREF="d3denum_4td3.htm">TEXREG2RGB instruction</A> copies red, green, and blue (RGB) color components of source as texture address data.</DD>
</DL>

<H4>Comments</H4>

<P>For more information about each instruction that is embedded in each operation code, see the Shader Reference in the latest DirectX SDK documentation. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Shader%20Operation%20Codes"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
