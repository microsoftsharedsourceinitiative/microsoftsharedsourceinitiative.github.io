<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source Parameter Token</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Source Parameter Token">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_source_parameter_token_gg"></A>Source Parameter Token</H2>

<P>A source parameter token describes properties of a source register and is composed of the following bits:</P>

<H4>Bits</H4>

<DL>
<DT><B>[10:00]</B></DT>

<DD>Bits 0 through 10 indicate the register number (offset in register file). </DD>

<DT><B>[12:11]</B></DT>

<DD>Bits 11 and 12 are the fourth and fifth bits [3,4] for indicating the <A HREF="d3denum_9o6f.htm">register type</A>. </DD>

<DT><B>[13]</B></DT>

<DD>For a pixel shader (PS) versions earlier than 3_0, bit 13 is reserved and set to 0x0. 

<P>For pixel shader (PS) version 3_0 and later and all versions of vertex shader (VS), bit 13 indicates whether relative addressing mode is used. If set to 1, <A HREF="d3denum_1o6f.htm">relative addressing</A> applies.
</DD>

<DT><B>[15:14]</B></DT>

<DD>Reserved for all versions of PS and VS. This value is set to 0x0.</DD>

<DT><B>[23:16]</B></DT>

<DD>Bits 16 through 23 indicate channel <I>swizzle</I>. All arithmetic operations are performed in four (X,Y,Z,W) parallel channels. Swizzle specifies which source component participates in a channel of operation. For more information about swizzle, see the latest DirectX SDK documentation. The bits of this field specify swizzle for the following channels:

<TABLE>

<TR VALIGN="top">
<TH align=left width=39%>Bits</TH>
<TH align=left width=61%>Channel</TH>
</TR>

<TR VALIGN="top">
<TD width=39%>17:16</TD>
<TD width=61%>Channel X swizzle</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>19:18</TD>
<TD width=61%>Channel Y swizzle</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>21:20</TD>
<TD width=61%>Channel Z swizzle</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>23:22</TD>
<TD width=61%>Channel W swizzle</TD>
</TR>
</TABLE><BR>



<P>The following values in any set of preceding bits specify the source component to be used in the channel of operation:


<TABLE>

<TR VALIGN="top">
<TH align=left width=39%>Value</TH>
<TH align=left width=61%>Component</TH>
</TR>

<TR VALIGN="top">
<TD width=39%>0x0</TD>
<TD width=61%>Component X is used.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>0x1</TD>
<TD width=61%>Component Y is used.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>0x2</TD>
<TD width=61%>Component Z is used.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%>0x3</TD>
<TD width=61%>Component W is used.</TD>
</TR>
</TABLE><BR>



<P>For example, if the 19:18 bits are set to 0x2, then component Z is used as the source for the channel Y operation.
</DD>

<DT><B>[27:24]</B></DT>

<DD>Bits 24 through 27 indicate the source modifier. This 4-bit value indicates the following source modifier types:

<TABLE>

<TR VALIGN="top">
<TH align=left width=28%>Value</TH>
<TH align=left width=72%>Source modifier type</TH>
</TR>

<TR VALIGN="top">
<TD width=28%>0x0</TD>
<TD width=72%>None</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x1</TD>
<TD width=72%>Negate</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x2</TD>
<TD width=72%>Bias</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x3</TD>
<TD width=72%>Bias and negate</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x4</TD>
<TD width=72%>Sign (bx2)</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x5</TD>
<TD width=72%>Sign (bx2) and negate</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x6</TD>
<TD width=72%>Complement</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x7</TD>
<TD width=72%>x2 (PS 1_4)</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x8</TD>
<TD width=72%>x2 and negate (PS 1_4)</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0x9</TD>
<TD width=72%>dz (divide through by Z component - PS 1_4)</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0xa</TD>
<TD width=72%>dw (divide through by W component – PS 1_4)</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0xb</TD>
<TD width=72%>abs(x) compute absolute value</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0xc</TD>
<TD width=72%>-abs(x) compute absolute value and negate</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0xd</TD>
<TD width=72%>NOT. Applied only to the predication register, which is BOOL. Therefore, it is logical NOT.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>0xe-0xf</TD>
<TD width=72%>Reserved</TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>[30:28]</B></DT>

<DD>Bits 28 through 30 are the first three bits [0,1,2] for indicating the <A HREF="d3denum_9o6f.htm">register type</A>.</DD>

<DT><B>[31]</B></DT>

<DD>Bit 31 is 0x1.
</DD>
</DL>

<H4>Comments</H4>

<P>Bits 28, 29, 30, 11, and 12 form a 5-bit value that indicates the register type. For information on register types, see <A HREF="d3denum_9o6f.htm">Shader Register Types</A>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Source%20Parameter%20Token"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
