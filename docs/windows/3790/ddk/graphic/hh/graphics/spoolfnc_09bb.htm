<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ReadPort</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ReadPort">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_readport_gg"></A>ReadPort</H1>

<P>A port monitor's <B>ReadPort</B> function writes data to a printer port.</P>

<PRE class=syntax><B>BOOL
  (WINAPI *pfnReadPort)(
    HANDLE  </B><I>hPort</I><B>,
    LPBYTE  </B><I>pBuffer</I><B>,
    DWORD  </B><I>cbBuffer</I><B>,
    LPDWORD  </B><I>pcbRead<B>
    </B></I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>hPort</I></DT>

<DD>Caller-supplied port handle.</DD>

<DT><I>pBuffer</I></DT>

<DD>Caller-supplied pointer to a buffer to receive data read from the port.</DD>

<DT><I>cbBuffer</I></DT>

<DD>Caller-supplied size, in bytes, of <I>pBuffer</I>.</DD>

<DT><I>pcbRead</I></DT>

<DD>Caller-supplied pointer to a location to receive the number of bytes successfully read from the port.
</DD>
</DL>

<H4>Return Value</H4>

<P>If the operation succeeds, the function should return TRUE. Otherwise it should return FALSE.</P>

<H4>Headers</H4>

<P>Declared in <I>winsplp.h</I>. Include <I>winsplp.h</I>.</P>

<H4>Comments</H4>

<P><A HREF="provider_7msn.htm">Language monitors</A> and <A HREF="provider_897r.htm#ddk_port_monitor_server_dll_gg">port monitor server DLLs</A> are required to define a <B>ReadPort</B> function and include the function's address in a <A HREF="spoolfnc_0k9z.htm">MONITOR2</A> structure.</P>

<P>The handle received as the function's <I>hPort</I> argument is the port handle that the monitor's <A HREF="spoolfnc_11yf.htm"><B>OpenPort</B></A> or <A HREF="spoolfnc_12nb.htm"><B>OpenPortEx</B></A> function supplied.</P>

<P>Typically, a language monitor's <B>ReadPort</B> function calls the associated port monitor's <B>ReadPort</B> function, and returns the obtained buffer contents to the caller.</P>

<P>Additionally, a language monitor might create a separate thread that calls the port monitor's <B>ReadPort</B> function to check for unsolicited status information. If such a read operation succeeds, the status information should be returned to the spooler by calling <B>SetPort</B> (described in the Platform SDK documentation).</P>

<P>Typically, a port monitor server DLL's <B>ReadPort</B> function calls <B>ReadFile</B> (described in the Platform SDK documentation) to obtain data from the kernel-mode port driver. The function just returns the data to the caller.</P>

<P>Even though both language monitors and port monitors must define <B>ReadPort</B> functions and place their addresses in MONITOR2 structures, a language monitor's <B>ReadPort</B> function is never actually called by the spooler or an application. The function is solely for the internal use of the language monitor itself.</P>

<P>For example <I>pjlmon.dll</I>, the <A HREF="provider_72uf.htm">sample language monitor</A>, creates a separate thread that calls its own <B>ReadPort</B> to watch for unsolicited printer status information, and the <B>ReadPort</B> function calls the port monitor's <B>ReadPort</B> function. When the port monitor returns data to the language monitor, the language monitor parses the received data and calls <B>SetPort</B> (described in the Platform SDK documentation) to send status information to the spooler.</P>

<P>The function should return the number of bytes successfully read by placing the number in the location pointed to by <I>pcbRead</I>. The caller determines the success or failure of the write operation by checking <B>ReadPort</B>'s return value, not the returned byte count. So a returned byte count of zero does not represent a failed read unless the function returns FALSE.</P>

<P>Some sort of system-implemented or monitor-implemented time-out mechanism must ensure that the <B>ReadPort</B> function will return within a reasonable amount of time, to avoid stalling the spooler.</P>

<P>It is acceptable for a language monitor to call a port monitor's <B>ReadPort</B> routine outside of a <A HREF="spoolfnc_4ntz.htm"><B>StartDocPort</B></A>/<A HREF="spoolfnc_3gyv.htm"><B>EndDocPort</B></A> pair. (Such a call might be generated by a thread checking for unsolicited status.) However, some port monitors might fail such a call, so the language monitor must be written to handle this failure.</P>

<H4>See Also</H4>

<P><A HREF="spoolfnc_2rs7.htm"><B>GetPrinterDataFromPort</B></A>, <A HREF="spoolfnc_11yf.htm"><B>OpenPort</B></A>, <A HREF="spoolfnc_12nb.htm"><B>OpenPortEx</B></A>, <A HREF="spoolfnc_4ntz.htm"><B>StartDocPort</B></A>, <A HREF="spoolfnc_3gyv.htm"><B>EndDocPort</B></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ReadPort"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
