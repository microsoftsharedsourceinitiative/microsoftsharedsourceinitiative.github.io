<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>HwVidQueryDeviceCallback</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="HwVidQueryDeviceCallback">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_extensions_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_hwvidquerydevicecallback_gg"></A><I>HwVidQueryDeviceCallback</I></H1>

<P><I>HwVidQueryDeviceCallback</I> uses the specified configuration data to configure its adapter, and, possibly, to fill in missing configuration information in the <A HREF="vstrcts_459j.htm">VIDEO_PORT_CONFIG_INFO</A> structure.</P>

<PRE class=syntax><B>VP_STATUS
  (*PMINIPORT_QUERY_DEVICE_ROUTINE)(
    PVOID</B>  <I>HwDeviceExtension</I><B>,
    PVOID</B>  <I>Context</I><B>,
    VIDEO_DEVICE_DATA_TYPE</B>  <I>DeviceDataType</I><B>,
    PVOID</B>  <I>Identifier</I><B>,
    ULONG</B>  <I>IdentifierLength</I><B>,
    PVOID</B>  <I>ConfigurationData</I><B>,
    ULONG</B>  <I>ConfigurationDataLength</I><B>,
    PVOID</B>  <I>ComponentInformation</I><B>,
    ULONG</B>  <I>ComponentInformationLength</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>HwDeviceExtension</I></DT>

<DD>Pointer to the miniport driver's per-adapter storage area. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Device Extensions</A>.</DD>

<DT><I>Context</I></DT>

<DD>Pointer to the context value set up by <A HREF="vmpfncs_3e3r.htm"><I>HwVidFindAdapter</I></A>. Usually, it points to the VIDEO_PORT_CONFIG_INFO buffer or to an offset in that buffer.</DD>

<DT><I>DeviceDataType</I></DT>

<DD>Specifies the type of configuration information that was requested, which is one of the following:

<P><B>VpBusData</B><BR>
<B>VpCmosData</B><BR>
<B>VpControllerData</B><BR>
<B>VpMachineData</B><BR>
<B>VpMonitorData</B>


<P>Miniport drivers of x86-type video adapters usually specify <B>VpBusData</B>, particularly for adapters on EISA buses. The <B>VpControllerData</B> and <B>VpMonitorData</B> values have meaning only on ARC-compliant platforms. The <B>VpCmosData</B> and <B>VpMachineData</B> values are seldom used.  
</DD>

<DT><I>Identifier</I></DT>

<DD>Pointer to the name of the device as determined by the ARC firmware. This parameter should be used only on ARC-compliant platforms. Otherwise, this pointer should be NULL.</DD>

<DT><I>IdentifierLength</I></DT>

<DD>Specifies the size in bytes of the buffered <I>Identifier</I> string<I>.</I> The value should be zero if the machine is not ARC-compliant.</DD>

<DT><I>ConfigurationData</I></DT>

<DD>Pointer to hardware configuration data. The format of this data is determined by the specified <I>DeviceDataType</I> and by the <B>AdapterInterfaceType</B> value in the VIDEO_PORT_CONFIG_INFO.</DD>

<DT><I>ConfigurationDataLength</I></DT>

<DD>Specifies the size in bytes of the <I>ConfigurationData</I> buffer. In effect, this indicates how much information was collected from the registry and stored in the <I>ConfigurationData</I> buffer allocated by <A HREF="vpfncs_87mv.htm"><B>VideoPortGetDeviceBase</B></A>.</DD>

<DT><I>ComponentInformation</I></DT>

<DD>Reserved for system use.</DD>

<DT><I>ComponentInformationLength</I></DT>

<DD>Reserved for system use.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>HwVidQueryDeviceCallback</I> returns the status of the operation.</P>

<H4>Headers</H4>

<P>Declared in <I>video.h</I>. Include <I>video.h</I>.</P>

<H4>Comments</H4>

<P><I>HwVidQueryDeviceCallback</I> is passed in a call to <A HREF="vpfncs_9353.htm"><B>VideoPortGetDeviceData</B></A> from the miniport driver's <A HREF="vmpfncs_3e3r.htm"><I>HwVidFindAdapter</I></A> function. <B>VideoPortGetDeviceData</B> calls <I>HwVidQueryDeviceCallback</I> after collecting available configuration information under the <B>\Registry\Machine\Hardware\Description</B> node of the registry.</P>

<P><I>HwVidQueryDeviceCallback</I> examines the <I>ConfigurationData</I>, collected from the registry by <B>VideoPortGetDeviceData</B>. It uses this information to configure its adapter, and, possibly, to fill in missing configuration information in the <A HREF="vstrcts_459j.htm">VIDEO_PORT_CONFIG_INFO</A> structure.</P>

<P><I>HwVidQueryDeviceCallback</I> cannot pass access range values found in the <I>ConfigurationData</I> to any <B>VideoPortRead</B><I>Xxx</I> or <B>VideoPortWrite</B><I>Xxx</I> directly; such addresses first must be mapped by calling <A HREF="vpfncs_87mv.htm"><B>VideoPortGetDeviceBase</B></A>.</P>

<P>If the <I>ConfigurationData</I> buffer has no access range information and the miniport driver's <I>HwVidFindAdapter</I> function has not already called <A HREF="vpfncs_5naf.htm"><B>VideoPortGetBusData</B></A> (or <A HREF="vpfncs_22lj.htm"><B>VideoPortGetAccessRanges</B></A>), its <I>HwVidQueryDeviceCallback</I> function can call <B>VideoPortGetBusData</B>. Access range information returned by <B>VideoPortGetBusData</B> also must be passed to <A HREF="vpfncs_0x7r.htm"><B>VideoPortVerifyAccessRanges</B></A>.</P>

<P>If <B>VideoPortVerifyAccessRanges</B> returns NO_ERROR, the miniport driver can call <B>VideoPortGetDeviceBase</B> to obtain mapped logical addresses that it can use to communicate with the adapter by calling the <B>VideoPortRead</B><I>Xxx</I> and/or <B>VideoPortWrite</B><I>Xxx</I> functions.</P>

<P>If it cannot get bus-relative access ranges values by calling <B>VideoPortGetDeviceData</B>, <B>VideoPortGetBusData</B>, or <B>VideoPortGetAccessRanges</B>, a miniport driver can use a set of driver-supplied default access-range values to find its adapter. In these circumstances, the miniport driver must call <B>VideoPortVerifyAccessRanges</B> with the miniport driver-supplied access ranges, and, then call <B>VideoPortGetDeviceBase</B> only if <B>VideoPortVerifyAccessRanges</B> returned NO_ERROR. If a call to <B>VideoPortVerifyAccessRanges</B> is unsuccessful, a given bus-relative range is already in use by the driver of another device.</P>

<P><I>HwVidQueryDeviceCallback</I><B> </B>should be made pageable.</P>

<H4>See Also</H4>

<P><A HREF="vpfncs_22lj.htm"><B>VideoPortGetAccessRanges</B></A>, <A HREF="vpfncs_5naf.htm"><B>VideoPortGetBusData</B></A>, <A HREF="vpfncs_87mv.htm"><B>VideoPortGetDeviceBase</B></A>, <A HREF="vpfncs_9353.htm"><B>VideoPortGetDeviceData</B></A>, <A HREF="vpfncs_0x7r.htm"><B>VideoPortVerifyAccessRanges</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: HwVidQueryDeviceCallback"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
