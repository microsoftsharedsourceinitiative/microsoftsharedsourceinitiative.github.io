<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PRINTPROVIDOR</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PRINTPROVIDOR">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_printprovidor_gg"></A>PRINTPROVIDOR</H1>

<P>The PRINTPROVIDOR structure is used as a parameter to a print provider's <A HREF="spoolfnc_6qef.htm"><B>InitializePrintProvidor</B></A> function. All structure member values are supplied by the provider.</P>

<PRE class=syntax>typedef struct _PRINTPROVIDOR {
  BOOL (*fpOpenPrinter)(LPWSTR  pPrinterName,
                        LPHANDLE  phPrinter,
                        LPPRINTER_DEFAULTS  pDefault);
  BOOL (*fpSetJob)(HANDLE  hPrinter,
                   DWORD  JobId,
                   DWORD  Level,
                   LPBYTE  pJob,
                   DWORD  Command);
  BOOL (*fpGetJob)(HANDLE  hPrinter,
                   DWORD  JobId,
                   DWORD  Level,
                   LPBYTE  pJob,
                   DWORD  cbBuf,
                   LPDWORD  pcbNeeded);
  BOOL (*fpEnumJobs)(HANDLE  hPrinter,
                     DWORD  FirstJob,
                     DWORD  NoJobs,
                     DWORD  Level,
                     LPBYTE  pJob,
                     DWORD  cbBuf,
                     LPDWORD  pcbNeeded,
                     LPDWORD  pcReturned);
  HANDLE (*fpAddPrinter)(LPWSTR  pName,
                         DWORD  Level,
                         LPBYTE  pPrinter);
  BOOL (*fpDeletePrinter)(HANDLE  hPrinter);
  BOOL (*fpSetPrinter)(HANDLE  hPrinter,
                       DWORD  Level,
                       LPBYTE  pPrinter,
                       DWORD  Command);
  BOOL (*fpGetPrinter)(HANDLE  hPrinter,
                       DWORD  Level,
                       LPBYTE  pPrinter,
                       DWORD  cbBuf,
                       LPDWORD  pcbNeeded);
  BOOL (*fpEnumPrinters)(DWORD  Flags,
                         LPWSTR  Name,
                         DWORD  Level,
                         LPBYTE  pPrinterEnum,
                         DWORD  cbBuf,
                         LPDWORD  pcbNeeded,
                         LPDWORD  pcReturned);
  BOOL (*fpAddPrinterDriver)(LPWSTR  pName,
                             DWORD  Level,
                             LPBYTE  pDriverInfo);
  BOOL (*fpEnumPrinterDrivers)(LPWSTR  pName,
                               LPWSTR  pEnvironment,
                               DWORD  Level,
                               LPBYTE  pDriverInfo,
                               DWORD  cbBuf,
                               LPDWORD  pcbNeeded,
                               LPDWORD  pcReturned);
  BOOL (*fpGetPrinterDriver)(HANDLE  hPrinter,
                             LPWSTR  pEnvironment,
                             DWORD  Level,
                             LPBYTE  pDriverInfo,
                             DWORD  cbBuf,
                             LPDWORD  pcbNeeded);
  BOOL (*fpGetPrinterDriverDirectory)(LPWSTR  pName,
                                      LPWSTR  pEnvironment,
                                      DWORD  Level,
                                      LPBYTE  pDriverDirectory,
                                      DWORD  cbBuf,
                                      LPDWORD  pcbNeeded);
  BOOL (*fpDeletePrinterDriver)(LPWSTR  pName,
                                LPWSTR  pEnvironment,
                                LPWSTR  pDriverName);
  BOOL (*fpAddPrintProcessor)(LPWSTR  pName,
                              LPWSTR  pEnvironment,
                              LPWSTR  pPathName,
                              LPWSTR  pPrintProcessorName);
  BOOL (*fpEnumPrintProcessors)(LPWSTR  pName,
                                LPWSTR  pEnvironment,
                                DWORD  Level,
                                LPBYTE  pPrintProcessorInfo,
                                DWORD  cbBuf,
                                LPDWORD  pcbNeeded,
                                LPDWORD  pcReturned);
  BOOL (*fpGetPrintProcessorDirectory)(LPWSTR  pName,
                                       LPWSTR  pEnvironment,
                                       DWORD  Level,
                                       LPBYTE  pPrintProcessorInfo,
                                       DWORD  cbBuf,
                                       LPDWORD  pcbNeeded);
  BOOL (*fpDeletePrintProcessor)(LPWSTR  pName,
                                 LPWSTR  pEnvironment,
                                 LPWSTR  pPrintProcessorName);
  BOOL (*fpEnumPrintProcessorDatatypes)(LPWSTR  pName,
                                        LPWSTR  pPrintProcessorName,
                                        DWORD  Level,
                                        LPBYTE  pDataypes,
                                        DWORD  cbBuf,
                                        LPDWORD  pcbNeeded,
                                        LPDWORD  pcReturned);
  DWORD (*fpStartDocPrinter)(HANDLE  hPrinter,
                             DWORD  Level,
                             LPBYTE  pDocInfo);
  BOOL (*fpStartPagePrinter)(HANDLE  hPrinter);
  BOOL (*fpWritePrinter)(HANDLE  hPrinter,
                         LPVOID  pBuf,
                         DWORD  cbBuf,
                         LPDWORD  pcWritten);
  BOOL (*fpEndPagePrinter)(HANDLE  hPrinter);
  BOOL (*fpAbortPrinter)(HANDLE  hPrinter);
  BOOL (*fpReadPrinter)(HANDLE  hPrinter,
                        LPVOID  pBuf,
                        DWORD  cbBuf,
                        LPDWORD  pNoBytesRead);
  BOOL (*fpEndDocPrinter)(HANDLE  hPrinter);
  BOOL (*fpAddJob)(HANDLE  hPrinter,
                   DWORD  Level,
                   LPBYTE  pData,
                   DWORD  cbBuf,
                   LPDWORD  pcbNeeded);
  BOOL (*fpScheduleJob)(HANDLE  hPrinter,
                        DWORD  JobId);
  DWORD (*fpGetPrinterData)(HANDLE  hPrinter,
                            LPWSTR  pValueName,
                            LPDWORD  pType,
                            LPBYTE  pData,
                            DWORD  nSize,
                            LPDWORD  pcbNeeded);
  DWORD (*fpSetPrinterData)(HANDLE  hPrinter,
                            LPWSTR  pValueName,
                            DWORD  Type,
                            LPBYTE  pData,
                            DWORD  cbData);
  DWORD (*fpWaitForPrinterChange)(HANDLE  hPrinter,
                                  DWORD  Flags);
  BOOL (*fpClosePrinter)(HANDLE  hPrinter);
  BOOL (*fpAddForm)(HANDLE  hPrinter,
                    DWORD  Level,
                    LPBYTE  pForm);
  BOOL (*fpDeleteForm)(HANDLE  hPrinter,
                       LPWSTR  pFormName);
  BOOL (*fpGetForm)(HANDLE  hPrinter,
                    LPWSTR  pFormName,
                    DWORD  Level,
                    LPBYTE  pForm,
                    DWORD  cbBuf,
                    LPDWORD  pcbNeeded);
  BOOL (*fpSetForm)(HANDLE  hPrinter,
                    LPWSTR  pFormName,
                    DWORD  Level,
                    LPBYTE  pForm);
  BOOL (*fpEnumForms)(HANDLE  hPrinter,
                      DWORD  Level,
                      LPBYTE  pForm,
                      DWORD  cbBuf,
                      LPDWORD  pcbNeeded,
                      LPDWORD  pcReturned);
  BOOL (*fpEnumMonitors)(LPWSTR  pName,
                         DWORD  Level,
                         LPBYTE  pMonitors,
                         DWORD  cbBuf,
                         LPDWORD  pcbNeeded,
                         LPDWORD  pcReturned);
  BOOL (*fpEnumPorts)(LPWSTR  pName,
                      DWORD  Level,
                      LPBYTE  pPorts,
                      DWORD  cbBuf,
                      LPDWORD  pcbNeeded,
                      LPDWORD  pcReturned);
  BOOL (*fpAddPort)(LPWSTR  pName,
                    HWND  hWnd,
                    LPWSTR  pMonitorName);
  BOOL (*fpConfigurePort)(LPWSTR  pName,
                          HWND  hWnd,
                          LPWSTR  pPortName);
  BOOL (*fpDeletePort)(LPWSTR  pName,
                       HWND  hWnd,
                       LPWSTR  pPortName);
  HANDLE (*fpCreatePrinterIC)(HANDLE  hPrinter,
                              LPDEVMODEW  pDevMode);
  BOOL (*fpPlayGdiScriptOnPrinterIC)(HANDLE  hPrinterIC,
                                     LPBYTE  pIn,
                                     DWORD  cIn,
                                     LPBYTE  pOut,
                                     DWORD  cOut,
                                     DWORD  ul);
  BOOL (*fpDeletePrinterIC)(HANDLE  hPrinterIC);
  BOOL (*fpAddPrinterConnection)(LPWSTR  pName);
  BOOL (*fpDeletePrinterConnection)(LPWSTR  pName);
  DWORD (*fpPrinterMessageBox)(HANDLE  hPrinter,
                               DWORD  Error,
                               HWND  hWnd,
                               LPWSTR  pText,
                               LPWSTR  pCaption,
                               DWORD  dwType);
  BOOL (*fpAddMonitor)(LPWSTR  pName,
                       DWORD  Level,
                       LPBYTE  pMonitorInfo);
  BOOL (*fpDeleteMonitor)(LPWSTR  pName,
                          LPWSTR  pEnvironment,
                          LPWSTR  pMonitorName);
  BOOL (*fpResetPrinter)(HANDLE  hPrinter,
                         LPPRINTER_DEFAULTS  pDefault);
  BOOL (*fpGetPrinterDriverEx)(HANDLE  hPrinter,
                               LPWSTR  pEnvironment,
                               DWORD  Level,
                               LPBYTE  pDriverInfo,
                               DWORD  cbBuf,
                               LPDWORD  pcbNeeded,
                               DWORD  dwClientMajorVersion,
                               DWORD  dwClientMinorVersion,
                               PDWORD  pdwServerMajorVersion,
                               PDWORD  pdwServerMinorVersion);
  BOOL (*fpFindFirstPrinterChangeNotification)(
            HANDLE  hPrinter,
            DWORD  fdwFlags,
            DWORD  fdwOptions,
            HANDLE  hNotify,
            PDWORD  pfdwStatus,
            PVOID  pPrinterNotifyOptions,
            PVOID  pPrinterNotifyInit);
  BOOL (*fpFindClosePrinterChangeNotification)(HANDLE  hPrinter);
  BOOL (*fpAddPortEx)(LPWSTR  pName,
                      DWORD  Level,
                      LPBYTE  lpBuffer,
                      LPWSTR  lpMonitorName);
  BOOL (*fpShutDown)(LPVOID  pvReserved);
  BOOL (*fpRefreshPrinterChangeNotification)(
                      HANDLE  hPrinter,
                      DWORD  Reserved,
                      PVOID  pvReserved,
                      PVOID  pPrinterNotifyInfo);
  BOOL (*fpOpenPrinterEx)(LPWSTR  pPrinterName,
                          LPHANDLE  phPrinter,
                          LPPRINTER_DEFAULTS  pDefault,
                          LPBYTE  pClientInfo,
                          DWORD  Level);
  HANDLE (*fpAddPrinterEx)(LPWSTR  pName,
                           DWORD  Level,
                           LPBYTE  pPrinter,
                           LPBYTE  pClientInfo,
                           DWORD  ClientInfoLevel);
  BOOL (*fpSetPort)(LPWSTR  pName,
                    LPWSTR  pPortName,
                    DWORD  Level,
                    LPBYTE  pPortInfo);
  DWORD (*fpEnumPrinterData)(HANDLE  hPrinter,
                             DWORD  dwIndex,
                             LPWSTR  pValueName,
                             DWORD  cbValueName,
                             LPDWORD  pcbValueName,
                             LPDWORD  pType,
                             LPBYTE  pData,
                             DWORD  cbData,
                             LPDWORD  pcbData);
  DWORD (*fpDeletePrinterData)(HANDLE  hPrinter,
                               LPWSTR  pValueName);
  DWORD (*fpClusterSplOpen)(LPCTSTR  pszServer,
                            LPCTSTR  pszResource,
                            PHANDLE  phSpooler,
                            LPCTSTR  pszName,
                            LPCTSTR  pszAddress );
  DWORD (*fpClusterSplClose)(HANDLE  hSpooler);
  DWORD (*fpClusterSplIsAlive)(HANDLE  hSpooler);
  DWORD (*fpSetPrinterDataEx)(HANDLE  hPrinter,
                              LPCWSTR  pKeyName,
                              LPCWSTR  pValueName,
                              DWORD  Type,
                              LPBYTE  pData,
                              DWORD  cbData);
  DWORD (*fpGetPrinterDataEx)(HANDLE  hPrinter,
                              LPCWSTR  pKeyName,
                              LPCWSTR  pValueName,
                              LPDWORD  pType,
                              LPBYTE  pData,
                              DWORD  nSize,
                              LPDWORD  pcbNeeded);
  DWORD (*fpEnumPrinterDataEx)(HANDLE  hPrinter,
                               LPCWSTR  pKeyName,
                               LPBYTE  pEnumValues,
                               DWORD  cbEnumValues,
                               LPDWORD  pcbEnumValues,
                               LPDWORD  pnEnumValues);
  DWORD (*fpEnumPrinterKey)(HANDLE  hPrinter,
                            LPCWSTR  pKeyName,
                            LPWSTR  pSubkey,
                            DWORD  cbSubkey,
                            LPDWORD  pcbSubkey);
  DWORD (*fpDeletePrinterDataEx)(HANDLE  hPrinter,
                                 LPCWSTR  pKeyName,
                                 LPCWSTR  pValueName);
  DWORD (*fpDeletePrinterKey)(HANDLE  hPrinter,
                              LPCWSTR  pKeyName);
  BOOL (*fpSeekPrinter)(HANDLE  hPrinter,
                        LARGE_INTEGER  liDistanceToMove,
                        PLARGE_INTEGER  pliNewPointer,
                        DWORD  dwMoveMethod,
                        BOOL  bWrite);
  BOOL (*fpDeletePrinterDriverEx)(LPWSTR  pName,
                                  LPWSTR  pEnvironment,
                                  LPWSTR  pDriverName,
                                  DWORD  dwDeleteFlag,
                                  DWORD  dwVersionNum);
  BOOL (*fpAddPerMachineConnection)(LPCWSTR  pServer,
                                    LPCWSTR  pPrinterName,
                                    LPCWSTR  pPrintServer,
                                    LPCWSTR  pProvider);
  BOOL (*fpDeletePerMachineConnection)(LPCWSTR  pServer,
                                       LPCWSTR  pPrinterName);
  BOOL (*fpEnumPerMachineConnections)(LPCWSTR  pServer,
                                      LPBYTE  pPrinterEnum,
                                      DWORD  cbBuf,
                                      LPDWORD  pcbNeeded,
                                      LPDWORD  pcReturned);
  BOOL (*fpXcvData)(HANDLE  hXcv,
                    LPCWSTR  pszDataName,
                    PBYTE  pInputData,
                    DWORD  cbInputData,
                    PBYTE  pOutputData,
                    DWORD  cbOutputData,
                    PDWORD  pcbOutputNeeded,
                    PDWORD  pdwStatus);
  BOOL (*fpAddPrinterDriverEx)(LPWSTR  pName,
                               DWORD  Level,
                               LPBYTE  pDriverInfo,
                               DWORD  dwFileCopyFlags);
  BOOL (*fpSplReadPrinter)(HANDLE  hPrinter,
                           LPBYTE  *pBuf,
                           DWORD  cbBuf);
  BOOL (*fpDriverUnloadComplete)(LPWSTR  pDriverFile);
  BOOL (*fpGetSpoolFileInfo)(HANDLE  hPrinter,
                             LPWSTR  *pSpoolDir,
                             LPHANDLE  phFile,
                             HANDLE  hSpoolerProcess,
                             HANDLE  hAppProcess);
  BOOL (*fpCommitSpoolData)(HANDLE  hPrinter,
                            DWORD  cbCommit);
  BOOL (*fpCloseSpoolFileHandle)(HANDLE  hPrinter);
  BOOL (*fpFlushPrinter)(HANDLE  hPrinter,
                         LPBYTE  pBuf,
                         DWORD  cbBuf,
                         LPDWORD  pcWritten,
                         DWORD  cSleep);
  DWORD (*fpSendRecvBidiData)(HANDLE  hPort,
                              LPCWSTR  pAction,
                              PBIDI_REQUEST_CONTAINER  pReqData,
                              PBIDI_RESPONSE_CONTAINER  *ppResData);
  BOOL (*fpAddDriverCatalog)(HANDLE  hPrinter,
                             DWORD  dwLevel,
                             VOID  *pvDriverInfCatInfo,
                             DWORD  dwCatalogCopyFlags);
} PRINTPROVIDOR, *LPPRINTPROVIDOR;</PRE>

<P>In the following <B>Members</B> section, function pointers are listed in the order they are specified within the PRINTPROVIDOR structure. To see function descriptions grouped by related capabilities, see <A HREF="splarch_1qxz.htm">Functions Defined by Print Providers</A>.</P>

<H4>Members</H4>

<DL>
<DT><B>fpOpenPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>OpenPrinter</B> function, which is described in the Platform SDK documentation. However, at the provider level, this function must supply one of the DWORD return values listed in the following table.

<TABLE>

<TR VALIGN="top">
<TH align=left width=46%>Return Value</TH>
<TH align=left width=54%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_SUCCESS</TD>
<TD width=54%>The provider supports the specified printer and has opened it.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_STOP_ROUTING</TD>
<TD width=54%>The provider supports the specified printer, but an error occurred and the printer could not be opened. <I>It is assumed that no other provider can support the printer.</I> The function must call <B>SetLastError</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_UNKNOWN </TD>
<TD width=54%>The provider does not support the specified printer. The function must call <B>SetLastError</B> and specify ERROR_INVALID_NAME.</TD>
</TR>
</TABLE><BR>



<P>The router calls each provider until one of them returns ROUTER_SUCCESS or ROUTER_STOP_ROUTING. If the provider returns ROUTER_SUCCESS, it must also return a unique handle. (For more information, see <A HREF="splarch_9qxz.htm">Introduction to Print Providers</A>.) The router first attempts to call the provider's <B>OpenPrinterEx</B> function. If that function is not supported, the router calls <B>OpenPrinter</B>.
</DD>

<DT><B>fpSetJob</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>SetJob</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetJob</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>GetJob</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumJobs</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>EnumJobs</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpAddPrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpSetPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>SetPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>GetPrinter</B> function (described in the Platform SDK documentation). If you are <A HREF="provider_1f6v.htm">writing a network print provider</A> and <B>GetPrinter</B> is returning a PRINTER_INFO_2 structure, the function should supply only the <B>cJobs</B> and <B>Status</B> structure members. The <A HREF="splarch_53mv.htm">local print provider</A> supplies the rest of the structure members.</DD>

<DT><B>fpEnumPrinters</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>EnumPrinters</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpAddPrinterDriver</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPrinterDriver</B> function (described in the Platform SDK documentation). If the provider does not support the specified driver or server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpEnumPrinterDrivers</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrinterDrivers</B> function (described in the Platform SDK documentation). If the provider does not support the specified server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpGetPrinterDriver</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrinterDriver</B> function (described in the Platform SDK documentation). The router first attempts to call the provider's <B>GetPrinterDriverEx</B> function. If that function is not supported, the router calls <B>GetPrinterDriver</B>.</DD>

<DT><B>fpGetPrinterDriverDirectory</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrinterDriverDirectory</B> function (described in the Platform SDK documentation). If the provider does not support the specified server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpDeletePrinterDriver</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterDriver</B> function (described in the Platform SDK documentation). If the provider does not support the specified server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpAddPrintProcessor</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPrintProcessor</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumPrintProcessors</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrintProcessors</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetPrintProcessorDirectory</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrintProcessorDirectory</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrintProcessor</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrintProcessor</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumPrintProcessorDatatypes</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrintProcessorDatatypes</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpStartDocPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>StartDocPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpStartPagePrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>StartPagePrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpWritePrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>WritePrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEndPagePrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EndPagePrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpAbortPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>AbortPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpReadPrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>ReadPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEndDocPrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>EndDocPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpAddJob</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>AddJob</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpScheduleJob</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>ScheduleJob</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetPrinterData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrinterData</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpSetPrinterData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>SetPrinterData</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpWaitForPrinterChange</B></DT>

<DD><I>Obsolete</I>. Must be NULL.</DD>

<DT><B>fpClosePrinter</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>ClosePrinter</B> function (described in the Platform SDK documentation). If a printer change notification object has been created, then the router calls the provider's <B>FindClosePrinterChangeNotification</B> function (described in the Platform SDK documentation) before calling <B>ClosePrinter</B>.</DD>

<DT><B>fpAddForm</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddForm</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeleteForm</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeleteForm</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetForm</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetForm</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpSetForm</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>SetForm</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumForms</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumForms</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumMonitors</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumMonitors</B> function, which is described in the Platform SDK documentation. However, at the provider level this function must supply one of the DWORD return values listed in the following table.

<TABLE>

<TR VALIGN="top">
<TH align=left width=46%>Return Value</TH>
<TH align=left width=54%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_SUCCESS</TD>
<TD width=54%>The provider has enumerated the monitors on the specified server.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_UNKNOWN </TD>
<TD width=54%>The provider does not support the specified server.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_STOP_ROUTING</TD>
<TD width=54%>The provider has enumerated the monitors on the specified server, and the router should not call other providers.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>fpEnumPorts</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>EnumPorts</B> function, which is described in the Platform SDK documentation. However, at the provider level this function must supply one of the DWORD return values listed in the following table.

<TABLE>

<TR VALIGN="top">
<TH align=left width=46%>Return Value</TH>
<TH align=left width=54%>Definition</TH>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_SUCCESS</TD>
<TD width=54%>The provider has enumerated the ports on the specified server.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_STOP_ROUTING</TD>
<TD width=54%>The provider has enumerated the ports on the specified server, and the router should not call other providers.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ROUTER_UNKNOWN </TD>
<TD width=54%>The provider does not support the specified server.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>fpAddPort</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPort</B> function (described in the Platform SDK documentation). If the provider does not support the specified port, it must supply ERROR_NOT_SUPPORTED to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpConfigurePort</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>ConfigurePort</B> function (described in the Platform SDK documentation). If the function supplies ERROR_NOT_SUPPORTED, ERROR_INVALID_NAME, or ERROR_UNKNOWN_PORT to <B>SetLastError</B>, the router will attempt to call another provider.</DD>

<DT><B>fpDeletePort</B></DT>

<DD>(<I>Required</I>.) Pointer to the provider's <B>DeletePort</B> function (described in the Platform SDK documentation). If the provider does not support the specified port, it must supply ERROR_NOT_SUPPORTED to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpCreatePrinterIC</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpPlayGdiScriptOnPrinterIC</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpDeletePrinterIC</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpAddPrinterConnection</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPrinterConnection</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrinterConnection</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterConnection</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpPrinterMessageBox</B></DT>

<DD><I>Not used. </I>Must be NULL.</DD>

<DT><B>fpAddMonitor</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddMonitor</B> function (described in the Platform SDK documentation). If the provider does not support the specified monitor, it must supply ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpDeleteMonitor</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeleteMonitor</B> function (described in the Platform SDK documentation). If the provider does not support the specified monitor, it must supply ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpResetPrinter</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>ResetPrinter</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetPrinterDriverEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrinterDriverEx</B> function (described in the Platform SDK documentation). If <B>GetPrinterDriverEx</B> is not supported, the router attempts to call <B>GetPrinterDriver</B>.</DD>

<DT><B>fpFindFirstPrinterChangeNotification</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <A HREF="spoolfnc_4dk7.htm"><B>FindFirstPrinterChangeNotification</B></A> function.</DD>

<DT><B>fpFindClosePrinterChangeNotification</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>FindClosePrinterChangeNotification</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpAddPortEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPortEx</B> function (described in the Platform SDK documentation). If the provider does not support the specified port, it must supply ERROR_NOT_SUPPORTED to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpShutDown</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpRefreshPrinterChangeNotification</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <A HREF="spoolfnc_9xgn.htm"><B>RefreshPrinterChangeNotification</B></A> function.</DD>

<DT><B>fpOpenPrinterEx</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpAddPrinterEx</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpSetPort</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>SetPort</B> function (described in the Platform SDK documentation). If the function supplies ERROR_NOT_SUPPORTED, ERROR_INVALID_NAME, or ERROR_UNKNOWN_PORT to <B>SetLastError</B>, the router will attempt to call another provider.</DD>

<DT><B>fpEnumPrinterData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrinterData</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrinterData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterData</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpClusterSplOpen</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpClusterSplClose</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpClusterSplIsAlive</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpSetPrinterDataEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>SetPrinterDataEx</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpGetPrinterDataEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>GetPrinterDataEx</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumPrinterDataEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrinterDataEx</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpEnumPrinterKey</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>EnumPrinterKey</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrinterDataEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterDataEx</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpDeletePrinterKey</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterKey</B> function (described in the Platform SDK documentation).</DD>

<DT><B>fpSeekPrinter</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpDeletePrinterDriverEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>DeletePrinterDriverEx</B> function (described in the Platform SDK documentation). If the provider does not support the specified server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpAddPerMachineConnection</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpDeletePerMachineConnection</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpEnumPerMachineConnections</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpXcvData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <A HREF="spoolfnc_2gtj.htm"><B>XcvData</B></A> function.</DD>

<DT><B>fpAddPrinterDriverEx</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <B>AddPrinterDriverEx</B> function (described in the Platform SDK documentation). If the provider does not support the specified server, it should specify ERROR_INVALID_NAME to <B>SetLastError</B> before returning FALSE.</DD>

<DT><B>fpSplReadPrinter</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpDriverUnloadComplete</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpGetSpoolFileInfo</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpCommitSpoolData</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpCloseSpoolFileHandle</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpFlushPrinter</B></DT>

<DD><I>For internal use only</I>. Must be NULL.</DD>

<DT><B>fpSendRecvBidiData</B></DT>

<DD>(<I>Optional. Can be NULL.</I>) Pointer to the provider's <A HREF="spoolfnc_1fl3.htm"><B>SendRecvBidiData</B></A> function. If this parameter is NULL, it means that the provider does not support bidi communication.</DD>

<DT><B>fpAddDriverCatalog</B></DT>

<DD><I>For internal use only</I>. Must be NULL. This member is present in Windows&nbsp;XP and later. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>winsplp.h</I>. Include <I>winsplp.h</I>.</P>

<H4>See Also</H4>

<P><A HREF="spoolfnc_6qef.htm"><B>InitializePrintProvidor</B></A>, <A HREF="spoolfnc_4dk7.htm"><B>FindFirstPrinterChangeNotification</B></A>, <A HREF="spoolfnc_9xgn.htm"><B>RefreshPrinterChangeNotification</B></A>, <A HREF="spoolfnc_2gtj.htm"><B>XcvData</B></A>, <A HREF="spoolfnc_1fl3.htm"><B>SendRecvBidiData</B></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PRINTPROVIDOR"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
