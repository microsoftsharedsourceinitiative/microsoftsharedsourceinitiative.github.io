<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Command and Vertex Buffers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Command and Vertex Buffers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_command_and_vertex_buffers_gg"></A>Command and Vertex Buffers</H2>

<P>The<B> </B><A HREF="d3dfncs_5usn.htm"><I>D3dDrawPrimitives2</I></A> DDI uses two types of buffers: command buffers and vertex buffers. Command buffers contain instructions followed by data in a structure similar to that of execute buffers. Command buffers might contain indexed and nonindexed primitives and, occasionally, inline vertex data. Command buffers can be either API-level execute buffers or Direct3D internal command buffers. For a description of the main input structure, see <A HREF="d3dstrct_47fr.htm">D3DHAL_DRAWPRIMITIVES2DATA</A>. </P>

<P>With internal command buffers, the driver allocates the memory and may do multi-buffering. Internal command buffers are write-only. The instruction format can be seen in <A HREF="d3dstrct_9w6f.htm">D3DHAL_DP2COMMAND</A>. </P>

<P>If the D3DHALDP2_USERMEMVERTICES flag is set, the vertex buffer is specified by a user-memory pointer. Otherwise, the vertex buffer is a DirectDrawSurface that can be an API-level execute buffer, an internal implicit vertex buffer, or an API-level vertex buffer.</P>

<P>The vertex buffer API can create, destroy, lock and unlock vertex buffers, and can use the <B>IDirect3DVertexBuffer7::ProcessVertices</B> method to process vertices from source to destination buffers. The <B>IDirect3DDevice7::DrawPrimitiveVB</B> and <B>IDirect3DDevice7::DrawIndexedPrimitiveVB</B> methods are the primary API-level calls. Vertex buffers can also be optimized, but optimized vertex buffers cannot be locked. For descriptions of these three methods, see the Direct3D SDK documentation.</P>

<H4>Note to Windows 98/Me Driver Writers</H4>

<P>When you place a vertex buffer in video memory, it must be located in one of the heaps you reported to the DirectDraw/Direct3D runtime at initialization time. If the vertex buffer (whose pointer you return to the runtime) does not lie in one of the reported heap ranges, the runtime deallocates the vertex buffer and create a new one in system memory.</P>

<P>The reason for this requirement is that on Windows&nbsp;98/Me, the runtime holds the Win16Lock on the vertex buffer at all times. (If the runtime constantly locked and unlocked the vertex buffer, performance would suffer.) However, to ensure that the operating system works correctly, the Win16Lock can be held only for relatively short periods of time.</P>

<P>The only way to avoid the runtime holding the Win16Lock for video memory surfaces is to use virtual memory aliasing of the video memory, in particular the heaps. It is these heaps that are aliased by the runtime. Therefore, only video memory that lies in one of these heaps can be locked without holding the Win16Lock. It is important to note that this check for video memory pointers that can be aliased occurs when command and vertex buffers are swapped in response to a <A HREF="d3dfncs_5usn.htm"><I>D3dDrawPrimitives2</I></A> call to your driver, as well as at the time they are created. </P>

<P>This requirement does not apply to Windows&nbsp;2000 and later. The Win16Lock and the video memory aliasing to avoid locking are specific to Windows&nbsp;98/Me.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Command%20and%20Vertex%20Buffers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
