<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VideoPortStartDma</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="VideoPortStartDma">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_mdl_gg_gly">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Display&nbsp;and&nbsp;Print&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_videoportstartdma_gg"></A>VideoPortStartDma</H1>

<P>The <B>VideoPortStartDma</B> function prepares the system for a DMA operation. As soon as the appropriate resource is available, <B>VideoPortStartDma</B> creates a scatter/gather list, initializes the system resources, and calls the video miniport driver-supplied <A HREF="vmpfncs_5bqf.htm"><I>HwVidExecuteDma</I></A> routine to carry out the DMA operation.</P>

<PRE class=syntax><B>VP_STATUS
  VideoPortStartDma(
    IN PVOID</B>  <I>HwDeviceExtension</I>,
<B>    IN PVP_DMA_ADAPTER</B>  <I>VpDmaAdapter</I>,
<B>    IN PVOID </B> <I>Mdl</I>,
<B>    IN ULONG </B> <I>Offset</I>,
<B>    IN OUT PULONG  </B><I>pLength</I>,
<B>    IN PEXECUTE_DMA</B>  <I>ExecuteDmaRoutine</I>,
<B>    IN PVOID</B>  <I>Context</I>,
<B>    IN BOOLEAN  </B><I>WriteToDevice</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>HwDeviceExtension</I></DT>

<DD>Pointer to the miniport driver's device extension.</DD>

<DT><I>VpDmaAdapter</I></DT>

<DD>Pointer to the <A HREF="vstrcts_15if.htm">VP_DMA_ADAPTER</A> structure that represents the bus-master adapter. This structure is returned from a call to <A HREF="vpfncs_45d3.htm"><B>VideoPortGetDmaAdapter</B></A>.</DD>

<DT><I>Mdl</I></DT>

<DD>Pointer to the <A HREF="JavaScript:hhobj_1.Click()">MDL</A> that describes the buffer. This pointer is returned from a call to the video port driver's <A HREF="vpfncs_684n.htm"><B>VideoPortLockBuffer</B></A> function.</DD>

<DT><I>Offset</I></DT>

<DD>Specifies the byte offset in the buffer at which the DMA operation begins. The <I>Mdl</I> parameter describes this buffer.</DD>

<DT><I>pLength</I></DT>

<DD>Pointer to a variable that specifies the requested transfer size, in bytes, and that will receive the actual size to be transferred. The variable will be updated when either of the following events occurs: <B>VideoPortStartDma</B> returns or <A HREF="vmpfncs_5bqf.htm"><I>HwVidExecuteDma</I></A> is called. It is therefore safe to read this variable from within <I>HwVidExecuteDma</I> even before <B>VideoPortStartDma</B> returns.</DD>

<DT><I>ExecuteDmaRoutine</I></DT>

<DD>Pointer to a miniport driver-supplied <A HREF="vmpfncs_5bqf.htm"><I>HwVidExecuteDma</I></A> callback routine. <B>VideoPortStartDma</B> calls this routine to program the hardware registers and start the actual DMA operation.</DD>

<DT><I>Context</I></DT>

<DD>Pointer to the driver-determined context to be passed to the miniport driver's <I>HwVidExecuteDma</I> callback routine. Since the <I>HwVidExecuteDma</I> callback routine runs at DISPATCH_LEVEL, the data that <I>Context</I> points to should be in nonpaged memory.</DD>

<DT><I>WriteToDevice</I></DT>

<DD>Specifies the direction of the DMA transfer. A value of TRUE denotes a transfer from the buffer to the device, and a value of FALSE denotes a transfer from the device to the buffer.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>VideoPortStartDma</B> returns one of the following status codes:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=48%>Status Code</TH>
<TH align=left width=52%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>NO_ERROR</TD>
<TD width=52%>The operation was successfully carried out.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ERROR_NOT_ENOUGH_MEMORY</TD>
<TD width=52%>There are not enough system resources for this operation.</TD>
</TR>
</TABLE><BR>

<H4>Headers</H4>

<P>Declared in <I>video.h</I>. Include <I>video.h</I>.</P>

<H4>Comments</H4>

<P>This function is available in Windows&nbsp;XP and later.</P>

<P>To prepare for a DMA-transfer operation, <B>VideoPortStartDma</B>:

<UL>
	<LI>Flushes the memory region in the host processor's caches.</LI>

	<LI>Builds a scatter/gather list.</LI>

	<LI>Calls the video miniport driver’s <A HREF="vmpfncs_5bqf.htm"><I>HwVidExecuteDma</I></A> callback.</LI>
</UL>

<P>It is possible that not all of the requested data has been transferred, since the actual amount of memory transferred is limited by the number of map registers available to the driver. Callers of this function should inspect the actual transfer size returned at <I>pLength</I> to determine whether additional data remains to be transferred. If so, the miniport driver should call <B>VideoPortStartDma</B> (and subsequently, <A HREF="vpfncs_7a5j.htm"><B>VideoPortCompleteDma</B></A>) as many times as necessary to fulfill the entire transfer request.</P>

<P>Callers of <B>VideoPortStartDma</B> must be running at IRQL &lt;= DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="vpfncs_45d3.htm"><B>VideoPortGetDmaAdapter</B></A>, <A HREF="vpfncs_7a5j.htm"><B>VideoPortCompleteDma</B></A>, <A HREF="vmpfncs_5bqf.htm"><I>HwVidExecuteDma</I></A>, <A HREF="vstrcts_15if.htm">VP_DMA_ADAPTER</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: VideoPortStartDma"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
