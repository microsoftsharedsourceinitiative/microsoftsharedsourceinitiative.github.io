<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Receiving Asynchronous I/O Request Packets on the IEEE 1394 Bus</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Receiving Asynchronous I/O Request Packets on the IEEE 1394 Bus">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>System&nbsp;Support&nbsp;for&nbsp;Buses:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_receiving_asynchronous_i_o_request_packets_on_the_ieee_1394_bus_kg"></A>Receiving Asynchronous I/O Request Packets on the IEEE 1394 Bus</H1>

<P>The computer itself is a node on the IEEE 1394 bus, and therefore can receive asynchronous I/O requests. Drivers can allocate ranges of addresses in the computer's IEEE 1394 address space, and receive requests from external nodes, by submitting the REQUEST_ALLOCATE_ADDRESS_RANGE request to the bus driver.</P>

<P>When the driver allocates the address range, it can specify which types of transactions a device may send to the allocated addresses, by specifying one or more of ACCESS_FLAGS_TYPE_READ, ACCESS_FLAGS_TYPE_WRITE, or ACCESS_FLAGS_TYPE_LOCK in the <B>u.AllocateAddressRange.fulAccessType</B> member of the request's IRB. Requests that are not one of the specified types automatically fail.</P>

<P>Two different drivers may allocate the same address range. By default, the bus driver automatically de-multiplexes the requests, and the driver only sees the requests on the allocated addresses that come from the driver's device. Drivers can request that they receive all packets sent to the addresses by all nodes on the bus, by specifying the ACCESS_FLAGS_TYPE_BROADCAST flag in <B>u.AllocateAddressRange.fulAccessType</B>.</P>

<H4>Which Addresses Are Allocated?</H4>

<P>The bus driver supports two different strategies for allocating address ranges. If the driver requires a specific range of addresses, beginning at a hard-coded address, it can specify the hard-coded address in the <B>u.AllocateAddressRange.Required1394Offset</B> member of the request's IRB, and the length of the address range in <B>u.AllocateAddressRange.nLength</B>. The bus driver will allow two different drivers to allocate the same address twice. If the same driver tries to allocate an address range beginning at the same address twice, the bus driver returns the request with a status code of STATUS_SUCCESS, but the request itself is ignored.  </P>

<P>Otherwise, the driver can allow the bus driver to choose the allocated addresses. The bus driver keeps track of all address ranges allocated by drivers, and will only return previously unallocated addresses.</P>

<P>The bus driver does not allocate the address contiguously. The addresses are segmented according to the MDL provided as backing store. Each segment in the MDL corresponds to one segment in the address range. A driver that needs the allocated addresses to be contiguous can allocate contiguous memory from nonpaged pool.</P>

<P>If the driver needs to guarantee that every segment is smaller than a specific size, they can specify that size in <B>u.AllocateAddressRange.MaxSegmentSize</B>. Drivers that do not need to specify a maximum segment size set <B>u.AllocateAddressRange.MaxSegmentSize</B> to zero.</P>

<P>The bus driver returns the address ranges in the memory location pointed to by the <B>u.AllocateAddressRange.p1394AddressRange</B> member of the IRB. The device driver must allocate an array that is large enough to hold each ADDRESS_RANGE structure, even in the worst case segmentation scenario. If the driver does not specify a segment size, or its maximum segment size is bigger than PAGE_SIZE, then the driver can determine the worst case by using the ADDRESS_AND_SIZE_TO_SPAN_PAGES macro on the buffer used for backing store. If the maximum segment size is smaller than PAGE_SIZE, the driver must allocate an array of size <B>u.AllocateAddressRange.nLength</B>/<B>u.AllocateAddressRange.MaxSegmentSize</B> + 2.</P>

<P>When the bus driver returns the allocated addresses, it records the actual number of address ranges allocated in <B>u.AllocateAddressRange.hAddressRange</B>.</P>

<H4>Allocation And Backing Store</H4>

<P>The bus driver receives all asynchronous packet requests on behalf of the driver. At the driver's behest, it can transparently handle the request, or it can dispatch the request to the driver. By setting options when it allocates the addresses, the driver can choose how the bus driver handles each request.

<OL>
	<LI>The driver provides backing store for the address range, and the bus driver transparently handles all read, write, and lock requests by using the backing store. 
<P>When the driver allocates addresses, it can supply an MDL in <B>u.AllocateAddressRange.Mdl</B> to serve as backing store. The bus driver maps the MDL onto the range of addresses it allocates for the driver, and handles all requests by reading or writing from the MDL. If the host controller supports it, the transaction is handled entirely by the host controller's DMA hardware. When possible, the device driver should allow the bus driver to choose the range of addresses allocated: the bus driver will choose 1394 addresses that support automatic DMA for each transaction.

<P>The driver must specify NOTIFY_FLAGS_NEVER for <B>u.AllocateAddressRange.fulNotificationFlags</B>. 

<P>Here's an example:

<PRE>pIRB-&gt;u.AllocateAddressRange.Mdl = an MDL previously allocated by the driver.
pIRB-&gt;u.AllocateAddressRange.fulNotificationFlags = NOTIFY_FLAGS_NEVER
 </PRE>

<P>For this option alone, the driver can also allocate address ranges while at raised IRQL. The driver can submit the request directly to the port driver, bypassing the usual IRP method of communication, by calling the port driver’s physical mapping routine. The device driver passes the IRB to the port driver’s physical mapping routine. The port driver will then allocate the address range asynchronously; when the port driver finishes, it calls the device driver's notification routine, passed in <B>u.AllocateAddressRange.Callback</B>, and passes <B>u.AllocateAddressRange.Context</B> as the parameter. The notification routine is called at DISPATCH_LEVEL.

<P>The device driver can get a pointer to the port driver’s physical mapping routine by submitting the GET_LOCAL_HOST_INFO request to the bus driver, with <B>nLevel </B>= GET_PHYS_ADDR_ROUTINE. The bus driver returns a GET_LOCAL_HOST_INFO4 structure, which contains the physical mapping routine, and a context parameter that the device driver passes along with the IRB to the physical mapping routine.

<P>Here is an example of how the driver can set up the request for the physical mapping routine. The physical mapping routine does not change, so the driver would normally only submit this request once.

<PRE>GET_LOCAL_HOST_INFO5 PhysMapInfo;
pGetInfoIRB-&gt;FunctionNumber = GET_LOCAL_HOST_INFO;
pGetInfoIRB-&gt;GET_PHYS_ADDR_ROUTINE;
 
/* Driver submits the request. */
 </PRE>

<P>Continuing the example, here is how the driver can use the physical mapping routine to submit the request at an elevated IRQL.

<PRE>VOID AllocationCompletionRoutine(PVOID Context);
/* Driver fills out the members of the IRB, including these: */
pIRB-&gt;u.AllocateAddressRange.Mdl = an MDL previously allocated by the driver.
pIRB-&gt;u.AllocateAddressRange.fulNotificationFlags = NOTIFY_FLAGS_NEVER
pIRB-&gt;Callback = AllocationCompletionRoutine;
pIRB-&gt;Context = information specific to this allocation the driver wants passed to its callback.
 
/* Driver submits the request to the physical mapping routine. */
PhysMapInfo.PhysAddrMappingRoutine(PhysMapInfo.Context, pIRB);
 
/* 
The bus driver does the allocation asynchronously. When its done, it will signal the driver by executing AllocationCompletionRoutine(pIRB-&gt;u.AllocateAddressRange.Context);
*/
 </PRE>
</LI>

	<LI>The driver provides backing store for the address range. The bus driver notifies the driver after it completes each I/O transaction. 
<P>The driver can provide either a single MDL, or a linked list of MDLs, as backing store. If the driver provides a single MDL, the bus driver pumps data into or out of the MDL in response to the asynchronous request. Once it completes the transaction, it signals the device driver by calling the driver-supplied notification callback. 

<P>The device driver supplies the notification routine in the <B>u.AllocateAddressRange.Callback</B> member of the IRB. The driver must set at least one of the NOTIFY_FLAGS_AFTER_XXX flags. When the bus driver calls the routine, it passes a NOTIFICATION_INFO structure, which specifies the MDL backing store (in <B>Mdl</B>), the byte offset within the MDL where the transaction began (in <B>ulOffset</B>), and the length in bytes of the range of addresses affected (in <B>nLength</B>). The notification routine is called at DISPATCH_LEVEL. Any context information for this request that the driver passes in <B>u.AllocateAddressRange.Context</B> is passed by the bus driver in the <B>Context</B> member of NOTIFICATION_INFO.

<P>Using only one MDL, there is some risk of synchronization problems: the device may write to the address range faster than the driver can read from it. To avoid such a clash, for addresses to which the device only has write access the driver can provide a linked list of MDLs, in <B>u.AllocateAddressRange.FifoSListHead</B>, and a spin lock in <B>u.AllocateAddressRange.FifoSpinLock</B>. When the bus driver receives each asynchronous request packet, it holds the spin lock and pops off the first element on the list to fulfill the request. It then calls the driver's notification routine.

<P>In the NOTIFICATION_INFO structure, the bus driver provides the MDL it used to handle the transaction (in <B>Mdl</B>), the byte offset of the first address affected (in <B>ulOffset</B>), and the length of the ranges of addresses affected (in <B>nLength</B>). It also provides the ADDRESS_FIFO of the MDL (in <B>Fifo</B>). Before the driver returns from its notification routine, it should either use <B>Fifo</B> to push the element back on the list, or provide another MDL of the same size; otherwise, the bus driver will run out of MDLs to use in handling write requests from the device.

<P>Here is an extended example of using this type of notification. Globally, the driver creates an interlocked, singly-linked list, and a spin lock. The driver needs to access the linked list and the spin lock at raised IRQLs, so they must be in nonpaged memory. Typically, drivers keep them in their device extensions.

<PRE>PSLIST_HEADER FifoSListHead;
KSPIN_LOCK FifoSpinLock;
 
ExInitializeSListHead(FifoSListHead);
KeInitializeSpinLock(FifoSpinLock);
 </PRE>

<P>When the driver submits the request, it can set up the relevant IRB members as follows:

<PRE>VOID DriverNotificationRoutine(PNOTIFICATION_INFO NotificationInfo);
 
pIRB-&gt;u.AllocateAddressRange.Mdl = NULL;
pIRB-&gt;u.AllocateAddressRange.fulAccessType = ACCESS_FLAGS_READ;
pIRB-&gt;u.AllocateAddressRange.fulNotificationFlags = NOTIFY_FLAGS_AFTER_WRITE;
pIRB-&gt;u.AllocateAddressRange.FifoSListHead = FifoSListHead;
pIRB-&gt;u.AllocateAddressRange.FifoSpinLock = FifoSpinLock;
pIRB-&gt;u.AllocateAddressRange.Callback = NotificationRoutine;
pIRB-&gt;u.AllocateAddressRange.Context = context information specific to this request -- the bus driver will pass this as the Context member of the NOTIFICATION_INFO it passes to NotificationRoutine.
 </PRE>

<P>In the callback, the driver either needs to allocate a new MDL and push it onto the list, or push the original MDL back on the list. For the latter, the bus driver passes the original ADDRESS_FIFO for the current MDL. Here is an example of the driver pushing the current MDL back on the list:

<PRE>ExInterlockedPushEntrySList(FifoSListHead, NotificationInfo-&gt;Fifo-&gt;FifoList, FifoSpinLock);
 </PRE>

<P>If the driver specifies a single MDL as backing store in the original allocation request, the driver may return one or more address ranges. 
</LI>

	<LI>The bus driver signals the driver each time a request arrives, and hands off the packet to the driver.
<P>The driver provides a callback in the <B>u.AllocateAddressRange.Callback</B> member of the IRB. The NOTIFY_FLAGS_AFTER_XXX flags are ignored, and all packets are handed to the driver to handle.

<P>The driver must set the <B>Mdl</B>, <B>FifoSListHead</B>, and <B>FifoSpinLock</B> members of <B>u.AllocateAddressRange</B> to NULL. Here is an example of the settings for a driver that wishes to be notified when it receives asynchronous request packets of all three types.

<PRE>VOID DriverSuppliedCallback( IN PNOTIFICATION_INFO NotificationInfo );
 
pIRB-&gt;u.AllocateAddressRange.Callback = DriverNotificationRoutine;
pIRB-&gt;u.AllocateAddressRange.Context = information specific to this address range.
pIRB-&gt;u.AllocateAddressRange.Mdl = NULL;
pIRB-&gt;u.AllocateAddressRange.FifoSListHead = NULL;
pIRB-&gt;u.AllocateAddressRange.FifoSpinLock = NULL;
 </PRE>

<P>The bus driver allocates a single contiguous range of addresses.

<P>The bus driver passes a NOTIFICATION_INFO structure to the driver's callback routine. The device driver must create its own response packet (see the IEEE 1394 specification for details), and it must allocate its own buffer to contain the response packet it creates. The response packet must be from nonpaged pool or from a buffer that has been probed and locked.

<P>Within NOTIFICATION_INFO, the bus driver provides an uninitialized MDL in the <B>ResponseMdl</B> member. It also provides pointers to memory locations where it expects the device driver to enter a pointer to the response packet (in <B>ResponsePacket</B>), and the response packet length (in <B>ResponseLength</B>). The driver can also provide a kernel event object. The bus driver signals the kernel event object once it completes the transaction.

<P>Here is an example of how the device driver can fill in the necessary information in its notification routine.

<PRE>/* Suppose the driver creates its response packet in PVOID ResponsePacket, of length ResponseLength. It has created a kernel event ResponseEvent. */
MmInitializeMdl(NotificationInfo-&gt;ResponseMdl, ResponsePacket, ResponseLength);
MmBuildMdlFForNonPagedPool(Notification-&gt;ResponseMdl);
*(NotificationInfo-&gt;ResponsePacket) = ResponsePacket.
*(NotificationInfo-&gt;ResponseLength) = ResponseLength;
*(NotificationInfo)-&gt;ResponseEvent = Event;
 </PRE>
</LI>
</OL>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Receiving%20Asynchronous%20I%2FO%20Request%20Packets%20on%20the%20IEEE%201394%20Bus"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
