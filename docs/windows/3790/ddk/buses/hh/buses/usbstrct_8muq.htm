<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>_URB_ISOCH_TRANSFER</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="_URB_ISOCH_TRANSFER">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>System&nbsp;Support&nbsp;for&nbsp;Buses:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk__urb_isoch_transfer_kr"></A>_URB_ISOCH_TRANSFER</H1>

<P>USB client drivers set up this structure to send data to or retrieve data from an isochronous transfer pipe.</P>

<PRE class=syntax>struct _URB_ISOCH_TRANSFER { 
  struct _URB_HEADER  Hdr; 
  USBD_PIPE_HANDLE  PipeHandle;
  ULONG  TransferFlags;
  ULONG  TransferBufferLength;
  PVOID  TransferBuffer;
  PMDL  TransferBufferMDL;
  .
<B>  </B>.
<B>  </B>ULONG  StartFrame;
  ULONG  NumberOfPackets;
  ULONG  ErrorCount;
  USBD_ISO_PACKET_DESCRIPTOR  IsoPacket[1];
};</PRE>

<H4>Members</H4>

<DL>
<DT><B>Hdr</B></DT>

<DD>Pointer to a <A HREF="usbstrct_1e0i.htm">_URB_HEADER</A> structure that specifies the URB header information. <B>Hdr.Function</B> must be URB_FUNCTION_ISOCH_TRANSFER, and <B>Hdr.Length</B> must be the size of this variable-length data structure.</DD>

<DT><B>PipeHandle</B></DT>

<DD>Specifies the handle to the pipe that was returned by the host controller driver when a configuration was selected.</DD>

<DT><B>TransferFlags</B></DT>

<DD>Specifies zero, one, or a combination of the following flags:

<DL>
<DT>USBD_TRANSFER_DIRECTION_IN</DT>

<DD>Is set to request data from a device. To transfer data to a device, this flag must be clear. The flag must be set if the pipe is an interrupt transfer pipe.</DD>

<DT>USBD_SHORT_TRANSFER_OK</DT>

<DD>Can be used if USBD_TRANSFER_DIRECTION_IN is set. If set, directs the host controller driver not to return an error if a packet is received from the device shorter than the maximum packet size for the endpoint. Otherwise, a short request returns an error condition.</DD>

<DT>USBD_ISO_TRANSFER_ASAP</DT>

<DD>Causes the transfer to begin on the next frame, if no transfers have been submitted to the pipe since the pipe was opened or last reset. Otherwise, the transfer will begin on the first frame following all currently queued requests for the pipe. The actual frame that the transfer begins on will be adjusted for bus latency by the host controller driver.</DD>
</DL>
</DD>

<DT><B>TransferBufferLength</B></DT>

<DD>Specifies the length, in bytes, of the buffer specified in <B>TransferBuffer</B> or described in <B>TransferBufferMDL</B>. The host controller driver returns the number of bytes sent to or read from the pipe in this member.</DD>

<DT><B>TransferBuffer</B></DT>

<DD>Pointer to a resident buffer for the transfer or is NULL if an MDL is supplied in <B>TransferBufferMDL</B>. The contents of this buffer depend on the value of <B>TransferFlags</B>. If USBD_TRANSFER_DIRECTION_IN is specified this buffer will contain data read from the device on return from the host controller driver. Otherwise, this buffer contains driver-supplied data for transfer to the device.</DD>

<DT><B>TransferBufferMDL</B></DT>

<DD>Pointer to an MDL that describes a resident buffer or is NULL if a buffer is supplied in <B>TransferBuffer</B>. The contents of the buffer depend on the value of <B>TransferFlags</B>. If USBD_TRANSFER_DIRECTION_IN is specified, the described buffer will contain data read from the device on return from the host controller driver. Otherwise, the buffer contains driver-supplied data for transfer to the device. This MDL must be allocated from nonpaged pool.</DD>

<DT><B>StartFrame</B></DT>

<DD>Specifies the frame number the transfer should begin on. This variable must be within a system-defined range of the current frame. The range is specified by the constant USBD_ISO_START_FRAME_RANGE.

<P>If START_ISO_TRANSFER_ASAP is set in <B>TransferFlags</B>, this member contains the frame number that the transfer began on, when the request is returned by the host controller driver. Otherwise, this member must contain the frame number that this transfer will begin on.
</DD>

<DT><B>NumberOfPackets</B></DT>

<DD>Specifies the number of packets described by the variable-length array member <B>IsoPacket</B>.</DD>

<DT><B>ErrorCount</B></DT>

<DD>Contains the number of packets that completed with an error condition on return from the host controller driver.</DD>

<DT><B>IsoPacket</B></DT>

<DD>Contains a variable-length array of USBD_ISO_PACKET_DESCRIPTOR structures that describe each transfer packet of the isochronous transfer.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>usb.h</I>. Include <I>usb.h</I>.</P>

<H4>Comments</H4>

<P>Each entry in the <B>IsoPacket</B> member array specifies an offset and a length within the transfer buffer for the request. If <B>IsoPacket</B> has <I>n</I> entries, the host controller transfers use <I>n</I> frames to transfer data, transferring <B>IsoPacket[</B><I>i</I><B>].Length</B> bytes beginning at an offset of <B>IsoPacket[</B><I>i</I><B>].Offset</B>.</P>

<P>Drivers can use the GET_ISO_URB_SIZE macro to determine the size needed to hold the entire URB.</P>

<P>Other members that are part of this structure but not described here should be treated as opaque and considered to be reserved for system use.</P>

<H4>See Also</H4>

<P><A HREF="usbstrct_3h9u.htm">URB</A>, <A HREF="usbstrct_1e0i.htm">_URB_HEADER</A>, <A HREF="usbstrct_3zci.htm">USBD_ISO_PACKET_DESCRIPTOR</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: _URB_ISOCH_TRANSFER"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
