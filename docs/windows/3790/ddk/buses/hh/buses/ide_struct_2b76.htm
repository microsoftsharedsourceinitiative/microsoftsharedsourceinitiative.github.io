<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ATA_PASS_THROUGH_EX</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ATA_PASS_THROUGH_EX">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>System&nbsp;Support&nbsp;for&nbsp;Buses:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ata_pass_through_ex_kr"></A>ATA_PASS_THROUGH_EX</H1>

<P>The ATA_PASS_THROUGH_EX structure is used in conjunction with an <A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A> request to instruct the port driver to send an embedded ATA command to the target device. </P>

<PRE class=syntax>typedef struct _ATA_PASS_THROUGH_EX {
  USHORT  Length;
  USHORT  AtaFlags;
  UCHAR  PathId;
  UCHAR  TargetId;
  UCHAR  Lun;
  UCHAR  ReservedAsUchar;
  ULONG  DataTransferLength;
  ULONG  TimeOutValue;
  ULONG  ReservedAsUlong;
  ULONG_ PTR  DataBufferOffset;
  UCHAR  PreviousTaskFile[8];
  UCHAR  CurrentTaskFile[8];
}ATA_PASS_THROUGH_EX, *PATA_PASS_THROUGH_EX;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Length</B></DT>

<DD>Specifies the length in bytes of the ATA_PASS_THROUGH_EX structure.</DD>

<DT><B>AtaFlags</B></DT>

<DD>Indicates the direction of data transfer and specifies the kind of operation to be performed. The following flags are currently defined.


<TABLE>

<TR VALIGN="top">
<TH align=left width=36%>Ata Flags</TH>
<TH align=left width=64%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=36%>ATA_FLAGS_DRDY_REQUIRED</TD>
<TD width=64%>Wait for DRDY status from the device before sending the command to the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>ATA_FLAGS_DATA_OUT</TD>
<TD width=64%>Read data from the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>ATA_FLAGS_DATA_IN</TD>
<TD width=64%>Write data to the device.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>ATA_FLAGS_48BIT_COMMAND</TD>
<TD width=64%>The ATA command to be sent uses the 48-bit logical-block address (LBA) feature set. When this flag is set, the contents of the <B>PreviousTaskFile</B> member in the _ATA_PASS_THROUGH_EX structure should be valid.</TD>
</TR>
</TABLE><BR>

</DD>

<DT><B>PathId</B></DT>

<DD>Indicates the IDE port or bus for the request. This value is set by the port driver.</DD>

<DT><B>TargetId</B></DT>

<DD>Indicates the target device on the bus. This value is set by the port driver.</DD>

<DT><B>Lun</B></DT>

<DD>Indicates the logical unit number of the device. This value is set by the port driver.</DD>

<DT><B>ReservedAsUchar</B></DT>

<DD>Reserved for future use. </DD>

<DT><B>DataTransferLength</B></DT>

<DD>Indicates the size, in bytes, of the data buffer. If an underrun occurs, the miniport driver must update this member to the number of bytes that were actually transferred. </DD>

<DT><B>TimeOutValue</B></DT>

<DD>Indicates the number of seconds that are allowed for the request to execute before the OS-specific port driver determines that the request has timed out. </DD>

<DT><B>ReservedAsUlong</B></DT>

<DD>Reserved for future use. </DD>

<DT><B>DataBufferOffset</B></DT>

<DD>Specifies the offset, in bytes, from the beginning of this structure to the data buffer. </DD>

<DT><B>PreviousTaskFile</B></DT>

<DD>Specifies the contents of the task file input registers prior to the current pass-through command. This member is not used when the ATA_FLAGS_48BIT_COMMAND flag is not set. </DD>

<DT><B>CurrentTaskFile</B></DT>

<DD>Specifies the content of the task file register on both input and output. On input, the array values in <B>CurrentTaskFile</B> map to the task file input registers in the following manner.


<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Byte</TH>
<TH align=left width=71%>Input Register</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>0</TD>
<TD width=71%>Features register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>1</TD>
<TD width=71%>Sector count register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>2</TD>
<TD width=71%>Sector number tegister</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>3</TD>
<TD width=71%>Cylinder low register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>4</TD>
<TD width=71%>Cylinder high register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>5</TD>
<TD width=71%>Device/head register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>6</TD>
<TD width=71%>Command register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>7</TD>
<TD width=71%>Reserved</TD>
</TR>
</TABLE><BR>



<P>When <A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A> completes, the port driver updates <B>CurrentTaskFile</B> with the values that are present in the device's output registers at the completion of the embedded command. The array values in <B>CurrentTaskFile</B> correspond to the following task file output registers.



<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Byte</TH>
<TH align=left width=71%>Output Register</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>0</TD>
<TD width=71%>Error register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>1</TD>
<TD width=71%>Sector count register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>2</TD>
<TD width=71%>Sector number register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>3</TD>
<TD width=71%>Cylinder low register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>4</TD>
<TD width=71%>Cylinder high register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>5</TD>
<TD width=71%>Device/head register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>6</TD>
<TD width=71%>Status register</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>7</TD>
<TD width=71%>Reserved</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ntddscsi.h</I>. Include <I>ntddscsi.h</I>. </P>

<H4>Comments</H4>

<P><A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A> is a buffered device control request. To bypass buffering in system memory, callers should use <A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A> and <A HREF="ide_struct_7036.htm">ATA_PASS_THROUGH_DIRECT</A>. When handling an IOCTL_ATA_PASS_THROUGH_DIRECT request, the system locks down the buffer in user memory and the device accesses this memory directly. </P>

<H4>See Also</H4>

<P><A HREF="ide_struct_7036.htm">ATA_PASS_THROUGH_DIRECT</A>, <A HREF="ide_minikr_1ygi.htm">IOCTL_ATA_PASS_THROUGH</A>, <A HREF="ide_minikr_9iya.htm">IOCTL_ATA_PASS_THROUGH_DIRECT</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ATA_PASS_THROUGH_EX"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
