<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Bug Check 0x23:  FAT_FILE_SYSTEM</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="bug check 0x23">
<META NAME="MS-HKWD" CONTENT="FAT_FILE_SYSTEM">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_bug_check_0x23_bug"></A>Bug Check 0x23: FAT_FILE_SYSTEM</H1>

<P>The FAT_FILE_SYSTEM bug check has a value of 0x00000023. This indicates that a problem occurred in the FAT file system.</P>

<H4>Parameters</H4>

<P>The following parameters are displayed on the blue screen.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=21%>Parameter</TH>
<TH align=left width=79%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=21%>1</TD>
<TD width=79%>Specifies source file and line number information. The high 16 bits (the first four hexadecimal digits after the "0x") identify the source file by its identifier number. The low 16 bits identify the source line in the file where the bug check occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>2</TD>
<TD width=79%>If <B>FatExceptionFilter</B> is on the stack, this parameter specifies the address of the exception record.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>3</TD>
<TD width=79%>If <B>FatExceptionFilter</B> is on the stack, this parameter specifies the address of the context record.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>4</TD>
<TD width=79%>Reserved </TD>
</TR>
</TABLE><BR>

<H4>Cause</H4>

<P>One possible cause of this bug check is disk corruption. Corruption in the file system or bad blocks (sectors) on the disk can induce this error. Corrupted SCSI and IDE drivers can also adversely affect the system’s ability to read and write to the disk, thus causing the error.</P>

<P>Another possible cause is depletion of nonpaged pool memory. If the nonpaged pool memory is completely depleted, this error can stop the system. However, during the indexing process, if the amount of available nonpaged pool memory is very low, another kernel-mode driver requiring nonpaged pool memory can also trigger this error. </P>

<H4>Resolving the Problem</H4>

<P><I>To debug this problem:</I>  Use the <B>.cxr&nbsp;(Display Context Record)</B> command with Parameter&nbsp;3, and then use the <B>kb&nbsp;(Display Stack Trace)</B> command.  </P>

<P><I>To resolve a disk corruption problem:</I> Check Event Viewer for error messages from SCSI and FASTFAT (System Log) or Autochk (Application Log) that might help pinpoint the device or driver that is causing the error. Try disabling any virus scanners, backup programs, or disk defragmenter tools that continually monitor the system. You should also run hardware diagnostics supplied by the system manufacturer. For details on these procedures, see the owner’s manual for your computer. Run <B>Chkdsk&nbsp;/f&nbsp;/r</B> to detect and resolve any file system structural corruption. You must restart the system before the disk scan begins on a system partition.</P>

<P><I>To resolve a nonpaged pool memory depletion problem:</I> Either increase the amount of installed memory (which increases the quantity of nonpaged pool memory available to the kernel), or reduce the number of files on the SFM volume.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Bug%20Check%200x23:%20%20FAT_FILE_SYSTEM"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
