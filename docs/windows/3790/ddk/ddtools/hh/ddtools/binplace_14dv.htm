<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Symbol File Systems</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Symbol File Systems">
<META NAME="MS-HKWD" CONTENT="PDB symbol files">
<META NAME="MS-HKWD" CONTENT="DBG symbol files">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_symbol_file_systems_tools"></A>Symbol File Systems</H2>

<P>There are two common symbol file systems. In this document, these will be referred to as the <I>current system</I> and the <I>old system</I>.</P>

<H4>Current Symbol File System</H4>

<P>In the current system, there are always two files: the executable file and a <I>.pdb</I> file. The <I>.pdb</I> file contains all the symbols. The executable file contains a pointer to the <I>.pdb</I> file.</P>

<P>If a <I>.pdb</I> symbol file contains private symbols, BinPlace can strip this information out and produce a stripped symbol file. See <A HREF="binplace_2sc3.htm">Public Symbols and Private Symbols</A> for details.</P>

<H4>Old Symbol File System</H4>

<P>In the old system, executable files and symbol files can be arranged in two different ways:

<UL>
	<LI>The executable file and a <I>.pdb</I> file. In this arrangement, most symbol information is in the <I>.pdb</I> file. The remainder of the symbol information is included in the executable file. The executable file also contains a pointer to the <I>.pdb</I> file.</LI>

	<LI>The executable file, a <I>.pdb</I> file, and a <I>.dbg</I> file. The <I>.pdb</I> file is the same as in the two-file arrangement: it holds most of the symbols. The remainder of the symbol information is in the <I>.dbg</I> file. No symbol information is in the executable file. The executable file contains a pointer to the <I>.dbg</I> file, and the <I>.dbg</I> file contains a pointer to the <I>.pdb</I> file.</LI>
</UL>

<P>In the old symbol file system, both the two-file arrangement and the three-file arrangement contain the same executable code and the same symbols. The program can run and can be debugged in either arrangement. However, the three-file arrangement speeds up execution, because the executable file is smaller.</P>

<P>If you have binaries that were built with the old symbol file system in the two-file arrangment, BinPlace can convert it to the three-file arrangement. In other words, BinPlace can "split" the executable file into a symbol-free executable file and a new <I>.dbg</I> file containing the symbols that were in the executable file.</P>

<P>BinPlace can also strip private symbol information from files in the old symbol file system, but only if it is also splitting the files (in other words, only if it is changing the files from the two-file arrangement to the three-file arrangement). BinPlace cannot strip private symbols out of files in the old symbol file system and leave them in the two-file arrangement. And if the files are <I>already</I> in the three-file arrangement, BinPlace will not perform any stripping; indeed, it will not even move the symbol files if the executable file is named on the BinPlace command line. See <A HREF="binplace_2sc3.htm">Public Symbols and Private Symbols</A> for details.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Symbol%20File%20Systems"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
