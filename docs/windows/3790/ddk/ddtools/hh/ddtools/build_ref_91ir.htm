<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TARGET_DIRECTORY</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TARGET_DIRECTORY build macro">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_target_directory_tools"></A>TARGET_DIRECTORY</H1>

<P>The TARGET_DIRECTORY should always be equal to the target platform type — <B>i386</B> for an x86 processor, <B>ia64</B> for an Itanium-based processor, or <B>amd64</B> for an AMD x86-64 processor.</P>

<P>Use the TARGET_DIRECTORY macro as follows to specify the target directory, if you want some dependency file to always end up in the <I>obj</I> subdirectory:</P>

<PRE>TARGET_DIRECTORY=<I>some_sourcefile</I><B>:</B><I>some_dependency_file</I>
</PRE>

<P>This instruction enables you to draw upon resources contained in a single source tree to complete multiple platform-specific builds without conflicts. You do not have to hard-code the name of the platform.</P>

<P>For example, if you have a special Build utility rule for some feature in your code, or if you want to build a particular object from a particular C file, you can use the following line in a <A HREF="build_ref_3egj.htm"><I>sources</I> file</A>:</P>

<PRE><B>obj\$(TARGET_DIRECTORY)\</B><I>filename</I><B>.obj; </B><I>filename</I><B>.c</B>
</PRE>

<P>Using the TARGET_DIRECTORY macro ensures that the specified file will be placed in the appropriate subdirectory. For example, <I>\obj\i386subdirectory\obj\</I>.</P>

<P>There are some default targets. One of them is <I>.cod</I>. If you issue the following instruction from a subdirectory containing source files:</P>

<PRE>nmake SOURCE_FILE_NAME=.cod
</PRE>

<P>it will create an assembler listing that you can review to determine the location of the compiler error.</P>

<P>There is another default target called <I>.pp</I> file, a preprocessed listing. Preprocessing adds line numbers. You can use these line numbers to determine whether the Build utility retrieved headers from the correct location, and which <B>#define</B> directives and structures it added.</P>

<P>If you issue the following instruction from a subdirectory containing source files:</P>

<PRE>nmake SOURCE_FILE_NAME=.pp
</PRE>

<P>the Build utility will preprocess the file.</P>

<P>The <I>.cod</I> and <I>.pp</I> files are very useful for tracking bugs in the build process.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TARGET_DIRECTORY"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
