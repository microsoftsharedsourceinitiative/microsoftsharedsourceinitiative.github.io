<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Building Multiple Targets from One Subdirectory</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Building Multiple Targets from One Subdirectory">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Driver&nbsp;Development&nbsp;Tools:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H4><A NAME="ddk_building_multiple_targets_from_one_subdirectory_tools"></A>Building Multiple Targets from One Subdirectory</H4>

<P>If your driver must run on more than one Microsoft® Windows® operating system, or support more than one hardware architecture, you can organize your builds in any of the following ways:

<UL>
	<LI>Use a single set of source files and create a single binary.</LI>

	<LI>Use a single set of source files and create more than one binary.</LI>

	<LI>Use more than one set of source files and create more than one binary.</LI>
</UL>

<P>In the simplest scenario, you can use a single source directory with a single <A HREF="build_ref_73zn.htm"><I>makefile</I></A> to build a single executable or driver.</P>

<P>However, the Build utility allows you to have a single subdirectory where you can build multiple executable output files.</P>

<P>It is easiest to use a single set of source files, regardless of the number of binaries to be created. If at all possible, avoid using more than one set of sources. Instead, use preprocessor symbols to isolate system-specific and architecture-specific code, and conditionally compile. Maintenance and debugging are vastly simplified when you use a single set of sources.</P>

<H4>Building Multiple Drivers from a Single Set of Source Files</H4>

<P>To develop a driver that will run on multiple Windows operating systems, use a single set of source files and create a single binary. However, sometimes it is not possible to generate a single binary that supports all target operating systems. Nevertheless, in such a case you should use the same source code and build the drivers as follows: 

<OL>
	<LI>Surround any system-dependent features with conditional compilation directives.</LI>

	<LI>Put all source files in one directory; for example, <I>mydriver</I>.</LI>

	<LI>Create a subdirectory for each target operating system. For example:
<P><I>mydriver\Windows2000<BR>
mydriver\WindowsMe<BR>
mydriver\XP</I> 
</LI>

	<LI>In each system-specific subdirectory, put the <A HREF="build_ref_73zn.htm"><I>makefile</I></A>, <A HREF="build_ref_7i7n.htm"><I>makefile.inc</I></A>, and other system-dependent build files: 
<P><I>mydriver\Windows2000\makefile<BR>
mydriver\Windows2000\makefile.inc</I>

<P><I>mydriver\WindowsMe\makefile<BR>
mydriver\WindowsMe\makefile.inc</I>

<P><I>mydriver\XP\makefile<BR>
mydriver\XP\makefile.inc</I> 
</LI>

	<LI>In each system-specific subdirectory, create a <A HREF="build_ref_3egj.htm"><I>sources</I> file</A> that refers to the source files in the parent directory, as in the following example:
<PRE>TARGETNAME=MYDRIVER
TARGETTYPE=DRIVER
DRIVERTYPE=WDM

C_DEFINES=-DDRIVER

INCLUDES=..\..\inc;

SOURCES= \
        ..\main.c \
        ..\vars.c \
</PRE>

<P>This <I>sources</I> file creates a WDM driver named MYDRIVER, using source files from the parent directory and header files from an <I>inc</I> directory at the same level as the parent directory. Output files are placed in a subdirectory whose name is based on the build environment type, the platform, and the Windows version for which they are built. Log files use a similar naming scheme. See <A HREF="build_use_4bqr.htm">Specifying the Location of Created Files</A> for details.
</LI>
</OL>

<P class=note><B>Note</B>&nbsp;&nbsp;To do this in Visual Studio®, you must create a project file (<I>.dsp</I>) for each target operating system. Each project file should specify the preprocessor options that are required to build the driver on the target operating system. In addition, create a subdirectory for each target operating system. Direct the output object (<I>.obj</I>) and dynamic-link library (.<I>dll</I>) files for each target system to the corresponding subdirectory.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Building%20Multiple%20Targets%20from%20One%20Subdirectory"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
