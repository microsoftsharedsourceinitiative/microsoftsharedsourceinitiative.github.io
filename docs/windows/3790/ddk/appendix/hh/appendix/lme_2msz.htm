<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="LME Device Driver Hardware and Software Requirements">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Appendix:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_supp_lme_device_driver_hardware_and_software_requirements"></A>LME Device Driver Hardware and Software Requirements</H1>

<H1>Development Platform</H1>

<P>The hardware requirements for developing device drivers that are Large Memory Enabled (LME) for Microsoft® Windows®&nbsp;Server 2003, Enterprise Edition and Datacenter Edition, using Physical Address Extension (PAE) memory are similar to those for common, current development systems and do not require large investments. In any case, the minimum platform is the same as for Windows&nbsp;Server 2003, Professional Edition, and the required development environment is the Microsoft Windows DDK. Check with the system manufacturer for specific chipset and BIOS compliance if the system is to have more than 4 GB of physical RAM installed. Also, the use of two processors in the development system can make it easier to detect synchronization problems. Finally, even if more than 4 GB of RAM is not installed, additional memory will make development and testing more rapid. </P>

<H1>Testing Platform</H1>

<P>Final testing for correct implementation of an LME driver and use of memory beyond 32 bits <I>must</I> occur on Microsoft® Windows®&nbsp;Server 2003,   Enterprise Edition. Testing must occur on a system with more than 4 GB of physical memory. </P>

<H1>General Information</H1>

<P>All the physical memory in the system is treated as general purpose memory by Microsoft® Windows®&nbsp;Server 2003, Enterprise Edition and Datacenter Edition. The operating system can use this memory for caching and virtual memory management without major changes. </P>

<P>Applications that require more physical memory than is provided by the 4 GB virtual address space can use the Address Windowing Extensions (AWE) API set to map from a designated window in the application’s virtual address space into the physical memory region allocated for that window. Applications will be able to do I/O from those mapped memory pool regions. Unmodified applications will also be capable of I/O at physical addresses above 4 GB while only being aware of a 4 GB virtual address space.</P>

<P>Direct I/O is supported for the entire physical address space if the network and storage devices and drivers support dual address cycle and 64-bit addressing. </P>

<P>The kernel virtual memory space organization for PAE-X86 is unchanged from the standard Windows&nbsp;Server 2003 kernel, providing an easier migration path for the device drivers. </P>

<P>Although double buffering of I/O from 32-bit devices and drivers is transparent in that the operating system can manage these operations, the performance impact is large for high performance I/O devices such as 100BaseT, 1000BaseT, FDDI, or ATM network adapters. This applies as well for storage adapters, such as those for SCSI-2, SCSI-3 or Fibre Channel. The negative performance impact grows as the physical memory in the system increases. For example, on a system with 4 GB of physical memory, no double buffering occurs and there is no impact. On a system with 8 GB of physical memory, more than one half of all I/O operations would occur from addresses above 4 GB. A system with 16 GB of physical memory would have more than three-quarters of all I/O operations originating at addresses beyond 4 GB.</P>

<H1>Programming Considerations: 64-bit Addressability Is Not Win64</H1>

<P>While the physical addresses used are 64-bit for both PAE kernel and Microsoft® Win64™, pointers are not. There are other differences as well. Device drivers must be recompiled for Win64; as 32-bit device drivers, even those capable of addressing 64-bit address spaces are absolutely not supported on Win64.</P>

<P>PVOID64 does <I>not</I> work with PAE kernel memory. If used, the return is invalid as only the first 32 bits are correct and a random 32 bits are placed in the return for the rest. Developers writing to support PAE systems using LME drivers should only use PHYSICAL_ADDRESS (which can also be used for address calculations). Do not use PVOID, PVOID64, ULONGLONG, or any other type. </P>

<P>No executables or buffers can be executed within an AWE window. The AWE API does not permit executable code (.exe, .dll, .sys, and so on) to execute from within an AWE window region in the process's virtual memory or in the mapped physical memory pool that the process is utilizing. Also, AWE window address ranges and memory pools cannot be used as data buffers for graphics or video calls. Thus, video, graphics, and other device drivers may not use the AWE API. The kernel, however, does use all physical memory as general purpose memory. </P>

<H1>References</H1>

<P>For information on device and driver design guidelines and test requirements, see the Microsoft <a href="http://go.microsoft.com/fwlink/?linkid=8703&clcid=0x409" target="_blank">hardware development</A> Web site. </P>

<P>.</P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: "> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
