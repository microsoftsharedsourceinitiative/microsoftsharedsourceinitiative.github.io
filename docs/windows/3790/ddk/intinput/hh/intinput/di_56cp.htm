<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating Your Property Sheet</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Creating Your Property Sheet">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Interactive&nbsp;Input&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_creating_your_property_sheet_di"></A>Creating Your Property Sheet</H3>

<P>To speed your development time, consult the DirectX DDK sample property sheet application, CPLSVR1. This example demonstrates many aspects of DirectInput and provides a good starting point for your own custom property sheet. </P>

<P class=proch><B><IMG SRC="../images/wedge.gif" ALT="" BORDER=0>To create your own property sheet</B></P>

<P>Creating a custom property sheet from scratch is a relatively simple process.

<OL>
	<LI>Create a GUID to identify your property page: 
<UL>
	<LI>Using the DirectX SDK tool, GUIDGEN, create a GUID for your property page (only one, no matter how many pages). Define this in your application-specific include file. It should look something like: 
<P>DEFINE_GUID (CLSID_<I>NAMEOFYOURDEVICE</I>, 0x92187326, 0x72B4, 0x11D0, 0xA1, 0xAC, 0x0, 0x0, 0xF8, 0x2, 0x69, 0x77);
</LI>

	<LI>Create the required <B>DllGetClassObject</B> and <B>DllCanUnloadNow.</B> (An example of all of these steps is available in CPLSVR1; for further documentation please refer to your COM programmers manual). </LI>

	<LI>Create an implementation for the COM <B>ClassFactory</B> defined in <I>Dicpl.h</I>. </LI>

	<LI>Create the implementation for the <B>IDIGamgeCntrlPropSheet</B> interface. </LI>

	<LI>Using <I>Regedit</I>, add your defined GUID to the <B>My Computer\HKEY_CLASSES_ROOT\CLSID </B>key. Then add the keys <B>InProcHandler32</B> and <B>InProcServer32</B> to your key. </LI>

	<LI>Modify the (default) entry of the <B>InProcHandler32</B> key to point to the location of <I>Gchand.dll</I>. (Path is not necessary if <I>Gchand.dll</I> is in the "Windows" system directory).</LI>

	<LI>Modify the (default) entry of the <B>InProcServer32</B> entry to point to the location of your property sheet DLL. An example would be: "C:\my_device\my_propertysheet.dll". This example shows a ProgID entry. This is not necessary, but is often used to store information about the module residing at that GUID. </LI>
</UL>
</LI>

	<LI>Create dialog templates and dialog procedures as you would for any Windows application.  
<P class=note><B>Note</B>&nbsp;&nbsp;You may want to write a test container for your property sheets as a window that launches your pages as independent dialog boxes. At this point, you could also convert any existing control panel you might have to the DirectInput control panel. 
</LI>

	<LI>Populate the <A HREF="di_ref_11ey.htm">DIGCPAGEINFO</A> and <A HREF="di_ref_267d.htm">DIGCSHEETINFO</A> structures and return that information in your implementations of <A HREF="di_ref_5hih.htm"><B>IDIGameCntrlPropSheet::GetPageInfo</B></A> and <A HREF="di_ref_6six.htm"><B>IDIGameCntrlPropSheet::GetSheetInfo</B></A> respectively. </LI>
</OL>

<P>The generation of the property sheet pages is done through the <B>PropertySheet</B> function. All behaviors of this function are inherent in the property sheet pages. For example, the property sheet page reflects the largest dialog template that it receives. If the user creates one page and its associated template is very small, this reflects directly on the size of the resulting dialog. </P>

<P>Dialog templates are also important to remember when considering visual alignment and the centering of controls on a page. For example, consider a case in which the user creates two pages that contain items specified to be centered on the page. One item to be centered is 200 dialog units (DLUs) in width; the other is 100 units. In such a case,  the latter item is not centered on the page. Instead, the control is centered to its template and additional white space (or gray, as it may be) is added to the width of the more narrow page. You should create dialog templates of the same size, even if you are not using it all. (For more information on the <B>PropertySheet</B> function, see the Microsoft Win32® SDK.)</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Creating%20Your%20Property%20Sheet"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
