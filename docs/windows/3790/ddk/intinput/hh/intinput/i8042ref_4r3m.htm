<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PI8042_MOUSE_ISR</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="PI8042_MOUSE_ISR">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Interactive&nbsp;Input&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_pi8042_mouse_isr_kr"></A>PI8042_MOUSE_ISR</H1>

<P>A PI8042_MOUSE_ISR-typed callback routine customizes the operation of the I8042prt mouse ISR.</P>

<PRE class=syntax><B>typedef
BOOLEAN
(*PI8042_MOUSE_ISR) (
    PVOID  </B><I>IsrContext</I><B>,</B>
<B>    PMOUSE_INPUT_DATA  </B><I>CurrentInput</I><B>,</B>
<B>    POUTPUT_PACKET  </B><I>CurrentOutput</I><B>,</B>
<B>    UCHAR  </B><I>StatusByte</I><B>,</B>
<B>    PUCHAR  </B><I>Byte</I><B>,</B>
<B>    PBOOLEAN  </B><I>ContinueProcessing</I><B>,</B>
<B>    PMOUSE_STATE  </B><I>MouseState</I><B>,</B>
<B>    PMOUSE_RESET_SUBSTATE  </B><I>ResetSubState</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>IsrContext</I></DT>

<DD>Pointer to the filter device object of the driver that supplies this callback.</DD>

<DT><I>CurrentInput</I></DT>

<DD>Pointer to the input <A HREF="mref_4d6a.htm">MOUSE_INPUT_DATA</A> structure being constructed by the ISR.</DD>

<DT><I>CurrentOutput</I></DT>

<DD>Pointer to an <A HREF="i8042ref_44aa.htm">OUTPUT_PACKET</A> structure, which specifies an array of bytes being written to the hardware device.</DD>

<DT><I>StatusByte</I></DT>

<DD>Specifies a status byte that is read from I/O port 60 when the interrupt occurs.</DD>

<DT><I>Byte</I></DT>

<DD>Specifies a data byte that is read from I/O port 64 when the interrupt occurs.</DD>

<DT><I>ContinueProcessing</I></DT>

<DD>Specifies, if TRUE, that processing in the I8042prt mouse ISR will continue after this callback completes. Otherwise, processing does not continue.</DD>

<DT><I>MouseState</I></DT>

<DD>Pointer to a <A HREF="i8042ref_2jhu.htm">MOUSE_STATE</A> enumeration value, which identifies the state of mouse input.</DD>

<DT><I>ResetSubState</I></DT>

<DD>Pointer to MOUSE_RESET_SUBSTATE enumeration value, which identifies the mouse reset substate. See the Comments section.
</DD>
</DL>

<H4>Return Value</H4>

<P>A PI8042_MOUSE_ISR callback returns TRUE if the I8042prt mouse ISR should continue; otherwise it returns FALSE.</P>

<H4>Headers</H4>

<P>Declared in <I>ntdd8042.h. </I>Include in <I>ntdd8042.h.</I></P>

<H4>Comments</H4>

<P>A PI8042_MOUSE_ISR callback is not needed if the default operation of the I8042prt mouse ISR is sufficient.</P>

<P>An upper-level keyboard filter driver can provide a mouse ISR callback. After the I8042prt mouse ISR validates the interrupt, it calls the mouse ISR callback.</P>

<P>To reset a mouse, I8042prt goes through a sequence of operational substates, each one of which is identified by a MOUSE_RESET_SUBSTATE enumeration value. For more information about how I8042prt resets a mouse and the corresponding mouse reset substates, see the I8042prt sample code provided in the DDK and the documentation of MOUSE_RESET_SUBSTATE in <I>ntdd8042.h.</I></P>

<P>A PI8042_MOUSE_ISR callback runs in kernel mode at the IRQL of the I8042prt mouse ISR.</P>

<H4>See Also</H4>

<P><A HREF="mfilref_1k4y.htm"><B>MouFilter_IsrHook</B></A>, <A HREF="mref_4d6a.htm">MOUSE_INPUT_DATA</A>, <A HREF="i8042ref_2jhu.htm">MOUSE_STATE</A>, <A HREF="i8042ref_44aa.htm">OUTPUT_PACKET</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: PI8042_MOUSE_ISR"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
