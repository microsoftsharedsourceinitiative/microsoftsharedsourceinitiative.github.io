<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Setting Up AddReg Entries</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Setting Up AddReg Entries">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Interactive&nbsp;Input&nbsp;Devices:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_setting_up_addreg_entries_di"></A>Setting Up AddReg Entries</H3>

<P>The INF file also needs to set up registry entries in the section selected by the <B>AddReg</B> entry of the install section. For devices requiring a minidriver, the following need to be set up to make sure that the driver is properly associated with the multimedia system drivers: </P>

<PRE>HKR,,DevLoader,,mmdevldr.vxd
HKR,Drivers,,,
HKR,Drivers,MIGRATED,,0
HKR,Drivers\joystick,,,
HKR,,Driver,,vjoyd.vxd
HKR,Drivers\joystick\msjstick.drv,,,
HKR,Drivers\joystick\msjstick.drv,Description,,%OEMJoy.DeviceDesc%
HKR,Drivers\joystick\msjstick.drv,Driver,,msjstick.drv
</PRE>

<P>The %OEMJoy.DeviceDesc% string is replaced by whatever the device name string has been called. </P>

<P>Values that describe this joystick are put into the registry under an OEM-defined key, starting with the path <B>REGSTR_PATH_JOYOEM</B> (found under <B>HKEY_LOCAL_MACHINE</B>). Under this key, an OEM can place a number of static values that customize the way an OEM joystick appears in the joystick calibration program and to applications for Windows&nbsp;95/98/Me. The names of the values are defined in <I>Regstr.h</I>, so it is the names of these constants that are discussed below, rather than the names that appear in the registry. Every OEM-defined device must at least have its basic properties defined and a name that the user can see in the joystick selection box under Control Panel. For a minidriver to be loaded, the value must contain the name of the minidriver VxD (including the <I>.vxd</I> extension). The OEM name value (<B>REGSTR_VAL_JOYOEMNAME</B>), and the minidriver file name(<B>REGSTR_VAL_JOYOEMCALLOUT</B>) values are simple strings. The basic properties <B>REGSTR_VAL_JOYOEMDATA</B> value is binary data, whose meaning is detailed in the following passages. </P>

<P>There are two doublewords; the first contains a set of flags, the second is the number of buttons the device has. </P>

<P>The flags specify what kind of device it is, which axes are present, and how they should be interpreted. </P>

<P>Most of the flags are defined in <I>Mmddk.h</I>. The two new flags added in DirectX 3.0 are defined in <I>Dinput.h</I>. The following flags are used only to remap the axes of an OEM-defined analog joystick that is polled directly by VJoyD. They change the default behavior of VJoyD when doing analog polling, but have no effect on the data returned by minidrivers. </P>

<TABLE>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_XISJ1Y </TD>
<TD width=63%>X is on the J1 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_XISJ2X </TD>
<TD width=63%>X is on the J2 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_XISJ2Y </TD>
<TD width=63%>X is on the J2 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_YISJ1X </TD>
<TD width=63%>Y is on the J1 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_YISJ2X </TD>
<TD width=63%>Y is on the J2 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_YISJ2Y </TD>
<TD width=63%>Y is on the J2 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_RISJ1X </TD>
<TD width=63%>R is on the J1 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_RISJ1Y </TD>
<TD width=63%>R is on the J1 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_RISJ2Y </TD>
<TD width=63%>R is on the J2 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_ZISJ1X </TD>
<TD width=63%>Z is on the J1 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_ZISJ1Y </TD>
<TD width=63%>Z is on the J1 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_ZISJ2X </TD>
<TD width=63%>Z is on the J2 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_POVISJ1X </TD>
<TD width=63%>Polled POV is on the J1 X axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_POVISJ1Y </TD>
<TD width=63%>Polled POV is on the J1 Y axis. </TD>
</TR>

<TR VALIGN="top">
<TD width=37%>JOY_HWS_POVISJ2X </TD>
<TD width=63%>Polled POV is on the J2 X axis. </TD>
</TR>
</TABLE><BR>

<P>The default behavior is: 

<UL>
	<LI>X defaults to the J1 X axis. </LI>

	<LI>Y defaults to the J1 Y axis. </LI>

	<LI>R (rudder) defaults to the J2 X axis. </LI>

	<LI>Z defaults to the J2 Y axis. </LI>

	<LI>POV hat (if implemented as polling) defaults to the J2 Y axis. </LI>
</UL>

<P>Flags are also defined to determine whether POV data comes from an axis or from a button combination. If the described device is being polled by VJoyD, JOY_HWS_POVISBUTTONCOMBOS causes VJoyD to interpret button combinations to produce the POV, otherwise an axis is used to find it. If the described device is polled through a minidriver, then a value in <B>dwPOV</B> other than POV_UNDEFINED causes an override of any other POV calculation. However, if JOY_HWS_POVISBUTTONCOMBOS is set, VJoyD interprets the buttons as it would for an analog joystick. Otherwise the POV is taken from the Z axis value if JOY_HWS_HASZ is not set, from R otherwise. When possible, minidrivers should avoid having the generic VJoyD interpret POV information, as a minidriver usually has more information about the hardware implementation. </P>

<P>The following flags are used to describe which features the device has: </P>

<TABLE>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_HASZ </TD>
<TD width=50%>Joystick has Z (3<SUP>rd</SUP> axis) information. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_HASR </TD>
<TD width=50%>Joystick has R (4<SUP>th</SUP> axis) information. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_HASU </TD>
<TD width=50%>Joystick has R (4th axis) information. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_HASV </TD>
<TD width=50%>Joystick has R (4th axis) information. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_HASPOV </TD>
<TD width=50%>Joystick has a POV hat. </TD>
</TR>
</TABLE><BR>

<P>The following flags are used to describe the device type: </P>

<TABLE>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_ISYOKE </TD>
<TD width=50%>Device is a flight yoke. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_ISGAMEPAD </TD>
<TD width=50%>Device is a game pad. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_ISCARCTRL </TD>
<TD width=50%>Device is a race car controller. </TD>
</TR>

<TR VALIGN="top">
<TD width=50%>JOY_HWS_ISHEADTRACKER </TD>
<TD width=50%>Device is a head tracker (defined in DirectX 3.0). </TD>
</TR>
</TABLE><BR>

<P>Finally, the JOY_HWS_ISGAMEPORTDRIVER flag that was added in DirectX 3.0 indicates that this minidriver replaces the standard polling of a game port. </P>

<P>For example, if you have a digital joystick that has eight buttons and returns values for X, Y, Z, R, and POV, then you need to set the bits JOY_HWS_HASZ, JOY_HWS_HASPOV, and JOY_HWS_HASR. This gives you the following: </P>

<TABLE>

<TR VALIGN="top">
<TD width=6%>&nbsp;</TD>
<TD width=27%>0x00000001 </TD>
<TD width=40%>JOY_HWS_HASZ </TD>
<TD width=27%>01,00,00,00 </TD>
</TR>

<TR VALIGN="top">
<TD width=6%>| </TD>
<TD width=27%>0x00000002 </TD>
<TD width=40%>JOY_HWS_HASPOV </TD>
<TD width=27%>02,00,00,00 </TD>
</TR>

<TR VALIGN="top">
<TD width=6%>| </TD>
<TD width=27%>0x00080000 </TD>
<TD width=40%>JOY_HWS_HASR </TD>
<TD width=27%>00,00,08,00 </TD>
</TR>

<TR VALIGN="top">
<TD width=6%>= </TD>
<TD width=27%>0x00080003 </TD>
<TD width=40%>combination </TD>
<TD width=27%>03,00,08,00 </TD>
</TR>
</TABLE><BR>

<P>Putting this <B>DWORD</B> in little-endian format, followed by a <B>DWORD</B> for the number of buttons, gives you 03,00,08,00,08,00,00,00, which is the series of bytes required in your INF file. </P>

<P>All of the remaining registry settings supplied in the INF file customize the instructions for calibration given by the standard control panel, and are as follows: 

<DL>
<DT><B>REGSTR_VAL_JOYOEMXYLABEL</B> </DT>

<DD>This string is displayed below the XY position control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMZLABEL</B> </DT>

<DD>This string is displayed below the Z position control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMRLABEL</B> </DT>

<DD>This string is displayed below the R position control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMPOVLABEL</B> </DT>

<DD>This string is displayed below the POV  hat control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMULABEL</B> </DT>

<DD>This string is displayed below the U position control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMVLABEL</B> </DT>

<DD>This string is displayed below the V position control found in the test and calibrate dialogs of the joystick CPL. </DD>

<DT><B>REGSTR_VAL_JOYOEMTESTMOVEDESC</B> </DT>

<DD>This string is displayed in the movement section of the test dialog. It describes to the user how to test the joystick. </DD>

<DT><B>REGSTR_VAL_JOYOEMTESTBUTTONDESC</B> </DT>

<DD>This string is displayed in the button section of the test dialog. It describes to the user how to test the buttons. </DD>

<DT><B>REGSTR_VAL_JOYOEMTESTMOVECAP</B> </DT>

<DD>This string is displayed as the caption of the group box surrounding the movement section of the test dialog. </DD>

<DT><B>REGSTR_VAL_JOYOEMTESTBUTTONCAP</B> </DT>

<DD>This string is displayed as the caption of the group box surrounding the button section of the test dialog. </DD>

<DT><B>REGSTR_VAL_JOYOEMTESTWINCAP</B> </DT>

<DD>This string is displayed as the caption of the test dialog. </DD>

<DT><B>REGSTR_VAL_JOYOEMCALCAP</B> </DT>

<DD>This string will be displayed as the caption of the calibration dialog. </DD>

<DT><B>REGSTR_VAL_JOYOEMCALWINCAP</B> </DT>

<DD>This string is displayed as the caption of the calibration dialog. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL1</B> </DT>

<DD>This string instructs the user how to center the XY portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL2</B> </DT>

<DD>This string instructs the user how to move the XY portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL3</B> </DT>

<DD>This string instructs the user how to re-center the XY portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL4</B> </DT>

<DD>This string instructs the user how to move the Z portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL5</B> </DT>

<DD>This string instructs the user how  to move the R portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL6</B> </DT>

<DD>This string instructs the user how to move the U portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL7</B> </DT>

<DD>This string instructs the user how to move the V portion of the joystick for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL8</B> </DT>

<DD>This string instructs the user how to move the POV hat up for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL9</B> </DT>

<DD>This string instructs the user how to to move the POV hat right for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL10</B> </DT>

<DD>This string instructs the user how to move the POV hat down for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL11</B> </DT>

<DD>This string instructs the user how to move the POV hat left for calibration. </DD>

<DT><B>REGSTR_VAL_JOYOEMCAL12</B> </DT>

<DD>This string consists of a message that informs the user that the calibration process is finished. 
</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Setting%20Up%20AddReg%20Entries"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
