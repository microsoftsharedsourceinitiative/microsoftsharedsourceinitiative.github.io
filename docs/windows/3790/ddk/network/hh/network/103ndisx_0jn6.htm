<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisIMInitializeDeviceInstanceEx</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisIMInitializeDeviceInstanceEx">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ansi_string_kr">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisiminitializedeviceinstanceex_nr"></A>NdisIMInitializeDeviceInstanceEx</H1>

<P>An NDIS intermediate driver calls the<B> NdisIMInitializeDeviceInstanceEx</B> function to initiate the initialization operation for a virtual NIC and optionally to set up state information about the virtual NIC for subsequently bound protocols drivers. </P>

<PRE class=syntax><B>NDIS_STATUS
  NdisIMInitializeDeviceInstanceEx(
    IN NDIS_HANDLE</B>  <I>DriverHandle</I><B>,
    IN PNDIS_STRING</B>  <I>DriverInstance</I><B>,
    IN</B> <B>NDIS_HANDLE</B>  <I>DeviceContext</I>  <B>OPTIONAL
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DriverHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>.</DD>

<DT><I>DriverInstance</I></DT>

<DD>Pointer to an NDIS_STRING type that describes a caller-initialized counted string, in the system-default character set, naming the registry key in which the driver stores information about its virtual NIC and, possibly, binding-specific information. For Windows 2000 and later drivers, this string contains Unicode characters. That is, for Windows 2000 and later, NDIS defines the NDIS_STRING type as a <A HREF="JavaScript:hhobj_1.Click()">UNICODE_STRING</A> type.</DD>

<DT><I>DeviceContext</I></DT>

<DD>Pointer to caller-supplied memory to be set up with driver-defined device context information about the virtual NIC, which still higher level protocol drivers that subsequently bind themselves to this virtual NIC can use. This parameter can be NULL if the intermediate driver has no such device context area.
</DD>
</DL>

<H4>Return Values</H4>

<P><B>NdisIMInitializeDeviceInstanceEx</B> can return either of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>NDIS initiated the initialization operation for the intermediate driver's virtual NIC.</DD>

<DT>NDIS_STATUS_NOT_ACCEPTED</DT>

<DD><B>NdisIMInitializeDeviceInstanceEx</B> failed because the device specified by <I>DriverHandle</I> has already been initialized.</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>An NDIS intermediate driver should call <B>NdisIMInitializeDeviceInstanceEx</B> from its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function. A failure to call <B>NdisIMInitializeDeviceInstanceEx</B> or <A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A> from an NDIS intermediate driver effectively prevents that driver from loading successfully. </P>

<P>Before it calls <B>NdisIMInitializeDeviceInstanceEx</B>, the intermediate driver's <I>ProtocolBindAdapter</I> function should bind to any underlying miniport drivers that are required for the intermediate driver to function. The <I>ProtocolBindAdapter</I> function can allocate an area at <I>DeviceContext</I> as well, possibly setting it up with intermediate driver-determined information about the capabilities of the underlying NIC, collected by <I>ProtocolBindAdapter</I>. The intermediate driver's <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function might use such information subsequently to set up this context area with information about the driver's virtual NIC.</P>

<P>The intermediate driver's call to <B>NdisIMInitializeDeviceInstanceEx</B> causes NDIS to call the intermediate driver’s <I>MiniportInitialize</I> function. <I>MiniportInitialize</I> allocates any resources the driver needs to carry out network I/O operations, such as calling <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, and to initialize the driver’s virtual NIC to an operational state. Then, still higher level protocols can bind themselves to its virtual NIC when the intermediate driver’s initialization is completed successfully. The intermediate driver's <I>MiniportInitialize</I> function can call <A HREF="103ndisx_4xrm.htm"><B>NdisIMGetDeviceContext</B></A> to gain access to the area at <I>DeviceContext</I> if such an area is provided by its <I>ProtocolBindAdapter</I> function. </P>

<P>After <I>MiniportInitialize</I> returns control, the intermediate driver's device context area, if any, can contain any intermediate-driver-defined data that subsequently allows all higher level protocols bound to the same virtual NIC to access information in that context area. Such a higher level protocol can query the intermediate-driver-supplied device context with <A HREF="103ndisx_6y5u.htm"><B>NdisIMGetBindingContext</B></A>. </P>

<P>Before NDIS calls an intermediate driver’s <I>MiniportInitialize</I> function, the driver can call <A HREF="103ndisx_8nhu.htm"><B>NdisIMCancelInitializeDeviceInstance</B></A> to cancel the initialization operation.</P>

<P>After NDIS calls an intermediate driver’s <I>MiniportInitialize</I> function, the driver must call <A HREF="103ndisx_1q7m.htm"><B>NdisIMDeInitializeDeviceInstance</B></A><B> </B>to reverse the initialization operation.</P>

<P>Callers of <B>NdisIMInitializeDeviceInstanceEx</B> run at IRQL = PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="JavaScript:hhobj_2.Click()">ANSI_STRING</A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A>, <A HREF="103ndisx_8nhu.htm"><B>NdisIMCancelInitializeDeviceInstance</B></A>, <A HREF="103ndisx_1q7m.htm"><B>NdisIMDeInitializeDeviceInstance</B></A>, <A HREF="103ndisx_6y5u.htm"><B>NdisIMGetBindingContext</B></A>, <A HREF="103ndisx_4xrm.htm"><B>NdisIMGetDeviceContext</B></A>, <A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_9ieq.htm"><B>NdisInitializeString</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="JavaScript:hhobj_3.Click()">UNICODE_STRING</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisIMInitializeDeviceInstanceEx"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
