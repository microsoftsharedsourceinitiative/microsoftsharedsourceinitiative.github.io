<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI_RECEIVE_DATAGRAM</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI_RECEIVE_DATAGRAM">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_receive_datagram_nr"></A>TDI_RECEIVE_DATAGRAM</H1>

<P>When a kernel-mode client makes a TDI_RECEIVE_DATAGRAM request, it asks the underlying TDI transport driver to indicate a TSDU, as a datagram, on a specified address. </P>

<H4>IRP</H4>

<P>The transport calls <B>IoGetCurrentIrpStackLocation</B> with the given <I>Irp</I> to get a pointer to its own I/O stack location in the IRP, shown in the following list as <B>IrpSp</B>. The pointer to the IRP is shown in the following list as <B>Irp</B>. IRP members relevant to this request include the following:

<DL>
<DT><B>Irp-&gt;IoStatus.Status</B></DT>

<DD>Specifies the final status of the receive-datagram request. The transport sets this member before it completes the IRP, possibly to one of the following:

<P>STATUS_PENDING<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_INVALID_ADDRESS<BR>
STATUS_BUFFER_OVERFLOW<BR>
STATUS_BUFFER_TOO_SMALL
</DD>

<DT><B>Irp-&gt;IoStatus.Information</B></DT>

<DD>Specifies the number of bytes of received data the transport is returning in the client-supplied buffer. </DD>

<DT><B>IrpSp-&gt;MajorFunction</B></DT>

<DD>Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member if it exports a <B>TdiDispatchInternalDeviceControl</B> routine that handles only TDI_<I>XXX</I> requests. </DD>

<DT><B>IrpSp-&gt;MinorFunction</B></DT>

<DD>Specifies TDI_RECEIVE_DATAGRAM.</DD>

<DT><B>IrpSp-&gt;FileObject</B></DT>

<DD>Pointer to an open file object representing the local-node address. The transport uses the <B>FsContext</B> and, possibly, <B>FsContext2</B> fields to access the state it maintains about this address. </DD>

<DT><B>IrpSp-&gt;Parameters</B></DT>

<DD>Pointer to a TDI_REQUEST_KERNEL_RECEIVEDG structure, defined as follows:

<PRE>struct _TDI_REQUEST_KERNEL_RECEIVEDG {<B> </B>
    ULONG ReceiveLength;<B> </B>
    PTDI_CONNECTION_INFORMATION ReceiveDatagramInformation;<B> </B>
    PTDI_CONNECTION_INFORMATION ReturnInformation;<B> </B>
    ULONG ReceiveFlags;<B> </B>
} TDI_REQUEST_KERNEL_RECEIVEDG, *PTDI_REQUEST_KERNEL_RECEIVEDG;<B> </B></PRE>


<P>The transport uses the members of this structure as follows:


<DL>
<DT><B>ReceiveLength</B></DT>

<DD>Specifies the maximum size in bytes of the client-supplied receive buffer. If this member is zero, the transport can use the full buffer mapped at <B>Irp-&gt;MdlAddress</B>. </DD>

<DT><B>ReceiveDatagramInformation</B></DT>

<DD>Pointer to a TDI_CONNECTION_INFORMATION structure, specifying either the remote address from which the client expects to receive a datagram or zero in the <B>RemoteAddressLength</B> member if a datagram from any remote node is acceptable to this client.</DD>

<DT><B>ReturnInformation</B></DT>

<DD>Pointer to a caller-supplied buffer, formatted as a TDI_CONNECTION_INFORMATION structure, in which the transport returns the remote-node address from which the returned datagram was received.</DD>

<DT><B>ReceiveFlags</B></DT>

<DD>Specifies the type of datagram the client expects as none (zero), one, or a combination (ORed) of the following flags:

<P>TDI_RECEIVE_NORMAL – return normal datagram


<P>TDI_RECEIVE_PEEK – return any available portion of datagram
</DD>
</DL>
</DD>

<DT><B>Irp-&gt;MdlAddress</B></DT>

<DD>Pointer to an MDL, possibly the initial MDL in a chain, mapping a client-supplied buffer in which the transport returns the received datagram. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>Because a datagram is never associated with an endpoint-to-endpoint connection, the transport must return the address of the remote-node client to the receiving client along with each datagram. </P>

<P>TDI transports do not fragment datagrams. Consequently, a client makes a single receive-datagram request for a full datagram, unless it sets the TDI_RECEIVE_PEEK flag. When a TDI transport driver receives a datagram from a remote node, it completes a client's receive-datagram request if both of the following are true:

<UL>
	<LI>The just received datagram has a destination address that matches the local-node address represented by the file object at <B>IrpSp-&gt;FileObject</B>.</LI>

	<LI>The just received datagram has a source address that either matches the value specified in <B>RemoteAddress</B> at <B>IrpSp-&gt;Parameters</B> or <B>RemoteAddressLength</B> is zero and <B>RemoteAddress</B> is NULL. </LI>
</UL>

<P>If the received datagram is too large for the client-supplied buffer mapped at <B>Irp-&gt;MdlAddress</B>, the transport fills this buffer with <B>ReceiveLength</B> bytes and completes the client's receive-datagram IRP. In effect, a client receives a truncated datagram if that client does not provide a large enough buffer with its receive-datagram request. </P>

<P>A local-node client can also receive datagrams by issuing TDI_SET_EVENT_HANDLER requests to register its ClientEventReceiveDatagram and/or ClientEventChainedReceiveDatagram handlers for a particular address. The transport supplies this information to its client by setting the <I>ReceiveDatagramFlags</I> parameter to ClientEvent(Chained)ReceiveDatagram with any of the flags listed in the reference for TDI_RECEIVE, except TDI_RECEIVE_EXPEDITED. In addition, for datagram indications, the <I>ReceiveDatagramFlags</I> can be set with either of the following:

<DL>
<DT>TDI_RECEIVE_BROADCAST</DT>

<DD>The received TSDU was broadcast.</DD>

<DT>TDI_RECEIVE_MULTICAST</DT>

<DD>The received TSDU was multicast.
</DD>
</DL>

<P>A TDI client can receive a broadcast datagram by opening a file object that represents the underlying transport's broadcast address. Any broadcast address has a driver-specific format, which the client can obtain by issuing a TDI_QUERY_INFORMATION request to the underlying transport. A transport does not allow its clients to send datagrams from a broadcast address, and the transport fails any client-issued TDI_ASSOCIATE_ADDRESS requests that specify its broadcast address. </P>

<P><B>TdiBuildReceiveDatagram</B> is the macro a client uses to fill in the IRP.</P>

<H4>See Also</H4>

<P><A HREF="35tdicli_0jci.htm"><B>ClientEventChainedReceiveDatagram</B></A>, <A HREF="35tdicli_82nm.htm"><B>ClientEventReceiveDatagram</B></A>, <A HREF="34bldmac_0aya.htm"><B>TdiBuildReceiveDatagram</B></A>, <A HREF="36tdstrc_9vg2.htm"><B>TDI_CONNECTION_INFORMATION</B></A>, <A HREF="31tddisp_2sfm.htm"><B>TdiDispatchInternalDeviceControl</B></A>, <A HREF="32ioctl_508i.htm"><B>TDI_QUERY_INFORMATION</B></A>, <A HREF="32ioctl_4hde.htm"><B>TDI_SET_EVENT_HANDLER</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI_RECEIVE_DATAGRAM"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
