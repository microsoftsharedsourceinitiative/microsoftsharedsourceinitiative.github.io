<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DriverEntry of NDIS Protocol Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="DriverEntry of NDIS Protocol Drivers">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_installation_overview_dg">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_writing_a_driverentry_routine_kg">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_driverentry_of_ndis_protocol_drivers_nr"></A>DriverEntry of NDIS Protocol Drivers</H1>

<P>The <B>DriverEntry</B> function is required and is the first function that the system calls in any NDIS protocol or intermediate driver, including connection-oriented clients and stand-alone call managers. </P>

<PRE class=syntax><B>NTSTATUS</B>
  <B>DriverEntry(</B>
    <B>IN PDRIVER_OBJECT</B>  <I>DriverObject</I><B>,</B>
    <B>IN PUNICODE_STRING</B>  <I>RegistryPath</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>DriverObject</I></DT>

<DD>Pointer to the driver object representing this driver. </DD>

<DT><I>RegistryPath</I></DT>

<DD>Pointer to a driver-specific registry path specification set up by the driver's installation script (<I>.inf</I>). For more information about driver installation scripts, see <A HREF="JavaScript:hhobj_1.Click()">Device Installation Overview</A>. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>DriverEntry</B> returns STATUS_SUCCESS, or its equivalent NDIS_STATUS_SUCCESS, if the driver registered as an NDIS protocol successfully. If <B>DriverEntry</B> fails initialization by propagating an error status returned by an <B>Ndis</B><I>Xxx</I> or by a kernel-mode support routine, the driver will not remain loaded. <B>DriverEntry</B> must execute synchronously; that is, it cannot return STATUS_PENDING or its equivalent NDIS_STATUS_PENDING.  </P>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>The <B>DriverEntry</B> function of every type of NDIS protocol driver must call <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A> to register the driver's Protocol<I>Xxx</I> entry points with the NDIS library. All types of NDIS protocols should register fully functional <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> and <A HREF="104tdlow_1l6a.htm"><I>ProtocolUnbindAdapter</I></A> functions to support plug and play. In general, a DriverEntry function should call <B>NdisRegisterProtocol</B> just before it returns control with STATUS_SUCCESS or NDIS_STATUS_SUCCESS. </P>

<P>Any protocol driver that exports a set of standard kernel-mode driver routines in addition to its NDIS-defined Protocol<I>Xxx</I> functions must set the entry points for those driver routines in the given driver object passed in to its <B>DriverEntry</B> function. For more information about the functionality of such a protocol’s <B>DriverEntry</B> function, see <A HREF="JavaScript:hhobj_2.Click()">Writing a DriverEntry Routine</A>. For more information about the <B>TdiDispatch</B><I>Xxx</I> routines exported by TDI transport protocols, see <A HREF="31tddisp_13ea.htm">TDI Transport Driver Dispatch Routines</A>. </P>

<P>If an attempt to allocate resources that the driver needs to carry out network I/O operations fails, <B>DriverEntry</B> should release all resources it already allocated before it returns control with a status other than STATUS_SUCCESS or NDIS_STATUS_SUCCESS. </P>

<P>After calling <B>NdisRegisterProtocol</B>, connection-oriented client protocols subsequently call <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A> from their <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions to register their <B>ProtocolCl</B><I>Xxx</I> functions with NDIS. Similarly, connection-oriented call managers and MCM drivers subsequently call <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A> from their <I>ProtocolBindAdapter</I> functions or <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A> from their <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> functions, respectively, to register their <B>ProtocolCm</B><I>Xxx</I> functions. </P>

<P>An NDIS intermediate driver, such as one that translates an underlying NIC driver’s native frame format into another format for higher level protocols, simply passes the input parameters to its <B>DriverEntry</B> function, uninterpreted, to certain <B>Ndis</B><I>Xxx</I> functions. </P>

<P>Usually, the <B>DriverEntry</B> function of such an NDIS intermediate driver calls the following <B>Ndis</B><I>Xxx</I> functions in the following order:

<OL>
	<LI><A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A> to notify the NDIS library that the driver is about to register as a miniport driver </LI>

	<LI><A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A> to register the driver’s Miniport<I>Xxx </I>functions</LI>

	<LI><B>NdisRegisterProtocol</B> to register the driver’s Protocol<I>Xxx</I> functions
<P>Such an intermediate driver must register P<I>rotocolBindAdapter</I> and <I>ProtocolUnbindAdapter</I> functions with the NDIS library when it calls <B>NdisRegisterProtocol</B>. Its <I>ProtocolBindAdapter</I> function will be called later to complete driver initialization and to bind the intermediate driver to an underlying miniport driver. 
</LI>
</OL>

<P>In effect, the <B>DriverEntry</B> function of an NDIS intermediate driver can ignore the <I>RegistryPath</I> pointer after passing it to <B>NdisMInitializeWrapper</B>. Such a driver also can ignore the <I>DriverObject</I> pointer after passing it to <B>NdisIMRegisterLayeredMiniport</B>. However, the driver should save the <I>DriverHandle</I> returned by <B>NdisIMRegisterLayeredMiniport</B> and the <I>NdisProtocolHandle</I> returned by <B>NdisRegisterProtocol</B> for subsequent calls to <B>Ndis</B><I>Xxx</I> functions. The intermediate driver's <I>ProtocolBindAdapter</I> function binds the driver to each underlying NIC driver before its <I>MiniportInitialize</I> function is called to initialize the intermediate driver's virtual NIC, and still higher level protocols subsequently bind themselves to the virtual NIC it creates. This strategy allows an NDIS intermediate driver to allocate resources at the creation of the virtual NIC according to the features of the underlying NIC driver to which it is bound. </P>

<P><B>DriverEntry</B> runs at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>, <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>, <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>, <A HREF="103ndisx_6yr6.htm"><B>NdisOpenProtocolConfiguration</B></A>, <A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="104tdlow_1l6a.htm"><I>ProtocolUnbindAdapter</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: DriverEntry%20of%20NDIS%20Protocol%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
