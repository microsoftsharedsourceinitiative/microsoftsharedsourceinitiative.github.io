<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisIMGetDeviceContext</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisIMGetDeviceContext">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisimgetdevicecontext_nr"></A>NdisIMGetDeviceContext</H1>

<P><B>NdisIMGetDeviceContext</B> allows an NDIS intermediate driver's <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function to access the device context area allocated by its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function. </P>

<PRE class=syntax><B>NDIS_HANDLE
  NdisIMGetDeviceContext(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle input to <I>MiniportInitialize</I>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisIMGetDeviceContext</B> returns access to the device context area for the virtual NIC identified by <I>MiniportAdapterHandle</I>, or it returns NULL if the driver's <I>ProtocolBindAdapter</I> function did not allocate such a device context area.</P>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>An NDIS intermediate driver's <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function calls <B>NdisIMGetDeviceContext</B> to access the device context area for the virtual NIC it is initializing. Usually, the memory for such an area is provided by the intermediate driver's <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function, which calls <A HREF="103ndisx_0jn6.htm"><B>NdisIMInitializeDeviceInstanceEx</B></A> with a pointer to this area, thereby causing the driver's <I>MiniportInitialize</I> function to be called. However, an intermediate driver is not required to have such a context area.</P>

<P>On return from <B>NdisIMGetDeviceContext</B>, <I>MiniportInitialize</I> sets up the driver-defined state for the virtual NIC with whatever information the intermediate driver writer intends to be useful to still higher level protocols that bind themselves subsequently to its virtual NIC. </P>

<P>Still higher level NDIS protocols bound to the same virtual NIC subsequently can access this device context area by calling <A HREF="103ndisx_6y5u.htm"><B>NdisIMGetBindingContext</B></A> from their <I>ProtocolBindAdapter</I> functions.</P>

<P>Callers of <B>NdisIMGetDeviceContext</B> can be running at IRQL &lt;= DISPATCH_LEVEL. Typically, NDIS calls <I>MiniportInitialize</I> functions at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_6y5u.htm"><B>NdisIMGetBindingContext</B></A>, <A HREF="103ndisx_0jn6.htm"><B>NdisIMInitializeDeviceInstanceEx</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisIMGetDeviceContext"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
