<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportSend</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportSend">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportsend_nr"></A>MiniportSend</H1>

<P>The <I>MiniportSend</I> function is required for drivers that do not have a <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, or <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> function. <I>MiniportSend</I> transfers a protocol-supplied packet over the network.</P>

<PRE class=syntax><B>NDIS_STATUS</B> <B>
</B>  <B>MiniportSend(
    IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I><B>,</B>
    <B>IN</B> <B>PNDIS_PACKET</B>  <I>Packet</I><B>,</B>
    <B>IN</B> <B>UINT</B>  <I>Flags
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. </DD>

<DT><I>Packet</I></DT>

<DD>Pointer to a packet descriptor specifying the data to be transmitted.</DD>

<DT><I>Flags</I></DT>

<DD>Specifies the packet flags, if any, set by the protocol.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>MiniportSend</I> can return any of the following: 

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The driver (or its NIC) has accepted the packet data for transmission, so <I>MiniportSend</I> is returning the packet, which NDIS will return to the protocol. </DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>The driver will complete the packet asynchronously with a call to <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The driver (or NIC) currently has insufficient resources available to process the given packet so NDIS should queue the send packet for a resubmission when the driver next calls <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A> or <B>NdisMSendComplete</B>.  

<P>If a deserialized miniport driver returns NDIS_STATUS_RESOURCES from its <I>MiniportSend</I> function, NDIS returns the given packet back to the protocol with an error status.
</DD>

<DT>NDIS_STATUS_NO_CABLE</DT>

<DD>The NIC has failed the send operation because the network cable is disconnected from the NIC.</DD>

<DT>NDIS_STATUS_RESET_IN_PROGRESS</DT>

<DD>The NIC has failed the send operation because the NIC is resetting.</DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>The given packet was invalid or unacceptable to the NIC. <I>MiniportSend</I> should return NDIS_STATUS_FAILURE only if there is no NDIS_STATUS_<I>XXX</I> value that adequately describes the failure. Preferably, <I>MiniportSend</I> should return an NDIS_STATUS_<I>XXX</I> value that indicates the specific cause of the failure.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>If a driver registers both <I>MiniportSend</I> and <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> functions when it initializes, its <I>MiniportSend</I> function is never called by NDIS.</P>

<P><I>MiniportSend</I> can safely access the packet and all buffer descriptors chained to the packet until the given packet is complete. If <I>MiniportSend</I> returns a status other than NDIS_STATUS_PENDING or, from a serialized driver NDIS_STATUS_RESOURCES, the request is considered complete and ownership of the packet descriptor and all memory associated with the packet reverts to the allocating protocol. </P>

<P>If the <I>MiniportSend</I> function of a deserialized driver returns NDIS_STATUS_RESOURCES, the request is also considered complete. Such a deserialized driver's <I>MiniportSend</I> function should queue the given packet internally if the driver currently has insufficient resources to transmit it and the packet is valid. In these circumstances, <I>MiniportSend</I> should return NDIS_STATUS_PENDING for the packet it queued and call <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A> subsequently when it has transmitted the packet. A deserialized miniport driver cannot call <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A>. </P>

<P>If <I>MiniportSend</I> returns NDIS_STATUS_PENDING, the driver subsequently must signal completion of the request by calling <B>NdisMSendComplete</B>. When <I>MiniportSend</I> returns NDIS_STATUS_RESOURCES, the NDIS library reflects this status to the protocol as NDIS_STATUS_PENDING if the driver is serialized. </P>

<P>When a serialized driver returns a packet with NDIS_STATUS_RESOURCES, the next packet submitted to its <I>MiniportSend</I> function is the same packet it just returned to NDIS. Consequently, <I>MiniportSend</I> can optimize by retaining information about such a returned packet if the driver currently has sufficient resources to store the information. NDIS assumes <I>MiniportSend</I> is ready to accept that packet as soon as the serialized driver calls <B>NdisMSendResourcesAvailable</B> or <B>NdisMSendComplete</B>, whichever occurs first. </P>

<P>Each protocol driver must pass packet descriptors to <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> that are fully set up to be passed by the underlying driver’s <I>MiniportSend</I> function to its NIC. That is, the protocol is responsible for determining what is required, based on the medium type selected by the miniport driver to which the protocol bound itself. However, a protocol can supply net packets mapped by the chained buffer descriptors that are shorter than the minimum for the selected medium, which <I>MiniportSend</I> must pad if its medium imposes a minimum-length requirement on transmits.</P>

<P>Any NDIS intermediate driver that layers itself between a higher-level protocol and an underlying NIC driver has the same responsibility as any protocol driver to set up packets according to the requirements of the underlying miniport driver and its selected medium. Such an intermediate driver must repackage each incoming send packet in a fresh packet descriptor that was allocated by the intermediate driver. </P>

<P><I>MiniportSend</I> can use only the eight-byte area at <B>MiniportReserved</B> within the <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A> structure for its own purposes. Consequently, an NDIS intermediate driver that forwards send requests to an underlying NIC driver must repackage the packets input to its <I>MiniportSend</I> function in fresh packet descriptors, which the intermediate driver allocates from packet pool, so that the underlying miniport driver has a <B>MiniportReserved</B> area it can use. </P>

<P><I>MiniportSend</I> can call <A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A> to extract information, such as the number of buffer descriptors chained to the packet and the total size in bytes of the requested transfer. It can call <A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A>, <A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A>, <A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A>, <A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A>, or <A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A> to extract information about individual buffers containing the data to be transmitted. </P>

<P>The <I>Flags</I> parameter can provide information about a send that is not contained in the packet data itself. Currently, there are no system-defined flags, but a pair of closely coupled protocol and miniport drivers can pass information in this parameter, which <I>MiniportSend</I> can retrieve with <A HREF="103ndisx_67si.htm"><B>NdisGetPacketFlags</B></A>. However, such a pair of drivers can communicate more information, such as timestamps and packet priority, in the NDIS_PACKET_OOB_DATA block associated with each packet descriptor. </P>

<P>If the underlying driver’s <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function set the NDIS_MAC_OPTION_NO_LOOPBACK flag when the NDIS library queried the OID_GEN_MAC_OPTIONS, the miniport driver must not attempt to loop back any packets. The NDIS library provides software loopback support for such a driver. </P>

<P><I>MiniportSend</I> can be preempted by an interrupt.</P>

<P>The <I>MiniportSend</I> function of a deserialized miniport driver can be called at any IRQL &lt;= DISPATCH_LEVEL. The <I>MiniportSend</I> function of a deserialized driver is responsible for synchronizing access to its internal queues of packet descriptors with the driver's other <I>MiniportXxx</I> functions that also access the same queues. </P>

<P><I>The MiniportSend</I> function of a serialized miniport driver runs at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A>, <A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A>, <A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A>, <A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A>, <A HREF="103ndisx_2j5e.htm"><B>NdisGetNextBuffer</B></A>, <A HREF="103ndisx_67si.htm"><B>NdisGetPacketFlags</B></A>, <A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A>, <A HREF="103ndisx_0iuq.htm">NDIS_GET_PACKET_TIME_TO_SEND</A>, <A HREF="103ndisx_87le.htm"><B>NdisMoveMemory</B></A>, <A HREF="103ndisx_97qq.htm"><B>NdisMoveToMappedMemory</B></A>, <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A>, <A HREF="103ndisx_38mq.htm"><B>NdisMSetupDmaTransfer</B></A>, <A HREF="103ndisx_3a42.htm"><B>NdisMStartBufferPhysicalMapping</B></A>, <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A>, <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A>, <A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A>, <A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A>, <A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A>, <A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportSend"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
