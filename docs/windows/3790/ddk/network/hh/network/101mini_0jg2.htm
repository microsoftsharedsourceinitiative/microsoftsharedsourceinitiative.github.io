<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportDisableInterrupt</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportDisableInterrupt">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportdisableinterrupt_nr"></A>MiniportDisableInterrupt</H1>

<P>The <I>MiniportDisableInterrupt</I> function is optional, supplied by drivers of NICs that support dynamic enabling and disabling of interrupts but do not share an IRQ.</P>

<PRE class=syntax><B>VOID</B> <B>
</B>  <B>MiniportDisableInterrupt(</B>
    <B>IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P><I>MiniportDisableInterrupt</I> typically disables interrupts by writing a mask to the NIC. If a driver does not have this function, typically its <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> disables interrupts on the NIC.</P>

<P>If its NIC does not support dynamic enabling and disabling of interrupts or if it shares an IRQ, the NIC driver must register a <I>MiniportISR</I> function and set <I>RequestIsr</I> to TRUE when it calls <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>. Such a driver’s <I>MiniportISR</I> function must acknowledge each interrupt generated by the NIC and save any necessary interrupt information for the driver’s <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A> function.</P>

<P><I>MiniportDisableInterrupt</I> runs at DIRQL, in particular at the DIRQL assigned when the NIC driver’s <I>MiniportInitialize</I> function called <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>. Therefore, <I>MiniportDisableInterrupt</I> can call only a subset of the NDIS library functions, such as the <B>NdisRaw</B><I>Xxx</I> functions that are safe to call at any IRQL. </P>

<P>If <I>MiniportDisableInterrupt</I> shares resources, such as NIC registers, with another <I>MiniportXxx</I> that runs at a lower IRQL, that <I>MiniportXxx</I> must call <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A> so the driver’s <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A> function will access those shared resources in a synchronized and multiprocessor-safe manner. Otherwise, while it is accessing the shared resources, that <I>MiniportXxx</I> function can be preempted by <I>MiniportDisableInterrupt</I>, possibly undoing the work just done by <I>MiniportXxx</I>. </P>

<H4>See Also</H4>

<P><A HREF="101mini_222a.htm"><I>MiniportEnableInterrupt</I></A>, <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A>, <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportDisableInterrupt"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
