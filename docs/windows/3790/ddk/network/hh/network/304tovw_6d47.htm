<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI Client Callbacks</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI Client Callbacks">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_client_callbacks_ng"></A>TDI Client Callbacks</H1>

<P>Most TDI clients' routines are highly variable and environment-dependent. However, TDI defines a set of callback routines that clients can register with the underlying TDI transport to receive notifications when network events of interest occur. A kernel-mode TDI client can register any of these ClientEvent<I>Xxx </I>routines if the TDI driver is to notify it of a particular type of network event occurrence. The client can even use such a registered ClientEvent<I>Xxx</I> handler as an alternative to issuing certain TDI_<I>XXX</I> IOCTL requests to the driver. </P>

<P>Like the TdiDispatch<I>Xxx</I> routines described already, the client-supplied event handlers can have any names the client writer chooses. Each ClientEvent<I>Xxx</I> mentioned here is registered as an entry point passed in a client-supplied IRP submitted to the TdiDispatchInternalDeviceControl routine. </P>

<P>A TDI client can have one or more of the callbacks listed next, registered at the beginning of network operations on an open transport address with the TDI transport driver by issuing successive <A HREF="32ioctl_4hde.htm">TDI_SET_EVENT_HANDLER</A> requests, set up with <A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A>:

<DL>
<DT><A HREF="35tdicli_56r6.htm"><B>ClientEventConnect</B></A> </DT>

<DD>Notifies the client of a connection offer from a remote-node peer process.</DD>

<DT><A HREF="35tdicli_2rg2.htm"><B>ClientEventDisconnect</B></A> </DT>

<DD>Notifies the local-node client that its remote-node peer is terminating the endpoint-to-endpoint connection between them.</DD>

<DT><A HREF="35tdicli_98tu.htm"><B>ClientEventError</B></A> and/or <A HREF="35tdicli_0quq.htm"><B>ClientEventErrorEx</B></A> </DT>

<DD>Notifies the client of an error condition in its underlying transport driver, in one of the lower protocol layers of the transport stack, or in a still lower NDIS driver that has made subsequent I/O on the client's open transport address unreliable or even impossible. </DD>

<DT><A HREF="35tdicli_7yeq.htm"><B>ClientEventReceive</B></A> </DT>

<DD>Notifies the client that its transport has received normal data from the remote-node peer on an endpoint-to-endpoint connection and makes all or part of the received data available to be copied by the client.</DD>

<DT><A HREF="35tdicli_4qnm.htm"><B>ClientEventChainedReceive</B></A> </DT>

<DD>Notifies the client that its transport has received a normal TSDU from the remote-node peer on an endpoint-to-endpoint connection and makes the full TSDU available for consumption by the client.</DD>

<DT><A HREF="35tdicli_7jea.htm"><B>ClientEventReceiveExpedited</B></A> </DT>

<DD>Notifies the client that its transport has received expedited data from the remote-node peer on an endpoint-to-endpoint connection and makes all or part of the received data available to be copied by the client.</DD>

<DT><A HREF="35tdicli_57n6.htm"><B>ClientEventChainedReceiveExpedited</B></A> </DT>

<DD>Notifies the client that its transport has received an expedited TSDU from the remote-node peer on an endpoint-to-endpoint connection and makes the full TSDU available for consumption by the client.</DD>

<DT><A HREF="35tdicli_82nm.htm"><B>ClientEventReceiveDatagram</B></A> </DT>

<DD>Notifies the client that the TDI driver has received a datagram directed to a transport address that the client has opened.</DD>

<DT><A HREF="35tdicli_0jci.htm"><B>ClientEventChainedReceiveDatagram</B></A> </DT>

<DD>Notifies the client that the TDI driver has received a datagram directed to a transport address that the client has opened and makes the full TSDU available for consumption by the client.</DD>

<DT><A HREF="35tdicli_1wc2.htm"><B>ClientEventSendPossible</B></A> </DT>

<DD>Notifies the client that the transport, which buffers send data internally, again has buffer space available for sends.
</DD>
</DL>

<P>TDI clients for Windows&nbsp;2000 and later versions can also register a set of ClientPnP<I>Xxx</I> callbacks with TDI to receive notifications of dynamic PnP binding-change, net-address-change, and power-state-change events from PnP-aware TDI transports. Like the ClientEvent<I>Xxx</I> handlers, these client-supplied PnP event handlers can have any names the client writer chooses. </P>

<P>Such a TDI client for Windows&nbsp;2000 and later has the set of callbacks listed next, which are registered with a call to <A HREF="33tdifun_5boy.htm"><B>TdiRegisterPnPHandlers</B></A> when the client initializes itself:

<DL>
<DT><A HREF="35tdicli_3k36.htm"><B>ClientPnPBindingChange</B></A> </DT>

<DD>During system startup, TDI calls this routine to notify the client of all available transport-created named device objects that represent transport-to-NIC bindings, again when each such PnP-aware TDI transport indicates its readiness to carry out network data transfers on its bindings, and again when all possible TDI transport-to-NIC bindings have been established. 

<P>During run time, TDI calls this client routine whenever a PnP-aware transport registers another device object to represent a newly established transport-to-NIC binding or deregisters an existing device object while tearing down a binding. TDI also calls this client routine if the end user makes binding-list-order changes in the network connections folder. 
</DD>

<DT><A HREF="35tdicli_8d4i.htm"><B>ClientPnPAddNetAddress</B></A> </DT>

<DD>During system startup, TDI calls this routine to notify the client of all network addresses currently registered with TDI by PnP-aware transports on their established bindings. Subsequently, TDI calls this client whenever a PnP-aware transport registers a new network address (usually for a newly established connection to a remote node) on an established binding. </DD>

<DT><A HREF="35tdicli_33hu.htm"><B>ClientPnPDelNetAddress</B></A> </DT>

<DD>TDI calls this routine to notify the client whenever a PnP-aware TDI transport deregisters an existing network address (usually when breaking a connection to a remote node) on an established binding. </DD>

<DT><A HREF="35tdicli_4h9u.htm"><B>ClientPnPPowerChange</B></A> </DT>

<DD>TDI calls this routine to notify the client of proposed NIC removals and of proposed system-power-state changes that could affect that client's ability to transfer data over the network on a particular binding. 
</DD>
</DL>

<P>A client that registers such a set of ClientPnP<I>Xxx</I> handlers with TDI typically maintains dynamic state, usually as one or more internal lists, about all valid network addresses on the bindings of all TDI transports it uses to communicate over the network. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI%20Client%20Callbacks"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
