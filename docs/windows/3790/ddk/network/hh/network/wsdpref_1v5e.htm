<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSPMemoryRegistrationCacheCallback</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSPMemoryRegistrationCacheCallback">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_mmsecurevirtualmemory_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_mmunsecurevirtualmemory_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wspmemoryregistrationcachecallback_nr"></A>WSPMemoryRegistrationCacheCallback</H1>

<P><B>WSPMemoryRegistrationCacheCallback</B> releases the SAN service provider's ownership of an application's buffer and the lock between the buffer and physical memory, removes the buffer from the SAN service provider's cache, and removes the buffer registration from the SAN NIC. </P>

<PRE class=syntax><B>int
  WSPMemoryRegistrationCacheCallback(</B>
<B>    IN PVOID  </B><I>lpvAddress</I><B>,</B>
<B>    IN SIZE_T</B>  <I>Size</I><B>,</B>
<I>    </I><B>OUT</B> <B>LPINT</B>  <I>lpErrno</I>
<I>    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>lpvAddress</I></DT>

<DD>Pointer to a memory block that contains the starting address of a memory buffer, of which the SAN service provider previously secured ownership. An application that is releasing this buffer triggers the Windows Sockets switch to pass the pointer to this buffer in the <B>WSPMemoryRegistrationCacheCallback</B> call. </DD>

<DT><I>Size</I></DT>

<DD>Size, in bytes, of the secured memory buffer at <I>lpvAddress</I>, which an application is currently releasing. </DD>

<DT><I>lpErrno</I></DT>

<DD>Pointer to a variable that receives the error code.
</DD>
</DL>

<H4>Return Value</H4>

<P>Returns zero if successful; otherwise, returns SOCKET_ERROR and, at <I>lpErrno</I>, one of the following error codes:

<DL>
<DT>WSAEFAULT</DT>

<DD>SAN service provider previously cached the memory buffer, but is unable to either release the buffer from physical memory or remove the registration of the buffer with the SAN NIC.</DD>

<DT>WSAEINVAL</DT>

<DD>SAN service provider was previously unable to cache the memory buffer.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>Ws2san.h</I>. Include <I>Ws2san.h</I>. Requires Windows Sockets version&nbsp;2.2.</P>

<H4>Comments</H4>

<P>A SAN service provider can cache memory buffer registrations without actually removing the buffer registration from the SAN NIC, to improve the performance of applications that reuse buffers for data transfers. If a SAN service provider caches memory buffer registrations, it must provide a <B>WSPMemoryRegistrationCacheCallback</B> function. For more information about caching buffers, see <A HREF="wsdp_25ev.htm">Caching Registered Memory</A>. </P>

<P>A SAN service provider caches memory buffer registrations based on virtual addresses. When the SAN service provider caches a buffer’s registration, the SAN service provider's proxy driver must secure possession of that registered buffer, so the operating system notifies the switch if the buffer is released. Before the virtual-to-physical mappings of the registered buffer subsequently change, the switch calls each SAN service provider's <B>WSPMemoryRegistrationCacheCallback</B> function. Each SAN service provider's proxy driver, in turn, must release ownership of the buffer. In addition, each SAN service provider must remove the buffer from the cache and must remove the buffer registration from the SAN NIC. For more information about how a proxy driver secures and releases buffers, see <A HREF="wsdp_4faf.htm">Securing and Releasing Ownership of Virtual Addresses</A>. </P>

<P>Because an application can use the same buffer for data transfers over different sockets and at different times, a SAN service provider can register that buffer with multiple sockets. When the switch calls the SAN service provider's <B>WSPMemoryRegistrationCacheCallback</B> function, the SAN service provider must take this fact into account and remove the buffer registration from each SAN NIC associated with each socket.</P>

<H4>See Also</H4>

<P><A HREF="JavaScript:hhobj_1.Click()"><B>MmSecureVirtualMemory</B></A>, <A HREF="JavaScript:hhobj_2.Click()"><B>MmUnsecureVirtualMemory</B></A>, <A HREF="wsdpref_4b1u.htm"><B>WSPDeregisterMemory</B></A>, <A HREF="wsdpref_76gi.htm"><B>WSPDeregisterRdmaMemory</B></A>, <A HREF="wsdpref_62gi.htm"><B>WSPRegisterMemory</B></A> , <A HREF="wsdpref_0sj6.htm"><B>WSPRegisterRdmaMemory</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSPMemoryRegistrationCacheCallback"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
