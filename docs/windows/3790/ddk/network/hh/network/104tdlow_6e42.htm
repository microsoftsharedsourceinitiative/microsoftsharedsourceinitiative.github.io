<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolStatus</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolStatus">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolstatus_nr"></A>ProtocolStatus</H1>

<P>The <I>ProtocolStatus</I> function is a required driver function that handles status-change notifications raised by an underlying connectionless NIC driver or by NDIS. </P>

<P>An exclusively connection-oriented protocol must have a fully functional <A HREF="104tdlow_3khe.htm"><I>ProtocolCoStatus</I></A> function, rather than a <I>ProtocolStatus</I> function.</P>

<PRE class=syntax><B>VOID
</B>  <B>ProtocolStatus(</B>
    <B>IN NDIS_HANDLE</B>  <I>ProtocolBindingContext</I><B>,
</B>    <B>IN NDIS_STATUS</B>  <I>GeneralStatus</I><B>,
</B>    <B>IN PVOID</B>  <I>StatusBuffer</I><B>,
</B>    <B>IN UINT</B>  <I>StatusBufferSize</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>ProtocolBindingContext</I></DT>

<DD>Specifies the handle to a protocol-allocated context area in which the protocol driver maintains per-binding run-time state. The driver supplied this handle when it called <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>. </DD>

<DT><I>GeneralStatus</I></DT>

<DD>Indicates the general status code, either raised by NDIS or propagated from the underlying driver’s call to <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>. </DD>

<DT><I>StatusBuffer</I></DT>

<DD>Pointer to a buffer containing medium-specific data that depends on the value of <I>GeneralStatus</I>. 

<P>For example, if the <I>GeneralStatus</I> argument is NDIS_STATUS_RING_STATUS, this parameter points to a ULONG-sized bitmask and <I>StatusBufferSize</I> is four. As another example, if <I>GeneralStatus</I> is NDIS_STATUS_WAN_LINE_UP, this parameter points to an <A HREF="105nstru_2j1u.htm">NDIS_WAN_LINE_UP</A> structure and <I>StatusBufferSize</I> is <B>sizeof(</B>NDIS_STATUS_WAN_LINE_UP<B>)</B>. 


<P>For some NDIS_STATUS_<I>XXX</I> values, this pointer is NULL and <I>StatusBufferSize</I> is set to zero. 
</DD>

<DT><I>StatusBufferSize</I></DT>

<DD>Specifies the number of bytes at <I>StatusBuffer</I>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A call to <I>ProtocolStatus</I> notifies the protocol about changes in status of the underlying NIC or its driver. </P>

<P><I>ProtocolStatus</I> interprets two basic pieces of information: 

<OL>
	<LI>A general status code, defined by NDIS as an NDIS_STATUS_<I>XXX</I> value, indicating a change on the NIC or in the underlying driver 
<P>If NDIS has called the underlying driver’s <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> function in an attempt to restore the NIC to an operational state, NDIS can substitute NDIS_STATUS_RESET_START for the <I>GeneralStatus</I> indicated in the miniport driver’s call to <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>. 
</LI>

	<LI>Depending on the status at <I>GeneralStatus</I>, additional information about the specific reason for the change in status, which can be medium-specific 
<P>For example, ring-insert failures are specific to Token Ring (802.5) networks and do not apply for Ethernet (802.3) networks. 
</LI>
</OL>

<P>NDIS notifies all bound protocols when an underlying driver is resetting its NIC by calling their <I>ProtocolStatus</I> functions, first with NDIS_STATUS_RESET_START and later, when the reset operation is done, with NDIS_STATUS_RESET_END. After each such call to a <I>ProtocolStatus</I> function, NDIS also calls the driver’s <A HREF="104tdlow_3lrm.htm"><I>ProtocolStatusComplete</I></A> function. </P>

<P>Since NDIS will not accept protocol-initiated sends and requests to a miniport driver while a reset is in progress, the NDIS_STATUS_RESET_START notification warns bound protocols to hold off on their calls to <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, and <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> on the binding designated by the respective <I>ProtocolBindingContext</I> given to their <I>ProtocolStatus</I> functions until they receive the corresponding NDIS_STATUS_RESET_END notification.</P>

<P>If the protocol itself initiated the reset operation with a call to <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A>, its <I>ProtocolStatus</I> function receives the NDIS_STATUS_RESET_START and NDIS_STATUS_RESET_END notifications like any other protocol bound to the same underlying driver. However, if <B>NdisReset</B> returns NDIS_STATUS_PENDING, only the <I>ProtocolStatusComplete</I> function of the driver that initiated the reset operation is called. </P>

<P>Consequently, every protocol’s <I>ProtocolStatus</I> function should take whatever action is required to prevent that protocol from submitting sends and requests as soon as <I>ProtocolStatus</I> receives the NDIS_STATUS_RESET_START notification and should reenable subsequent sends and requests when <I>ProtocolStatus</I> receives the NDIS_STATUS_RESET_END notification. Usually, <I>ProtocolStatus</I> simply sets and clears a ResetInProgress flag in the <I>ProtocolBindingContext</I> area that other driver functions check before they initiate sends or requests on the binding. </P>

<P>As another example, the <I>ProtocolStatus</I> function of any protocol bound above NDISWAN receives a line-up notification whenever the underlying WAN miniport driver is establishing a new link. After such a protocol has traded link-specific context handles with NDISWAN, its <I>ProtocolStatus</I> function can receive additional link-specific line-up, line-down, and fragment indications, which the protocol can use to optimize throughput and/or performance on the link. </P>

<P>When the underlying NIC driver signals a status change, it does not change associated event counters and thresholds. </P>

<P><I>ProtocolStatus</I> runs at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A>, <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>, <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="105nstru_2j1u.htm">NDIS_WAN_LINE_UP</A>, <A HREF="104tdlow_3lrm.htm"><I>ProtocolStatusComplete</I></A>, <A HREF="104tdlow_3khe.htm"><I>ProtocolCoStatus</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolStatus"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
