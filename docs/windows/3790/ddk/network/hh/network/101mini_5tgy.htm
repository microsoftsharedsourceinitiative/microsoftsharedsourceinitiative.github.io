<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportPnPEventNotify</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportPnPEventNotify">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportpnpeventnotify_nr"></A>MiniportPnPEventNotify</H1>

<P>The <I>MiniportPnPEventNotify</I> function handles the notification of Plug and Play (PnP) events.</P>

<PRE class=syntax><B>VOID
  MiniportPnPEventNotify(
    IN NDIS_HANDLE  </B><I>MiniportAdapterContext,<B>
    </B></I><B>IN NDIS_DEVICE_PNP_EVENT  </B><I>PnPEvent,
    </I><B>IN PVOID  </B><I>InformationBuffer,
    </I><B>IN ULONG  </B><I>InformationBufferLength,</I><B>
<I>    </I>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport-allocated context area in which the miniport driver maintains per-NIC state, set up by <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>PnPEvent</I></DT>

<DD>An event code that describes the Plug and Play event as one of the following: 

<DL>
<DT><B>NdisDevicePnPEventSurpriseRemoved</B></DT>

<DD>Indicates that the specified adapter has been unexpectedly removed from the system.</DD>

<DT><B>NdisDevicePnPEventPowerProfileChanged</B></DT>

<DD>Indicates that the power profile of the host system has changed.</DD>
</DL>
</DD>

<DT><I>InformationBuffer</I></DT>

<DD>When <I>PnPEvent</I> is set to <B>NdisDevicePnPEventPowerProfileChanged</B>, <I>InformationBuffer</I> points to a ULONG variable that is set to either of the following values:

<DL>
<DT><B>NdisPowerProfileBattery</B></DT>

<DD>Specifies that the host system is running on battery power.</DD>

<DT><B>NdisPowerProfileAcOnline</B></DT>

<DD>Specifies that the host system is running on AC power.</DD>
</DL>


<P>When <I>PnPEvent</I> is set to <B>NdisDevicePnPEventSurpriseRemoved</B>, <I>InformationBuffer</I> is NULL.
</DD>

<DT><I>InformationBufferLength</I></DT>

<DD>Size, in bytes, of the buffer at <I>InformationBuffer</I>. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>All NDIS 5.1 miniport drivers <I>must</I> export a <I>MiniportPnPEventNotify</I> function. Miniport drivers that have a WDM lower edge <I>should</I> export a <I>MiniportPnPEventNotify</I> function. </P>

<P>After initializing a miniport driver or after a miniport driver receives an OID_PNP_SET_POWER notification that specifies a device power state of <B>NdisDeviceStateD0</B> (the powered-on state), NDIS calls the miniport’s <I>MiniportPnPEventNotify</I> function with <I>PnPEvent</I> set to<B> NdisDevicePnPEventPowerProfileChanged</B>. <I>InformationBuffer</I>, in this case, points to a ULONG variable, the value of which indicates whether the system is running on battery power (<B>NdisPowerProfileBattery</B>) or AC power (<B>NdisPowerProfileAcOnline)</B>. A miniport can use this information to adjust the power consumption of its NIC. For example, the miniport for a wireless LAN device could reduce power consumption if the system is running on battery power or increase power consumption if the system is running on AC power.</P>

<P>An NDIS miniport driver with a WDM lower edge should export a <I>MiniportPnPEventNotify</I> function so that it can be notified when its NIC is removed without prior notification through the user interface. If such a miniport driver does not export a <I>MiniportPnPEventNotify</I> function, any pending IRPs that the miniport driver sent to the underlying bus driver cannot be completed after the surprise removal of the device.</P>

<P>When a miniport driver receives notification of a surprise removal, it should note internally that the device has been removed and cancel any pending IRPs that it sent down to the underlying bus driver. After calling the <I>MiniportPnPEventNotify</I> function to indicate the surprise removal, NDIS calls the miniport’s <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function. If the miniport driver receives any requests to send packets or query or set OIDs before its <I>MiniportHalt</I> function is called, it should immediately complete such requests with a status value of NDIS_STATUS_NOT_ACCEPTED.</P>

<P>System support for <I>MiniportPnPEventNotify</I> is available in Windows&nbsp;XP and later operating systems.</P>

<P><I>MiniportPnPEventNotify</I> runs synchronously at IRQL = PASSIVE_LEVEL and in the context of a system thread. </P>

<H4>See Also</H4>

<P><A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportPnPEventNotify"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
