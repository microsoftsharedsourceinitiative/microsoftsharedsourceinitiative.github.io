<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolStatusComplete</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolStatusComplete">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolstatuscomplete_nr"></A>ProtocolStatusComplete</H1>

<P>The <I>ProtocolStatusComplete</I> function is a required driver function. <I>ProtocolStatusComplete</I> completes a status-change operation initiated when the underlying driver called <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A> or <A HREF="103ndisx_0qgi.htm"><B>NdisMCoIndicateStatus</B></A>. </P>

<PRE class=syntax><B>VOID
</B>  <B>ProtocolStatusComplete(</B>
    <B>IN NDIS_HANDLE</B>  <I>ProtocolBindingContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>ProtocolBindingContext</I></DT>

<DD>Specifies the handle to a protocol-allocated context area in which the protocol driver maintains per-binding run-time state. The driver supplied this handle when it called <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>.  
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><I>ProtocolStatusComplete</I> performs whatever postprocessing is necessary after one or more calls to the driver's <A HREF="104tdlow_3khe.htm"><I>ProtocolCoStatus</I></A> or <A HREF="104tdlow_6e42.htm"><I>ProtocolStatus</I></A> function. A call to <I>ProtocolStatusComplete</I> indicates that the protocol can resume normal operations on the binding after taking into account the preceding status change(s) indicated to its <I>Protocol(Co)Status</I> function. For example, if the protocol previously called <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> and it returned NDIS_STATUS_PENDING, both <A HREF="104tdlow_0yya.htm"><I>ProtocolResetComplete</I></A> and <I>ProtocolStatusComplete</I> are called when the protocol-initiated reset operation is begun and completed. </P>

<P>The underlying miniport’s call to <A HREF="103ndisx_62ur.htm"><B>NdisMIndicateStatusComplete</B></A> causes NDIS to call the <I>ProtocolStatusComplete</I> function. Interrupts are enabled on the underlying NIC when this call occurs. Consequently, the <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A> or <A HREF="104tdlow_3pwy.htm"><I>ProtocolCoReceivePacket</I></A><I>,</I> or <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A> functions can be called to process receive indications while <I>ProtocolStatusComplete</I> is running in SMP machines. In some circumstances, the underlying driver can call <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>, thereby causing a call to the <I>ProtocolStatus</I> function while <I>ProtocolStatusComplete</I> is running. </P>

<P><I>ProtocolStatusComplete</I> runs at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A>, <A HREF="103ndisx_0qgi.htm"><B>NdisMCoIndicateStatus</B></A>, <A HREF="103ndisx_62ur.htm"><B>NdisMIndicateStatusComplete</B></A>, <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A>, <A HREF="104tdlow_3pwy.htm"><I>ProtocolCoReceivePacket</I></A>, <A HREF="104tdlow_3khe.htm"><I>ProtocolCoStatus</I></A>, <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A>, <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A>, <A HREF="104tdlow_6e42.htm"><I>ProtocolStatus</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolStatusComplete"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
