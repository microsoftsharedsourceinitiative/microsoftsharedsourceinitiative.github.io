<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolCmModifyCallQoS</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolCmModifyCallQoS">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolcmmodifycallqos_nr"></A>ProtocolCmModifyCallQoS</H1>

<P>The <I>ProtocolCmModifyCallQoS</I> function is required. <I>ProtocolCmModifyCallQoS</I> is called by NDIS when a connection-oriented client requests that the call parameters be changed for an existing virtual connection (VC). If the underlying network medium does not support QoS, <I>ProtocolCmModifyQoS</I> should simply return NDIS_STATUS_NOT_SUPPORTED. </P>

<PRE class=syntax><B>NDIS_STATUS 
</B>  <B>ProtocolCmModifyCallQoS(
</B>    <B>IN NDIS_HANDLE</B>  <I>CallMgrVcContext</I><B>,</B>
    <B>IN CO_CALL_PARAMETERS</B>  <I>CallParameters</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>CallMgrVcContext</I></DT>

<DD>Specifies the handle to a call manager-allocated context area in which the call manager maintains its per-VC state. The call manager supplied this handle to NDIS for its <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function.</DD>

<DT><I>CallParameters</I></DT>

<DD>Pointer to a <A HREF="105nstru_3raq.htm">CO_CALL_PARAMETERS</A> structure that contains the new call parameters, as specified by a connection-oriented client, for the VC.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>ProtocolCmModifyQoS</I> returns the status of its operation(s) as one of the following values:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the call manager successfully changed the parameters of the call with the network to the call parameters specified at <I>CallParameters</I>.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the call manager will complete the request to modify the call parameters asynchronously. When the call manager has completed all operations necessary to modify the call parameters, it must call <A HREF="103ndisx_2zn6.htm"><B>NdisCmModifyCallQoSComplete</B></A>.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>Indicates that the call manager could not change the call parameters of the VC because dynamically allocated resources were not available.</DD>

<DT>NDIS_STATUS_INVALID_DATA</DT>

<DD>Indicates that the call manager was unable to change the call parameters of the VC because the call parameters provided at <I>CallParameters</I> were illegal or invalid.</DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>Indicates that the call parameters could not be set to the call parameters provided because of a failure in the network or in another connection-oriented network component.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><I>ProtocolCmModifyQoS</I> communicates with network control devices or other media-specific agents, as necessitated by its media, to modify the media-specific call parameters for an established virtual connection. If the call manager is required to communicate with network control agents (in other words, a networking switch) it should use a virtual connection to the network control agents that it established in its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function. Stand-alone call managers communicated to the network agents by calling <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A>. Miniport drivers with integrated call-management support never call <B>NdisCoSendPackets</B>. Instead, such a driver simply transfers the data over the network to the target network agent. </P>

<P>After communicating with the network and if the changes were successful, the call manager must then call <A HREF="103ndisx_3zzm.htm"><B>NdisCmActivateVc</B></A> with the new call parameters. This notifies NDIS and/or the connection-oriented miniport driver that the call parameters have changed and provides the miniport driver with an opportunity to validate those parameters.</P>

<P>If either the network cannot accept the new call parameters or the underlying miniport driver cannot accept the parameters, the call manager must restore the virtual connection to the state that existed before any modifications were attempted, and return NDIS_STATUS_FAILURE.</P>

<P><I>ProtocolCmModifyQoSComplete</I> must be written so that it can run at IRQL = DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="103ndisx_3zzm.htm"><B>NdisCmActivateVc</B></A>, <A HREF="103ndisx_2zn6.htm"><B>NdisCmModifyCallQoSComplete</B></A>, <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolCmModifyCallQoS"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
