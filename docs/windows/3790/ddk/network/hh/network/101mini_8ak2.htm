<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportCoDeactivateVc</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportCoDeactivateVc">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportcodeactivatevc_nr"></A>MiniportCoDeactivateVc</H1>

<P>The <I>MiniportCoDeactivateVc</I> function is required for connection-oriented miniports. <I>MiniportCoDeactivateVc</I> is called by NDIS to indicate that a VC is being marked as unusable.</P>

<PRE class=syntax><B>NDIS_STATUS</B> <B>
</B>  <B>MiniportCoDeactivateVc(
    IN</B> <B>NDIS_HANDLE</B>  <I>MiniportVcContext</I>
    <B>);</B></PRE>

<H4>Parameter</H4>

<DL>
<DT><I>MiniportVcContext</I></DT>

<DD>Specified the handle to a miniport driver-allocated context area in which the miniport driver maintains state information per-VC. The miniport driver supplied this handle to NDIS from its <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> function.
</DD>
</DL>

<H4>Return Value</H4>

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the miniport driver successfully halted any communication across the VC and marked it as unusable.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the miniport driver will complete the request to halt the VC asynchronously. When the miniport driver has completed halting the VC, it must then call <A HREF="103ndisx_9hpv.htm"><B>NdisMCoDeactivateVcComplete</B></A> to signal NDIS that this operation has been completed.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P><I>MiniportCoDeactivateVc</I> communicates with its network adapter to terminate all communication across this VC (in other words, deprogramming receive or send buffers on the adapter). The miniport driver should also mark the VC, it its context area, as being inactive to prevent any further communication across the VC.</P>

<P>There is not a one-to-one relationship between calls to <A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A> and <I>MiniportCoDeactivateVc</I>. While NDIS may call <I>MiniportCoActivateVc</I> multiple times on a single VC, only one call to <I>MiniportCoDeactivateVc</I> is made to shut down a virtual connection. For example, a VC can be reused for different calls possibly causing multiple calls to <I>MiniportCoActivateVc</I>. </P>

<H4>See Also</H4>

<P><A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A>, <A HREF="103ndisx_9hpv.htm"><B>NdisMCoDeactivateVcComplete</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportCoDeactivateVc"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
