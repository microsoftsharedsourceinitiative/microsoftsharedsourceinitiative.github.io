<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CO_ADDRESS_FAMILY</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="CO_ADDRESS_FAMILY">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_co_address_family_nr"></A>CO_ADDRESS_FAMILY</H1>

<P>The CO_ADDRESS_FAMILY structure specifies the type and version of signaling protocol used by a call manager or an MCM driver.</P>

<PRE class=syntax>typedef struct {
  NDIS_AF  AddressFamily;
  ULONG  MajorVersion;
  ULONG  MinorVersion;
} CO_ADDRESS_FAMILY, *PCO_ADDRESS_FAMILY;</PRE>

<H4>Members</H4>

<DL>
<DT><B>AddressFamily</B></DT>

<DD>Specifies the type of signaling protocol used by a call manager or an MCM driver. The following types are supported:

<DL>
<DT><B>CO_ADDRESS_FAMILY_Q2931</B></DT>

<DD>Specifies the Q.2931 signaling protocol.</DD>

<DT><B>CO_ADDRESS_FAMILY_PSCHED</B></DT>

<DD>Specifies the Microsoft Packet Scheduling Protocol, which is a policy-based protocol that imposes transmission bandwidth limits on clients. The Microsoft Packet Scheduling Protocol is used over an RSVP (Resource Reservation Protocol) connection.</DD>

<DT><B>CO_ADDRESS_FAMILY_L2TP</B></DT>

<DD>Specifies the Layer 2 Tunneling Protocol.</DD>

<DT><B>CO_ADDRESS_FAMILY_IRDA</B></DT>

<DD>Specifies the IrDA signaling protocol.</DD>

<DT><B>CO_ADDRESS_FAMILY_1394</B></DT>

<DD>Specifies the IEEE 1394 bus signaling protocol.</DD>

<DT><B>CO_ADDRESS_FAMILY_PPP</B></DT>

<DD>Specifies the Point-to-Point Protocol (PPP).</DD>

<DT><B>CO_ADDRESS_FAMILY_TAPI</B></DT>

<DD>Specifies the TAPI signaling protocol.</DD>

<DT><B>CO_ADDRESS_FAMILY_TAPI_PROXY</B></DT>

<DD>Specifies the Microsoft-supplied TAPI proxy, which is a call manager that proxies TAPI calls for a connection-oriented call manager.</DD>
</DL>
</DD>

<DT><B>MajorVersion</B></DT>

<DD>Specifies the major version number of the signaling protocol.</DD>

<DT><B>MinorVersion</B></DT>

<DD>Specifies the minor version number of the signaling protocol.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ndis.h</I>. Include <I>ndis.h</I>.</P>

<H4>Comments</H4>

<P>When a call manager or MCM driver registers with NDIS by calling <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A> or <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>, it passes a CO_ADDRESS_FAMILY structure to NDIS that advertises the call-specific signaling services provided by that call manager. <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A> or <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A> also passes an <I>NdisBindingHandle</I> that identifies the target NIC or the virtual adapter. An address family is always associated with a particular call manager and a particular NIC.</P>

<P>After a call manager registers an address family, NDIS calls the <I>ProtocolCoRegisterAfNotify</I> function of each client bound to the NIC associated with the address family. In the call to <I>ProtocolCoRegisterAfNotify</I>, NDIS passes the address family in a <A HREF="#ddk_co_address_family_nr">CO_ADDRESS_FAMILY</A> structure to each client.</P>

<P>Each client's <I>ProtocolCoRegisterAfNotify</I> function checks the input buffer at <B>AddressFamily</B> to determine whether the client recognizes the call manager or MCM driver and the registered address family. If the client recognizes the call manager and the registered address family, it calls <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A> from its <I>ProtocolCoAfRegisterNotify</I> function to register its handlers with NDIS. The call to <B>NdisClOpenAddressFamily</B> also passes the registered address family to the call manager's <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function in a CO_ADDRESS_FAMILY structure. The <I>ProtocolCmOpenAf </I>function ensures that the client has passed in a valid address family structure.</P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>, <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>, <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A>, <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: CO_ADDRESS_FAMILY"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
