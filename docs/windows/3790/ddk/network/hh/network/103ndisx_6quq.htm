<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisClOpenAddressFamily</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisClOpenAddressFamily">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisclopenaddressfamily_nr"></A>NdisClOpenAddressFamily</H1>

<P><B>NdisClOpenAddressFamily</B> registers a set of client-supplied functions for connection-oriented communication through a particular NIC using an address family registered by a particular call manager. </P>

<PRE class=syntax><B>NDIS_STATUS 
  NdisClOpenAddressFamily(
    IN NDIS_HANDLE</B>  <I>NdisBindingHandle</I><B>,</B>
    <B>IN PCO_ADDRESS_FAMILY</B>  <I>AddressFamily</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>ProtocolAfContext</I><B>,</B>
    <B>IN PNDIS_CLIENT_CHARACTERISTICS</B>  <I>ClCharacteristics</I><B>,</B>
    <B>IN UINT</B>  <I>SizeOfClCharacteristics</I><B>,</B>
    <B>OUT PNDIS_HANDLE</B>  <I>NdisAfHandle
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>NdisBindingHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> that identifies the target NIC or the virtual adapter of the next-lower driver to which the caller is bound. </DD>

<DT><I>AddressFamily</I></DT>

<DD>Pointer to a structure of type <A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A> describing the call manager and address family to be opened. 

<P>This pointer is an input parameter to the client's <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> function, which calls <B>NdisClOpenAddressFamily</B>. 
</DD>

<DT><I>ProtocolAfContext</I></DT>

<DD>Specifies the handle to a caller-supplied resident context area in which the client maintains state for this address family after it has been opened. NDIS passes this handle back to the client in all subsequent calls concerning this address family if the call to <B>NdisClOpenAddressFamily</B> succeeds.</DD>

<DT><I>ClCharacteristics</I></DT>

<DD>Pointer to an NDIS_CLIENT_CHARACTERISTICS structure set up by the caller. The structure at <I>ClCharacteristics</I> is defined as follows:

<PRE>typedef struct _NDIS_CLIENT_CHARACTERISTICS {
    UCHAR   MajorVersion;
    UCHAR   MinorVersion;
    USHORT  Filler;           // reserved for system use
    UINT    Reserved;         // reserved for system use
    CO_CREATE_VC_HANDLER  ClCreateVcHandler;
    CO_DELETE_VC_HANDLER  ClDeleteVcHandler;
    CO_REQUEST_HANDLER  ClRequestHandler;
    CO_REQUEST_COMPLETE_HANDLER  ClRequestCompleteHandler;
    CL_OPEN_AF_COMPLETE_HANDLER  ClOpenAfCompleteHandler;
    CL_CLOSE_AF_COMPLETE_HANDLER  ClCloseAfCompleteHandler;
    CL_REG_SAP_COMPLETE_HANDLER  ClRegisterSapCompleteHandler;
    CL_DEREG_SAP_COMPLETE_HANDLER  ClDeregisterSapCompleteHandler;
    CL_MAKE_CALL_COMPLETE_HANDLER  ClMakeCallCompleteHandler;
    CL_MODIFY_CALL_QOS_COMPLETE_HANDLER
                                    ClModifyCallQoSCompleteHandler;
    CL_CLOSE_CALL_COMPLETE_HANDLER  ClCloseCallCompleteHandler;
    CL_ADD_PARTY_COMPLETE_HANDLER  ClAddPartyCompleteHandler;
    CL_DROP_PARTY_COMPLETE_HANDLER  ClDropPartyCompleteHandler;
    CL_INCOMING_CALL_HANDLER  ClIncomingCallHandler;
    CL_INCOMING_CALL_QOS_CHANGE_HANDLER
                                    ClIncomingCallQoSChangeHandler;
    CL_INCOMING_CLOSE_CALL_HANDLER  ClIncomingCloseCallHandler;
    CL_INCOMING_DROP_PARTY_HANDLER  ClIncomingDropPartyHandler;
    CL_CALL_CONNECTED_HANDLER  ClCallConnectedHandler;
} NDIS_CLIENT_CHARACTERISTICS, *PNDIS_CLIENT_CHARACTERISTICS;</PRE>


<P>The driver should initialize this structure with zeros before setting up the following members:


<DL>
<DT><B>MajorVersion</B></DT>

<DD>Specifies the major version of this structure that the client is using. The current value is 0x05.</DD>

<DT><B>MinorVersion</B></DT>

<DD>Specifies the minor version of this structure that the client is using. The current value is 0x00.  </DD>

<DT><B>Filler</B> and <B>Reserved</B></DT>

<DD>The caller should ignore these members after zero-initializing this structure. </DD>

<DT><B>ClCreateVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A>function. </DD>

<DT><B>ClDeleteVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> function.</DD>

<DT><B>ClRequestHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> function.</DD>

<DT><B>ClRequestCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> function. </DD>

<DT><B>ClOpenAfCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_4f76.htm"><I>ProtocolClOpenAfComplete</I></A> function.</DD>

<DT><B>ClCloseAfCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_89gy.htm"><I>ProtocolClCloseAfComplete</I></A> function.</DD>

<DT><B>ClRegisterSapCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_2faq.htm"><I>ProtocolClRegisterSapComplete</I></A><I> </I>function. A client uses this function to accept incoming calls from remote machines.</DD>

<DT><B>ClDeregisterSapCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_21o2.htm"><I>ProtocolClDeregisterSapComplete</I></A><I> </I>function. </DD>

<DT><B>ClMakeCallCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3qia.htm"><I>ProtocolClMakeCallComplete</I></A> function. A client uses this function to make outgoing calls to remote machines.</DD>

<DT><B>ClModifyCallQoSCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3boy.htm"><I>ProtocolClModifyCallQoSComplete</I></A> function. A client uses this function to make changes in the quality of service on an established VC dynamically or to negotiate with the call manager to establish the QoS when setting up an incoming call. </DD>

<DT><B>ClCloseCallCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3ofm.htm"><I>ProtocolClCloseCallComplete</I></A> function. </DD>

<DT><B>ClAddPartyCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_2j5e.htm"><I>ProtocolClAddPartyComplete</I></A>function. A client uses this function to establish point-to-multipoint VCs for outgoing calls to remote machines.</DD>

<DT><B>ClDropPartyCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_07ea.htm"><I>ProtocolClDropPartyComplete</I></A> function.  </DD>

<DT><B>ClIncomingCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_8a9e.htm"><I>ProtocolClIncomingCall</I></A> function. A client uses this function to accept incoming calls from remote machines. </DD>

<DT><B>ClIncomingCallQoSChangeHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_6vzm.htm"><I>ProtocolClIncomingCallQoSChange</I></A><I> </I>function. A client uses this function to accept incoming calls from remote machines on which the sending client can change the QoS dynamically. </DD>

<DT><B>ClIncomingCloseCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3nqq.htm"><I>ProtocolClIncomingCloseCall</I></A> function. </DD>

<DT><B>ClIncomingDropPartyHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_8pde.htm"><I>ProtocolClIncomingDropParty</I></A> function. </DD>

<DT><B>ClCallConnectedHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_6mia.htm"><I>ProtocolClCallConnected</I></A> function. A client uses this function to accept incoming calls from remote machines. </DD>
</DL>
</DD>

<DT><I>SizeOfClCharacteristics</I></DT>

<DD>Specifies the size in bytes of the structure at <I>ClCharacteristics</I>.</DD>

<DT><I>NdisAfHandle</I></DT>

<DD>Pointer to a caller-supplied variable in which this function returns a handle representing the newly opened address family. 
</DD>
</DL>

<H4>Return Value</H4>

<P>When <B>NdisClOpenAddressFamily</B> returns anything other than NDIS_STATUS_PENDING, the client should make an internal call to its <A HREF="104tdlow_4f76.htm"><I>ProtocolClOpenAfComplete</I></A> function. Otherwise, NDIS calls the client's <I>ProtocolClOpenAfComplete</I> function when this operation is completed.</P>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A connection-oriented client calls <B>NdisClOpenAddressFamily</B> from its <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> function, after checking the input buffer at <I>AddressFamily</I> to determine whether the client recognizes the call manager and registered addresses. NDIS forwards the client's call of <B>NdisClOpenAddressFamily</B> to the call manager’s <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function, which ensures that the client has passed in a valid address family structure.</P>

<P>The client must set every <B>Cl</B><I>Xxx</I> member in the NDIS_CLIENT_CHARACTERISTICS structure to a caller-supplied ProtocolCl/Co<I>Xxx</I> function when it calls <B>NdisClOpenAddressFamily</B>, even if it does not support incoming calls, outgoing calls, or point-to-multipoint connections. For whatever subset of connection-oriented functionality that such a client does not support, its ProtocolCl/Co<I>Xxx </I>functions simply return NDIS_STATUS_NOT_SUPPORTED. </P>

<P>A successful call to <B>NdisClOpenAddressFamily</B> sets up communication from the client either to a connection-oriented NIC driver through a particular call manager that is bound to the same NIC or to an integrated MCM driver for the NIC to which the client is bound. The client can then make itself ready to receive incoming calls with <A HREF="103ndisx_22nm.htm"><B>NdisClRegisterSap</B></A> or can set up a virtual connection with <A HREF="103ndisx_3qia.htm"><B>NdisCoCreateVc</B></A> in order to make an outgoing call with <A HREF="103ndisx_7mr6.htm"><B>NdisClMakeCall</B></A>.</P>

<P>If its call to <B>NdisClOpenAddressFamily</B> fails, the client should call <A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A> to release its binding to the underlying NIC driver.</P>

<P>Otherwise, the client must save the handle returned at <I>NdisAfHandle.</I> This handle identifies the call manager to which subsequent requests concerning the given address family are directed. The client must treat this returned handle as an opaque variable, passing it unmodified and uninterpreted in subsequent calls to certain NDIS library functions. Usually<I>,</I> callers of <B>NdisClOpenAddressFamily</B> pass an <I>NdisAfHandle</I> pointer to a variable stored<I> </I>in the client-allocated state area at <I>ProtocolAfContext</I>.</P>

<P>NDIS passes the <I>ProtocolAfContext</I> pointer to the client's registered ProtocolCl<I>Xxx</I> functions in all subsequent calls concerning this address family until the client calls <B>NdisClCloseAddressFamily</B> with the same <I>NdisAfHandle</I>. After the address family is closed, the client can release or reuse the storage it allocated at <I>ProtocolAfContext</I>. </P>

<P>Callers of <B>NdisClOpenAddressFamily</B> must be running at IRQL &lt; DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A>, <A HREF="103ndisx_72wi.htm"><B>NdisAllocateFromNPagedLookasideList</B></A>, <A HREF="103ndisx_108i.htm"><B>NdisClCloseAddressFamily</B></A>, <A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A>, <A HREF="103ndisx_22nm.htm"><B>NdisClRegisterSap</B></A>, <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A>, <A HREF="104tdlow_2j5e.htm"><I>ProtocolClAddPartyComplete</I></A>, <A HREF="104tdlow_6mia.htm"><I>ProtocolClCallConnected</I></A>, <A HREF="104tdlow_89gy.htm"><I>ProtocolClCloseAfComplete</I></A>, <A HREF="104tdlow_3ofm.htm"><I>ProtocolClCloseCallComplete</I></A>, <A HREF="104tdlow_21o2.htm"><I>ProtocolClDeregisterSapComplete</I></A>, <A HREF="104tdlow_07ea.htm"><I>ProtocolClDropPartyComplete</I></A>, <A HREF="104tdlow_8a9e.htm"><I>ProtocolClIncomingCall</I></A>, <A HREF="104tdlow_6vzm.htm"><I>ProtocolClIncomingCallQoSChange</I></A>, <A HREF="104tdlow_3nqq.htm"><I>ProtocolClIncomingCloseCall</I></A>, <A HREF="104tdlow_8pde.htm"><I>ProtocolClIncomingDropParty</I></A>, <A HREF="104tdlow_3qia.htm"><I>ProtocolClMakeCallComplete</I></A>, <A HREF="104tdlow_3boy.htm"><I>ProtocolClModifyCallQoSComplete</I></A>, <A HREF="104tdlow_4f76.htm"><I>ProtocolClOpenAfComplete</I></A>, <A HREF="104tdlow_2faq.htm"><I>ProtocolClRegisterSapComplete</I></A>, <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A>, <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A>, <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A>, <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A>, <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisClOpenAddressFamily"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
