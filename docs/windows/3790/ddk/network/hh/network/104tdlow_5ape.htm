<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolCmOpenAf</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolCmOpenAf">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolcmopenaf_nr"></A>ProtocolCmOpenAf</H1>

<P>The <I>ProtocolCmOpenAf</I> function is required. This function allocates per-open resources for a call manager to interact with a connection-oriented NDIS client that is opening the address family.</P>

<PRE class=syntax><B>NDIS_STATUS 
</B>  <B>ProtocolCmOpenAf(
</B>    <B>IN NDIS_HANDLE</B>  <I>CallMgrBindingContext</I><B>,</B>
    <B>IN PCO_ADDRESS_FAMILY</B>  <I>AddressFamily</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisAfHandle</I><B>,</B>
    <B>OUT PNDIS_HANDLE</B>   <I>CallMgrAfContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>CallMgrBindingContext</I></DT>

<DD>Specifies the handle to a call manager-allocated context area in which the call managers maintains its per-binding state information. The call manager supplied this handle when it called <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>.</DD>

<DT><I>AddressFamily</I></DT>

<DD>Specifies the address family that a client is opening. This address family was registered by the call manager when it called <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>.</DD>

<DT><I>NdisAfHandle</I></DT>

<DD>Specifies a handle, supplied by NDIS, that uniquely identifies this address family instance. This handle is opaque to the call manager and reserved for system use.</DD>

<DT><I>CallMgrAfContext</I></DT>

<DD>Specifies the handle to a call manager-supplied context area in which the call manager maintains state about this open of an address family it provides.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>ProtocolCmOpenAf</I> returns the status of its operation(s) as one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the call manager has successfully allocated and initialized any resources necessary to accept requests from the client to this address family.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the requested operation is being handled asynchronously. The call manager must call <A HREF="103ndisx_1bw2.htm"><B>NdisCmOpenAddressFamilyComplete</B></A> when it has completed all its open-AF operations to indicate to NDIS (and the client) that the operation(s) has been completed.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>Indicates that the call manager could not complete its necessary operation(s) because of a lack of available system resources, such as memory.</DD>

<DT>NDIS_STATUS_<I>XXX</I></DT>

<DD>Indicates that the call manager could not set itself into a state where it can accept requests from the client to operate on this address family. This could be an error status propagated from another NDIS library function or any error status determined appropriate by the driver writer.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><I>ProtocolCmOpenAf</I> performs any required allocations of dynamic resources and structures that the call manager writer deems necessary to perform operations on behalf of the client that is opening an instance of this address family. Such resources include, but are not limited to, memory buffers, data structures, events, and other such similar resources. A call manager should also initialize any relevant per-open data before returning control to NDIS.</P>

<P>When a call manager has allocated its per-open state area, the address of the state area should be set in the <I>CallMgrAfContext</I> handle before returning control to NDIS. To do this, dereference <I>CallMgrAfContext</I> and store a pointer to the data area as the value of the handle. For example:</P>

<PRE>*CallMgrAfContext = SomeBuffer;</PRE>

<P>If <I>ProtocolCmOpenAf</I> cannot allocate the per-open resources it needs to carry out subsequent requests on behalf of the client opening this address family, it should free all resources that it allocated for the open and return control to the NDIS with NDIS_STATUS_RESOURCES.</P>

<P>If <I>ProtocolCmOpenAf</I> has completed its required operations and the CM is ready to accept requests from the client, <I>ProtocolCmOpenAf</I> should return control as quickly as possible with a status of NDIS_STATUS_SUCCESS.</P>

<P><I>ProtocolCmOpenAf</I> must be written so that it can run at IRQL = DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="103ndisx_6quq.htm"><B>NdisClOpenAddressFamily</B></A>, <A HREF="103ndisx_1bw2.htm"><B>NdisCmOpenAddressFamilyComplete</B></A>, <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolCmOpenAf"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
