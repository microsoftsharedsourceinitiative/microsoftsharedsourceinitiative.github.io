<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>INetCfgLock::AcquireWriteLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="INetCfgLock::AcquireWriteLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_inetcfglock_acquirewritelock_nr"></A>INetCfgLock::AcquireWriteLock</H1>

<P>The <B>AcquireWriteLock</B> method requests that the operating system grant a lock on network configuration so a particular client can configure network components and binding paths.</P>

<PRE class=syntax><B>HRESULT
  AcquireWriteLock(</B>
    <B>IN DWORD  </B><I>cmsTimeout</I><B>,</B><I>  </I>
    <B>IN LPCWSTR  </B><I>pszwClientDescription</I><B>,</B><I>  </I>
    <B>OUT LPWSTR  *</B><I>ppszwClientDescription  </I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>cmsTimeout</I></DT>

<DD>Specifies the time, in milliseconds, to wait for the operating system to grant the lock on network configuration before timing out.</DD>

<DT><I>pszwClientDescription</I></DT>

<DD>Pointer to a constant null-terminated string of 16-bit Unicode characters containing the name of the client that requests control over network configuration. </DD>

<DT><I>ppszwClientDescription</I></DT>

<DD>Pointer to a buffer that receives a constant null-terminated string of 16-bit Unicode characters containing the name of the client that currently controls network configuration if the operating system refused to grant the lock.
</DD>
</DL>

<H4>Return Value</H4>

<P>Returns zero (S_OK) if successful, indicating that the operating system granted the lock; otherwise returns one of the following codes:

<DL>
<DT>S_FALSE</DT>

<DD>The wait time, <I>cmsTimeout</I>, elapsed before the operating system granted the lock.</DD>

<DT>NETCFG_E_NEED_REBOOT</DT>

<DD>A system reboot is required before the lock can be granted.</DD>
</DL>

<P><B>AcquireWriteLock</B> can also return other NETCFG_* codes that are defined in <I>Netcfgx.h</I>. </P>

<H4>Headers</H4>

<P>Defined in <I>Netcfgx.h</I>. Include <I>Netcfgx.h</I>.</P>

<H4>Comments</H4>

<P>Applications can only call <B>AcquireWriteLock</B> either before they call the <A HREF="ntfrf_1h0y.htm"><B>INetCfg::Initialize</B></A> method, or after they call the <A HREF="ntfrf_1iwi.htm"><B>INetCfg::Uninitialize</B></A> method. In all other cases, calls to <B>AcquireWriteLock</B> return NETCFG_E_ALREADY_INITIALIZED. If the current user is not an administrator of the local computer, calls to <B>AcquireWriteLock</B> return E_ACCESSDENIED.</P>

<P>Calls to notify objects typically occur after the network configuration subsystem has called <B>AcquireWriteLock</B> to obtain control and <B>INetCfg::Initialize</B> to initialize itself. For this reason, notify objects should rarely, if ever, call <B>AcquireWriteLock</B> to request control over network configuration. </P>

<P>When an application calls <B>AcquireWriteLock</B> to request control over network configuration, it identifies the client requesting control by passing the client's name in the <I>pszwClientDescription</I> parameter. If the application subsequently requests control for a different client, the network configuration subsystem refuses and can display a message stating the name of the client that already has control.</P>

<P>If a call to <B>AcquireWriteLock</B> returns the name of the client that already has control of network configuration at <I>ppszwClientDescription</I>, <B>AcquireWriteLock</B> allocates the memory required to store the string that contains the name. After applications finish with the name, they must call the COM <B>CoTaskMemFree</B> function to release the memory. For more information on <B>CoTaskMemFree</B>, see the Platform SDK.</P>

<H4>See Also</H4>

<P><A HREF="ntfrf_1h0y.htm"><B>INetCfg::Initialize</B></A>, <A HREF="ntfrf_1iwi.htm"><B>INetCfg::Uninitialize</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: INetCfgLock::AcquireWriteLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
