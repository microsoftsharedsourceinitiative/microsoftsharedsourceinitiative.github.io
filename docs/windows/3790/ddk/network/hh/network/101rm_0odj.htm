<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Network Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_network_drivers_ng"></A>Network Drivers</H1>

<P>Windows-based operating systems support several types of kernel-mode network drivers. The network drivers documentation describes how to write these drivers. This topic briefly describes the supported network driver types and explains which sections of this guide you should read before writing each type of network driver.</P>

<P>Microsoft® Windows®&nbsp;2000 and later versions of the operating system support four types of kernel-mode network drivers: 

<UL>
	<LI><B>Miniport drivers</B>
<P>A <I>miniport driver</I> directly manages a network interface card (NIC<I>)</I> and provides an interface to higher-level drivers.
</LI>

	<LI><B>Intermediate drivers</B>
<P>An <I>intermediate driver</I> interfaces between upper-level protocol drivers, such as a legacy transport driver, and a miniport driver. A typical reason to develop an intermediate protocol driver is to perform media translation between an existing legacy transport driver and a miniport driver that manages a NIC for a new media type unknown to the transport driver. 
</LI>

	<LI><B>Protocol drivers</B>
<P>An <I>upper-level protocol driver</I> implements a TDI interface, or possibly an application-specific interface, at its upper edge to provide services to users of the network. At its lower edge, a protocol driver provides a protocol interface to pass packets to and receive incoming packets from the next-lower driver.

<P>Another type of protocol driver is a <I>connection-oriented call manager</I>. A call manager provides call setup and tear-down services for <I>connection-oriented clients</I>, which are also protocol drivers.
</LI>

	<LI><B>Filter-hook driver</B>
<P>A <I>filter-hook driver</I> is used to filter packets. This driver extends the functionality of the IP filter driver, which is supplied with the operating system.
</LI>
</UL>

<P>For general information about Windows network architecture and programming considerations, see <A HREF="102gen_3kvb.htm">Network Architecture for Kernel-Mode Drivers</A> and <A HREF="103prog_4fvr.htm">Network Driver Programming Considerations</A>. For information about network INF files, which are used to install network components, see <A HREF="501install_3l2f.htm">Installing Network Components</A>. If your network driver requires a notify object—for example, to control bindings—see also <A HREF="502notify_2vzb.htm">Nofity Objects for Network Components</A>.</P>

<P>To find out which additional sections to read for a particular driver type, see the following sections.</P>



<H4><A NAME="ddk_miniport_drivers_ng"></A>Miniport Drivers</H4>

<P>There are several types of miniport drivers. Read the sections that are recommended for the type of driver you are writing:

<DL>
<DT><B>To learn about connectionless miniport drivers</B></DT>

<DD>If you are writing a miniport driver that controls a NIC for connectionless network media, such as Ethernet, FDDI, or Token Ring; read: 

<P><A HREF="#ddk_miniport_drivers_ng">Miniport Drivers</A>


<P><A HREF="202mini_06w7.htm">Overview of Miniport Driver Operations and Functions</A>


<P><A HREF="203entry_3147.htm">Miniport Driver DriverEntry Function and Initialization</A>


<P><A HREF="204trnsf_5p0n.htm">Transferring Data</A>


<P><A HREF="205mpinfo_96nb.htm">Obtaining and Setting Miniport Driver Information and NDIS Support for WMI</A>


<P><A HREF="206pnp_4nzb.htm">Plug and Play for NDIS Miniport Drivers</A>


<P><A HREF="206pm_6ztz.htm">Power Management for NDIS Miniport Drivers</A>


<P><A HREF="207sd_0s87.htm">Reset, Halt and Shutdown Functions</A>
</DD>

<DT><B>To learn about connection-oriented miniport drivers</B></DT>

<DD>If you are writing a miniport driver that controls a NIC for connection-oriented network media, such as ATM or ISDN, read:

<P>All the sections listed for connectionless miniport drivers


<P><A HREF="401condis_8cfb.htm">Connection-Oriented NDIS</A>
</DD>

<DT><B>To learn about WAN miniport drivers</B></DT>

<DD>If you are writing a miniport driver that controls a WAN NIC, read:

<P>All the sections listed for connectionless miniport drivers


<P><A HREF="208mwan_5tuv.htm">WAN Miniport Drivers</A>
</DD>

<DT><B>To learn about integrated miniport driver call managers (MCM)</B></DT>

<DD>If you are writing a miniport driver that controls a connection-oriented NIC and that also provides call manager services, read:

<P>All the sections listed for connectionless miniport drivers


<P><A HREF="401condis_8cfb.htm">Connection-Oriented NDIS</A>
</DD>

<DT><B>To learn about miniports with a WDM lower interface</B></DT>

<DD>If you are writing a miniport driver that has a WDM lower interface read:

<P>All the sections listed for connectionless miniport drivers


<P><A HREF="212nonds_1l2f.htm">Miniport Driver with a WDM Lower Interface</A>
</DD>

<DT><B>To learn about IrDA miniport drivers</B></DT>

<DD>If you are writing a miniport driver that controls an IrDA adapter, read:

<P>All the sections listed for connectionless miniport drivers


<P><A HREF="210irda_676v.htm">IrDA Miniport Drivers</A>
</DD>

<DT><B>To learn about additional miniport capabilities</B></DT>

<DD>To learn about additional miniport capabilities, read:

<P><A HREF="209offl_07vr.htm">Task Offload</A>


<P><A HREF="210lbfo_8z8n.htm">Load Balancing and Fail Over</A>

</DD>
</DL>



<H4><A NAME="ddk_intermediate_drivers_ng"></A>Intermediate Drivers</H4>

<P>You can write an intermediate driver that has either a connectionless or a connection-oriented lower edge. Read the sections that are recommended for the type of driver you are writing:

<DL>
<DT><B>To learn about intermediate drivers that have a connectionless lower edge</B></DT>

<DD>If you are writing an intermediate driver whose lower edge provides an interface to connectionless miniport drivers, read:

<P><A HREF="301int_0x2f.htm">NDIS Intermediate Drivers</A>
</DD>

<DT><B>To learn about intermediate drivers that have a connection-oriented lower edge</B></DT>

<DD>If you are writing an intermediate driver whose lower edge provides an interface to connection-oriented miniport drivers, read:

<P><A HREF="301int_0x2f.htm">NDIS Intermediate Drivers</A>


<P><A HREF="401condis_8cfb.htm">Connection-Oriented NDIS</A>

</DD>
</DL>



<H4><A NAME="ddk_protocol_drivers_ng"></A>Protocol Drivers</H4>

<P>You can write a protocol driver that has either a connectionless or a connection-oriented lower edge. In addition, your protocol driver can expose a transport driver interface (TDI) at its upper edge and can also provide Winsock support. Read the sections that are recommended for the type of driver you are writing:

<DL>
<DT><B>To learn about protocol drivers that have a connectionless lower edge</B></DT>

<DD>If you are writing a protocol driver whose lower edge provides an interface to connectionless miniport drivers, read:

<P><A HREF="302pro_8ezr.htm">NDIS Protocol Drivers</A>
</DD>

<DT><B>To learn about protocol drivers that are connection-oriented clients, or that are connection-oriented providers of call manager services</B></DT>

<DD>If you are writing a connection-oriented client, which provides an interface to connection-oriented miniport drivers, or if you will be writing a connection-oriented call manager, read:

<P><A HREF="302pro_8ezr.htm">NDIS Protocol Drivers</A><BR>
<A HREF="401condis_8cfb.htm">Connection-Oriented NDIS</A>
</DD>

<DT><B>To learn about protocol drivers that have a TDI upper edge</B></DT>

<DD>If you are writing a protocol that has a TDI upper edge, read:

<P><A HREF="302pro_8ezr.htm">NDIS Protocol Drivers</A>


<P><A HREF="303tdi_1otj.htm">TDI Transports and Their Clients</A>


<P><A HREF="304tovw_136v.htm">TDI Routines, Macros, and Callbacks</A>


<P><A HREF="305toper_9oiv.htm">TDI Operations</A>
</DD>

<DT><B>To learn about protocol drivers that have Winsock support</B></DT>

<DD>If you are writing a protocol that provides Winsock support, read:

<P><A HREF="302pro_8ezr.htm">NDIS Protocol Drivers</A>


<P><A HREF="306sock_6r1j.htm">Transport Helper DLLs for Windows Sockets</A>

</DD>
</DL>



<H4><A NAME="ddk_filter_hook_drivers_ng1"></A>Filter-Hook Drivers</H4>

<P>To learn about filter hook drivers, read the following section:</P>

<P class=indent1><A HREF="fltrhook_5xpj.htm">Filter Hook Drivers</A></P>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: "> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
