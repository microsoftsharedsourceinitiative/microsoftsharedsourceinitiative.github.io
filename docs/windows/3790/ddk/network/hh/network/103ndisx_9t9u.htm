<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisIMNotifyPnPEvent</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisIMNotifyPnPEvent">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisimnotifypnpevent_nr"></A>NdisIMNotifyPnPEvent</H1>

<P><B>NdisIMNotifyPnPEvent</B> propagates notification of a Plug and Play or Power Management event to an overlying driver.</P>

<PRE class=syntax><B>NDIS_STATUS
  NdisIMNotifyPnPEvent(
    IN  NDIS_HANDLE  </B><I>MiniportHandle</I><B>,</B>
<B>    IN  PNET_PNP_EVENT  </B><I>NetPnPEvent</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportHandle</I></DT>

<DD>The handle input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>. This handle represents the miniport driver affected by the Plug and Play or Power Management event passed to the caller’s <A HREF="104tdlow_5muq.htm"><I>ProtocolPnPEvent</I></A> function.</DD>

<DT><I>NetPnPEvent</I></DT>

<DD>Pointer to a NET_PNP_EVENT structure, which describes the Plug and Play event or Power Management event being indicated to the protocol driver.</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisIMNotifyPnPEvent</B> can return either of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The overlying driver succeeded propagated Plug and Play event was succeeded. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>The overlying driver failed the propagated Plug and Play event.</DD>

<DT>The return value is significant only when the propagated event is a <B>NetEventQueryPower</B> or a <B>NetEventQueryRemove</B>. For all other propagated events, the return value is always NDIS_STATUS_SUCCESS.</DT>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>An NDIS intermediate driver calls <B>NdisIMNotifyPnPEvent</B> in the context of the driver’s <A HREF="104tdlow_5muq.htm"><I>ProtocolPnPEvent</I></A> function to propagate notification of a Plug and Play or Power Management event to the overlying driver. </P>

<P>If the propagated event is a <B>NetEventQueryPower</B> or a <B>NetEventQueryRemove</B>, the intermediate driver must check the NDIS_STATUS value returned by <B>NdisIMNotifyPnPEvent</B>. If the returned status is NDIS_STATUS_SUCCESS, the intermediate driver should handle the event internally as usual and then return NDIS_STATUS_SUCCESS from its <I>ProtocolPnPEvent </I>function. If the returned status is NDIS_STATUS_FAILURE, the intermediate driver should return NDIS_STATUS_FAILURE from its <I>ProtocolPnPEvent</I> without further processing.</P>

<P>For all other propagated events, <B>NdisIMNotifyPnPEvent</B> always returns NDIS_STATUS_SUCCESS. The intermediate driver’s <I>ProtocolPnPEvent</I> function in such cases should propagate the NDIS_STATUS returned by <B>NdisIMNotifyPnPEvent</B>.</P>

<P>How the intermediate driver processes a <B>NetEventSetPower</B> received by its <I>ProtocolPnPEvent</I> function depends on the specified device power state. If the specified device power state is <B>NdisDeviceStateD0</B>, the intermediate driver should handle the event internally as usual and then call <B>NdisIMNotifyPnPEvent</B>. For any other specified device power state, the intermediate driver should first call <B>NdisIMNotifyPnPEvent</B> and then handle the event internally as usual.</P>

<P>An intermediate driver should call <B>NdisIMNotifyPnPEvent</B> to propagate a <B>NetEventReconfigure</B> or <B>NetEventBindList</B> only if the <B>NetEventReconfigure</B> or <B>NetEventBindList</B> is indicated on a non-NULL <I>ProtocolBindingContext</I>. If a <B>NetEventReconfigure</B> or <B>NetEventBindList</B> is indicated on a NULL <I>ProtocolBindingContext</I>, the intermediate driver should not call <B>NdisIMNotifyPnPEvent</B> to propagate the event.</P>

<P>If an intermediate driver handles a <B>NetEventReconfigure</B> or a <B>NetEventBindList</B>, it should validate any data associated with the event. (For more information on such data, see <A HREF="105nstru_6c1e.htm">NET_PNP_EVENT for Protocol Drivers</A>.)</P>

<P>System support for <B>NdisIMNotifyPnPEvent</B> is available in Windows XP and later OS versions.</P>

<P>Callers of <B>NdisIMNotifyPnPEvent</B> run at IRQL = PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="105nstru_6c1e.htm">NET_PNP_EVENT</A>, <A HREF="104tdlow_5muq.htm"><I>ProtocolPnPEvent</I></A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisIMNotifyPnPEvent"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
