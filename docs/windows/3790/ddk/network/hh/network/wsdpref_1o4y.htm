<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSPGetSockOpt</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSPGetSockOpt">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wspgetsockopt_nr"></A>WSPGetSockOpt</H1>

<P><B>WSPGetSockOpt</B> retrieves the current value of a socket option. </P>

<PRE class=syntax><B>int 
  WSPGetSockOpt(
    IN SOCKET </B><I> s</I><B>,</B>
<B>    IN int </B><I> level</I><B>,</B>
<B>    IN int </B><I> optname</I><B>,</B>
<B>    OUT char FAR  </B><I>*optval</I><B>,</B>
<B>    IN/OUT LPINT </B><I> optlen</I><B>,</B>
<B>    OUT LPINT </B><I> lpErrno</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>s</I></DT>

<DD>Descriptor that identifies a socket.</DD>

<DT><I>level</I></DT>

<DD>Level at which the option is defined; the only supported level is SOL_SOCKET. </DD>

<DT><I>optname</I></DT>

<DD>Socket option for which the value is to be retrieved.</DD>

<DT><I>optval</I></DT>

<DD>Pointer to a buffer that receives the current value for the socket option that is specified in <I>optname</I>.</DD>

<DT><I>optlen</I></DT>

<DD>Pointer to a variable that receives the size of the value at <I>optval</I>.</DD>

<DT><I>lpErrno</I></DT>

<DD>Pointer to a variable that receives the error code.
</DD>
</DL>

<H4>Return Value</H4>

<P>Returns zero if successful; otherwise, returns SOCKET_ERROR and, at <I>lpErrno</I>, one of the following error codes: 

<DL>
<DT>WSAENETDOWN</DT>

<DD>Network subsystem failed.</DD>

<DT>WSAEFAULT</DT>

<DD>The <I>optval </I>or <I>optlen </I>parameter is not a valid part of the user address space, or the <I>optlen</I> parameter is too small.</DD>

<DT>WSAEINVAL</DT>

<DD>The <I>level</I> is unknown or invalid.</DD>

<DT>WSAENOPROTOOPT</DT>

<DD>Option is unknown or unsupported by the socket's address family. </DD>

<DT>WSAENOTSOCK</DT>

<DD>Descriptor is not a socket.
</DD>
</DL>

<P>Note that a SAN service provider does not support the WSAEINPROGRESS error code for <B>WSPGetSockOpt</B>. </P>

<H4>Headers</H4>

<P>Defined in <I>Ws2spi.h</I>. Include <I>Ws2spi.h</I>. Requires Windows Sockets version&nbsp;2.0.</P>

<H4>Comments</H4>

<P>The Windows Sockets switch calls a SAN service provider's <B>WSPGetSockOpt</B> function to retrieve the current value of an option for a socket, in any state. Options affect socket operations, such as the amount of data that the switch can transfer on the socket for each data transfer operation.</P>

<P>The switch originally sets the integer value at <I>optlen</I> to the size of the buffer at <I>optval</I>. The <B>WSPGetSockOpt</B> function stores the current value for the specified socket option in the buffer at <I>optval</I> and the size, in bytes, of this value at <I>optlen</I>. For most socket options, the size of the option value is the size of an integer.</P>

<P>The switch must allocate any memory space pointed to directly or indirectly by any parameters it specifies. </P>

<P>The only supported level at which options are defined is the SOL_SOCKET level. </P>

<P>If the switch never called the SAN service provider's <B>WSPSetSockOpt</B> function to assign a value to an option, the SAN service provider's <B>WSPGetSockOpt</B> function returns default values for options. These default values, along with data types for supported options, are described in the following table. A SAN service provider supports only the options described in this table.</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=29%>Option</TH>
<TH align=left width=17%>Value</TH>
<TH align=left width=54%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_DEBUG</TD>
<TD width=17%>FALSE</TD>
<TD width=54%>Debugging is enabled. Type is BOOL.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_GROUP_ID</TD>
<TD width=17%>NULL</TD>
<TD width=54%>Identifier of the socket's group. Type is GROUP.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_GROUP_<BR>
PRIORITY</TD>
<TD width=17%>0</TD>
<TD width=54%>Relative priority for the socket in its group. Type is Integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_MAX_MSG_<BR>
SIZE</TD>
<TD width=17%>Varies</TD>
<TD width=54%>Maximum outbound (send) size of a message for message-oriented socket types. No specified maximum inbound message size. Not applicable to stream-oriented sockets. Type is unsigned integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_MAX_RDMA_<BR>
SIZE</TD>
<TD width=17%>Varies</TD>
<TD width=54%>Maximum size of a RDMA transfer request. Type is unsigned integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SO_RDMA_<BR>
THRESHOLD_SIZE</TD>
<TD width=17%>Varies</TD>
<TD width=54%>Minimum size of a RDMA transfer request. Type is unsigned integer.</TD>
</TR>
</TABLE><BR>

<P>If the switch calls the SAN service provider's <B>WSPGetSockOpt</B> function with an unsupported option, the SAN service provider returns the WSAENOPROTOOPT error code. </P>

<P>The following list describes additional information for supported options: 

<DL>
<DT>SO_DEBUG</DT>

<DD>SAN service providers are encouraged, but not required, to supply output debug information if applications set the SO_DEBUG option. The mechanism for generating the debug information, and the form it takes, are beyond the scope of this section. </DD>

<DT>SO_GROUP_ID</DT>

<DD>This option is reserved for future use with socket groups. The switch currently ignores it. This option supplies the identifier of the group to which this socket belongs. Note that socket group identifiers are unique across all processes that use a SAN service provider. If this socket is not a group socket, the value of the option is NULL.</DD>

<DT>SO_GROUP_PRIORITY</DT>

<DD>This option is reserved for future use with socket groups. The switch currently ignores it. Group priority indicates the priority of the socket relative to other sockets within the group. Values are nonnegative integers, with zero corresponding to the highest priority. Priority values are a hint to the SAN service provider about how to allocate potentially scarce resources. For example, whenever two or more sockets are both ready to transmit data, the highest priority socket (lowest value for SO_GROUP_PRIORITY) should be serviced first, with the remainder serviced in turn according to their relative priorities.

<P>A SAN service provider returns the WSAENOPROTOOPT error code for nongroup sockets, or if the SAN service provider does not support group sockets. 
</DD>

<DT>SO_MAX_MSG_SIZE</DT>

<DD>A socket option that indicates the maximum size of an outbound (send) message for message-oriented socket types as implemented by the SAN service provider. The switch does not pass send requests to the SAN service provider that exceed the size that the SAN service provider returns for the value of this option. 

<P>This option has no meaning for byte-stream oriented sockets where the switch assumes that the SAN service provider can send messages of any size. 


<P>There is no provision to determine the maximum inbound message size.
</DD>

<DT>SO_MAX_RDMA_SIZE</DT>

<DD>A socket option that indicates the maximum size of RDMA transfer requests (read or write) as implemented by the SAN service provider. The switch does not pass RDMA transfer requests to the SAN service provider that exceed the size that the SAN service provider returns for the value of this option. </DD>

<DT>SO_RDMA_THRESHOLD_SIZE</DT>

<DD>A socket option that indicates the preferred minimum size of RDMA transfer requests (read or write). The switch can set the actual threshold to a value different from the value returned by the SAN service provider. The switch subsequently uses RDMA to transfer data blocks that exceed the size of this threshold and messages to transfer data blocks that are less than or equal to the size of this threshold. 
</DD>
</DL>

<H4>See Also</H4>

<P><A HREF="wsdpref_6fea.htm"><B>WSPSetSockOpt</B></A>, <A HREF="wsdpref_6ir6.htm"><B>WSPSocket</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSPGetSockOpt"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
