<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS_PACKET_OOB_DATA</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS_PACKET_OOB_DATA">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_packet_oob_data_nr"></A>NDIS_PACKET_OOB_DATA</H1>

<P>The NDIS_PACKET_OOB_DATA structure specifies out-of-band information associated with a packet descriptor, used by drivers whose media supplies, requires, or accepts out-of-band information, such as information for an ATM NIC, and by drivers that support multipacket receives and/or sends. </P>

<PRE class=syntax>typedef struct _NDIS_PACKET_OOB_DATA {
    union {
        ULONGLONG  TimeToSend;
        ULONGLONG  TimeSent;
    };
    ULONGLONG  TimeReceived;
    UINT  HeaderSize;
    UINT  SizeMediaSpecificInfo;
    PVOID  MediaSpecificInformation;
    NDIS_STATUS  Status;
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA;</PRE>

<H4>Members</H4>

<DL>
<DT><B>TimeToSend</B></DT>

<DD>Specifies the time, in system time units, at which a given packet should be transmitted over the network.

<P>Protocols can set this timestamp before passing an array of packet descriptor pointers to <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> or a packet descriptor pointer to <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>. 


<P>The <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> or <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> functions of underlying drivers can retrieve the value of this timestamp to determine when the given packet(s) should be transmitted over the network. Usually, only the lowest-level underlying driver retrieves this timestamp. 
</DD>

<DT><B>TimeSent</B></DT>

<DD>Specifies the time, in system time units, at which a received packet was transmitted over the network from a remote node.

<P>NIC drivers and, possibly, intermediate drivers that export only a set of Miniport<I>Xxx</I> functions set this timestamp before indicating receive packet(s). 


<P>The <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A> functions of drivers bound above such a miniport driver can retrieve the value of this timestamp to determine when any particular packet was transmitted from the remote node. If the <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A> function is given an indication and the underlying driver sets this timestamp, <I>ProtocolReceive</I> can call <A HREF="103ndisx_4faq.htm"><B>NdisGetReceivedPacket</B></A> and<B> </B><A HREF="103ndisx_7xma.htm">NDIS_GET_ORIGINAL_PACKET</A> to retrieve the packet that contains this timestamp.  
</DD>

<DT><B>TimeReceived</B></DT>

<DD>Specifies the time, in system time units, at which a given packet from a remote node on the network was received on the NIC. 

<P>NIC drivers and, possibly, intermediate drivers that export only a set of Miniport<I>Xxx</I> functions set this timestamp before calling <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> with a packet array, which can have one or more pointers to packet descriptors. 


<P>The <I>ProtocolReceivePacket</I> functions of drivers bound above any such miniport driver can retrieve the value of this timestamp to determine when the given packet(s) were received. If the <I>ProtocolReceive</I> function is given an indication and the underlying driver sets this timestamp, <I>ProtocolReceive</I> can call <B>NdisGetReceivedPacket</B> and NDIS_GET_ORIGINAL_PACKET to retrieve the packet that contains this timestamp. 
</DD>

<DT><B>HeaderSize</B></DT>

<DD>Specifies the size in bytes of the medium-specific header contained in the buffer mapped by the initial buffer descriptor chained to the packet descriptor.

<P>Lower-level drivers set this member for subsequent receive indication(s) according to the medium each driver’s <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function elected to support.


<P>The <I>ProtocolReceivePacket</I> functions of drivers bound above such a miniport driver can retrieve the value of this member to determine how to process the medium-specific net packet. 
</DD>

<DT><B>SizeMediaSpecificInfo</B></DT>

<DD>Specifies the size in bytes of the buffer at <B>MediaSpecificInformation</B>. 

<P>A driver must set this member if it supplies out-of-band information with a packet to be sent or indicated. 
</DD>

<DT><B>MediaSpecificInformation</B></DT>

<DD>Specifies the address of a driver-allocated buffer. This buffer contains any out-of-band data, such as information for an ATM NIC, that accompanies the net packet specified with the packet descriptor. The out-of-band data has been set up either by the allocating protocol for a send or by the allocating miniport driver for a receive indication. 

<P>Either type of driver can retrieve the address of the out-of-band data buffer and its size to determine how to process or interpret the send or receive specified with the incoming packet descriptor. If the <I>ProtocolReceive</I> function is given an indication and the underlying driver supplies this information, <I>ProtocolReceive</I> can call <B>NdisGetReceivedPacket</B> and NDIS_GET_ORIGINAL_PACKET to retrieve the packet that contains the virtual range of this buffer. 
</DD>

<DT><B>Status</B></DT>

<DD>Specifies the current status of the packet descriptor and the ownership of all driver-allocated resources specified with the packet descriptor. 

<P>Only lower-level drivers and NDIS set this member.


<P><B>In the Receive Path</B>


<P>A miniport driver can set this member before it calls <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> to indicate how soon it needs to regain ownership of its allocated resources specified in the associated packet descriptor(s). A serialized can retrieve this value on return from <B>NdisMIndicateReceivePacket</B> to determine whether the resources specified with the packet descriptor for its indication can be prepared for reuse immediately. A deserialized or connection-oriented miniport, however, does not have to check this value on return from <A HREF="103ndisx_6f02.htm"><B>NdisMCoIndicateReceivePacket</B></A><B>.</B>


<P><B>In the Send Path</B>


<P>A serialized miniport driver can set this member in its <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> function to complete an incoming send immediately, to notify NDIS that it will complete the request asynchronously, or to request that NDIS requeue some or all of the incoming packet array and resubmit those packet descriptor(s) to <I>MiniportSendPackets</I> later. 


<P>A protocol <I>cannot</I> retrieve this value to determine the completion status of a send on return from its call to <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> or <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>. 


<P>A deserialized or connection-oriented miniport driver cannot complete a multipacket send synchronously or request (by setting the <B>Status</B> member) that NDIS requeue some or all of an incoming packet array. Instead, a deserialized or connection-oriented miniport driver must queue internally the entire incoming packet array if it cannot send the data immediately and must always complete a multipacket send asynchronously with <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A> (or <A HREF="103ndisx_5t2q.htm"><B>NdisMCoSendComplete</B></A>) for each packet in the array.

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ndis.h</I>. Include <I>ndis.h</I>.</P>

<H4>Comments</H4>

<P>Every packet descriptor allocated with <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A> has an associated NDIS_PACKET_OOB_DATA block. Only drivers that support multipacket sends and/or receives and drivers that supply out-of-band information, such as packet priority, with each network packet to be transferred use the OOB block. Nevertheless, every NDIS driver that allocates packet descriptors for transfers between bound drivers <I>must</I> allocate those packet descriptors with <B>NdisAllocatePacket</B> from the packet pool that each such NDIS driver usually allocates when it initializes. </P>

<P>In general, drivers of high-capacity bus-master DMA NICs are most likely to support multipacket receives and sends because such a NIC driver makes the greatest performance gains by supporting multipacket transfers. Any protocol that binds itself to (or above) such an underlying NIC driver also should support multipacket sends and receives for maximum performance. </P>

<P>If such a protocol also binds itself above another NIC driver without multipacket transfer support, NDIS handles multipacket sends and single-packet receives in a manner transparent to both drivers by always calling the protocol’s <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A> function and by calling that NIC driver’s <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> function with a single packet per call. Similarly, if a protocol that does not support multipacket transfers binds itself above a NIC driver that does, NDIS handles multipacket receive indications and single packet sends in a manner transparent to both drivers, although the <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A><I> </I>function of the underlying NIC driver is given only a single send request per call to <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> from such a protocol. </P>

<H4>Using Timestamps</H4>

<P>All timestamps set in the NDIS_PACKET_OOB_DATA blocks associated with packet descriptors are expressed in system time units as the number of 100-nanosecond intervals since 12:00 a.m., January 1, 1601. </P>

<P>NDIS drivers can call <A HREF="103ndisx_6m42.htm"><B>NdisGetCurrentSystemTime</B></A> when they set these timestamps with the NDIS_SET_PACKET_TIME_<I>XXX</I> macros. Still higher-level drivers or system components can convert these timestamps into locale-specific values more meaningful to the end user. </P>

<H4>Supplying Out-of-Band Information with Packets</H4>

<P>Any out-of-band information specified in the <B>SizeMediaSpecificInfo</B> and <B>MediaSpecificInformation</B> members is medium-type-specific. For example, some types of media require protocols to specify a packet priority for each packet they send and require NIC drivers to specify a packet priority with each receive packet they indicate. Such a NIC driver must call <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> or <A HREF="103ndisx_6f02.htm"><B>NdisMCoIndicateReceivePacket</B></A> to fulfill the requirements of these types of media. </P>

<P>While NDIS provides support for a range of priority values from zero through seven, some media support only two levels of priority. For these types of media, NDIS drivers should map values zero through three to the medium-specific normal priority value (usually zero for such media types) and values four through seven to the medium-specific high priority value (usually one for such media types). </P>

<P>The structure of individual records within the buffer at <B>MediaSpecificInformation</B> is defined as follows:</P>

<PRE class=syntax>typedef struct     MediaSpecificInformation {
  UINT  NextEntryOffset;
  NDIS_CLASS_ID  ClassId;
  UINT  Size;
  UCHAR  ClassInformation[1];
} MEDIA_SPECIFIC_INFORMATION;</PRE>

<P>The members of this structure contain the following information:

<DL>
<DT><B>NextEntryOffset</B></DT>

<DD>Specifies the byte offset to this member in the next record, if any. Zero indicates this is the last record in the buffer; the values of all remaining members in the last record are also zero. The value of this member must be quad-aligned. </DD>

<DT><B>ClassId</B></DT>

<DD>Specifies the type of the record. Possible values are one of the following:

<DL>
<DT><B>NdisClass802_3Priority</B></DT>

<DD>This value is no longer used. Per-packet priority is a member of the array that is contained in a <A HREF="105nstru_9oqa.htm">NDIS_PACKET_EXTENSION</A> structure. Drivers should use the <A HREF="103ndisx_0bjm.htm">NDIS_PER_PACKET_INFO_FROM_PACKET</A> macro to access packet priority from a packet descriptor. Alternatively, drivers can use the <A HREF="103ndisx_6pyq.htm">NDIS_PACKET_EXTENSION_FROM_PACKET</A> macro to access packet priority from a packet descriptor. </DD>

<DT><B>NdisClassWirelessWanMbxMailbox</B></DT>

<DD>The underlying NIC driver examines the ULONG-sized record at <B>ClassInformation</B> to determine whether the mailbox flag should be set for the associated packet. (1 = set mailbox flag, 0 = do not set mailbox flag)

<P>
</DD>

<DT><B>NdisClassIrdaPacketInfo</B></DT>

<DD>An underlying IrDA NIC driver examines the NDIS_IRDA_PACKET_INFO structure at <B>ClassInformation</B> to determine the number of extra Beginning of Frame (BOF) flags that it must add to a frame to be transmitted and the minimum time (in microseconds) that it must wait after receiving a transmission before its NIC can start transmitting. 

<P>The NDIS_IRDA_PACKET_INFO structure is defined as follows:


<PRE>typedef struct _NDIS_IRDA_PACKET_INFO
{
    UINT  ExtraBOFs
    UNIT  MinTurnAroundTime;
} NDIS_IRDA_PACKET_INFO, *PNDIS_IRDA_PACKET_INFO;</PRE>
</DD>

<DT><B>NdisClassAtmAALInfo</B></DT>

<DD>Before sending a packet to an underlying NDIS driver for an ATM NIC, a protocol driver sets the appropriate information in the <A HREF="106atmstru_3bw2.htm">ATM_AAL_OOB_INFO</A> structure at <B>ClassInformation</B>. 

<P>The ATM_AAL_OOB_INFO structure is defined as follows:


<PRE>typedef struct _ATM_AAL_OOB_INFO
{
    ATM_AAL_TYPE     AalType;
    union
    {
        struct _ATM_AAL5_INFO
        {
            BOOLEAN  CellLossPriority;
            UCHAR    UserToUserIndication;
            UCHAR    CommonPartIndicator;
        } ATM_AAL5_INFO;
 
        struct _ATM_AAL0_INFO
        {
            BOOLEAN  CellLossPriority;
            UCHAR    PayLoadTypeIdentifier;
        } ATM_AAL0_INFO;
    };
} ATM_AAL_OOB_INFO, *PATM_AAL_OOB_INFO;</PRE>


<P>When sending an AAL5 packet, the protocol sets the members of the ATM_AAL5_INFO structure (<B>CellLossPriority</B>, <B>UserToUserIndication</B>, and <B>CommonPartIndicator</B>) to the values to which the miniport driver should set the corresponding fields of the ATM packet header. When sending an AAL0 packet, the protocol sets the members of the ATM_AAL0_INFO structure (<B>CellLossPriority</B> and <B>CommonPartIndicator</B>) to the values to which the miniport driver should set the corresponding fields of the ATM cell header. 


<P>The underlying driver examines the ATM_AAL_OOB_INFO structure to obtain values for fields in the AAL5 packet header or the AAL0 cell header.
</DD>
</DL>
</DD>

<DT><B>Size</B></DT>

<DD>Specifies the number of bytes in the <B>ClassInformation</B> array, including any padding necessary to align the <B>NextEntryOffset</B> of the next record on a four-byte boundary. </DD>

<DT><B>ClassInformation</B></DT>

<DD>Specifies the out-of-band information for this record.
</DD>
</DL>

<P>The NDIS_CLASS_ID type is an NDIS-defined enumeration. Most common classifications for records will be specified as system-defined values. However, a range of values in this enumeration will be available for vendor-defined experimental classes.</P>

<H4>Setting Status Before Making Receive Indications</H4>

<P>Only lower-level NDIS drivers use the <B>Status</B> member of this structure for receive indications. Before such a driver calls <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A>, it sets the <B>Status</B> with <A HREF="103ndisx_6twy.htm">NDIS_SET_PACKET_STATUS</A> for one or more packet descriptors in the array to be indicated to either of the following values:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Tells NDIS that the driver is relinquishing ownership of the packet about to be indicated with <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> or <A HREF="103ndisx_6f02.htm"><B>NdisMCoIndicateReceivePacket</B></A> until the packet descriptor is returned to its <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function.

<P>Protocols that receive the indication can use the packet descriptor, along with all buffers mapped by buffer descriptors chained to the packet descriptor and any out-of-band information supplied with the packet, to copy the indicated net packet data or, possibly, to forward the indicated data to interested clients. 
</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>Tells NDIS that the driver is retaining ownership of the packet about to be indicated with <B>NdisM(Co)IndicateReceivePacket</B>. This packet will be indicated to the <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A> or <A HREF="104tdlow_3pwy.htm"><I>ProtocolCoReceivePacket</I></A> functions of bound protocols. 

<P>Setting this status forces bound protocols to return ownership of each such packet descriptor, of any medium-specific buffer in the out-of-band data block for each packet descriptor, and of the memory mapped by each packet descriptor’s respective chained buffer descriptors to the indicating driver more quickly. The protocols must wait for a call to their <A HREF="104tdlow_5i7m.htm"><I>ProtocolReceiveComplete</I></A> functions to begin postprocessing the data they copied from indication(s) and forwarding the data to clients. 


<P>An indicating driver can set this status if it is running low on packet pool or buffer pool. An indicating NIC driver can set this status if it is running low on NIC receive buffers due to high network traffic. A bus-master DMA NIC driver might call <A HREF="103ndisx_3fg2.htm"><B>NdisMAllocateSharedMemoryAsync</B></A> in these circumstances to get additional NIC receive buffer space. 

</DD>
</DL>

<P>A deserialized or connection-oriented miniport driver must save the <B>Status</B> member of the out-of-band data block in a local variable before indicating up the packet descriptor. As explained in more detail below, when <B>NdisMIndicateReceivePacket</B> returns, a deserialized miniport driver must check the saved packet <B>Status</B> to determine whether it can immediately reclaim the packet descriptor and the associated buffers.</P>

<H4>Getting Status on Return from NdisMIndicateReceivePacket</H4>

<P>After a serialized driver has set the <B>Status</B> for some number of packet descriptors and called <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> with the array of pointers to the packet descriptors, it must use the <A HREF="103ndisx_05bm.htm">NDIS_GET_PACKET_STATUS</A> macro when <B>NdisMIndicateReceivePacket</B> returns control to retrieve the <B>Status</B> set by NDIS. </P>

<P>The returned <B>Status</B> in the NDIS_PACKET_OOB_DATA block associated with each packet descriptor that the serialized driver indicated with NDIS_STATUS_SUCCESS determines what the indicating driver does next, as follows:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>If this is set on return from a miniport’s call to <B>NdisMIndicateReceivePacket</B>, the miniport driver regains ownership of the following:

<UL>
	<LI>The packet descriptor</LI>

	<LI>The associated out-of-band data block associated with the packet descriptor and of any media-specific information buffer specified in this block</LI>

	<LI>All buffers mapped by buffer descriptors chained to the packet descriptor </LI>
</UL>


<P>NDIS guarantees that any packet descriptors for which the indicating driver set NDIS_STATUS_RESOURCES, as already described, will be returned from its call to <B>NdisMIndicateReceivePacket</B> with NDIS_STATUS_SUCCESS. 


<P>The driver can prepare these descriptors, the out-of-band block, and media-specific information buffer, if any, for reuse in subsequent receive indications immediately. 
</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>If this is set on return from <B>NdisMIndicateReceivePacket</B>, protocols retain ownership of the packet descriptor, of its associated out-of-band data block and of any buffer specified in this block, and of all buffers mapped by buffer descriptors chained to the packet descriptor until the packet descriptor is returned to the indicating driver’s <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function. 
</DD>
</DL>

<P>A deserialized or connection-oriented miniport driver must not examine the <B>Status</B> of indicated packets on return of <B>NdisMIndicateReceivePacket</B>. Instead, a deserialized miniport driver must save a packet’s <B>Status</B> in a local variable before indicating up the packet descriptor. When <B>NdisMIndicateReceivePacket</B> returns, the miniport driver should check the saved packet <B>Status</B>. If the miniport driver set the packet's <B>Status</B> to NDIS_STATUS_RESOURCES before indicating up the packet descriptor, it should reclaim the packet descriptor immediately after <B>NdisMIndicateReceivePacket</B> returns, preferably by calling its own <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function. In this case, NDIS does not call the miniport driver’s <I>MiniportReturnPacket</I> function to return the packet descriptor. If the miniport driver set the packet's <B>Status</B> to NDIS_STATUS_SUCCESS before indicating up the packet descriptor, the miniport driver must not reclaim the packet descriptor until NDIS subsequently returns the packet descriptor to the miniport driver's <I>MiniportReturnPacket</I> function.</P>

<H4>Setting Status in MiniportSendPackets</H4>

<P>Only underlying serialized NDIS drivers with <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> functions can use the <B>Status</B> member of this structure for packet descriptors specifying sends. Such a driver’s <I>MiniportSendPackets</I> function sets the <B>Status</B> member in the out-of-band data blocks associated with the packet descriptors in the input array as follows:

<UL>
	<LI>If the driver will complete the send operation asynchronously, <I>MiniportSendPackets</I> sets NDIS_STATUS_PENDING in the <B>Status</B> member for the given packet descriptor. </LI>

	<LI>If the driver cannot process all sends in a given packet array due to current resource constraints, <I>MiniportSendPackets</I> sets NDIS_STATUS_RESOURCES in the <B>Status</B> member for one packet descriptor. 
<P>NDIS queues these packet descriptors internally in the same order for resubmission to <I>MiniportSendPackets</I> when the driver calls <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A> or <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, whichever occurs first. NDIS reflects this miniport-set status value to protocols as NDIS_STATUS_PENDING. 
</LI>

	<LI>If <I>MiniportSendPackets</I> will complete a given send request before it returns control, it must set the <B>Status</B> member for the given packet descriptor to a driver-determined status value so that NDIS can reflect this status back to the protocol that initiated the send. </LI>
</UL>

<P>Otherwise, such a driver supplies the completion status for each packet when it calls <B>NdisMSendComplete</B> with the packet descriptor. Drivers that have <I>MiniportSend </I>instead of <I>MiniportSendPackets</I> functions return the status for each incoming send packet, so such a driver never sets the <B>Status</B> member of the out-of-band data block for a packet descriptor specifying a send. </P>

<P>Protocols <I>cannot</I> determine the completion status for a protocol-allocated packet descriptor from the <B>Status</B> member of the associated OOB block on return from <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> or <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>. This value can change dynamically as NDIS submits, requeues, and resubmits send packet(s) to underlying drivers’ <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> and/or <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> functions. </P>

<P>A protocol cannot use any NDIS_GET_PACKET_<I>XXX</I> macro nor the NDIS_OOB_DATA_FROM_PACKET macro to access the OOB data block for such a protocol-allocated packet descriptor <I>until</I> its <A HREF="104tdlow_6qr6.htm"><I>ProtocolSendComplete</I></A> function is called with the packet descriptor. </P>

<H4>See Also</H4>

<P><A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A>, <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A>, <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A>, <A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A>, <A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A>, <A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A>, <A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A>, <A HREF="103ndisx_6m42.htm"><B>NdisGetCurrentSystemTime</B></A>, <A HREF="103ndisx_7xma.htm">NDIS_GET_ORIGINAL_PACKET</A>, <A HREF="103ndisx_6oz6.htm">NDIS_GET_PACKET_HEADER_SIZE</A>, <A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A>, <A HREF="103ndisx_05bm.htm">NDIS_GET_PACKET_STATUS</A>, <A HREF="103ndisx_3q0i.htm">NDIS_GET_PACKET_TIME_RECEIVED</A>, <A HREF="103ndisx_11iq.htm">NDIS_GET_PACKET_TIME_SENT</A>, <A HREF="103ndisx_0iuq.htm">NDIS_GET_PACKET_TIME_TO_SEND</A>, <A HREF="103ndisx_4faq.htm"><B>NdisGetReceivedPacket</B></A>, <A HREF="103ndisx_6f02.htm"><B>NdisMCoIndicateReceivePacket</B></A>, <A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A>, <A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A>, <A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A>, <A HREF="103ndisx_43qq.htm">NDIS_OOB_DATA_FROM_PACKET</A>, <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="103ndisx_5w8j.htm">NDIS_SET_PACKET_HEADER_SIZE</A>, <A HREF="103ndisx_6rxu.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A>, <A HREF="103ndisx_6twy.htm">NDIS_SET_PACKET_STATUS</A>, <A HREF="103ndisx_3nxu.htm">NDIS_SET_PACKET_TIME_RECEIVED</A>, <A HREF="103ndisx_2u42.htm">NDIS_SET_PACKET_TIME_SENT</A>, <A HREF="103ndisx_9fg2.htm">NDIS_SET_PACKET_TIME_TO_SEND</A>, <A HREF="104tdlow_62k2.htm"><I>ProtocolReceive</I></A>, <A HREF="104tdlow_3pwy.htm"><I>ProtocolCoReceivePacket</I></A>, <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A>, <A HREF="104tdlow_6qr6.htm"><I>ProtocolSendComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS_PACKET_OOB_DATA"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
