<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMRegisterMiniport</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMRegisterMiniport">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismregisterminiport_nr"></A>NdisMRegisterMiniport</H1>

<P><B>NdisMRegisterMiniport</B> registers a miniport's <I>MiniportXxx</I> entry points with the NDIS library as the first step in NIC driver initialization.</P>

<PRE class=syntax><B>NDIS_STATUS 
  NdisMRegisterMiniport(
    IN NDIS_HANDLE</B>  <I>NdisWrapperHandle</I><B>,</B>
    <B>IN PNDIS_MINIPORT_CHARACTERISTICS</B>  <I>MiniportCharacteristics</I><B>,</B>
    <B>IN UINT</B>  <I>CharacteristicsLength
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>NdisWrapperHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>.</DD>

<DT><I>MiniportCharacteristics</I></DT>

<DD>Pointer to an NDIS_MINIPORT_CHARACTERISTICS structure set up by the caller. The structure at <I>MiniportCharacteristics</I> is defined as follows:

<PRE>typedef struct _NDIS_MINIPORT_CHARACTERISTICS {
    UCHAR MajorNdisVersion;
    UCHAR MinorNdisVersion;
    UINT Reserved;
    W_CHECK_FOR_HANG_HANDLER CheckForHangHandler;
    W_DISABLE_INTERRUPT_HANDLER DisableInterruptHandler;
    W_ENABLE_INTERRUPT_HANDLER  EnableInterruptHandler;
    W_HALT_HANDLER HaltHandler;
    W_HANDLE_INTERRUPT_HANDLER  HandleInterruptHandler;
    W_INITIALIZE_HANDLER InitializeHandler;
    W_ISR_HANDLER ISRHandler;
    W_QUERY_INFORMATION_HANDLER QueryInformationHandler;
    W_RECONFIGURE_HANDLER ReconfigureHandler;
    W_RESET_HANDLER ResetHandler;
    W_SEND_HANDLER SendHandler; 
    W_SET_INFORMATION_HANDLER SetInformationHandler;
    W_TRANSFER_DATA_HANDLER TransferDataHandler;
//
// Version used is V4.0 or V5.0
// with following members
//
    W_RETURN_PACKET_HANDLER ReturnPacketHandler;
    W_SEND_PACKETS_HANDLER SendPacketsHandler;
    W_ALLOCATE_COMPLETE_HANDLER AllocateCompleteHandler;
//
// Version used is V5.0 with the following members
//
    W_CO_CREATE_VC_HANDLER CoCreateVcHandler;
    W_CO_DELETE_VC_HANDLER CoDeleteVcHandler;
    W_CO_ACTIVATE_VC_HANDLER CoActivateVcHandler;
    W_CO_DEACTIVATE_VC_HANDLER CoDeactivateVcHandler;
    W_CO_SEND_PACKETS_HANDLER CoSendPacketsHandler;
    W_CO_REQUEST_HANDLER CoRequestHandler;
//
// Version used is V5.1 with the following members
//
    W_CANCEL_SEND_PACKETS_HANDLER CancelSendPacketsHandler;
    W_PNP_EVENT_NOTIFY_HANDLER PnPEventNotifyHandler;
    W_MINIPORT_SHUTDOWN_HANDLER AdapterShutdownHandler;
} NDIS_MINIPORT_CHARACTERISTICS, *PNDIS_MINIPORT_CHARACTERISTICS;The driver should initialize this structure with zeros before setting up any of the following members:</PRE>


<DL>
<DT><B>MajorNdisVersion</B></DT>

<DD>Specifies the major version of the NDIS library the driver is using. The current value is 0x05, although the NDIS library continues to support existing NIC drivers developed for NDIS 4.0 and NDIS 3.0.

<P>This member must be set to 0x05 or 0x04 if the caller sets entry points in any members following <B>TransferDataHandler</B>; it must be set to 0x05 if the caller sets entry points in any members following <B>AllocateCompleteHandler</B>. 
</DD>

<DT><B>MinorNdisVersion</B></DT>

<DD>Specifies the minor version of the NDIS library the driver is using. The current value is 0x00.</DD>

<DT><B>Reserved</B></DT>

<DD>This member is reserved for system use.</DD>

<DT><B>CheckForHangHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_2zua.htm"><I>MiniportCheckForHang</I></A> function, if any, or NULL. </DD>

<DT><B>DisableInterruptHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A> function, if any.</DD>

<DT><B>EnableInterruptHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_222a.htm"><I>MiniportEnableInterrupt</I></A> function, if any.</DD>

<DT><B>HaltHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function.</DD>

<DT><B>HandleInterruptHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A> function, if any. </DD>

<DT><B>InitializeHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function. </DD>

<DT><B>ISRHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> function, if any. This miniport driver function is required if the driver later calls <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A> from its <I>MiniportInitialize</I> function. </DD>

<DT><B>QueryInformationHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function, which is optional if the caller supplies a <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function.</DD>

<DT><B>ReconfigureHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_5c6q.htm"><I>MiniportReconfigure</I></A> function, or NULL.</DD>

<DT><B>ResetHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> function. </DD>

<DT><B>SendHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> function, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A> function, or NULL if the caller supplies a <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> or <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> function. 

<P>If the miniport driver supports multipacket sends or controls a connection-oriented NIC, it sets the <B>SendPacketsHandler</B> or <B>CoSendPacketsHandler</B> member, respectively, and sets this member to NULL. 
</DD>

<DT><B>SetInformationHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> function, which is optional if the caller supplies a <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function.</DD>

<DT><B>TransferDataHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_9a42.htm"><I>MiniportTransferData</I></A> function, if any. This miniport driver function is required unless the caller is the driver of a WAN NIC or the caller supports multipacket receives and, therefore, supplies the entry point of its <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> function at <B>ReturnPacketHandler</B>. Drivers of connection-oriented NICs must support multipacket receives. </DD>

<DT><B>ReturnPacketHandler</B></DT>

<DD>Specifies the entry point of the caller’s <I>MiniportReturnPacket</I> function, if any.</DD>

<DT><B>SendPacketsHandler</B></DT>

<DD>Specifies the entry point of the caller’s <I>MiniportSendPackets</I> function, if any. If the driver of a connectionless NIC also sets an entry point in the <B>SendHandler</B> member, NDIS always calls its <I>MiniportSendPackets</I> function. The driver of a connection-oriented NIC must set the <B>CoSendPacketsHandler</B> member instead of this member.</DD>

<DT><B>AllocateCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A> function, if any. <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> function. If the caller is an integrated call manager and connection-oriented NIC (MCM) driver, this member is set to NULL, because such a driver subsequently registers its <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function as a call manager with <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>. </DD>

<DT><B>CoDeleteVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A> function. If the caller is an integrated call manager and connection-oriented NIC (MCM) driver, this member is set to NULL, because such a driver subsequently registers its <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> function as a call manager with <B>NdisMCmRegisterAddressFamily</B>. </DD>

<DT><B>CoActivateVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A> function.</DD>

<DT><B>CoDeactivateVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="101mini_8ak2.htm"><I>MiniportCoDeactivateVc</I></A> function.</DD>

<DT><B>CoSendPacketsHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> function. The <B>SendHandler</B> and <B>SendPacketsHandler</B> members should be NULL if the driver supplies a <I>MiniportCoSendPackets</I> function. </DD>

<DT><B>CoRequestHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function. If the driver also supplies <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> and <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> functions, its <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function handles only OID_GEN_CO_<I>XXX</I> and connection-oriented medium-specific OID_<I>XXX</I> requests. If such a driver sets the <B>QueryInformationHandler</B> and <B>SetInformationHandler</B> members to NULL, its <I>MiniportCoRequest</I> function must respond to all possible OID requests, including the OID_GEN_<I>XXX</I> that all NDIS miniports must handle.</DD>

<DT><B>CancelSendPacketsHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_70j6.htm"><I>MiniportCancelSendPackets</I></A> function, if any, or NULL. Miniport drivers that queue send packets for more than one second should register a <I>MiniportCancelSendPackets</I> function.</DD>

<DT><B>PnPEventNotifyHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_5tgy.htm"><I>MiniportPnPEventNotify</I></A> function. NDIS 5.1 miniport drivers <I>must</I> register a <I>MiniportPnPEventNotify</I> function. Miniport drivers that have a WDM lower edge <I>should</I> register a <I>MiniportPnPEventNotify</I> function.</DD>

<DT><B>AdapterShutdownHandler</B></DT>

<DD>Specifies the entry point of the caller’s <A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A> function, if any, or NULL. NDIS 5.1 miniports must register a <I>MiniportShutdown</I> function. NDIS 5.1 miniports should register a <I>MiniportShutdown</I> function by calling <A HREF="#ddk_ndismregisterminiport_nr"><B>NdisMRegisterMiniport</B></A>—not by calling <A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A>. </DD>
</DL>
</DD>

<DT><I>CharacteristicsLength</I></DT>

<DD>Specifies the size in bytes of the caller-supplied characteristics buffer, which is <B>sizeof(</B>NDIS_MINIPORT_CHARACTERISTICS<B>)</B>. The exact buffer size allocated depends on the compiler or build directives set for the miniport driver. 

<P>For example, the following shows the appropriate compiler directives to embed at the start of a miniport driver's source code if the driver uses an NDIS 5.0 NDIS_MINIPORT_CHARACTERISTICS structure:


<PRE>#define NDIS_MINIPORT_DRIVER
#define NDIS50_MINIPORT   1 
#include &lt;<I>Ndis.h</I>&gt;  // AFTER preceding directives</PRE>


<P>The inclusion of <I>ndis.h</I> must occur after the NDIS_MINIPORT_DRIVER and NDIS<I>XX</I>_MINIPORT directives, where <I>XX</I> can be 40, as well as the 50 shown here. If the NDIS<I>XX</I>_MINIPORT directive is omitted, the NDIS_MINIPORT_CHARACTERISTICS structure size defaults to version 3.0.


<P>As an alternative, the same driver could set the following build directive in its <I>sources</I> file, instead of using the preceding compiler directives:


<PRE>... 
C_FLAGS=$(C_FLAGS) -DNDIS_MINIPORT_DRIVER -DNDIS50_MINIPORT_DRIVER
...</PRE>


<P>As for the corresponding compiler directive, the driver writer can specify a -DNDIS<I>XX</I>_MINIPORT_DRIVER directive, where <I>XX</I> can be 40, as well as the 50 shown here. 


<P>Setting the appropriate compiler/build directives sets the <I>CharacteristicsLength</I> automatically. The values set in the <B>MajorNdisVersion</B> and <B>MinorNdisVersion</B> members of the characteristics structure must be consistent with the compiler/build directives set for the miniport driver. 

</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisMRegisterMiniport</B> returns NDIS_STATUS_SUCCESS if it registered the miniport driver, or it can return one of the following status values:

<DL>
<DT>NDIS_STATUS_BAD_CHARACTERISTICS</DT>

<DD>The <I>CharacteristicsLength</I> is too small for the <B>MajorNdisVersion</B> specified in the buffer at <I>MiniportCharacteristics</I>. </DD>

<DT>NDIS_STATUS_BAD_VERSION</DT>

<DD>The <B>MajorNdisVersion</B> or <B>MinorNdisVersion</B> specified in the characteristics structure is invalid. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>A shortage of resources, possibly memory, prevented the NDIS library from registering the caller. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>This is a default error status, returned when none of the preceding errors caused the registration to fail. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A NIC driver calls <B>NdisMRegisterMiniport</B> from its <B>DriverEntry</B> function, following its call to <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>.</P>

<P>Every NIC driver exports a set of standard <I>MiniportXxx</I> functions by setting up the characteristics structure and calling <B>NdisMRegisterMiniport</B>. This structure is copied in the <B>NdisMRegisterMiniport</B> request to the NDIS library’s internal storage. Thus, once it has registered, a miniport driver cannot change its <I>MiniportXxx</I> functions.</P>

<P>After the driver has called <B>NdisMRegisterMiniport</B> and after its <B>DriverEntry</B> function returns control, it should be prepared to be called back at the <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> entry point specified in the characteristics structure. In the PnP environment, a NIC driver's call to <B>NdisMRegisterMiniport</B> simply registers the miniport driver's entry points with NDIS, which defers calling the driver's <I>MiniportInitialize</I> function until the PnP Manager sends NDIS a request to start the NIC. For more information about PnP, see <I>Driver Setup, Plug and Play, &amp; Power Management</I>. </P>

<P>The NDIS library currently does not call <A HREF="101mini_5c6q.htm"><I>MiniportReconfigure</I></A> functions, so such a function in an existing miniport driver is dead code unless the miniport driver makes internal calls to its <I>MiniportReconfigure</I> function from <I>MiniportInitialize</I>. </P>

<P>NDIS intermediate drivers, which export both <I>MiniportXxx</I> and <I>ProtocolXxx</I> functions, must call <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A> instead of <B>NdisMRegisterMiniport</B>. Connection-oriented MCM drivers, however, which export <I>MiniportXxx</I> and <I>ProtocolCmXxx</I> functions, call <B>NdisMRegisterMiniport</B>.</P>

<P>Callers of <B>NdisMRegisterMiniport</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0quq.htm"><B>DriverEntry of NDIS Miniport Drivers</B></A>, <A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A>, <A HREF="101mini_2zua.htm"><I>MiniportCheckForHang</I></A>, <A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A>, <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A>, <A HREF="101mini_8ak2.htm"><I>MiniportCoDeactivateVc</I></A>, <A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A>, <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A>, <A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A>, <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>, <A HREF="101mini_222a.htm"><I>MiniportEnableInterrupt</I></A>, <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_5c6q.htm"><I>MiniportReconfigure</I></A>, <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A>, <A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A>, <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="101mini_9a42.htm"><I>MiniportTransferData</I></A>, <A HREF="101mini_7oj6.htm"><I>MiniportWanSend</I></A>, <A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A>, <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A>, <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMRegisterMiniport"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
