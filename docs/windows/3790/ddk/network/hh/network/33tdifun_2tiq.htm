<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiDeregisterProvider</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiDeregisterProvider">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iodeletedevice_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdideregisterprovider_nr"></A>TdiDeregisterProvider</H1>

<P>The <B>TdiDeregisterProvider</B> function is the reciprocal of <B>TdiRegisterProvider</B>. PnP-supporting tranports call <B>TdiDeregisterProvider</B> when they are being unloaded.</P>

<PRE class=syntax><B>NTSTATUS</B>
  <B>TdiDeregisterProvider(</B>
    <B>IN HANDLE</B>  <I>ProviderHandle</I>
    <B>);</B></PRE>

<H4>Parameter</H4>

<DL>
<DT><I>ProviderHandle</I></DT>

<DD>Specifies the handle obtained from <B>TdiRegisterProvider</B>. 
</DD>
</DL>

<H4>Return Value</H4>

<P><B>TdiDeregisterProvider</B> returns STATUS_SUCCESS if the registration was released and all the clients of that transport were notified. Otherwise, it can return STATUS_INSUFFICIENT_RESOURCES, although it is highly unlikely to ever return this status to a transport that is currently unloading itself.</P>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>Before a transport returns control from its Unload routine, it must call <B>TdiDeregisterProvider</B> if it made an initialization-time call to <B>TdiRegisterProvider</B>. </P>

<P>The transport must free all the TDI-associated resources it has allocated <I>before</I> it calls <B>TdiDeregisterProvider</B>. In general, the transport has already called <B>TdiDeregisterAddress</B> with any network addresses and <B>TdiDeregisterDeviceObject</B> with any per-binding device objects that it registered with TDI when it tore down its bindings to the underlying NICs. However, an unloading transport also should destroy the device objects it created with <B>IoDeleteDevice</B> and release any collateral resources it allocated to maintain state about its TDI clients before calling <B>TdiDeregisterProvider</B>. (For more information, see <A HREF="JavaScript:hhobj_1.Click()"><B>IoDeleteDevice</B></A>.) </P>

<P>Callers of <B>TdiDeregisterProvider</B> must be running at IRQL &lt; DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="33tdifun_9r02.htm"><B>TdiProviderReady</B></A>, <A HREF="33tdifun_99te.htm"><B>TdiRegisterProvider</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiDeregisterProvider"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
