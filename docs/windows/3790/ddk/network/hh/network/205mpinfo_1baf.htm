<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Reporting Hardware Status</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Reporting Hardware Status">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_reporting_hardware_status_ng"></A>Reporting Hardware Status</H1>

<P>A connectionless miniport driver indicates changes in hardware status to upper layers by calling <A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A>. A connection-oriented miniport driver indicates changes by calling <A HREF="103ndisx_0qgi.htm"><B>NdisMCoIndicateStatus</B></A>. </P>

<P><B>NdisM(Co)IndicateStatus</B> takes both a general status code and a buffer containing media-specific information that further defines the reason for the status change. NDIS reports this status change to bound protocol drivers. NDIS does not interpret or otherwise intercept the status code. The miniport driver can make one or more such calls; however, when a connectionless miniport driver has finished sending status, it must call <B>NdisMIndicateStatusComplete</B> to let interested protocol drivers know that it is done reporting status. A connection-oriented miniport driver does not have to indicate that it has finished sending status. The protocol driver or configuration manager can log the status or take corrective action, as appropriate. </P>

<P><B>NdisMCoIndicateStatus</B> takes any valid NDIS_STATUS_<I>XXX</I> value. The miniport driver is responsible for indicating status codes that make sense to a protocol or higher level driver. A protocol driver ignores any status values in which it is not interested or that don’t make sense in the context of its operations. </P>

<P>For instance, a miniport driver can report NDIS_STATUS_RING_STATUS to report a ring failure. The <I>StatusBuffer</I> argument to <B>NdisMCoIndicateStatus</B> further details the ring status. The contents of <I>StatusBuffer</I> encodes a set of possible ring conditions that are the reason for the status report, such as NDIS_RING_SIGNAL_LOSS and NDIS_RING_HARD_ERROR.</P>

<P>A miniport driver cannot indicate status in the context of its <I>MiniportInitialize</I>, <I>MiniportISR</I>, <I>MiniportHalt</I>, or <I>MiniportShutdown</I> function.</P>

<P>A miniport driver can also be interrogated by an upper layer driver or by NDIS about the miniport driver’s hardware status. When the <I>MiniportQueryInformation</I> function of a connectionless miniport driver or the <I>MiniportCoRequest</I> function of a connection-oriented miniport driver receives OID_GEN_HARDWARE_STATUS, it responds with any of the applicable statuses defined in NDIS_HARDWARE_STATUS. These include:

<UL>
	<LI><B>NdisHardwareStatusReady</B></LI>

	<LI><B>NdisHardwareStatusInitializing</B></LI>

	<LI><B>NdisHardwareStatusReset</B></LI>

	<LI><B>NdisHardwareStatusClosing</B></LI>

	<LI><B>NdisHardwareStatusNotReady</B></LI>
</UL>

<P>The miniport driver can be queried so that NDIS can synchronize operations between layers of NDIS drivers — for instance, by determining whether a NIC is ready to accept packets.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Reporting%20Hardware%20Status"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
