<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Restrictions on Intermediate Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Restrictions on Intermediate Drivers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_restrictions_on_intermediate_drivers_ng"></A>Restrictions on Intermediate Drivers</H2>

<P>Previous sections have described specific actions an intermediate driver <I>must</I> follow to perform correctly, summarized as follows: 

<OL>
	<LI>An intermediate driver must set the NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER flag when it calls <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A> in its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function. NDIS identifies that a driver is an intermediate type only through the presence of this flag. </LI>

	<LI>An NDIS 4.0 or NDIS 5.0 intermediate driver <I>must always</I>, at a minimum, replace an incoming packet descriptor for a packet that it passes down to an underlying driver on a send or up to a higher-level driver on a receive with a fresh packet descriptor, allocated by the intermediate driver. NDIS 5.1 drivers that support packet-stacking do not have this restriction. The NDIS 4.0 or NDIS 5.0 intermediate driver must also then replace its own packet descriptor with the one that originally was associated with the packet when it was passed to the intermediate driver—for example, when completing a send or completing a receive indication. The intermediate driver must return the resources that it has "borrowed" from a higher or lower driver promptly by returning that driver's packet descriptor and the resources that it specifies.</LI>

	<LI>An intermediate driver <I>must</I> follow the rules that apply to any deserialized miniport driver in particular, the following guideline:
<P>If any internal driver resources are shared between an intermediate driver’s send function and any other <I>MiniportXxx</I> function, that resource must be protected by a spin lock. 

<P>As for any deserialized miniport driver, an intermediate driver that organizes its per-binding context area into discrete receive-specific, send-specific, and shared ranges, with only the shared resources protected by spin locks, will exhibit far better performance than a driver that must overprotect its context area because send-specific, receive-specific, and shared variables are scattered throughout.
</LI>
</OL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Restrictions%20on%20Intermediate%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
