<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMStartBufferPhysicalMapping</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMStartBufferPhysicalMapping">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismstartbufferphysicalmapping_nr"></A>NdisMStartBufferPhysicalMapping</H1>

<P><B>NdisMStartBufferPhysicalMapping</B> sets up a mapping for a bus-master DMA transfer operation. </P>

<PRE class=syntax><B>VOID 
  NdisMStartBufferPhysicalMapping(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN PNDIS_BUFFER</B>  <I>Buffer</I><B>,</B>
    <B>IN ULONG</B>  <I>PhysicalMapRegister</I><B>,</B>
    <B>IN BOOLEAN</B>  <I>WriteToDevice</I><B>,</B>
    <B>OUT PNDIS_PHYSICAL_ADDRESS_UNIT</B>  <I>PhysicalAddressArray</I><B>,</B>
    <B>OUT PUINT</B>  <I>ArraySize
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle originally input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>Buffer</I></DT>

<DD>Pointer to a buffer descriptor mapping the virtual range for the transfer. This buffer contains the data to be transferred.</DD>

<DT><I>PhysicalMapRegister</I></DT>

<DD>Specifies the zero-based index of the map register to be used for the transfer. This value must be no greater than one less than the number of map registers that the driver allocated during initialization with <A HREF="103ndisx_44j6.htm"><B>NdisMAllocateMapRegisters</B></A>. </DD>

<DT><I>WriteToDevice</I></DT>

<DD>Specifies TRUE when the mapping is used for an outbound transfer from the system through the NIC.</DD>

<DT><I>PhysicalAddressArray</I></DT>

<DD>Pointer to a caller-supplied array of NDIS_PHYSICAL_UNIT structures, in which each element is defined as follows: 

<PRE>typedef struct _NDIS_PHYSICAL_ADDRESS_UNIT {
    NDIS_PHYSICAL_ADDRESS PhysicalAddress;
    UINT Length;
} NDIS_PHYSICAL_ADDRESS_UNIT, *PNDIS_PHYSICAL_ADDRESS_UNIT;</PRE>


<P>On return from a successful call to <B>NdisMStartBufferPhysicalMapping</B>, elements in this array specify the mapped logical ranges suitable for downloading to the NIC, with the following members in each element: 


<DL>
<DT><B>PhysicalAddress</B></DT>

<DD>Specifies the base physical address for the start of a discrete contiguous range of data to be transferred. </DD>

<DT><B>Length</B></DT>

<DD>Specifies the number of bytes in the mapped range. </DD>
</DL>
</DD>

<DT><I>ArraySize</I></DT>

<DD>Pointer to a caller-supplied variable in which <B>NdisMStartBufferPhysicalMapping</B> returns the number of ranges it mapped in the buffer at <I>PhysicalAddressArray</I>. This value is a count of the elements that contain mappings, so the caller can use this count as a bound on the number of physical address ranges it downloads to the NIC subsequently. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Bus-master NIC drivers call <B>NdisMStartBufferPhysicalMapping</B> in response to send requests originating in protocols bound to the NIC. That is, the buffer descriptor at <I>Buffer</I> usually was chained to a packet input to the NIC driver’s <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> or <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> function. </P>

<P>Every protocol driver is responsible for setting up send packets to suit the limits of the underlying NIC. The NIC driver’s <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function already returned these limits in response to certain OID_GEN_<I>XXX</I> requests. Consequently, a miniport driver need not test incoming send packets for oversized frames or transmit blocks, nor for transmit buffer overflows. For more information about OIDs, see <A HREF="21oidovw_8q9e.htm">NDIS Object Identifiers</A>. </P>

<P>A caller of <B>NdisMStartBufferPhysicalMapping</B> must ensure that the array at <I>PhysicalAddressArray</I> is large enough to map the given buffer. A miniport driver can call <A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A> to determine how many elements are required to map the virtual range specified in the descriptor at <I>Buffer</I>. </P>

<P>For small transfer requests, such as those up to 256 bytes in length, a miniport driver can achieve higher performance by copying the data to be transmitted into a staging buffer in the shared memory space already allocated with <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A> or <A HREF="103ndisx_3fg2.htm"><B>NdisMAllocateSharedMemoryAsync</B></A>. Because the NIC driver already has mapped virtual and physical addresses for such a shared memory range, it need not call <B>NdisM..BufferPhysicalMapping</B> functions for such small DMA transfers. </P>

<P>Data received by a bus-master NIC is transferred directly into device-accessible buffers within a shared memory block allocated by the miniport driver. Miniports perform explicit bus-master DMA operations only for transmits. </P>

<P>To transfer packet data for a send request, any miniport driver basically does the following:

<OL>
	<LI>Maps the virtual range containing the data with <B>NdisMStartBufferPhysicalMapping</B> to get mapped device-accessible range addresses for use by its NIC</LI>

	<LI>Downloads the returned physical addresses to the NIC</LI>

	<LI>Calls <A HREF="103ndisx_188i.htm"><B>NdisFlushBuffer</B></A> and <A HREF="103ndisx_29rm.htm"><B>NdisMUpdateSharedMemory</B></A> if the driver allocated cached memory</LI>

	<LI>Programs the NIC for the transfer operation</LI>

	<LI>Calls <B>NdisMCompleteBufferPhysicalMapping</B>, usually from the <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A> function, when the NIC has completed the transfer, which the NIC indicates by a transmit interrupt or, possibly, by a state change discovered by the NIC driver’s polling <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A> function </LI>
</OL>

<P>Any mapping returned by <B>NdisMStartBufferPhysicalMapping</B> is valid only until the miniport driver calls <A HREF="103ndisx_3pbm.htm"><B>NdisMCompleteBufferPhysicalMapping</B></A>. When <B>NdisMCompleteBufferPhysicalMapping</B> returns control, the <I>PhysicalMapRegister</I> specified in the preceding call to <B>NdisMStartBufferPhysicalMapping</B> can be reused in a subsequent DMA operation. </P>

<P>Callers of <B>NdisMStartBufferPhysicalMapping</B> run at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A>, <A HREF="103ndisx_188i.htm"><B>NdisFlushBuffer</B></A>, <A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A>, <A HREF="103ndisx_44j6.htm"><B>NdisMAllocateMapRegisters</B></A>, <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>, <A HREF="103ndisx_3fg2.htm"><B>NdisMAllocateSharedMemoryAsync</B></A>, <A HREF="103ndisx_3pbm.htm"><B>NdisMCompleteBufferPhysicalMapping</B></A>, <A HREF="103ndisx_29rm.htm"><B>NdisMUpdateSharedMemory</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMStartBufferPhysicalMapping"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
