<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Virtual Connection Context</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Virtual Connection Context">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_virtual_connection_context_ng"></A>Virtual Connection Context</H2>

<P>Before making a call, a connection-oriented client requests a connection-oriented miniport driver to set up a virtual connection (VC) over which packets can be transmitted and/or received. Similarly, before indicating an incoming call to a connection-oriented client, a call manager or integrated miniport call manager (MCM) driver requests the miniport driver to set up a VC for the incoming call. A virtual connection is a logical connection between two connection-oriented entities. Connection-oriented transmissions and receptions always occur on a specific VC.</P>

<P>A connection-oriented miniport driver maintains state information in a miniport driver-allocated context area about each VC that it sets up. This per-VC context is maintained by the miniport driver and is opaque to NDIS and to protocol drivers. In its <I>MiniportCoCreateVc</I> function, a connection-oriented miniport driver passes a handle to the VC context area to NDIS, and NDIS passes an <I>NdisVcHandle</I> that uniquely identifies the created VC back to the miniport driver, to the appropriate connection-oriented client, and to the call manager or integrated miniport call manager (MCM) driver.</P>

<P>Before data can be sent or received on a VC, the VC must be activated. The call manager initiates activation of the VC by calling <B>Ndis(M)CmActivateVc</B> and passing call parameters that include the characteristics of the VC to be activated. In response to this call, NDIS calls the miniport driver's <I>MiniportCoActivateVc</I> function, which activates the VC.</P>

<P>After a call is complete or a VC is otherwise not needed, the call manager can deactivate the VC by calling <A HREF="103ndisx_5g4y.htm"><B>Ndis(M)CmDeactivate<SMALL>VC</SMALL></B></A>, which causes NDIS to call the miniport driver's <A HREF="101mini_8ak2.htm"><I>MiniportC0DeactivateVc</I></A> function. Either the connection-oriented client or the call manager can initiate the deletion of the VC by calling <B>NdisCoDeleteVc</B>, which causes NDIS to call the miniport driver's <A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A> function.</P>

<P>For more information on miniport driver operations on VCs, see <A HREF="401condis_4wo7.htm">Operations on VCs</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Virtual%20Connection%20Context"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
