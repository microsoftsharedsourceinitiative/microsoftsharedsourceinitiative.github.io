<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS Library Functions Used by Miniport Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS Library Functions Used by Miniport Drivers">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_run_time_library_routines_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_library_functions_used_by_miniport_drivers_nr"></A>NDIS Library Functions Used by Miniport Drivers</H1>

<DL>
<DT><A HREF="103ndisx_9oxe.htm">ETH_COPY_NETWORK_ADDRESS</A> </DT>

<DD>Copies a given Ethernet address to a given location.</DD>

<DT><A HREF="103ndisx_08aa.htm">FDDI_IS_BROADCAST</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given FDDI address is a broadcast address. </DD>

<DT><A HREF="103ndisx_4goi.htm">FDDI_IS_MULTICAST</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given FDDI address is a multicast address. </DD>

<DT><A HREF="103ndisx_7kz6.htm">FDDI_IS_SMT</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given FDDI frame is SMT (systems management utility). </DD>

<DT><A HREF="103ndisx_9r3m.htm"><B>NdisAcquireReadWriteLock</B></A></DT>

<DD>Acquires a lock that the caller uses for either write or read access to the resources that are shared among driver threads.</DD>

<DT><A HREF="103ndisx_896a.htm"><B>NdisAcquireSpinLock</B></A> </DT>

<DD>Acquires a spin lock so the caller can synchronize access to resources shared among nonISR driver routines in a multiprocessor-safe way. </DD>

<DT><A HREF="103ndisx_2pki.htm"><B>NdisAdjustBufferLength</B></A> </DT>

<DD>Modifies the length specified in a given buffer descriptor that was allocated or copied by the caller. </DD>

<DT><A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A> </DT>

<DD>Creates a buffer descriptor describing a specified virtual (sub)range within an already allocated, nonpaged memory block, given a handle returned by <B>NdisAllocateBufferPool</B>. </DD>

<DT><A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A> </DT>

<DD>Returns a handle with which the caller can allocate buffer descriptors with <B>NdisAllocateBuffer</B>. </DD>

<DT><A HREF="103ndisx_08he.htm"><B>NdisAllocateFromBlockPool</B></A></DT>

<DD>Allocates memory from a block of memory pool.</DD>

<DT><A HREF="103ndisx_72wi.htm"><B>NdisAllocateFromNPagedLookasideList</B></A></DT>

<DD>Removes the first entry from the given lookaside list head. If the lookaside list currently is empty, an entry is allocated from nonpaged pool.</DD>

<DT><A HREF="103ndisx_9xwy.htm"><B>NdisAllocateMemory</B></A> </DT>

<DD>This function is obsolete. Use <B>NdisAllocateMemoryWithTag</B>. </DD>

<DT><A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A></DT>

<DD>Allocates resident (nonpaged) system-space memory.</DD>

<DT><A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A> </DT>

<DD>Allocates a packet descriptor, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A> </DT>

<DD>Allocates and initializes a block of nonpaged packet pool, given the number of packet descriptors and how many bytes each fixed-size packet descriptor should contain. </DD>

<DT><A HREF="103ndisx_390y.htm"><B>NdisAllocatePacketPoolEx</B></A></DT>

<DD>Allocates and initializes a block of storage for a pool of packet descriptors.</DD>

<DT><A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A> </DT>

<DD>Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to resources shared among nonISR driver functions. An initialized spin lock, for which the caller supplies resident storage, is a required parameter to the <B>Ndis..SpinLock</B> and <B>NdisInterlocked</B><I>Xxx</I> functions. </DD>

<DT><A HREF="103ndisx_6ynm.htm"><B>NdisAnsiStringToUnicodeString</B></A> </DT>

<DD>Converts a given counted ANSI string into a counted Unicode string. </DD>

<DT><A HREF="103ndisx_0bn6.htm"><B>NdisBufferLength</B></A></DT>

<DD>Returns the length in bytes of a given mapped buffer.</DD>

<DT><A HREF="103ndisx_61v6.htm">NDIS_BUFFER_LINKAGE</A> </DT>

<DD>Returns a pointer to a linked buffer, given a pointer to an NDIS buffer descriptor.</DD>

<DT><A HREF="103ndisx_0f76.htm">NDIS_BUFFER_TO_SPAN_PAGES</A> </DT>

<DD>Determines how many pages of host memory are being used to back a given buffer.</DD>

<DT><A HREF="103ndisx_62uq.htm"><B>NdisBufferVirtualAddress</B></A></DT>

<DD>Returns the base virtual address for the buffer mapped by a given buffer descriptor. It maps the physical pages described by the given buffer descriptor onto system space, if they are not already mapped to system space. Drivers should call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>. NDIS 5.1 miniport drivers must call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>.</DD>

<DT><A HREF="103ndisx_0pki.htm"><B>NdisBufferVirtualAddressSafe</B></A></DT>

<DD><B>NdisBufferVirtualAddressSafe</B> is the safe version of <B>NdisBufferVirtualAddress</B>. Unlike <B>NdisBufferVirtualAddress</B>, <B>NdisBufferVirtualAddressSafe</B> will not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>. NDIS 5.1 miniport drivers must call <B>NdisBufferVirtualAddressSafe</B> instead of <B>NdisBufferVirtualAddress</B>.</DD>

<DT><A HREF="103ndisx_990y.htm"><B>NdisChainBufferAtBack</B></A> </DT>

<DD>Links a given buffer descriptor at the end of the chain of buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_3c36.htm"><B>NdisChainBufferAtFront</B></A> </DT>

<DD>Links a given buffer descriptor at the start of the chain of buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_54ky.htm"><B>NdisCloseConfiguration</B></A> </DT>

<DD>Releases the handle returned by <A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A> after the caller has retrieved configuration information for a NIC or itself and/or, possibly, stored additional information about its NIC in the registry.</DD>

<DT><A HREF="103ndisx_8jjm.htm"><B>NdisCloseFile</B></A> </DT>

<DD>Releases a handle returned by <B>NdisOpenFile</B> and frees the memory allocated to hold the file contents when it was opened. </DD>

<DT><A HREF="103ndisx_1n5e.htm"><B>NdisCopyBuffer</B></A> </DT>

<DD>Creates a buffer descriptor for a specified virtual (sub)range, given a handle for a block of already allocated memory and a pointer to the buffer descriptor for the block.</DD>

<DT><A HREF="103ndisx_2ak2.htm"><B>NdisCopyFromPacketToPacket</B></A> </DT>

<DD>Copies a specified number of bytes of data from one packet to another, starting at a specified offset in a given source packet’s data and copying the data to a specified offset in the target packet. Returns the number of bytes actually copied, which can be less than the requested number, depending on the source packet and specified starting offset for the copy operation. </DD>

<DT><A HREF="103ndisx_59iq.htm"><B>NdisCreateBlockPool</B></A></DT>

<DD>Returns the handle to a block of memory pool.</DD>

<DT><A HREF="103ndisx_8z5e.htm"><B>NdisCreateLookaheadBufferFromSharedMemory</B></A> </DT>

<DD>Returns the virtual address of a buffer within a block of memory shared with a bus-master DMA NIC so the caller can set up a read-only lookahead buffer for a receive indication to higher-level drivers. </DD>

<DT><A HREF="103ndisx_2fw2.htm"><B>NdisDeleteNPagedLookasideList</B></A></DT>

<DD>Removes a nonpaged lookaside list from the system.</DD>

<DT><A HREF="103ndisx_8b5e.htm"><B>NdisDestroyBlockPool</B></A></DT>

<DD>Releases resources for a block of memory pool.</DD>

<DT><A HREF="103ndisx_2rg2.htm"><B>NdisDestroyLookaheadBufferFromSharedMemory</B></A> </DT>

<DD>Releases access to the buffer obtained in the preceding call to <B>NdisCreateLookaheadBufferFromSharedMemory</B>. </DD>

<DT><A HREF="103ndisx_8z1u.htm"><B>NdisDprAcquireSpinLock</B></A> </DT>

<DD>Acquires a spin lock so the caller can synchronize access to resources shared among nonISR driver functions in a multiprocessor-safe way, provided that the caller is running at IRQL = DISPATCH_LEVEL. </DD>

<DT><A HREF="103ndisx_7otu.htm"><B>NdisDprAllocatePacket</B></A> </DT>

<DD>Allocates and initializes a packet descriptor when the caller is running at IRQL = DISPATCH_LEVEL, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_9ucz.htm"><B>NdisDprFreePacket</B></A> </DT>

<DD>Releases a driver-allocated packet descriptor and returns it to the free list when the caller is running at IRQL = DISPATCH_LEVEL. </DD>

<DT><A HREF="103ndisx_8ktu.htm"><B>NdisDprReleaseSpinLock</B></A> </DT>

<DD>Releases a spin lock that was acquired in a preceding call to <B>NdisDprAcquireSpinLock</B>. </DD>

<DT><A HREF="103ndisx_2dte.htm"><B>NdisEqualAnsiString</B></A></DT>

<DD>Compares two ANSI strings and returns whether they are equal.</DD>

<DT><A HREF="103ndisx_019u.htm"><B>NdisEqualMemory</B></A></DT>

<DD>Compares a specified number of characters in one block of memory with the same number of characters in a second block of memory.</DD>

<DT><A HREF="103ndisx_59ma.htm"><B>NdisEqualString</B></A> </DT>

<DD>Compares two strings to determine whether they are equal. </DD>

<DT><A HREF="103ndisx_1yb6.htm"><B>NdisEqualUnicodeString</B></A></DT>

<DD>Compares two Unicode strings and returns whether they are equal.</DD>

<DT><A HREF="103ndisx_6esy.htm"><B>NdisFillMemory</B></A></DT>

<DD>Fills a caller-supplied buffer with the given character.</DD>

<DT><A HREF="103ndisx_188i.htm"><B>NdisFlushBuffer</B></A> </DT>

<DD>Flushes the memory region described by a given buffer descriptor from all processor caches.</DD>

<DT><A HREF="103ndisx_044y.htm"><B>NdisFreeBuffer</B></A> </DT>

<DD>Releases a buffer descriptor obtained in a preceding call to <B>NdisAllocateBuffer</B> or <B>NdisCopyBuffer</B>. </DD>

<DT><A HREF="103ndisx_0auq.htm"><B>NdisFreeBufferPool</B></A> </DT>

<DD>Releases a handle obtained in a preceding call to <B>NdisAllocateBufferPool</B>.</DD>

<DT><A HREF="103ndisx_6sc2.htm"><B>NdisFreeMemory</B></A> </DT>

<DD>Releases a handle, usually when the driver is being unloaded, that was obtained in a preceding call to <B>NdisAllocateMemoryWithTag</B>. </DD>

<DT><A HREF="103ndisx_47le.htm"><B>NdisFreePacket</B></A> </DT>

<DD>Releases a packet descriptor that was allocated from packet pool with <B>NdisAllocatePacket</B> and returns it to the free list.</DD>

<DT><A HREF="103ndisx_59f6.htm"><B>NdisFreePacketPool</B></A> </DT>

<DD>Releases a handle to a block of packet pool that was allocated with <B>NdisAllocatePacketPool</B>. </DD>

<DT><A HREF="103ndisx_4pv6.htm"><B>NdisFreeSpinLock</B></A> </DT>

<DD>Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock, </B>usually when a driver is unloading. </DD>

<DT><A HREF="103ndisx_20oi.htm"><B>NdisFreeString</B></A> </DT>

<DD>Frees the storage for a buffered string. </DD>

<DT><A HREF="103ndisx_7joy.htm"><B>NdisFreeToBlockPool</B></A></DT>

<DD>Releases memory back to a block of memory pool.</DD>

<DT><A HREF="103ndisx_0kc2.htm"><B>NdisFreeToNPagedLookasideList</B></A></DT>

<DD>Returns an entry to the given lookaside list.</DD>

<DT><A HREF="103ndisx_57ua.htm"><B>NdisGetBufferPhysicalArraySize</B></A> </DT>

<DD>Returns the number of discontiguous physical blocks in a buffer, given a buffer descriptor.</DD>

<DT><A HREF="103ndisx_8po2.htm"><B>NdisGetCacheFillSize</B></A> </DT>

<DD>Returns the size of the microprocessor cache boundary in bytes. (This information is useful primarily to drivers of bus-master DMA NICs.) </DD>

<DT><A HREF="103ndisx_5qpe.htm"><B>NdisGetCurrentProcessorCounts</B></A></DT>

<DD>Returns counts for the current processor that the driver can use to determine CPU utilization for a particular time interval.</DD>

<DT><A HREF="103ndisx_9g8i.htm"><B>NdisGetCurrentProcessorCpuUsage</B></A> </DT>

<DD>Returns how busy the current processor is as a percentage. </DD>

<DT><A HREF="103ndisx_6m42.htm"><B>NdisGetCurrentSystemTime</B></A> </DT>

<DD>Returns the current system time, suitable for use as a timestamp. </DD>

<DT><A HREF="103ndisx_146q.htm"><B>NdisGetFirstBufferFromPacket</B></A> </DT>

<DD>Returns pointers to the buffer descriptor and base virtual address for the initial buffer chained to a given packet, along with the sizes of the initial buffer and full buffer, in case the buffer is fragmented. Drivers should call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>. NDIS 5.1 miniports must call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>.</DD>

<DT><A HREF="103ndisx_92wi.htm"><B>NdisGetFirstBufferFromPacketSafe</B></A></DT>

<DD><B>NdisGetFirstBufferFromPacketSafe </B>is the safe version of <B>NdisGetFirstBufferFromPacket</B>. Unlike <B>NdisGetFirstBufferFromPacket</B>, <B>NdisGetFirstBufferFromPacketSafe </B>does not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>. NDIS5.1 miniports must use <B>NdisGetFirstBufferFromPacketSafe</B> instead of <B>NdisGetFirstBufferFromPacket</B>.</DD>

<DT><A HREF="103ndisx_2j5e.htm"><B>NdisGetNextBuffer</B></A> </DT>

<DD>Returns the next buffer descriptor in a chain, given the current buffer descriptor. </DD>

<DT><A HREF="103ndisx_7xma.htm">NDIS_GET_ORIGINAL_PACKET</A> </DT>

<DD>Returns a pointer to a packet descriptor that the lowest-level driver in a layered stack of NDIS drivers indicated. The calling driver should access the out-of-band (OOB) data block from this original packet rather than the packet that the driver below the calling driver indicated. If the calling driver is not part of a layered stack, the returned packet descriptor will be identical to the packet that the driver below the calling driver indicated. </DD>

<DT><A HREF="103ndisx_3k36.htm"><B>NdisGetPacketCancelId</B></A></DT>

<DD>Returns the cancellation identifier assigned to a packet.</DD>

<DT><A HREF="103ndisx_67si.htm"><B>NdisGetPacketFlags</B></A> </DT>

<DD>Returns the flags, if any, set by a protocol driver in a given packet descriptor. </DD>

<DT><A HREF="103ndisx_4m0i.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A> </DT>

<DD>Returns the address (<B>MediaSpecificInformation</B>) and length (<B>SizeMediaSpecificInfo</B>) from the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with the packet descriptor of a buffer containing out-of-band information, such as packet priority, about a given send packet set up by a protocol. </DD>

<DT><A HREF="103ndisx_7muq.htm">NDIS_GET_PACKET_PROTOCOL_TYPE</A></DT>

<DD>Returns the protocol ID associated with a given packet descriptor.</DD>

<DT><A HREF="103ndisx_05bm.htm">NDIS_GET_PACKET_STATUS</A> </DT>

<DD>Returns the <B>Status</B> of an indicated receive packet on return from <B>NdisMIndicateReceivePacket</B> so the driver can determine whether its miniport driver-allocated packet descriptor (and chained buffer descriptors) can be prepared for reuse immediately. </DD>

<DT><A HREF="103ndisx_0iuq.htm">NDIS_GET_PACKET_TIME_TO_SEND</A> </DT>

<DD>Returns the protocol-set <B>TimeToSend</B> timestamp, directing the miniport driver when to send the given packet, from the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with the incoming packet descriptor. </DD>

<DT><A HREF="103ndisx_4c4y.htm"><B>NdisGetPhysicalAddressHigh</B></A> </DT>

<DD>Returns the high-order part of a given physical address.</DD>

<DT><A HREF="103ndisx_3wqa.htm"><B>NdisGetPhysicalAddressLow</B></A> </DT>

<DD>Returns the low-order part of a given physical address. </DD>

<DT><A HREF="103ndisx_4faq.htm"><B>NdisGetReceivedPacket</B></A> </DT>

<DD>Retrieves a packet that was received from the underlying driver. </DD>

<DT><A HREF="103ndisx_5jaq.htm"><B>NdisGetRoutineAddress</B></A></DT>

<DD>Returns the address of a routine given the routine's name. </DD>

<DT><A HREF="103ndisx_1p4i.htm"><B>NdisGetSystemUpTime</B></A></DT>

<DD>Returns the number of milliseconds that have elapsed since the system was booted.</DD>

<DT><A HREF="103ndisx_1gfm.htm"><B>NdisGetVersion</B></A></DT>

<DD>Returns the version number of NDIS.</DD>

<DT><A HREF="103ndisx_1hiq.htm"><B>NdisIMAssociateMiniport</B></A> </DT>

<DD>Informs the NDIS library that the given lower and upper interfaces for the miniport driver and protocol respectively belong to the same intermediate driver. </DD>

<DT><A HREF="103ndisx_8nhu.htm"><B>NdisIMCancelInitializeDeviceInstance</B></A> </DT>

<DD>Cancels the immediately preceding call to <B>NdisIMInitializeDeviceInstance</B>.</DD>

<DT><A HREF="103ndisx_9qpe.htm"><B>NdisIMCopySendCompletePerPacketInfo</B></A> </DT>

<DD>Copies per-packet information from a packet returned by a lower miniport driver into a new packet that is to be returned to an upper-level driver. </DD>

<DT><A HREF="103ndisx_565u.htm"><B>NdisIMCopySendPerPacketInfo</B></A> </DT>

<DD>Copies per-packet information from a packet sent down by an upper-level driver into a new packet to be sent down to a lower miniport driver. </DD>

<DT><A HREF="103ndisx_1q7m.htm"><B>NdisIMDeInitializeDeviceInstance</B></A></DT>

<DD>Calls an NDIS intermediate driver's <I>MiniportHalt</I> function to tear down the driver's virtual NIC.</DD>

<DT><A HREF="103ndisx_4zci.htm"><B>NdisIMDeregisterLayeredMiniport</B></A> </DT>

<DD>Releases a previously registered intermediate driver. </DD>

<DT><A HREF="103ndisx_4xrm.htm"><B>NdisIMGetDeviceContext</B></A></DT>

<DD>Allows an NDIS intermediate driver's <I>MiniportInitialize</I> function to access the device context area allocated by its <I>ProtocolBindAdapter</I> function. </DD>

<DT><A HREF="103ndisx_3m2a.htm"><B>NdisIMInitializeDeviceInstance</B></A> </DT>

<DD>Calls an NDIS intermediate driver’s <I>MiniportInitialize</I> function to set up the driver’s virtual NIC for I/O operations bound for an underlying NIC driver to which the intermediate driver is bound.</DD>

<DT><A HREF="103ndisx_0jn6.htm"><B>NdisIMInitializeDeviceInstanceEx</B></A></DT>

<DD>Calls an NDIS intermediate driver’s <I>MiniportInitialize</I> function to initialize the driver's virtual NIC and optionally to set up state information about the driver’s virtual NIC for subsequently bound protocols. </DD>

<DT><A HREF="103ndisx_5lgy.htm"><B>NdisImmediateReadPciSlotInformation</B></A> </DT>

<DD>Returns a specified range of PCI configuration information to a caller-supplied buffer, given a handle to the wrapper configuration context and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_0msy.htm"><B>NdisImmediateReadPortUchar</B></A> </DT>

<DD>Reads a byte from a specified port on an I/O bus during driver initialization, given the handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to read the data. </DD>

<DT><A HREF="103ndisx_3joy.htm"><B>NdisImmediateReadPortUlong</B></A> </DT>

<DD>Reads a ULONG from a specified port on an I/O bus during driver initialization, given a handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to read the data. </DD>

<DT><A HREF="103ndisx_6e0i.htm"><B>NdisImmediateReadPortUshort</B></A> </DT>

<DD>Reads a USHORT from a specified port on an I/O bus during driver initialization, given a handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to read the data. </DD>

<DT><A HREF="103ndisx_873m.htm"><B>NdisImmediateReadSharedMemory</B></A> </DT>

<DD>Reads a specified number of bytes into a caller-supplied buffer from shared device RAM, given the base physical address for the shared memory and a handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative memory range in order to read the data.</DD>

<DT><A HREF="103ndisx_1pf6.htm"><B>NdisImmediateWritePciSlotInformation</B></A> </DT>

<DD>Writes data from a caller-supplied buffer to a specified range of the PCI configuration space, given a handle to the wrapper configuration context and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_2ir6.htm"><B>NdisImmediateWritePortUchar</B></A> </DT>

<DD>Writes a byte to a specified port on an I/O bus during driver initialization, given the handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to write the data.</DD>

<DT><A HREF="103ndisx_5fn6.htm"><B>NdisImmediateWritePortUlong</B></A> </DT>

<DD>Writes a ULONG to a specified port on an I/O bus during driver initialization, given the handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to write the data.</DD>

<DT><A HREF="103ndisx_76uq.htm"><B>NdisImmediateWritePortUshort</B></A> </DT>

<DD>Writes a USHORT to a specified port on an I/O bus during driver initialization, given the handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative port address in order to write the data.</DD>

<DT><A HREF="103ndisx_9hpu.htm"><B>NdisImmediateWriteSharedMemory</B></A> </DT>

<DD>Writes a specified number of bytes from a caller-supplied buffer to shared device RAM, given the base physical address for the shared memory and a handle to the wrapper configuration context. If necessary, this function maps the specified bus-relative memory range in order to write the data.</DD>

<DT><A HREF="103ndisx_0sj7.htm"><B>NdisIMRegisterLayeredMiniport</B></A> </DT>

<DD>Registers an NDIS intermediate driver’s Miniport<I>Xxx</I> entry points and name with the NDIS library when the driver initializes.</DD>

<DT><A HREF="103ndisx_2wvm.htm"><B>NdisInitAnsiString</B></A> </DT>

<DD>Initializes a counted ANSI string. </DD>

<DT><A HREF="103ndisx_1qia.htm">NDIS_INIT_FUNCTION</A> </DT>

<DD>Marks a given driver function as initialization-only code to be discarded after the function has run once. </DD>

<DT><A HREF="103ndisx_2rqq.htm"><B>NdisInitializeEvent</B></A> </DT>

<DD>Sets up an event object during driver initialization to be used subsequently as a synchronization mechanism. </DD>

<DT><A HREF="103ndisx_5r02.htm"><B>NdisInitializeListHead</B></A> </DT>

<DD>Sets up a queue header for a driver’s internal queue, given a pointer to driver-supplied resident storage for the queue header and queue. Then, entries (usually packets) can be added to and removed from the doubly-linked queue with the <B>NdisInterlocked..List</B> functions.</DD>

<DT><A HREF="103ndisx_352q.htm"><B>NdisInitializeNPagedLookasideList</B></A></DT>

<DD>Initializes a lookaside list. After a successful initialization, nonpaged fixed-size blocks can be allocated from and freed to the lookaside list.</DD>

<DT><A HREF="103ndisx_2tiq.htm"><B>NdisInitializeReadWriteLock</B></A></DT>

<DD>Initializes a variable of type <B>NDIS_RW_LOCK</B>. An <B>NDIS_RW_LOCK</B> variable is used to limit write access to shared resources to one nonISR-driver thread at a time. This <B>NDIS_RW_LOCK</B> can allow multiple nonISR-driver threads concurrent read access to those resources. Such read access is not permitted during a write access. </DD>

<DT><A HREF="103ndisx_708i.htm"><B>NdisInitializeSListHead</B></A></DT>

<DD>Initializes the head of a sequenced, interlocked, singly linked list.</DD>

<DT><A HREF="103ndisx_9ieq.htm"><B>NdisInitializeString</B></A> </DT>

<DD>Allocates a buffer for and initializes a counted string in the system-default character set, given a source string and a NULL pointer.</DD>

<DT><A HREF="103ndisx_5jw2.htm"><B>NdisInitializeWorkItem</B></A></DT>

<DD>Initializes a work-queue item with a caller-supplied context and callback routine to be queued for execution when a system worker thread is given control.</DD>

<DT><A HREF="103ndisx_581e.htm"><B>NdisInitUnicodeString</B></A> </DT>

<DD>Initializes a counted Unicode string. </DD>

<DT><A HREF="103ndisx_6xde.htm"><B>NdisInterlockedAddLargeStatistic</B></A></DT>

<DD>Adds a ULONG increment value to a LARGE_INTEGER addend value.</DD>

<DT><A HREF="103ndisx_76ya.htm"><B>NdisInterlockedAddUlong</B></A> </DT>

<DD>Adds an unsigned long value to a given unsigned integer as an atomic operation, using a caller-supplied and initialized spin lock.</DD>

<DT><A HREF="103ndisx_5f8y.htm"><B>NdisInterlockedDecrement</B></A></DT>

<DD>Decrements a caller supplied variable of type LONG as an atomic operation.</DD>

<DT><A HREF="103ndisx_7rhu.htm"><B>NdisInterlockedIncrement</B></A></DT>

<DD>Increments a caller supplied variable as an atomic operation. </DD>

<DT><A HREF="103ndisx_9pte.htm"><B>NdisInterlockedInsertHeadList</B></A> </DT>

<DD>Inserts an entry, usually a packet, at the head of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among nonISR driver functions. </DD>

<DT><A HREF="103ndisx_7j02.htm"><B>NdisInterlockedInsertTailList</B></A> </DT>

<DD>Inserts an entry, usually a packet, at the end of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among nonISR driver functions.</DD>

<DT><A HREF="103ndisx_5raq.htm"><B>NdisInterlockedPopEntrySList</B></A></DT>

<DD>removes the first entry from a sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_9b3m.htm"><B>NdisInterlockedPushEntrySList</B></A></DT>

<DD>Inserts an entry at the head of a sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_02cy.htm"><B>NdisInterlockedRemoveHeadList</B></A> </DT>

<DD>Removes an entry, usually a packet, from the head of a doubly linked list using a caller-supplied and initialized spin lock so that access to queued entries is synchronized in a multiprocessor-safe way among nonISR driver functions. </DD>

<DT><A HREF="103ndisx_44j6.htm"><B>NdisMAllocateMapRegisters</B></A> </DT>

<DD>Reserves system resources during NIC driver initialization for subsequent bus-master DMA operations. </DD>

<DT><A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A> </DT>

<DD>Allocates and maps a memory range so it is simultaneously accessible from both the system and a bus-master DMA device, given the <I>MiniportAdapterHandle</I> for the NIC input to <I>MiniportInitialize</I>, the number of bytes to be allocated, and whether the memory should be cached. Returns the base (system) virtual address of the allocation for use by the miniport driver and a mapped base logical address for use by the NIC. </DD>

<DT><A HREF="103ndisx_3fg2.htm"><B>NdisMAllocateSharedMemoryAsync</B></A> </DT>

<DD>Allocates additional memory shared between a miniport driver and its bus-master DMA NIC, usually when the miniport driver is running low on available receive buffers. </DD>

<DT><A HREF="103ndisx_3njm.htm"><B>NdisMapFile</B></A> </DT>

<DD>Maps the contents of an already open file to a caller-accessible buffer if the file currently is unmapped, given a handle returned by <B>NdisOpenFile</B>. </DD>

<DT><A HREF="103ndisx_1saa.htm"><B>NdisMArcIndicateReceive</B></A> </DT>

<DD>Notifies NDIS that an ARCNET packet is being received on a particular NIC, identified by the adapter handle, and that the packet or some initial lookahead portion of the packet, along with the packet header, is available to be forwarded to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_0z1u.htm"><B>NdisMArcIndicateReceiveComplete</B></A> </DT>

<DD>Notifies NDIS that an ARCNET receive packet, identified in a preceding call to <B>NdisMArcIndicateReceive</B>, has been fully transferred through a particular NIC, identified by the given adapter handle, so that NDIS can notify the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A> </DT>

<DD>Cancels a preceding call to <B>NdisMSetPeriodicTimer</B> or cancels the immediately preceding call to <B>NdisMSetTimer</B> if the interval given to <B>NdisMSetTimer</B> has not yet expired. </DD>

<DT><A HREF="103ndisx_1t6a.htm"><B>NdisMCloseLog</B></A> </DT>

<DD>Releases resources allocated when the driver called <B>NdisMCreateLog</B>. </DD>

<DT><A HREF="103ndisx_2xde.htm"><B>NdisMCmActivateVc</B></A> </DT>

<DD>Notifies NDIS that a connection-oriented NIC miniport driver with integrated call-management support (also called an <I>MCM driver</I>) is ready to make transfers on a particular VC (virtual circuit).</DD>

<DT><A HREF="103ndisx_72pe.htm"><B>NdisMCmAddPartyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to add a party on an active multipoint VC. </DD>

<DT><A HREF="103ndisx_7gfm.htm"><B>NdisMCmCloseAddressFamilyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to close the address family. </DD>

<DT><A HREF="103ndisx_4fzm.htm"><B>NdisMCmCloseCallComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to tear down a call.</DD>

<DT><A HREF="103ndisx_1fci.htm"><B>NdisMCmCreateVc</B></A> </DT>

<DD>Sets up a connection-oriented endpoint (virtual circuit) on which an MCM driver can dispatch incoming calls. </DD>

<DT><A HREF="103ndisx_1nqq.htm"><B>NdisMCmDeactivateVc</B></A> </DT>

<DD>Notifies NDIS to expect no further transfers on a particular VC. </DD>

<DT><A HREF="103ndisx_6qur.htm"><B>NdisMCmDeleteVc</B></A> </DT>

<DD>Destroys an MCM driver-created VC.</DD>

<DT><A HREF="103ndisx_1p82.htm"><B>NdisMCmDeregisterSapComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to release a previously registered SAP on which the client could receive incoming call notifications. </DD>

<DT><A HREF="103ndisx_9u5u.htm"><B>NdisMCmDispatchCallConnected</B></A> </DT>

<DD>Notifies NDIS and the connection-oriented client that data transfers can begin on a VC that the MCM driver created for an <I>incoming</I> call initiated on a remote node. </DD>

<DT><A HREF="103ndisx_5zoy.htm"><B>NdisMCmDispatchIncomingCall</B></A> </DT>

<DD>Notifies the connection-oriented client of an incoming call offer on a SAP previously registered by that client with the MCM driver. </DD>

<DT><A HREF="103ndisx_65f6.htm"><B>NdisMCmDispatchIncomingCallQoSChange</B></A> </DT>

<DD>Notifies the connection-oriented client that a request to change the quality of service on that client's active connection has been received over the network by the MCM driver. </DD>

<DT><A HREF="103ndisx_3saa.htm"><B>NdisMCmDispatchIncomingCloseCall</B></A> </DT>

<DD>Tells a connection-oriented client to tear down an active or offered call, usually because the MCM driver has received a request from the network to close the connection. </DD>

<DT><A HREF="103ndisx_8twy.htm"><B>NdisMCmDispatchIncomingDropParty</B></A> </DT>

<DD>Notifies a connection-oriented client that it should remove a particular party on the given multipoint VC, usually because the MCM driver has received a close-call request that was initiated at the remote node.</DD>

<DT><A HREF="103ndisx_0yya.htm"><B>NdisMCmDropPartyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to remove a party from an active multipoint VC.</DD>

<DT><A HREF="103ndisx_8a2a.htm"><B>NdisMCmMakeCallComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to make an outgoing call. </DD>

<DT><A HREF="103ndisx_2z8y.htm"><B>NdisMCmModifyCallQoSComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to change the quality of service on an active VC. </DD>

<DT><A HREF="103ndisx_97xu.htm"><B>NdisMCmOpenAddressFamilyComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to open the MCM driver's address family.</DD>

<DT><A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A> </DT>

<DD>Registers a set of MCM driver-supplied call-management functions for connection-oriented communications using the specified address family. </DD>

<DT><A HREF="103ndisx_7mur.htm"><B>NdisMCmRegisterSapComplete</B></A> </DT>

<DD>Returns the final status of a connection-oriented client's request, for which the MCM driver previously returned NDIS_STATUS_PENDING, to register a SAP on which to receive offers of incoming calls from the network. </DD>

<DT><A HREF="103ndisx_1pbm.htm"><B>NdisMCmRequest</B></A> </DT>

<DD>Issues an OID_GEN_CO_<I>XXX</I> request from the MCM driver to a client. </DD>

<DT><A HREF="103ndisx_2qr6.htm"><B>NdisMCmRequestComplete</B></A> </DT>

<DD>Returns the final status of a client's OID_GEN_CO_<I>XXX</I> request, for which the MCM driver previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_5g8i.htm"><B>NdisMCoActivateVcComplete</B></A> </DT>

<DD>Returns the final status of a call manager's request, for which the connection-oriented miniport driver previously returned NDIS_STATUS_PENDING, to activate a VC. In effect, this call notifies NDIS and the call manager that the miniport driver either has set up the NIC for per-VC transfers or is failing the activation. </DD>

<DT><A HREF="103ndisx_9hpv.htm"><B>NdisMCoDeactivateVcComplete</B></A> </DT>

<DD>Returns the final status of a call manager's request, for which the connection-oriented NIC miniport driver previously returned NDIS_STATUS_PENDING, to deactivate a VC. </DD>

<DT><A HREF="103ndisx_6f02.htm"><B>NdisMCoIndicateReceivePacket</B></A> </DT>

<DD>Notifies NDIS that a multipacket receive on a VC is available to be forwarded to the appropriate connection-oriented client or call manager. </DD>

<DT><A HREF="103ndisx_0qgi.htm"><B>NdisMCoIndicateStatus</B></A> </DT>

<DD>Indicates a change in the status of a connection-oriented NIC to bound protocols or a change in the status of a particular VC active on the NIC. </DD>

<DT><A HREF="103ndisx_3pbm.htm"><B>NdisMCompleteBufferPhysicalMapping</B></A> </DT>

<DD>Flushes any data remaining in a bus-master NIC’s internal cache at the end of a transfer operation that was set up with <B>NdisMStartBufferPhysicalMapping</B>. </DD>

<DT><A HREF="103ndisx_00ky.htm"><B>NdisMCompleteDmaTransfer</B></A> </DT>

<DD>Completes a system DMA transfer operation begun with a preceding call to <B>NdisMSetupDmaTransfer</B>, ensuring that the data is flushed to system memory or to the NIC, depending on the transfer direction. </DD>

<DT><A HREF="103ndisx_2f76.htm"><B>NdisMCoReceiveComplete</B></A> </DT>

<DD>Notifies NDIS that the processing of one or more preceding receive indications have been fully transferred so that NDIS can notify the appropriate connection-oriented client or call manager. </DD>

<DT><A HREF="103ndisx_0kmq.htm"><B>NdisMCoRequestComplete</B></A> </DT>

<DD>Returns the final status of a client's or call manager's OID_GEN_CO_<I>XXX</I> or medium-specific OID_<I>XXX</I> request, for which the connection-oriented NIC miniport driver previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_5t2q.htm"><B>NdisMCoSendComplete</B></A> </DT>

<DD>Returns a packet descriptor and its associated resources to the connection-oriented client or call manager that request the send. </DD>

<DT><A HREF="103ndisx_18xe.htm"><B>NdisMCreateLog</B></A> </DT>

<DD>Allocates and opens a log file in which a NIC miniport driver can write data to be displayed by a driver-dedicated Win32® application. </DD>

<DT><A HREF="103ndisx_7q7m.htm"><B>NdisMDeregisterAdapterShutdownHandler</B></A> </DT>

<DD>Removes a driver-supplied <I>MiniportShutdown</I> function when the driver is unloading from the set of shutdown handlers that were registered with <B>NdisMRegisterAdapterShutdownHandler</B>.</DD>

<DT><A HREF="103ndisx_1jw2.htm"><B>NdisMDeregisterDevice</B></A></DT>

<DD>Removes from the system a device object that was created with <B>NdisMRegisterDevice</B> and removes the symbolic link that is associated with this device object.</DD>

<DT><A HREF="103ndisx_3nqq.htm"><B>NdisMDeregisterDmaChannel</B></A> </DT>

<DD>Releases DMA system resources, including claimed hardware resources in the registry, that were acquired with <B>NdisMRegisterDmaChannel</B>. Drivers call <B>NdisMDeregisterDmaChannel</B> when they are unloading. </DD>

<DT><A HREF="103ndisx_7g1e.htm"><B>NdisMDeregisterInterrupt</B></A> </DT>

<DD>Releases the mapping created with an initialization-time call to <B>NdisMRegisterInterrupt</B>. Drivers call <B>NdisMDeregisterInterrupt</B> when they are unloading. </DD>

<DT><A HREF="103ndisx_7ape.htm"><B>NdisMDeregisterIoPortRange</B></A><B> </B></DT>

<DD>Releases a mapping that was set up with <B>NdisMRegisterIoPortRange</B> during driver initialization. </DD>

<DT><A HREF="103ndisx_51pu.htm"><B>NdisMEthIndicateReceive</B></A> </DT>

<DD>Notifies NDIS that an Ethernet packet is being received on a particular NIC, identified by the adapter handle, and that the packet or some initial lookahead portion of the packet, along with the packet header, is available to be forwarded to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_969e.htm"><B>NdisMEthIndicateReceiveComplete</B></A> </DT>

<DD>Notifies NDIS that an Ethernet receive packet, identified in a preceding call to <B>NdisMEthIndicateReceive</B>, has been fully transferred through a particular NIC, identified by the given adapter handle, so that NDIS can notify the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_9dyq.htm"><B>NdisMFddiIndicateReceive</B></A> </DT>

<DD>Notifies NDIS that an FDDI packet is being received on a particular NIC, identified by the adapter handle, and that the packet or some initial lookahead portion of the packet, along with the packet header, is available to be forwarded to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_96ya.htm"><B>NdisMFddiIndicateReceiveComplete</B></A> </DT>

<DD>Notifies NDIS that an FDDI receive packet, identified in a preceding call to <B>NdisMFddiIndicateReceive</B>, has been fully transferred through a particular NIC, identified by the given adapter handle, so that NDIS can notify the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_8f3m.htm"><B>NdisMFlushLog</B></A> </DT>

<DD>Clears a miniport’s log file that was allocated with <B>NdisMCreateLog</B>. </DD>

<DT><A HREF="103ndisx_1l6a.htm"><B>NdisMFreeMapRegisters</B></A> </DT>

<DD>Releases system resources for bus-master DMA that were reserved with <B>NdisMAllocateMapRegisters</B>. Drivers call <B>NdisMFreeMapRegisters</B> when they are unloading or during initialization if they fail to successfully initialize a NIC.</DD>

<DT><A HREF="103ndisx_9fjm.htm"><B>NdisMFreeSharedMemory</B></A> </DT>

<DD>Releases a block of memory that was allocated with <B>NdisMAllocateSharedMemory</B>. Drivers call <B>NdisMFreeSharedMemory</B> when they are unloading or during initialization if they fail to successfully initialize a NIC. </DD>

<DT><A HREF="103ndisx_314i.htm"><B>NdisMGetDeviceProperty</B></A> </DT>

<DD>Retrieves device objects required to set up communication with a NIC through a bus driver. </DD>

<DT><A HREF="103ndisx_8cqa.htm"><B>NdisMGetDmaAlignment</B></A> </DT>

<DD>Returns the alignment requirements of the DMA system for a NIC. </DD>

<DT><A HREF="103ndisx_5uuq.htm"><B>NdisMIndicateReceivePacket</B></A> </DT>

<DD>Notifies NDIS that an array of received packets is available to be forwarded to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_5nn6.htm"><B>NdisMIndicateStatus</B></A> </DT>

<DD>Notifies NDIS of a change in the runtime status of a NIC that might be corrected with a reset operation or possibly even require the NIC to be taken out of service, depending on the given NDIS_STATUS_<I>XXX</I> and additional driver-supplied information. </DD>

<DT><A HREF="103ndisx_62ur.htm"><B>NdisMIndicateStatusComplete</B></A> </DT>

<DD>Notifies NDIS that the driver, which has previously called <B>NdisMIndicateStatus</B> one or more times to indicate hardware anomalies or runtime state changes in the NIC, is ready to resume normal device I/O operations.</DD>

<DT><A HREF="103ndisx_48aa.htm"><B>NdisMInitializeScatterGatherDma</B></A></DT>

<DD>Initializes system resources during miniport driver initialization for use in subsequent DMA operations. Called only by deserialized or connection-oriented miniports that manage bus-master DMA NICs.</DD>

<DT><A HREF="103ndisx_87aq.htm"><B>NdisMInitializeTimer</B></A> </DT>

<DD>Sets up a caller-supplied <I>MiniportTimer</I> function to be associated with a timer object during driver initialization; returns a handle at the caller-supplied resident storage for the timer object. This handle is a required parameter to all other <B>NdisM..Timer</B> functions. </DD>

<DT><A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A> </DT>

<DD>Notifies NDIS that a new NIC driver is initializing and returns a <I>WrapperConfigurationContext</I> handle to be passed in subsequent calls to <B>Ndis</B><I>Xxx</I> initialization and configuration functions. </DD>

<DT><A HREF="103ndisx_81de.htm"><B>NdisMMapIoSpace</B></A> </DT>

<DD>Maps a given bus-relative “physical” range of device memory, such as on-board device RAM or a set of NIC registers, onto system-space nonpaged pool and returns the mapped virtual base address for subsequent use in PIO operations. </DD>

<DT><A HREF="103ndisx_6nea.htm"><B>NdisMoveFromMappedMemory</B></A> </DT>

<DD>Copies data from device memory that was mapped with <B>NdisMMapIoSpace</B> to a system-space buffer. </DD>

<DT><A HREF="103ndisx_0o36.htm"><B>NdisMoveMappedMemory</B></A> </DT>

<DD>Copies data from one location to another in a memory block that was mapped with <B>NdisMMapIoSpace</B>. </DD>

<DT><A HREF="103ndisx_87le.htm"><B>NdisMoveMemory</B></A> </DT>

<DD>Copies a specified number of bytes from one caller-supplied location to another. </DD>

<DT><A HREF="103ndisx_97qq.htm"><B>NdisMoveToMappedMemory</B></A> </DT>

<DD>Copies data from a system-space buffer to device memory that was mapped with <B>NdisMMapIoSpace</B>. </DD>

<DT><A HREF="103ndisx_76nm.htm"><B>NdisMPciAssignResources</B></A> </DT>

<DD>Claims resources in the registry for the caller and returns the hardware configuration information for a PCI NIC, given a handle passed in to the <I>MiniportInitialize</I> function and the slot number of its NIC on the PCI bus. </DD>

<DT><A HREF="103ndisx_1i0i.htm"><B>NdisMPromoteMiniport</B></A> </DT>

<DD>Promotes a secondary miniport driver adapter to the primary role after the primary miniport driver adapter is stopped. </DD>

<DT><A HREF="103ndisx_82uq.htm"><B>NdisMQueryAdapterInstanceName</B></A> </DT>

<DD>Retrieves the friendly name of a physical NIC or a virtual adapter.</DD>

<DT><A HREF="103ndisx_8hrm.htm"><B>NdisMQueryAdapterResources</B></A> </DT>

<DD>Either returns a list of resources used by a NIC or returns NDIS_STATUS_NOT_SUPPORTED. </DD>

<DT><A HREF="103ndisx_4ktu.htm"><B>NdisMQueryInformationComplete</B></A> </DT>

<DD>Returns the final status of a query-information request for which the driver previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_2mia.htm"><B>NdisMReadDmaCounter</B></A> </DT>

<DD>Returns the number of bytes remaining to be transferred during a DMA operation if the NIC uses the host DMA controller’s autoinitialize mode, given a handle returned by <B>NdisMRegisterDmaChannel</B>. </DD>

<DT><A HREF="103ndisx_4fea.htm"><B>NdisMRegisterAdapterShutdownHandler</B></A> </DT>

<DD>Registers a driver-supplied <I>MiniportShutdown</I> function to be called with a pointer to a caller-supplied context buffer when the system is about to be shut down, given a handle passed in to the <I>MiniportInitialize</I> function. Such a <I>MiniportShutdown</I> function restores the NIC to its initial state.</DD>

<DT><A HREF="103ndisx_9qeq.htm"><B>NdisMRegisterDevice</B></A></DT>

<DD>Creates a named device object and a symbolic link between the device object and a user-visible name for that device.</DD>

<DT><A HREF="103ndisx_1gxe.htm"><B>NdisMRegisterDmaChannel</B></A> </DT>

<DD>Reserves system resources during driver initialization for subsequent slave DMA operations or ISA bus-master DMA operations and claims a DMA channel in the registry, returning a handle to be passed in subsequent calls to the <B>NdisM</B><I>Xxx</I> DMA functions. </DD>

<DT><A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A> </DT>

<DD>Sets up a mapping between the miniport’s <B>ISRHandler</B> and <B>HandleInterruptHandler</B> (DPC) functions, already registered with <B>NdisMRegisterMiniport</B>, and the bus-relative vector (or level) on which its NIC interrupts, given a pointer to caller-allocated storage for opaque interrupt state and the adapter handle for the NIC. The interrupt handle initialized in this call is a required parameter to <B>NdisMSynchronizeWithInterrupt</B>. </DD>

<DT><A HREF="103ndisx_76k2.htm"><B>NdisMRegisterIoPortRange</B></A> </DT>

<DD>Claims a range of device memory in the registry and maps a given bus-relative range of I/O ports to a range of system logical addresses during initialization, which the driver can pass in subsequent calls to the <B>NdisRaw</B><I>Xxx</I> to communicate with its NIC. </DD>

<DT><A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A> </DT>

<DD>Registers a miniport’s entry points and name with the NDIS library, given a handle obtained from <B>NdisMInitializeWrapper</B> and a pointer to the NDIS_MINIPORT_CHARACTERISTICS structure set up by the caller. </DD>

<DT><A HREF="103ndisx_32pe.htm"><B>NdisMRegisterUnloadHandler</B></A></DT>

<DD>Registers an unload handler for a driver.</DD>

<DT><A HREF="103ndisx_52b6.htm"><B>NdisMRemoveMiniport</B></A> </DT>

<DD>Removes the specified miniport driver adapter that the miniport driver has determined is unrecoverable from the system. </DD>

<DT><A HREF="103ndisx_4m0j.htm"><B>NdisMResetComplete</B></A> </DT>

<DD>Returns the final status of a reset request for which the driver previously returned NDIS_STATUS_PENDING and indicates whether the reset operation on the NIC affected its network address information. </DD>

<DT><A HREF="103ndisx_2kxe.htm"><B>NdisMSendComplete</B></A> </DT>

<DD>Returns the packet and final status of a completed send request for which the driver previously returned NDIS_STATUS_PENDING, so that NDIS can return the completed packet to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_58c2.htm"><B>NdisMSendResourcesAvailable</B></A> </DT>

<DD>Notifies NDIS that the driver has internal resources available to process another send request when the driver has an outstanding send request for which it returned NDIS_STATUS_PENDING but has not yet called <B>NdisMSendComplete</B>. </DD>

<DT><A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A> </DT>

<DD>Informs the NDIS library about significant features of the caller’s NIC, such as whether it is a bus master and the type of I/O bus on which the NIC can be found, so the miniport can call other <B>Ndis</B><I>Xxx</I> initialization and configuration routines, particularly the <B>NdisRegister</B><I>Xxx</I>. NIC drivers can call this function or <B>NdisMSetAttributesEx</B>. Intermediate drivers must call <B>NdisMSetAttributesEx</B>. </DD>

<DT><A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A> </DT>

<DD>Informs the NDIS library about significant features of the caller’s NIC, such as whether it is a bus master and the type of I/O bus on which the NIC can be found, so the miniport driver can call other <B>Ndis</B><I>Xxx</I> initialization and configuration routines, particularly the <B>NdisRegister</B><I>Xxx</I>. In addition, this function prevents NDIS from timing out sends and requests in an intermediate driver or optionally resets the interval at which a NIC driver’s <I>MiniportCheckForHang</I> function is called.  </DD>

<DT><A HREF="103ndisx_3alu.htm"><B>NdisMSetInformationComplete</B></A> </DT>

<DD>Returns the final status of a set-information request for which the driver previously returned NDIS_STATUS_PENDING. </DD>

<DT><A HREF="103ndisx_467m.htm"><B>NdisMSetMiniportSecondary</B></A> </DT>

<DD>Sets the specified miniport driver adapter to the secondary role in relation to the primary miniport driver adapter. The primary miniport driver adapter handles all packet transfers and requests for information that are made by protocol drivers. However, NDIS can send specific requests to the secondary miniport driver adapter. </DD>

<DT><A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A> </DT>

<DD>Sets a timer to fire periodically, thereby running an associated <I>MiniportTimer</I> function repeatedly at a specified fixed interval.</DD>

<DT><A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A> </DT>

<DD>Sets a caller-initialized timer object to a specified interval, thereby running an associated <I>MiniportTimer</I> function once when the given interval expires. </DD>

<DT><A HREF="103ndisx_38mq.htm"><B>NdisMSetupDmaTransfer</B></A> </DT>

<DD>Sets up the host DMA controller to transfer a specified range of data from a given buffer, given the handle returned by a preceding call to <B>NdisMRegisterDmaChannel</B> and the transfer direction. </DD>

<DT><A HREF="103ndisx_3lv6.htm"><B>NdisMSleep</B></A> </DT>

<DD>Delays execution of the caller for a given interval in microseconds.</DD>

<DT><A HREF="103ndisx_3a42.htm"><B>NdisMStartBufferPhysicalMapping</B></A> </DT>

<DD>Sets up a bus-master NIC for a DMA transfer operation, given the adapter handle for the NIC, the direction of the transfer, a pointer to the buffer descriptor, an index to the initial map register, a pointer to caller-allocated memory for a variable-size array of NDIS_PHYSICAL_UNIT structures, and the number of elements in the array. </DD>

<DT><A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A> </DT>

<DD>Synchronizes the execution of a caller-supplied <I>MiniportSynchronizeISR</I> function with that of the ISR associated with the given initialized interrupt handle. When it runs, the supplied function can access data shared with the ISR in a multiprocessor-safe way. </DD>

<DT><A HREF="103ndisx_58c3.htm"><B>NdisMTrIndicateReceive</B></A> </DT>

<DD>Notifies NDIS that a Token Ring packet is being received on a particular NIC, identified by the adapter handle, and that the packet or some initial lookahead portion of the packet, along with the packet header, is available to be forwarded to the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_3jzm.htm"><B>NdisMTrIndicateReceiveComplete</B></A> </DT>

<DD>Notifies NDIS that a Token Ring packet, identified in a preceding call to <B>NdisMTrIndicateReceive</B>, has been fully transferred through a particular NIC, identified by the given adapter handle, so that NDIS can notify the appropriate bound protocol driver(s). </DD>

<DT><A HREF="103ndisx_6nhu.htm"><B>NdisMTransferDataComplete</B></A> </DT>

<DD>Returns the packet and final status of a completed transfer-data request for which the driver previously returned NDIS_STATUS_PENDING and returns the number of bytes actually transferred. </DD>

<DT><A HREF="103ndisx_5mcy.htm"><B>NdisMUnmapIoSpace</B></A> </DT>

<DD>Releases a mapping obtained with <B>NdisMMapIoSpace</B>, usually when a driver is unloading.</DD>

<DT><A HREF="103ndisx_29rm.htm"><B>NdisMUpdateSharedMemory</B></A> </DT>

<DD>Ensures that data read from shared memory is current when the bus-master NIC has just written data to shared memory on platforms that require explicit coherency support from the system. </DD>

<DT><A HREF="103ndisx_08oi.htm"><B>NdisMWriteLogData</B></A> </DT>

<DD>Transfers miniport driver-supplied information into its log file for consumption and display by a driver-dedicated Win32 application. </DD>

<DT><A HREF="103ndisx_43qq.htm">NDIS_OOB_DATA_FROM_PACKET</A> </DT>

<DD>Returns a pointer to the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a given packet descriptor. </DD>

<DT><A HREF="103ndisx_7b76.htm"><B>NdisOpenConfiguration</B></A> </DT>

<DD>Returns a handle for the registry key in which an NDIS NIC driver’s configuration parameters are stored. This handle is a required parameter to other <B>Ndis</B><I>Xxx</I> configuration functions. </DD>

<DT><A HREF="103ndisx_1e2a.htm"><B>NdisOpenConfigurationKeyByIndex</B></A></DT>

<DD>Opens a subkey of a given open registry key designated by a caller-supplied handle.</DD>

<DT><A HREF="103ndisx_1k6q.htm"><B>NdisOpenConfigurationKeyByName</B></A></DT>

<DD>Opens a named subkey of a given open registry key designated by a caller-supplied handle.</DD>

<DT><A HREF="103ndisx_2i5u.htm"><B>NdisOpenFile</B></A> </DT>

<DD>Returns a handle for an opened file, given its name and the highest acceptable address at which to allocate memory for the file data. The returned handle is a required parameter to <B>NdisMapFile</B>, which gives the caller exclusive access to the file data until it calls <B>NdisUnmapFile</B>. </DD>

<DT><A HREF="103ndisx_6pyq.htm">NDIS_PACKET_EXTENSION_FROM_PACKET</A></DT>

<DD>Returns a pointer to the NDIS_PACKET_EXTENSION structure associated with a packet descriptor.</DD>

<DT><A HREF="103ndisx_3b3m.htm"><B>NdisPacketPoolUsage</B></A></DT>

<DD>Returns the number of packet descriptors currently allocated from a packet pool.</DD>

<DT><A HREF="103ndisx_559u.htm"><B>NdisPacketSize</B></A></DT>

<DD>Returns the size, in bytes, of packet descriptors that are allocated with the given size that is reserved for protocols.</DD>

<DT><A HREF="103ndisx_5svm.htm">NDIS_PAGEABLE_FUNCTION</A> </DT>

<DD>Marks a driver function as pageable code. </DD>

<DT><A HREF="103ndisx_0bjm.htm">NDIS_PER_PACKET_INFO_FROM_PACKET</A> </DT>

<DD>Returns a pointer to a specific type of per-packet information associated with a packet descriptor. </DD>

<DT><A HREF="103ndisx_21yq.htm">NDIS_PHYSICAL_ADDRESS_CONST</A> </DT>

<DD>Initializes a constant of type NDIS_PHYSICAL_ADDRESS. </DD>

<DT><A HREF="103ndisx_4lbm.htm"><B>NdisPrintString</B></A> </DT>

<DD>Displays a given string in the debugging window.</DD>

<DT><A HREF="103ndisx_0l82.htm"><B>NdisQueryBuffer</B></A> </DT>

<DD>Retrieves the size of the range, and optionally its base virtual address, specified in a given buffer descriptor. Drivers should call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>. NDIS 5.1 miniports must call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>.</DD>

<DT><A HREF="103ndisx_1rea.htm"><B>NdisQueryBufferOffset</B></A> </DT>

<DD>Retrieves the base virtual address of the range specified in a given buffer descriptor. </DD>

<DT><A HREF="103ndisx_7t9u.htm"><B>NdisQueryBufferSafe</B></A></DT>

<DD><B>NdisQueryBufferSafe</B> is the safe version of <B>NdisQueryBuffer</B>. Unlike <B>NdisQueryBuffer</B>, <B>NdisQueryBufferSafe</B> does not cause a bug check if system resources are low or exhausted. Drivers should call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>. NDIS 5.1 miniports must call <B>NdisQueryBufferSafe</B> instead of <B>NdisQueryBuffer</B>.</DD>

<DT><A HREF="103ndisx_9fua.htm"><B>NdisQueryDepthSList</B></A></DT>

<DD>Returns the current number of entries in a given sequenced, singly linked list.</DD>

<DT><A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A> </DT>

<DD>Returns any or all of the following information about a given packet descriptor: a count of buffer descriptors chained to the packet descriptor, the total number of bytes in all buffers mapped by the buffer descriptor chained to the packet descriptor, the total number of physically discontiguous blocks for all such buffers, and a pointer to the initial buffer descriptors in the chain. </DD>

<DT><A HREF="103ndisx_65pu.htm"><B>NdisQueryPacketLength</B></A></DT>

<DD>Returns the number of bytes of data that are specified by the buffer descriptors that are chained to a given packet. </DD>

<DT><B>NdisQuerySendFlags</B> </DT>

<DD>See <B>NdisGetPacketFlags</B>. </DD>

<DT><A HREF="103ndisx_0tma.htm"><B>NdisRawReadPortBufferUchar</B></A> </DT>

<DD>Reads a specified number of bytes into a caller-supplied buffer, given an I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.</DD>

<DT><A HREF="103ndisx_3qib.htm"><B>NdisRawReadPortBufferUlong</B></A> </DT>

<DD>Reads a specified number of ULONGs into a caller-supplied buffer, given an I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_8i5u.htm"><B>NdisRawReadPortBufferUshort</B></A> </DT>

<DD>Reads a specified number of USHORTs into a caller-supplied buffer, given an I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_4kj6.htm"><B>NdisRawReadPortUchar</B></A> </DT>

<DD>Reads a byte from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_7hf6.htm"><B>NdisRawReadPortUlong</B></A> </DT>

<DD>Reads a ULONG from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_8cmq.htm"><B>NdisRawReadPortUshort</B></A> </DT>

<DD>Reads a USHORT from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_8vsi.htm"><B>NdisRawWritePortBufferUchar</B></A> </DT>

<DD>Writes a specified number of bytes from a caller-supplied buffer to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_1soi.htm"><B>NdisRawWritePortBufferUlong</B></A> </DT>

<DD>Writes a specified number of ULONGs from a caller-supplied buffer to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_4d82.htm"><B>NdisRawWritePortBufferUshort</B></A> </DT>

<DD>Writes a specified number of USHORTs from a caller-supplied buffer to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_4hde.htm"><B>NdisRawWritePortUchar</B></A> </DT>

<DD>Writes a given byte to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_7e9e.htm"><B>NdisRawWritePortUlong</B></A> </DT>

<DD>Writes a given ULONG to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_2qcy.htm"><B>NdisRawWritePortUshort</B></A> </DT>

<DD>Writes a given USHORT to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. </DD>

<DT><A HREF="103ndisx_5ek2.htm"><B>NdisReadConfiguration</B></A> </DT>

<DD>Reads the value of a named entry of the specified type, given the registry handle returned by <B>NdisOpenConfiguration</B>. </DD>

<DT><A HREF="103ndisx_019v.htm"><B>NdisReadEisaSlotInformation</B></A> </DT>

<DD>Returns EISA configuration information to a caller-supplied buffer during initialization, given a handle to the wrapper configuration context and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_73aq.htm"><B>NdisReadEisaSlotInformationEx</B></A> </DT>

<DD>Returns EISA configuration information, including all available EISA function information, to a caller-supplied buffer during initialization, given a handle to the wrapper configuration context and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_5e9f.htm"><B>NdisReadNetworkAddress</B></A> </DT>

<DD>Returns the size and value, in binary, of the <B>NetworkAddress</B> entry, specifying the setup-configured network address of the NIC, from the caller’s <B>Parameters</B> key in the registry, given the handle obtained from <B>NdisOpenConfiguration</B>. </DD>

<DT><A HREF="103ndisx_3egi.htm"><B>NdisReadPciSlotInformation</B></A> </DT>

<DD>Returns a specified range of PCI configuration information to a caller-supplied buffer during initialization, given an adapter handle and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_38fm.htm"><B>NdisReadPcmciaAttributeMemory</B></A></DT>

<DD>Reads bus-relative configuration parameters for a PC Card NIC from attribute memory.</DD>

<DT><A HREF="103ndisx_1cvm.htm"><B>NdisReadPortBufferUchar</B></A> </DT>

<DD>Reads a specified number of bytes from a given I/O port into a caller-supplied buffer, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_49rm.htm"><B>NdisReadPortBufferUlong</B></A> </DT>

<DD>Reads a specified number of ULONGs from a given I/O port into a caller-supplied buffer, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_2qr7.htm"><B>NdisReadPortBufferUshort</B></A> </DT>

<DD>Reads a specified number of USHORTs from a given I/O port into a caller-supplied buffer, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_2vsi.htm"><B>NdisReadPortUchar</B></A> </DT>

<DD>Reads a byte from a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_5soi.htm"><B>NdisReadPortUlong</B></A> </DT>

<DD>Reads a ULONG from a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_0d82.htm"><B>NdisReadPortUshort</B></A> </DT>

<DD>Reads a USHORT from a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_1gc2.htm"><B>NdisReadRegisterUchar</B></A> </DT>

<DD>Reads a byte from a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_4d83.htm"><B>NdisReadRegisterUlong</B></A> </DT>

<DD>Reads a ULONG from a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_8vzm.htm"><B>NdisReadRegisterUshort</B></A> </DT>

<DD>Reads a USHORT from a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_51iq.htm"><B>NdisRecalculatePacketCounts</B></A> </DT>

<DD>Resets the valid counts of chained buffer descriptors for a given packet descriptor. </DD>

<DT><A HREF="103ndisx_87hu.htm"><B>NdisReinitializePacket</B></A> </DT>

<DD>Sets to NULL the queue head for any chained buffers in a given packet descriptor and reinitializes it for reuse. </DD>

<DT><A HREF="103ndisx_8wvm.htm"><B>NdisReleaseReadWriteLock</B></A></DT>

<DD>Releases a lock that was acquired in a preceding call to <B>NdisAcquireReadWriteLock</B>. </DD>

<DT><A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A> </DT>

<DD>Releases a spin lock that was acquired in a preceding call to <B>NdisAcquireSpinLock</B>. </DD>

<DT><A HREF="103ndisx_12lu.htm"><B>NdisResetEvent</B></A> </DT>

<DD>Clears the Signaled state of a given event. </DD>

<DT><A HREF="103ndisx_20he.htm"><B>NdisRetrieveUlong</B></A> </DT>

<DD>Retrieves a ULONG value from the source address, avoiding alignment faults. </DD>

<DT><A HREF="103ndisx_20ky.htm"><B>NdisScheduleWorkItem</B></A></DT>

<DD>Inserts a given work item into a queue from which a system worker thread removes the item and gives control to the callback function that the driver previously supplied to <B>NdisInitializeWorkItem</B>.</DD>

<DT><A HREF="103ndisx_0zjm.htm"><B>NdisSetEvent</B></A> </DT>

<DD>Sets a given event to the Signaled state if it was not already Signaled, thereby causing waits on the event to be satisfied. </DD>

<DT><A HREF="103ndisx_20vm.htm">NDIS_SET_ORIGINAL_PACKET</A> </DT>

<DD>Sets the information in a given packet descriptor to the information from a packet descriptor that was originally indicated up by a lower-level driver. </DD>

<DT><A HREF="103ndisx_08oj.htm"><B>NdisSetPacketCancelId</B></A></DT>

<DD>Marks a packet with a cancellation identifier that a driver can later use to cancel the pending transmission of the packet. </DD>

<DT><A HREF="103ndisx_5w8j.htm">NDIS_SET_PACKET_HEADER_SIZE</A> </DT>

<DD>Sets the <B>HeaderSize</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a miniport driver-allocated packet descriptor for received net packet(s) to be indicated.</DD>

<DT><A HREF="103ndisx_6rxu.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A> </DT>

<DD>Sets the <B>MediaSpecificInformation</B> and <B>SizeMediaSpecificInfo</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a miniport driver-allocated packet descriptor for a received net packet about to be indicated. </DD>

<DT><A HREF="103ndisx_6twy.htm">NDIS_SET_PACKET_STATUS</A> </DT>

<DD>Sets the <B>Status</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with packet descriptor for a received net packet about to be indicated or for a given send packet completed in the <I>MiniportSend(Packets)</I> function. </DD>

<DT><A HREF="103ndisx_9l6a.htm"><B>NdisSetPacketStatus</B></A></DT>

<DD>Sets status for a packet.</DD>

<DT><A HREF="103ndisx_3nxu.htm">NDIS_SET_PACKET_TIME_RECEIVED</A> </DT>

<DD>Sets the <B>TimeReceived</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> block associated with a miniport driver-allocated packet descriptor for a received net packet about to be indicated with <B>NdisMIndicateReceivePacket</B>. </DD>

<DT><A HREF="103ndisx_2u42.htm">NDIS_SET_PACKET_TIME_SENT</A> </DT>

<DD>Sets the <B>TimeSent</B> in the <A HREF="105nstru_1vqq.htm">NDIS_PACKET_OOB_DATA</A> associated with a miniport driver-allocated packet descriptor for a received net packet about to be indicated with <B>NdisMIndicateReceivePacket</B>. </DD>

<DT><A HREF="103ndisx_3jea.htm"><B>NdisSetPhysicalAddressHigh</B></A> </DT>

<DD>Sets the high-order part of a given physical address to a given value.</DD>

<DT><A HREF="103ndisx_8qnm.htm"><B>NdisSetPhysicalAddressLow</B></A> </DT>

<DD>Sets the low-order part of a given physical address to a given value. </DD>

<DT><A HREF="103ndisx_0xo2.htm"><B>NdisStallExecution</B></A> </DT>

<DD>Stalls the caller on the current processor for a given interval in microseconds. </DD>

<DT><A HREF="103ndisx_1boy.htm"><B>NdisStoreUlong</B></A> </DT>

<DD>Stores a ULONG value at a particular address, avoiding alignment faults.</DD>

<DT><A HREF="103ndisx_14ky.htm"><B>NdisSystemProcessorCount</B></A> </DT>

<DD>Determines whether its caller is running on a uniprocessor or multiprocessor machine, which is useful information for allocating resources during driver initialization. </DD>

<DT><A HREF="103ndisx_7mgi.htm"><B>NdisTerminateWrapper</B></A> </DT>

<DD>Releases system resources allocated when the driver called <B>NdisMInitializeWrapper</B>. Drivers call <B>NdisTerminateWrapper</B> during initialization if they cannot find and successfully initialize at least one NIC or when they are unloading. </DD>

<DT><A HREF="103ndisx_9vci.htm"><B>NdisUnchainBufferAtBack</B></A> </DT>

<DD>Removes a given buffer descriptor at the end of the chain of buffer descriptors for a given packet descriptor and returns a pointer to the buffer descriptor. </DD>

<DT><A HREF="103ndisx_30mq.htm"><B>NdisUnchainBufferAtFront</B></A> </DT>

<DD>Removes a given buffer descriptor at the start of the chain of buffer descriptors for a given packet descriptor and returns a pointer to the buffer descriptor. </DD>

<DT><A HREF="103ndisx_07zm.htm"><B>NdisUnicodeStringToAnsiString</B></A> </DT>

<DD>Converts a given counted Unicode string into a counted ANSI string. </DD>

<DT><A HREF="103ndisx_2jn6.htm"><B>NdisUnmapFile</B></A> </DT>

<DD>Releases the file mapping set up by the preceding call to <B>NdisMapFile</B>. </DD>

<DT><A HREF="103ndisx_0lpu.htm"><B>NdisUpcaseUnicodeString</B></A></DT>

<DD>Converts a copy of a given Unicode string to upper case and returns the converted string.</DD>

<DT><A HREF="103ndisx_7uyb.htm"><B>NdisWaitEvent</B></A> </DT>

<DD>Puts the caller into a wait state until the given event is set to the Signaled state or the wait times out. </DD>

<DT><A HREF="103ndisx_5kaa.htm"><B>NdisWriteConfiguration</B></A> </DT>

<DD>Writes a caller-supplied value entry in the registry, given the handle returned by <B>NdisOpenConfiguration</B> </DD>

<DT><A HREF="103ndisx_71pu.htm"><B>NdisWriteErrorLogEntry</B></A> </DT>

<DD>Allocates an error-log record, fills it in, and writes it to the I/O error log, given the adapter handle for the NIC, an NDIS_<I>XXX</I> error code, a count of caller-supplied error values, and a corresponding number of ULONGs specifying additional information about the I/O error or configuration error.</DD>

<DT><A HREF="103ndisx_18mq.htm"><B>NdisWritePciSlotInformation</B></A> </DT>

<DD>Writes data from a caller-supplied buffer to a specified range of the PCI configuration space, given a handle to the adapter and the slot number for the NIC on the I/O bus.</DD>

<DT><A HREF="103ndisx_359u.htm"><B>NdisWritePcmciaAttributeMemory</B></A></DT>

<DD>Writes bus-relative configuration parameters for a PC Card NIC to attribute memory.</DD>

<DT><A HREF="103ndisx_34du.htm"><B>NdisWritePortBufferUchar</B></A> </DT>

<DD>Writes a specified number of bytes from a caller-supplied buffer to a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_619u.htm"><B>NdisWritePortBufferUlong</B></A> </DT>

<DD>Writes a specified number of ULONGs from a caller-supplied buffer to a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_5n5e.htm"><B>NdisWritePortBufferUshort</B></A> </DT>

<DD>Writes a specified number of USHORTs from a caller-supplied buffer to a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_6hyq.htm"><B>NdisWritePortUchar</B></A> </DT>

<DD>Writes a given byte to a given I/O port, mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_9euq.htm"><B>NdisWritePortUlong</B></A> </DT>

<DD>Writes a given ULONG to a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_1sab.htm"><B>NdisWritePortUshort</B></A> </DT>

<DD>Writes a given USHORT to a given I/O port, after mapping the port address if necessary. </DD>

<DT><A HREF="103ndisx_1m2a.htm"><B>NdisWriteRegisterUchar</B></A> </DT>

<DD>Writes a given byte to a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_4iya.htm"><B>NdisWriteRegisterUlong</B></A> </DT>

<DD>Writes a given ULONG to a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_92lu.htm"><B>NdisWriteRegisterUshort</B></A> </DT>

<DD>Writes a given USHORT to a device register, given its mapped memory-space address. </DD>

<DT><A HREF="103ndisx_1376.htm"><B>NdisZeroMappedMemory</B></A> </DT>

<DD>Fills a block of memory that was mapped in a preceding call to <B>NdisMMapIoSpace</B> with zeros, given a pointer to the block and the length in bytes to be filled. </DD>

<DT><A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A> </DT>

<DD>Fills a block of memory with zeros, given a pointer to the block and the length in bytes to be filled. </DD>

<DT><A HREF="103ndisx_4d0y.htm">TR_COMPARE_NETWORK_ADDRESSES</A> </DT>

<DD>Sets a caller-supplied variable to a value indicating whether a given Token Ring address is greater than, less than, or equal to another given Token Ring address.</DD>

<DT><A HREF="103ndisx_7trm.htm">TR_COPY_NETWORK_ADDRESS</A> </DT>

<DD>Copies a given Token Ring address to a given location.</DD>

<DT><A HREF="103ndisx_4prm.htm">TR_IS_BROADCAST</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given Token Ring address is a broadcast address. </DD>

<DT><A HREF="103ndisx_2ar6.htm">TR_IS_FUNCTIONAL</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given Token Ring address is a functional address. </DD>

<DT><A HREF="103ndisx_90qa.htm">TR_IS_GROUP</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given Token Ring address is a group address. </DD>

<DT><A HREF="103ndisx_622a.htm">TR_IS_NOT_DIRECTED</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given Token Ring address is neither a functional nor a group address. </DD>

<DT><A HREF="103ndisx_0bci.htm">TR_IS_SOURCE_ROUTING</A> </DT>

<DD>Sets a caller-supplied variable to a Boolean value indicating whether a given Token Ring address is a source-routing address. 
</DD>
</DL>

<P>To ensure their portability across Microsoft operating systems that support Win32, most NDIS miniport drivers call only functions exported by the NDIS library and use only macros explicitly declared in the master header file,<I> ndis.h</I>, or in the appropriate <I>efilter.h</I>, <I>ffilter.h</I>, <I>tfilter.h</I>, or <I>afilter.h</I>, if the NDIS uses the system-supplied Ethernet, FDDI, Token Ring, or ARCNET filter-library support to manage bindings for the miniport driver. </P>

<P>However, in addition to the NDIS library functions listed here, a miniport driver might use some of the macros and support routines exported by other kernel-mode components, such as the following:<BR>
CONTAINING_RECORD<BR>
<B>InitializeListHead</B><BR>
<B>InsertHeadList</B><BR>
<B>InsertTailList</B><BR>
<B>IsListEmpty</B><BR>
<B>RemoveEntryList</B><BR>
<B>RemoveHeadList</B></P>

<P>For more information about the preceding macro and functions, see <A HREF="JavaScript:hhobj_1.Click()">Run-time Library Routines</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS%20Library%20Functions%20Used%20by%20Miniport%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
