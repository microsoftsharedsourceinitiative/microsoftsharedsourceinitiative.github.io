<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Query for 802.1Q Support</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Query for 802.1Q Support">
<META NAME="MS-HKWD" CONTENT="OID_GEN_MAC_OPTIONS">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_query_for_802.1q_support_ng"></A>Query for 802.1Q Support</H3>

<P>Upper link-layer drivers send queries to underlying miniport drivers to determine the capabilities of those miniport drivers or their NICs. If miniport drivers support 802.1Q, they should be implemented to process these queries and to return information that indicates their support. These upper link-layer drivers call the <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> function for a connectionless miniport driver and the <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A> function for a connection-oriented miniport driver and pass in a <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A> structure that is filled with the following OID_<I>XXX</I> code for the query. </P>



<H4><A NAME="ddk_oid_gen_mac_options_ng"></A>OID_GEN_MAC_OPTIONS</H4>

<P>The OID_GEN_MAC_OPTIONS query returns a bitmask to the upper link-layer driver. This bitmask defines optional properties of the underlying miniport driver or of the miniport driver's NIC. A protocol that initiates this query can determine which flags in the bitmask are set by the underlying miniport driver. Such a protocol can also take advantage of the miniport driver properties that are associated with the flags. For example, a miniport driver can set the NDIS_MAC_OPTION_8021P_PRIORITY and NDIS_MAC_OPTION_8021Q_VLAN flags in the bitmask to indicate that it supports those properties. Such a miniport driver can receive priority values and VLAN identifiers in per-packet information of <A HREF="105nstru_6jn6.htm">NDIS_PACKET</A> structures from higher-layer drivers. This miniport driver can then generate the appropriate information in the MAC headers of packets to transmit over the network. This miniport driver also supports extracting the appropriate information from the MAC headers of packets received from the network. After the information is extracted, the miniport driver uses NDIS_PACKET structures to indicate the information to higher-layer drivers. If the miniport driver or the miniport driver's NIC supports other optional properties, the miniport driver should also set flags for those properties in the bitmask. The Windows DDK defines all bitmask flags for <A HREF="22genoid_499u.htm">OID_GEN_MAC_OPTIONS</A> in the <I>Network Reference</I>. </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Query%20for%20802.1Q%20Support"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
