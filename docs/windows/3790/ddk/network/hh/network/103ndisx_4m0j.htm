<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMResetComplete</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMResetComplete">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismresetcomplete_nr"></A>NdisMResetComplete</H1>

<P><B>NdisMResetComplete</B> returns the final status of a reset request for with the NIC driver previously returned NDIS_STATUS_PENDING.</P>

<PRE class=syntax><B>VOID 
  NdisMResetComplete(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN NDIS_STATUS</B>  <I>Status</I><B>,</B>
    <B>IN BOOLEAN</B>  <I>AddressingReset
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle originally input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>Status</I></DT>

<DD>Specifies the final status of the reset operation just completed</DD>

<DT><I>AddressingReset</I></DT>

<DD>Specifies TRUE if the reset affected the miniport’s network address information so that it needs to be reloaded.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>If the <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> function returns NDIS_STATUS_PENDING, the miniport driver must call <B>NdisMResetComplete</B> when it completes the reset operation. This call causes NDIS to forward the completion-status information to the protocol driver, if any, that called <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> to initiate the call to <I>MiniportReset</I>. </P>

<P>The NDIS library also can call the <I>MiniportReset</I> function, independent of any reset requests from protocol drivers bound to a particular NIC, when NDIS determines that a sent packet or a request that it submitted to the miniport driver has timed out. </P>

<P>Some NICs lose all multicast address, packet filter, or functional address information when a soft reset is issued. The driver of such a NIC sets <I>AddressingReset</I> to TRUE when it calls <B>NdisMResetComplete</B>, causing NDIS to call its <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> function to restore the addressing state.</P>

<P>An NDIS intermediate driver either sets <I>AddressingReset</I> to TRUE when it calls <B>NdisMResetComplete</B> or restores its own addressing information, such as medium-specific functional, multicast, and/or group addresses. </P>

<P>Callers of <B>NdisMResetComplete</B> run at IRQL = DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A>, <A HREF="104tdlow_0yya.htm"><I>ProtocolResetComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMResetComplete"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
