<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ProtocolCmDeregisterSap</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="ProtocolCmDeregisterSap">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_protocolcmderegistersap_nr"></A>ProtocolCmDeregisterSap</H1>

<P>The <I>ProtocolCmDeregisterSap </I>function is required. This function is called by NDIS to request that a call manager deregister a SAP on behalf of a connection-oriented client.</P>

<PRE class=syntax><B>NDIS_STATUS 
</B>  <B>ProtocolCmDeregisterSap(</B>
    <B>IN NDIS_HANDLE</B>  <I>CallMgrSapContext</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>CallMgrSapContext</I></DT>

<DD>Specifies the handle to a call-manager allocated context area in which the call manager maintains its per-SAP state information. The call manager supplied this handle to NDIS from its <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A> function.
</DD>
</DL>

<H4>Return Value</H4>

<P><I>ProtocolCmDeregisterSap</I> returns the status of its operation(s) as one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the call manager successfully removed the SAP registration and freed any resources allocated to maintain per-SAP information.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the call manager will complete the request to deregister the SAP asynchronously. The call manager must call <A HREF="103ndisx_1pma.htm"><B>NdisCmDeregisterSapComplete</B></A> to signal NDIS when the operation is complete.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><I>ProtocolCmDeregisterSap</I> communicates with network control devices or other media-specific agents, as necessary, to deregister the SAP on the network. Such actions could include, but are not limited to:

<UL>
	<LI>Communicating with a switching hardware</LI>

	<LI>Communicating with a network control station</LI>

	<LI>Communicating with other media-specific network agents</LI>
</UL>

<P>If a call manager is required to communicate with networking control agents, such as a network switch, it should use a virtual connection to the network control agent that it established in its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function. Stand-alone call managers communicate through the underlying miniport driver by calling <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A>. Miniport drivers that provide integrated call-management support never call <B>NdisCoSendPackets</B>. Instead, they transmit the data directly across the network.</P>

<P>In addition, <I>ProtocolCmDeregisterSap</I> must free any dynamically-allocated resources in its per-SAP area, provided at <I>CallMgrSapContext</I>, as well as freeing the state area itself before returning control to NDIS.</P>

<P><I>ProtocolCmDeregisterSap</I> must be written such that it can be run at IRQL = DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="103ndisx_1pma.htm"><B>NdisCmDeregisterSapComplete</B></A>, <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: ProtocolCmDeregisterSap"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
