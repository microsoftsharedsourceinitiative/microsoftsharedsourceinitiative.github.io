<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS_REQUEST</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS_REQUEST">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_request_nr"></A>NDIS_REQUEST</H1>

<P>The NDIS_REQUEST structure specifies a packet set up by NDIS or by a protocol for a call to <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> or <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>. NDIS submits these requests to the underlying driver’s <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> or <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> functions. </P>

<PRE class=syntax>typedef struct _NDIS_REQUEST {
    UCHAR             MacReserved[4*sizeof(PVOID)];
    NDIS_REQUEST_TYPE RequestType;
    union _DATA {
        struct QUERY_INFORMATION {
            NDIS_OID  Oid;
            PVOID     InformationBuffer;
            UINT      InformationBufferLength;
            UINT      BytesWritten;
            UINT      BytesNeeded;
        } QUERY_INFORMATION;
        struct SET_INFORMATION {
            NDIS_OID  Oid;
            PVOID     InformationBuffer;
            UINT      InformationBufferLength;
            UINT      BytesRead;
            UINT      BytesNeeded;
        } SET_INFORMATION;
   } DATA;
} NDIS_REQUEST, *PNDIS_REQUEST;</PRE>

<H4>Members</H4>

<DL>
<DT><B>MacReserved[4*sizeof(PVOID)]</B></DT>

<DD>Specifies an area reserved for use by the underlying driver. This area can contain up to four pointers’ worth of data.</DD>

<DT><B>RequestType</B></DT>

<DD>Specifies the request type as one of the following: 

<DL>
<DT><B>NdisRequestQueryInformation</B></DT>

<DD>Specifies a query-information request. NDIS forwards such a request to the underlying driver’s <I>MiniportQueryInformation</I> function.  </DD>

<DT><B>NdisRequestSetInformation</B></DT>

<DD>Specifies a set-information request. NDIS forwards such a request to the underlying driver’s <I>MiniportSetInformation</I> function.  </DD>

<DT><B>NdisRequestQueryStatistics</B></DT>

<DD>Specifies a query-statistics request. For most statistics queries, NDIS satisfies the request itself. Otherwise, NDIS forwards such request to the underlying driver’s <I>MiniportQueryInformation</I> function. This type of request originates in a user-mode application, never in a protocol driver. </DD>
</DL>


<P>For any of the preceding values, the OID_<I>XXX</I> specified in the <B>Oid</B> member must be compatible with the type of operation requested. 


<DL>
<DT><B>NdisRequestOpen</B></DT>

<DD>This type is obsolete. A protocol driver calls <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> instead. </DD>

<DT><B>NdisRequestClose</B></DT>

<DD>This type is obsolete. A protocol driver calls <A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A> instead. </DD>

<DT><B>NdisRequestSend</B></DT>

<DD>This type is obsolete. A protocol driver calls <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> or <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> instead. </DD>

<DT><B>NdisRequestTransferData</B></DT>

<DD>This type is obsolete. A protocol driver calls <A HREF="103ndisx_6bci.htm"><B>NdisTransferData</B></A> instead. </DD>

<DT><B>NdisRequestReset</B></DT>

<DD>This type is obsolete. A protocol driver calls <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> instead. </DD>

<DT><B>NdisRequestGeneric1</B></DT>

<DD>Specifies a NIC-driver-specific request. </DD>

<DT><B>NdisRequestGeneric2</B></DT>

<DD>Specifies a NIC-driver-specific request. </DD>

<DT><B>NdisRequestGeneric3</B></DT>

<DD>Specifies a NIC-driver-specific request. </DD>

<DT><B>NdisRequestGeneric4</B></DT>

<DD>Specifies a NIC-driver-specific request. </DD>
</DL>
</DD>

<DT><B>Oid</B></DT>

<DD>Specifies the object identifier of the requested operation. The value is an OID_<I>XXX</I> code. </DD>

<DT><B>InformationBuffer</B></DT>

<DD>Pointer to a buffer into which the underlying driver or NDIS returns the requested information for queries or from which the underlying driver reads caller-supplied information for sets. </DD>

<DT><B>InformationBufferLength</B></DT>

<DD>Specifies the size in bytes of the buffer at <B>InformationBuffer</B>. The value at <B>Oid</B> determines the value appropriate to this member. </DD>

<DT><B>BytesWritten</B></DT>

<DD>Specifies the number of bytes that the underlying driver or NDIS transfers into the buffer at <B>InformationBuffer</B> for query-information requests. If <B>NdisRequest</B> returns NDIS_STATUS_INVALID_LENGTH, the value of this member is meaningless. </DD>

<DT><B>BytesRead</B></DT>

<DD>Specifies the number of bytes that the underlying driver read from the buffer at <B>InformationBuffer</B> for set-information requests. </DD>

<DT><B>BytesNeeded</B></DT>

<DD>Specifies the number of bytes needed to return query information or to carry out the set operation requested by the given OID_<I>XXX</I> code. 

<P>If <B>NdisRequest</B> returns NDIS_STATUS_SUCCESS, the value of this member is meaningless. If the <B>InformationBufferLength</B> is too small for the given OID_<I>XXX</I> on a query, this member indicates how large a buffer is required to satisfy the request. If the buffer at <B>InformationBuffer</B> does not contain sufficient data for the given OID_<I>XXX</I> on a set, this member indicates how much data is required. 

</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ndis.h</I>. Include <I>ndis.h</I>.</P>

<H4>Comments</H4>

<P>A protocol should allocate nonpaged memory for the buffer at <B>InformationBuffer</B> and for the NDIS_REQUEST packet itself. Passing in a packet or buffer allocated from paged memory can cause fatal page faults because the underlying driver(s) run at IRQL DISPATCH_LEVEL to carry out the requested operation. </P>

<P>NDIS_REQUEST contains a DATA substructure for each type of operation that a protocol driver can request of an underlying driver. Before calling <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, the protocol fills in the relevant members of the substructure that represents the query or set operation it specified in the <B>Oid</B> member. NDIS or the underlying driver fills in the remaining members before it returns control to the caller. </P>

<P>For more information about OID_<I>XXX</I> codes and which system-defined OIDs permit queries, statistics queries, or set requests, see <A HREF="21oidovw_9sdu.htm">NDIS Objects</A>.</P>

<P>The <B>NdisRequestGeneric</B> types are available for NIC drivers that create their own internal requests. To indicate a requested operation, a NIC driver sets an internal variable to one of these types. </P>

<H4>See Also</H4>

<P><A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="103ndisx_27ea.htm"><B>NdisCloseAdapter</B></A>, <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>, <A HREF="103ndisx_4ktu.htm"><B>NdisMQueryInformationComplete</B></A>, <A HREF="103ndisx_3alu.htm"><B>NdisMSetInformationComplete</B></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>, <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A>, <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A>, <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A>, <A HREF="103ndisx_6bci.htm"><B>NdisTransferData</B></A>, <A HREF="104tdlow_3nn6.htm"><I>ProtocolRequestComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS_REQUEST"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
