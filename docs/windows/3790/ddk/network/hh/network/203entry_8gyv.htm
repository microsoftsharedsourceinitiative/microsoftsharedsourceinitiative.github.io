<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Allocating Memory</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Allocating Memory">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_allocating_memory_ng"></A>Allocating Memory</H3>

<P>During initialization, a miniport driver generally allocates any buffers, packet descriptors and buffer descriptors that it requires to send and receive data. The type and amount of memory that must be allocated depends on the type of NIC, as well as on the type of receive paradigm supported by the miniport driver.</P>

<P>Memory can be shared or unshared. A driver allocates shared memory only when that memory will be accessed by a bus-master DMA NIC. Miniport drivers for bus-master DMA NICs must allocate shared memory for any buffers that will be accessed by both the miniport driver and the NIC. Shared memory is a scarce system resource and is therefore harder to allocate.</P>

<P>A miniport driver that manages a bus-master DMA NIC must ensure that any cached memory it uses is coherent before reading received data from the buffer or before sending data from the buffer. Such a miniport driver must flush its buffers to ensure cache coherency on sends and receives. </P>

<P>A miniport driver that manages a slave DMA NIC or a non-DMA NIC does not have to maintain cache coherency. The <B>Ndis</B><I>Xxx</I> functions called by a miniport driver for slave DMA NIC perform memory flushes on behalf of the miniport driver. A miniport driver for a non-DMA NIC does not allocate cached memory.</P>

<P>The following functions can be called to allocate memory.

<UL>
	<LI><A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A> allocates, from resident (nonpaged) system-space memory, a buffer whose length is specified by the caller. The memory is not shared, but it can be cached or noncached, depending on the caller’s request. The memory can be contiguous and within a particular physical address boundary.</LI>

	<LI><A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A> allocates shared memory, which can be cached or noncached. This call returns both a physical address pointer that the NIC uses and a virtual address pointer that the miniport driver uses. <B>NdisMAllocateSharedMemory</B> <I>must</I> be called after <B>NdisMSetAttributesEx</B> and after <B>NdisMAllocateMapRegisters</B> or <B>NdisMInitializeScatterGatherDma</B>.</LI>

	<LI><A HREF="103ndisx_6t82.htm"><B>NdisAllocatePacketPool</B></A> or <A HREF="103ndisx_390y.htm"><B>NdisAllocatePacketPoolEx</B></A> allocates and initializes a block of nonpaged system memory from which packet descriptors are allocated.</LI>

	<LI><A HREF="103ndisx_7d6a.htm"><B>NdisAllocatePacket</B></A> allocates a packet descriptor from the packet pool allocated by calling <B>NdisAllocatePacketPool(Ex)</B>.</LI>

	<LI><A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A> returns a handle that the caller can use to allocate buffer descriptors with <B>NdisAllocateBuffer</B>.</LI>

	<LI><A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A> allocates a buffer descriptor from the buffer pool allocated with <B>NdisAllocateBufferPool</B>.</LI>
</UL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Allocating%20Memory"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
