<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI_ACCEPT</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI_ACCEPT">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_accept_nr"></A>TDI_ACCEPT</H1>

<P>When a kernel-mode client makes a TDI_ACCEPT request, it asks the underlying TDI transport driver to accept an incoming connection offer from a remote-node peer and, thereby, to enable network data transfers on the endpoint-to-endpoint connection between that local-node client and its remote-node peer. </P>

<H4>IRP</H4>

<P>The transport calls <B>IoGetCurrentIrpStackLocation</B> with the given <I>Irp</I> to get a pointer to its own I/O stack location in the IRP, shown in the following list as <B>IrpSp</B>. The pointer to the IRP is shown in the following list as <B>Irp</B>. IRP members relevant to this request include the following:

<DL>
<DT><B>Irp-&gt;IoStatus.Status</B></DT>

<DD>Specifies the final status of the accept request. The transport sets this member before it completes the IRP, possibly to one of the following:

<P>STATUS_SUCCESS <BR>
STATUS_INVALID_CONNECTION
</DD>

<DT><B>IrpSp-&gt;MajorFunction</B></DT>

<DD>Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member if it exports a <B>TdiDispatchInternalDeviceControl</B> routine that handles only TDI_<I>XXX</I> requests. </DD>

<DT><B>IrpSp-&gt;MinorFunction</B></DT>

<DD>Specifies TDI_ACCEPT.</DD>

<DT><B>IrpSp-&gt;FileObject</B></DT>

<DD>Pointer to an open file object representing the connection endpoint at which a listen request has completed. The transport uses the <B>FsContext</B> and, possibly, <B>FsContext2</B> fields to access the state it maintains about this connection. </DD>

<DT><B>IrpSp-&gt;Parameters</B></DT>

<DD>Specifies a TDI_REQUEST_KERNEL_ACCEPT structure, defined as follows:

<PRE>struct _TDI_REQUEST_KERNEL_ACCEPT {<B> </B>
    PTDI_CONNECTION_INFORMATION RequestConnectionInformation;<B> </B>
    PTDI_CONNECTION_INFORMATION ReturnConnectionInformation;<B> </B>
} TDI_REQUEST_KERNEL_ACCEPT, *PTDI_REQUEST_KERNEL_ACCEPT;<B> </B></PRE>


<P>The transport uses the members of this structure as follows:


<DL>
<DT><B>RequestConnectionInformation</B></DT>

<DD>Pointer to a TDI_CONNECTION_INFORMATION structure, possibly containing connection information supplied by the client. This information can include a pointer (in the <B>UserData</B> member) to a buffer of client-supplied accept data to be sent to the remote node when the transport notifies the remote-node transport that the offered connection is accepted. </DD>

<DT><B>ReturnConnectionInformation</B></DT>

<DD>Pointer to a client-supplied variable of type TDI_CONNECTION_INFORMATION in which the transport returns connection information, if any, to the client. This member is NULL if the transport does not return information for delayed-connection acceptances.
</DD>
</DL>
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>In normal operation, a client submits an accept request in response to a return from a preceding listen request in which it set the TDI_QUERY_ACCEPT flag. If the client did not set this flag in its TDI_LISTEN request for this connection, the transport should fail this accept request.</P>

<P>The transport can call already registered ClientEvent(Chained)Receive(Expedited) handlerbecause with incoming receives from the remote node on this connection before the I/O Manager formally completes its processing of the client's accept IRP.</P>

<P>Most TDI transport drivers have a time-out feature to prevent communication sequences from hanging when a remote node is not responding. Therefore, a TDI client must either accept or reject a connection as soon as possible after completion of its listen request. As a general rule, a transport-determined time-out interval between client notification of an offered connection and the local-node client's connection acceptance or rejection should be less than one second.</P>

<P><B>TdiBuildAccept</B> is the macro a client uses to fill in this IRP.</P>

<H4>See Also</H4>

<P><A HREF="35tdicli_4qnm.htm"><B>ClientEventChainedReceive</B></A>, <A HREF="35tdicli_57n6.htm"><B>ClientEventChainedReceiveExpedited</B></A>, <A HREF="35tdicli_7yeq.htm"><B>ClientEventReceive</B></A>, <A HREF="35tdicli_7jea.htm"><B>ClientEventReceiveExpedited</B></A>, <A HREF="34bldmac_2voy.htm"><B>TdiBuildAccept</B></A>, <A HREF="36tdstrc_9vg2.htm"><B>TDI_CONNECTION_INFORMATION</B></A>, <A HREF="31tddisp_2sfm.htm"><B>TdiDispatchInternalDeviceControl</B></A>, <A HREF="32ioctl_6jua.htm"><B>TDI_LISTEN</B></A>, <A HREF="32ioctl_5drm.htm"><B>TDI_RECEIVE</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI_ACCEPT"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
