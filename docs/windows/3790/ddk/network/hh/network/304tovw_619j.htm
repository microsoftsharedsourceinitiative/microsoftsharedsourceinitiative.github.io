<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI Library Functions and Macros</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI Library Functions and Macros">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_library_functions_and_macros_ng"></A>TDI Library Functions and Macros</H1>

<P>Windows®&nbsp;2000 and later versions of the operating system provide a small set of TDI library functions as a kernel-mode dynamic-link library (the <I>tdi.sys</I> export library) with which TDI drivers and kernel-mode clients link themselves. However, most of the system-supplied <B>TdiBuild</B><I>Xxx</I> called by kernel-mode clients are implemented as macros in the <I>tdikrnl.h</I> header that both clients and transports include. </P>

<P>Any kernel-mode TDI client can use the <B>TdiBuild</B><I>Xxx</I> macros as needed in preparing the TDI_<I>XXX</I> IOCTL IRPs, already mentioned in <A HREF="304tovw_4eef.htm">TDI IOCTL Requests</A>. After the client has set up such an IRP with a <B>TdiBuild</B><I>Xxx</I> macro, it submits the request to the underlying TDI driver by passing the IRP to <B>IoCallDriver</B>. Each of these macros fills in the relevant members of the client-provided IRP, except for the <B>Status</B> and <B>Information</B> members, which the underlying transport fills in after processing its client's request. Before using one of <B>TdiBuild</B><I>Xxx</I> IOCTL macros, a client can call <A HREF="34bldmac_8df6.htm"><B>TdiBuildInternalDeviceControlIrp</B></A> to allocate the IRP if it has not already been allocated by a still higher level network component and given to the client.</P>

<P>A transport driver never uses the <B>TdiBuild</B><I>Xxx</I> macros. However, a TDI driver can use some of the remaining TDI library routines, such as <B>TdiCompleteRequest </B>and <B>TdiCopyBufferToMdl</B>, for assistance in processing client requests.</P>

<P>TDI library routines and macros include the following:

<DL>
<DT><A HREF="34bldmac_8df6.htm"><B>TdiBuildInternalDeviceControlIrp</B></A> </DT>

<DD>Allocates an IRP if the client does not receive an IRP from a higher network layer.</DD>

<DT><A HREF="34bldmac_2voy.htm"><B>TdiBuildAccept</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_ACCEPT request.</DD>

<DT><A HREF="34bldmac_2jxu.htm"><B>TdiBuildAction</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_ACTION request.</DD>

<DT><A HREF="34bldmac_72ia.htm"><B>TdiBuildAssociateAddress</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_ASSOCIATE_ADDRESS request.</DD>

<DT><A HREF="34bldmac_99pu.htm"><B>TdiBuildConnect</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_CONNECT request.</DD>

<DT><A HREF="34bldmac_1376.htm"><B>TdiBuildDisassociateAddress</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_DISASSOCIATE_ADDRESS request.</DD>

<DT><A HREF="34bldmac_6cc2.htm"><B>TdiBuildListen</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_LISTEN request.</DD>

<DT><A HREF="34bldmac_3f5e.htm"><B>TdiBuildQueryInformation</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_QUERY_INFORMATION request.</DD>

<DT><A HREF="34bldmac_21de.htm"><B>TdiBuildReceive</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_RECEIVE request.</DD>

<DT><A HREF="34bldmac_0aya.htm"><B>TdiBuildReceiveDatagram</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_RECEIVE_DATAGRAM request.</DD>

<DT><A HREF="34bldmac_3w4y.htm"><B>TdiBuildSend</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_SEND request.</DD>

<DT><A HREF="34bldmac_3rhu.htm"><B>TdiBuildSendDatagram</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_SEND_DATAGRAM request.</DD>

<DT><A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_SET_EVENT_HANDLER request.</DD>

<DT><A HREF="34bldmac_0s1e.htm"><B>TdiBuildSetInformation</B></A> </DT>

<DD>Sets up an IRP for a client-submitted TDI_SET_INFORMATION request.</DD>

<DT><A HREF="34bldmac_7piq.htm"><B>TdiBuildNetbiosAddress</B></A> </DT>

<DD>Sets up a NetBIOS address for a client.</DD>

<DT><A HREF="34bldmac_8meq.htm"><B>TdiBuildNetbiosAddressEa</B></A> </DT>

<DD>Sets up a buffered NetBIOS address that a client can pass subsequently to <B>ZwCreateFile</B> to open the address. </DD>

<DT><A HREF="33tdifun_67aq.htm"><B>TdiReturnChainedReceives</B></A> </DT>

<DD>Relinquishes control of the buffer that was passed to a ClientEventChainedReceive(<I>Xxx</I>) handler after the client has consumed the received TSDU.</DD>

<DT><A HREF="33tdifun_0bqq.htm"><B>TdiCopyBufferToMdl</B></A> </DT>

<DD>Copies a range of buffered data into a destination buffer mapped by a given MDL. 

<P>Both clients and transports can use this function. 
</DD>

<DT><A HREF="33tdifun_3lyq.htm"><B>TdiCopyMdlToBuffer</B></A> </DT>

<DD>Copies data from buffers mapped by a given MDL into a caller-supplied destination buffer.

<P>Both clients and transports can use this function. 
</DD>

<DT><A HREF="33tdifun_5rle.htm"><B>TdiCopyLookaheadData</B></A> </DT>

<DD>Safely copies received data indicated to the transport by a NIC driver, whatever the nature of the memory (including mapped device memory) that the NIC is using. </DD>

<DT><A HREF="33tdifun_71ma.htm"><B>TdiMapUserRequest</B></A> </DT>

<DD>Converts an IRP passed in to a transport's TdiDispatchDeviceControl routine into a TDI_<I>XXX</I> IOCTL IRP if <B>TdiMapUserRequest</B> recognizes the minor function code specified in the input IRP.</DD>

<DT><A HREF="33tdifun_8z1u.htm"><B>TdiCompleteRequest</B></A> </DT>

<DD>Completes an IRP with the system-defined network-specific priority boost for a transport driver.</DD>

<DT><A HREF="33tdifun_5boy.htm"><B>TdiRegisterPnPHandlers</B></A> </DT>

<DD>Registers a set of ClientPnP<I>Xxx</I> routines with TDI to receive notifications of PnP binding-change, network-address-change, and power-state-change events from underlying PnP-aware TDI transports. </DD>

<DT><A HREF="33tdifun_5bea.htm"><B>TdiDeregisterPnPHandlers</B></A> </DT>

<DD>Removes a set of ClientPnP<I>Xxx</I> routines from being notified about subsequent PnP binding-change, network-address-change, and power-state-change events. </DD>

<DT><A HREF="33tdifun_99te.htm"><B>TdiRegisterProvider</B></A> </DT>

<DD>Registers a PnP-aware transport driver for Windows&nbsp;2000 and later versions with TDI during system startup. </DD>

<DT><A HREF="33tdifun_9r02.htm"><B>TdiProviderReady</B></A> </DT>

<DD>Indicates a PnP-aware transport driver's readiness to carry out network I/O on one or more newly established transport-to-NIC bindings. </DD>

<DT><A HREF="33tdifun_2tiq.htm"><B>TdiDeregisterProvider</B></A> </DT>

<DD>Deregisters a PnP-aware transport driver just before it unloads.</DD>

<DT><A HREF="33tdifun_2d0y.htm"><B>TdiRegisterDeviceObject</B></A> </DT>

<DD>Registers a named, transport-created device object that the clients of such a PnP-aware transport can subsequently "open" for network I/O. In effect, such a transport's call to this TDI function notifies all potential clients of this transport that it has just established a new transport-to-NIC binding. </DD>

<DT><A HREF="33tdifun_1u2a.htm"><B>TdiDeregisterDeviceObject</B></A> </DT>

<DD>Deregisters a transport-created device object when a PnP-aware transport is tearing down a binding. </DD>

<DT><A HREF="33tdifun_6uia.htm"><B>TdiRegisterNetAddress</B></A> </DT>

<DD>Registers a valid network address that a PnP-aware transport has just created for the local machine or has just obtained when establishing a connection to a remote node on a particular binding. In effect, a PnP-aware transport's call to this TDI function notifies its potential clients that they (or their remote-node peers) can subsequently use this protocol-specific address for network communications. </DD>

<DT><A HREF="33tdifun_6ovm.htm"><B>TdiDeregisterNetAddress</B></A> </DT>

<DD>Removes a network address from the list of those valid on a particular PnP-aware transport-to-NIC binding. </DD>

<DT><A HREF="33tdifun_4p6a.htm"><B>TdiPnPPowerRequest</B></A> </DT>

<DD>Forwards certain NET_PNP_EVENT-type notifications (by NDIS to the lower edge of the transport stack) to a PnP-aware transport's clients. In effect, a PnP-aware transport's call to this TDI function gives its clients the opportunity to notify their own still higher level clients about binding changes or power-state changes to the underlying NIC on which the transport depends. </DD>

<DT><A HREF="33tdifun_63ci.htm"><B>TdiPnPPowerComplete</B></A> </DT>

<DD>Indicates that a client has completed its processing of a binding-change or power-state-change notification for which it previously returned STATUS_PENDING. </DD>

<DT><A HREF="33tdifun_4y9e.htm"><B>TdiEnumerateAddresses</B></A> </DT>

<DD>Returns a list of all valid network addresses to the calling client. (This TDI function is almost never called because it has a severe adverse effect on the caller's performance.) 

</DD>
</DL>

<P></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI%20Library%20Functions%20and%20Macros"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
