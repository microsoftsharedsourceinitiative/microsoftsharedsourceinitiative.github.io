<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisRequest</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisRequest">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisrequest_nr"></A>NdisRequest</H1>

<P><B>NdisRequest</B> forwards a request to the underlying driver that it query the capabilities or status of its NIC or that it set the state of its NIC. </P>

<PRE class=syntax><B>VOID
  Ndis</B><!--><B>Request(
    OUT PNDIS_STATUS</B>  <I>Status</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>NdisBindingHandle</I><B>,</B>
    <B>IN PNDIS_REQUEST</B>  <I>NdisRequest</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Status</I></DT>

<DD>Pointer to a caller-supplied variable that is set on return from this function. The underlying driver determines which NDIS_STATUS_<I>XXX</I> is returned, but it is usually one of the following values: 

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The requested operation completed successfully. </DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>The request is being handled asynchronously, and the caller’s <A HREF="104tdlow_3nn6.htm"><I>ProtocolRequestComplete</I></A> function will be called when it is completed. </DD>

<DT>NDIS_STATUS_INVALID_OID</DT>

<DD>The OID_<I>XXX</I> code specified in the <B>Oid</B> member of the NDIS_REQUEST-structured buffer at <I>NdisRequest</I> is invalid or unsupported by the underlying driver. </DD>

<DT>NDIS_STATUS_INVALID_LENGTH or NDIS_STATUS_BUFFER_TOO_SHORT</DT>

<DD>The value specified in the <B>InformationBufferLength</B> member of the NDIS_REQUEST-structured buffer at <I>NdisRequest</I> does not match the requirements for the given OID_<I>XXX</I> code. If the information buffer is too small, the <B>BytesNeeded</B> member contains the correct value for <B>InformationBufferLength</B> on return from <B>NdisRequest</B>. </DD>

<DT>NDIS_STATUS_INVALID_DATA</DT>

<DD>The data supplied at <B>InformationBuffer</B> in the given <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A> structure is invalid for the given OID_<I>XXX</I> code. </DD>

<DT>NDIS_STATUS_NOT_SUPPORTED or NDIS_STATUS_NOT_RECOGNIZED</DT>

<DD>The underlying driver does not support the requested operation. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The request could not be satisfied due to a resource shortage. Usually, this return indicates that an attempt to allocate memory was unsuccessful, but it does not necessarily indicate that the same request, submitted later, will be failed for the same reason. </DD>

<DT>NDIS_STATUS_NOT_ACCEPTED</DT>

<DD>The underlying driver attempted the requested operation, usually a set, on its NIC but it was failed by the netcard. For example, an attempt to set too many multicast addresses might cause the return of this value. </DD>

<DT>NDIS_STATUS_CLOSING or NDIS_STATUS_CLOSING_INDICATING</DT>

<DD>The underlying driver failed the requested operation because a close is in progress. </DD>

<DT>NDIS_STATUS_RESET_IN_PROGRESS</DT>

<DD>The underlying NIC driver cannot satisfy the request at this time because it is currently resetting the netcard. The caller’s <A HREF="104tdlow_6e42.htm"><I>ProtocolStatus</I></A> function was or will be called with NDIS_STATUS_RESET_START to indicate that a reset is in progress. This return value does not necessarily indicate that the same request, submitted later, will be failed for the same reason. </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>This value usually is a nonspecific default, returned when none of the more specific NDIS_STATUS_<I>XXX</I> caused the underlying driver to fail the request. </DD>
</DL>
</DD>

<DT><I>NdisBindingHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> that identifies the target NIC or the virtual adapter of the next-lower driver to which the caller is bound. </DD>

<DT><I>NdisRequest</I></DT>

<DD>Pointer to a buffered structure specifying the operation requested with a given OID_<I>XXX</I> code for either a query or a set. 
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A protocol driver must allocate sufficient memory for the information buffer associated with the OID_<I>XXX</I> of the operation it will request. The driver also must allocate and set up the buffer at <I>NdisRequest</I> before it calls <B>NdisRequest</B>. Both buffers must be allocated from nonpaged pool because the underlying driver runs at raised IRQL while processing the request. </P>

<P>For callers layered above an intermediate NDIS driver, <B>NdisRequest</B> forwards a request to the next-lower driver that it return information about its own capabilities or directs that driver to handle specific functionality in a caller-determined manner. If the next-lower driver is an NDIS intermediate driver, it can call <B>NdisRequest</B> with an OID-specific request of its own before completing the request originally submitted by the higher-level protocol. </P>

<P>Some errors returned at <I>Status</I> are recoverable, including the following:</P>

<P class=indent1>NDIS_STATUS_INVALID_OID<BR>
NDIS_STATUS_INVALID_LENGTH<BR>
NDIS_STATUS_BUFFER_TOO_SHORT<BR>
NDIS_STATUS_INVALID_DATA<BR>
NDIS_STATUS_RESOURCES<BR>
NDIS_STATUS_RESET_IN_PROGRESS</P>

<P>That is, a driver can modify the packet at <I>NdisRequest</I> appropriately to correct the OID_<I>XXX</I> code and/or the size or contents of the buffer at <B>InformationBuffer</B> and resubmit the request packet to <B>NdisRequest</B>. The same packet might be satisfied on resubmission to <B>NdisRequest</B> if the original call indicated a reset in progress or that a resource shortage, which might be temporary, prevented that request from being carried out. </P>

<P>The NDIS library maintains bindings for underlying miniport drivers. NDIS can return information for binding-specific queries if a given OID is associated with a system-defined medium type for which the system provides a filter library. </P>

<P>For more information about the general and media-specific OIDs and their respective associated information buffers, see <A HREF="21oidovw_8q9e.htm">NDIS Object Identifiers</A>.  </P>

<P>Callers of <B>NdisRequest</B> can be running at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>, <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A>, <A HREF="104tdlow_3nn6.htm"><I>ProtocolRequestComplete</I></A>, <A HREF="104tdlow_6e42.htm"><I>ProtocolStatus</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisRequest"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
