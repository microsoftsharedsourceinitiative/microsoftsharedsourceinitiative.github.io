<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMInitializeScatterGatherDma</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMInitializeScatterGatherDma">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisminitializescattergatherdma_nr"></A>NdisMInitializeScatterGatherDma</H1>

<P><B>NdisMInitializeScatterGatherDma</B>, which is called by miniport drivers that manage bus-master DMA NICs, initializes system resources during miniport driver initialization for use in subsequent DMA operations.</P>

<PRE class=syntax><B>NDIS_STATUS
  NdisMInitializeScatterGatherDma(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,
    IN BOOLEAN</B>  <I>Dma64BitAddresses</I><B>,
    IN ULONG</B>  <I>MaximumPhysicalMapping</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies the handle input to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>.</DD>

<DT><I>Dma64BitAddresses</I></DT>

<DD>Specifies TRUE if the NIC can use 64-bit addressing for DMA operations. Specifies FALSE if the NIC can use only 32-bit addressing for DMA operations.</DD>

<DT><I>MaximumPhysicalMapping</I></DT>

<DD>Specifies the maximum number of bytes that the NIC can transfer as a single DMA operation. If the miniport driver supports Large Send Offload (LSO), it should not pass the Ethernet frame size. Instead, it should pass the maximum packet size (for example, 32 or 64 Kbytes) that it supports in its LSO code.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisMInitializeScatterGatherDma</B> can return one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>System resources were successfully allocated for bus-master DMA operations.</DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>System resources could not be allocated due to system resource constraints. </DD>

<DT>NDIS_STATUS_NOT_SUPPORTED</DT>

<DD>The caller did not register as an NDIS 5.0 or NDIS 5.1 miniport driver when it called <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A> or the caller did not specify that its NIC is a bus-master DMA device when it called <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A> or <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>A miniport driver that manages a bus-master DMA NIC calls <B>NdisMInitializeScatterGatherDma</B> from its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function. The miniport driver must call <B>NdisMInitializeScatterGatherDma</B> after calling <B>NdisMSetAttributes</B> or <B>NdisMSetAttributesEx</B> and before calling <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>.</P>

<P><B>NdisMInitializeScatterGatherDma</B> reserves system resources for DMA operations performed by the miniport driver. A miniport driver that calls <B>NdisMInitializeScatterGatherDma</B> does not have to allocate map registers for DMA operations or release such registers on the completion of DMA operations.</P>

<P>If <I>MiniportInitialize</I> did not specify that the NIC is a bus master when it called <B>NdisMSetAttributes</B> or <B>NdisMSetAttributesEx</B>, <B>NdisMInitializeScatterGatherDma</B> simply returns control without attempting to reserve system resources.</P>

<P><B>NdisMInitializeScatterGatherDma</B> supports only 32-bit and 64-bit DMA addresses. It does not support 24-bit DMA addresses.</P>

<P>A miniport driver that calls <B>NdisMInitializeScatterGatherDma</B> during DMA initialization does the following to obtain the mapped logical address ranges of buffers containing DMA data: for each packet descriptor passed to its <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> or <A HREF="101mini_0ycy.htm"><I>Miniport(Co)SendPackets</I></A> function, the miniport driver calls <A HREF="103ndisx_0bjm.htm">NDIS_PER_PACKET_INFO_FROM_PACKET</A> with an <I>InfoType</I> of <B>ScatterGatherListPacketInfo</B>. The miniport driver supplies the obtained logical address ranges to its NIC so that the NIC can perform the DMA transfer.</P>

<P>Callers of <B>NdisMInitializeScatterGatherDma</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_1ywi.htm"><B>NdisMAllocateSharedMemory</B></A>, <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>, <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>, <A HREF="103ndisx_3a42.htm"><B>NdisMStartBufferPhysicalMapping</B></A>, <A HREF="103ndisx_0bjm.htm">NDIS_PER_PACKET_INFO_FROM_PACKET</A>, <A HREF="103ndisx_4ooi.htm"><B>NdisQueryPacket</B></A>, <A HREF="105nstru_5t9u.htm">SCATTER_GATHER_LIST</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMInitializeScatterGatherDma"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
