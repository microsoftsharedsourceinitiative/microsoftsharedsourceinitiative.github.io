<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMSetupDmaTransfer</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMSetupDmaTransfer">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismsetupdmatransfer_nr"></A>NdisMSetupDmaTransfer</H1>

<P><B>NdisMSetupDmaTransfer</B> sets up the host DMA controller for a DMA transfer.</P>

<PRE class=syntax><B>VOID 
  NdisMSetupDmaTransfer(
    OUT PNDIS_STATUS</B>  <I>Status</I><B>,</B>
    <B>IN NDIS_HANDLE</B>  <I>MiniportDmaHandle</I><B>,</B>
    <B>IN PNDIS_BUFFER</B>  <I>Buffer</I><B>,</B>
    <B>IN ULONG</B>  <I>Offset</I><B>,</B>
    <B>IN ULONG</B>  <I>Length</I><B>,</B>
    <B>IN BOOLEAN</B>  <I>WriteToDevice
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Status</I></DT>

<DD>Pointer to a caller-supplied variable in which this function returns the status of the request, which can be one of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The DMA controller has been set up to transfer the specified data, which has been flushed to or from the device to maintain data integrity. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>An attempt to set up the DMA controller for the transfer has failed, either because the channel designated by <I>MiniportDmaHandle</I> is currently in use transferring data or because the given <I>Length</I> is invalid. </DD>
</DL>
</DD>

<DT><I>MiniportDmaHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_1gxe.htm"><B>NdisMRegisterDmaChannel</B></A> during initialization. </DD>

<DT><I>Buffer</I></DT>

<DD>Pointer to the buffer descriptor mapping the range of host memory from which or into which the data will be transferred.</DD>

<DT><I>Offset</I></DT>

<DD>Specifies the byte offset within the mapped buffer at which the transfer should start. Zero indicates the transfer should begin at the initial byte of the range specified at <I>Buffer</I>. </DD>

<DT><I>Length</I></DT>

<DD>Specifies the number of bytes of data to be transferred. The range specified by <I>Offset </I>and <I>Length</I> must be a proper subrange of that specified at <I>Buffer</I>.</DD>

<DT><I>WriteToDevice</I></DT>

<DD>Specifies TRUE for an outbound transfer from the system through the NIC.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Drivers of slave-DMA NICs call <B>NdisMSetupDmaTransfer</B> in response to incoming send requests, for which the driver sets <I>WriteToDevice</I> to TRUE. They set <I>WriteToDevice</I> to FALSE when they transfer received data from the NIC to host memory. </P>

<P>The caller of <B>NdisMSetupDmaTransfer</B> supplies a buffer descriptor mapping the host memory range that is the target of the transfer or that contains data for a download operation from the host to the NIC. To specify a transfer sized to suit the DMA constraints of its NIC, the caller can set up a subrange to be transferred with the <I>Offset</I> and <I>Length</I> parameters if necessary. </P>

<P>The caller must supply a buffer descriptor that specifies the host range into which received data will be transferred from the NIC when <I>WriteToDevice</I> is FALSE. Otherwise, the buffer descriptor at <I>Buffer</I> was chained to a packet descriptor input to the NIC driver’s <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> or <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> function. </P>

<P>To improve performance for small transmit requests, such as a send request of less than 256 bytes in length, a miniport driver can copy the packet data into an internal staging buffer and pass a driver-allocated buffer descriptor mapping that buffer to <B>NdisMSetupDmaTransfer</B>. </P>

<P>On return from <B>NdisMSetupDmaTransfer</B>, the host DMA controller has been programmed for the transfer. The miniport driver then programs its NIC for the transfer operation. </P>

<P>When the transfer is complete, the miniport driver must call <B>NdisMCompleteDmaTransfer</B>.</P>

<P>Callers of <B>NdisMSetupDmaTransfer</B> run at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_7svm.htm"><I>MiniportSend</I></A>, <A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A>, <A HREF="101mini_81v6.htm"><I>MiniportTimer</I></A>, <A HREF="103ndisx_39pu.htm"><B>NdisAllocateBuffer</B></A>, <A HREF="103ndisx_1unm.htm"><B>NdisAllocateBufferPool</B></A>, <A HREF="103ndisx_4m42.htm"><B>NdisAllocateMemoryWithTag</B></A>, <A HREF="103ndisx_00ky.htm"><B>NdisMCompleteDmaTransfer</B></A>, <A HREF="103ndisx_3nqq.htm"><B>NdisMDeregisterDmaChannel</B></A>, <A HREF="103ndisx_1gxe.htm"><B>NdisMRegisterDmaChannel</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMSetupDmaTransfer"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
