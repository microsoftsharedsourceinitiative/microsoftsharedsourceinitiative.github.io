<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI Kernel-Mode Client Interactions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI Kernel-Mode Client Interactions">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_summary_of_kernel_mode_support_routines_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_kernel_mode_client_interactions_ng"></A>TDI Kernel-Mode Client Interactions</H1>

<P>The following figure shows how TDI clients make I/O requests to their underlying TDI transports and how transports make callbacks to their clients.</P>

<P><IMG SRC="images/tdikrnl.gif" ALT="" BORDER=0></P>

<P><B>TDI Client/Transport Interactions </B></P>

<P>A TDI client interacts with its underlying transport driver as follows:

<DL>
<DT><B>Creating TDI File Objects</B></DT>

<DD>A client calls <B>ZwCreateFile</B> to create or open a file object that represents a transport address, a connection endpoint, or a control channel. This call causes the I/O Manager to allocate an IRP, to marshal the client-supplied parameters into the IRP, and to pass the IRP to the underlying transport driver’s TdiDispatchCreate routine. When the transport driver has set up all the state it maintains for the newly created file object, it calls <B>IoCompleteRequest</B> (or <B>TdiCompleteRequest</B>) with the IRP and STATUS_SUCCESS. <B>ZwCreateFile</B> then returns to the TDI client with a handle to the file object. 

<P>Each client process's call to <B>ZwCreateFile</B> creates a separate file object, even if two clients have specified the same transport address in their calls to <B>ZwCreateFile</B>. 


<P>A successful call to <B>ZwCreateFile</B> opens a transport address, a connection endpoint, or a control channel, depending on the <I>EaXxx</I> parameters the client passes in its call. 
</DD>

<DT><B>Submitting Requests</B></DT>

<DD>After the appropriate file objects have been created, the client can submit requests that reference those objects. For example, after it opens a file object that represents a particular transport address, the client can submit an address-information query or “send datagram from this address” request. 

<P>Such a client uses standard I/O system mechanisms and conventions to submit all such requests:


<UL>
	<LI>The client prepares an IRP with an IRP_MJ_<I>XXX</I> opcode that identifies what operation the client wants the transport driver to perform. The client supplies all appropriate parameters for the given IRP_MJ_<I>XXX</I>, and, optionally, sets up its own IoCompletion routine that will be called when the request is completed by the transport. 
<P>The Windows DDK includes a set of <B>TdiBuild</B><I>Xxx</I> macros (in <I>tdikrnl.h</I>) that can be linked into client code and used to prepare IRPs for TDI-defined IOCTL requests, as well as the <B>TdiBuildInternalDeviceControl</B> function to allocate such an IRP.
</LI>

	<LI>When the IRP has been set up, the client calls <B>IoCallDriver</B> with pointers to the IRP, to the file object that represents the address, connection endpoint, or control channel, and to the transport driver’s device object. The I/O Manager passes the IRP directly to the appropriate <B>TdiDispatch</B>(<I>Xxx</I>) routine of the transport driver.</LI>

	<LI>When the transport driver has completed the requested operation, it calls <B>TdiCompleteRequest</B> or <B>IoCompleteRequest</B>. The I/O Manager then calls the client-supplied IoCompletion routine if the client supplied one for the IRP.</LI>
</UL>
</DD>

<DT><B>Handling Event Notifications</B></DT>

<DD>If a client has preregistered its entry points for one or more event handlers, the transport driver calls each such routine when the corresponding network event occurs. For example, if the client has registered a ClientEventReceive handler on an address associated with an endpoint-to-endpoint connection, the transport calls this handler when data sent by the remote-node peer process is received on the local node. </DD>

<DT><B>Deleting TDI Objects</B></DT>

<DD>The client calls <B>ZwClose</B> to delete a file object when the address, connection endpoint, or control channel is no longer needed by the client. The close request is forwarded to the transport's TdiDispatchCleanup and, subsequently, TdiDispatchClose routines.
</DD>
</DL>

<P>For more information about the kernel-mode support routines mentioned here, see <A HREF="JavaScript:hhobj_1.Click()">Summary of Kernel-Mode Support Routines</A>. For detailed information about the <B>Tdi</B><I>Xxx</I> functions, <B>TdiBuild</B><I>Xxx</I> macros, and <B>ClientEvent</B><I>Xxx</I> routines mentioned here, see <A HREF="34bldmac_971u.htm"><B>TdiBuild</B>Xxx Macros and Functions</A> and <A HREF="35tdicli_2nhu.htm">TDI Client Event and PnP Notification Handlers</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI%20Kernel-Mode%20Client%20Interactions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
