<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMCmRegisterAddressFamily</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMCmRegisterAddressFamily">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismcmregisteraddressfamily_nr"></A>NdisMCmRegisterAddressFamily</H1>

<P><B>NdisMCmRegisterAddressFamily</B> registers a set of call manager functions for connection-oriented communication over an MCM-driver-specified address family. </P>

<PRE class=syntax><B>NDIS_STATUS
  NdisMCmRegisterAddressFamily(
    IN NDIS_HANDLE</B>  <I>MiniportAdapterHandle</I><B>,</B>
    <B>IN PCO_ADDRESS_FAMILY</B>  <I>AddressFamily</I><B>,</B>
    <B>IN PNDIS_CALL_MANAGER_CHARACTERISTICS</B>  <I>CmCharacteristics</I><B>,</B>
    <B>IN UINT</B>  <I>SizeOfCmCharacteristics
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterHandle</I></DT>

<DD>Specifies an NDIS-supplied handle identifying the miniport driver's NIC. This handle is an input parameter to the NIC driver' s <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function, which calls <B>NdisMCmRegisterAddressFamily</B>. </DD>

<DT><I>AddressFamily</I></DT>

<DD>Pointer to a structure of type <A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A> identifying the address family the MCM driver supports. 

<P>The given <I>AddressFamily</I> becomes an input parameter to the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients bound to this MCM driver. 
</DD>

<DT><I>CmCharacteristics</I></DT>

<DD>Pointer to an NDIS_CALL_MANAGER_CHARACTERISTICS structure set up by the caller. The structure at <I>CmCharacteristics</I> is defined as follows:

<PRE>typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS {
    UCHAR  MajorVersion;
    UCHAR  MinorVersion;
    USHORT  Filler;           // reserved for system use
    UINT    Reserved;         // reserved for system use
    CO_CREATE_VC_HANDLER  CmCreateVcHandler;
    CO_DELETE_VC_HANDLER  CmDeleteVcHandler;
    CM_OPEN_AF_HANDLER  CmOpenAfHandler;
    CM_CLOSE_AF_HANDLER  CmCloseAfHandler;
    CM_REG_SAP_HANDLER  CmRegisterSapHandler;
    CM_DEREG_SAP_HANDLER  CmDeregisterSapHandler;
    CM_MAKE_CALL_HANDLER  CmMakeCallHandler;
    CM_CLOSE_CALL_HANDLER  CmCloseCallHandler;
    CM_INCOMING_CALL_COMPLETE_HANDLER
                             CmIncomingCallCompleteHandler;
    CM_ADD_PARTY_HANDLER  CmAddPartyHandler;
    CM_DROP_PARTY_HANDLER  CmDropPartyHandler;
    CM_ACTIVATE_VC_COMPLETE_HANDLER  CmActivateVcCompleteHandler;
    CM_DEACTIVATE_VC_COMPLETE_HANDLER
                             CmDeactivateVcCompleteHandler; 
    CM_MODIFY_CALL_QOS_HANDLER  CmModifyCallQoSHandler;
    CO_REQUEST_HANDLER  CmRequestHandler;
    CO_REQUEST_COMPLETE_HANDLER  CmRequestCompleteHandler;
} NDIS_CALL_MANAGER_CHARACTERISTICS,
                   *PNDIS_CALL_MANAGER_CHARACTERISTICS;</PRE>


<P>The MCM driver should initialize this structure with zeros before setting up the following members:


<DL>
<DT><B>MajorVersion</B></DT>

<DD>Specifies the major verision of this structure. The current version is 0x05. </DD>

<DT><B>MinorVersion</B></DT>

<DD>Specifies the minor version of this structure. The current version is 0x00. </DD>

<DT><B>Filler</B> and <B>Reserved</B></DT>

<DD>The caller should ignore these members after zero-initializing this structure. </DD>

<DT><B>CmCreateVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function. </DD>

<DT><B>CmDeleteVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> function.</DD>

<DT><B>CmOpenAfHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function.</DD>

<DT><B>CmCloseAfHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3z76.htm"><I>ProtocolCmCloseAf</I></A> function.</DD>

<DT><B>CmRegisterSapHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A> function.</DD>

<DT><B>CmDeregisterSapHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_46ia.htm"><I>ProtocolCmDeregisterSap</I></A> function.</DD>

<DT><B>CmMakeCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_20oi.htm"><I>ProtocolCmMakeCall</I></A> function.</DD>

<DT><B>CmCloseCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_8j1u.htm"><I>ProtocolCmCloseCall</I></A> function.</DD>

<DT><B>CmIncomingCallCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <I>ProtocolCmIncomingCallComplete</I> function.</DD>

<DT><B>CmAddPartyHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_9trm.htm"><I>ProtocolCmAddParty</I></A> function.</DD>

<DT><B>CmDropPartyHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3koi.htm"><I>ProtocolCmDropParty</I></A> function.</DD>

<DT><B>CmActivateVcCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_5aeq.htm"><I>ProtocolCmActivateVcComplete</I></A> function.</DD>

<DT><B>CmDeactivateVcCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_6ho2.htm"><I>ProtocolCmDeactivateVcComplete</I></A> function. </DD>

<DT><B>CmModifyCallQoSHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3436.htm"><I>ProtocolCmModifyCallQoS</I></A> function. </DD>

<DT><B>CmRequestHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> function.  </DD>

<DT><B>CmRequestCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> function. </DD>
</DL>
</DD>

<DT><I>SizeOfCmCharacteristics</I></DT>

<DD>Specifies the size in bytes of the structure at <I>CmCharacteristics</I>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisMCmRegisterAddressFamily</B> can return any of the following: 

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The miniport driver has been registered with NDIS as the call manager for the given address family, so NDIS will call the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients that bind themselves to this MCM driver. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The requested operation failed because NDIS could not allocate sufficient memory or initialize the state it uses to track the MCM driver as a call manager of this address family.</DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>NDIS failed this call, possibly for one of the following reasons:

<UL>
	<LI>The caller was not registered as a connection-oriented miniport driver. </LI>

	<LI>The caller-supplied invalid or insufficient information at <I>CmCharacteristics</I>.  </LI>
</UL>
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Drivers that control a connection-oriented NIC for which there is no medium-type-specific stand-alone call manager in the system also call <B>NdisMCmRegisterAddressFamily</B> after calling <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>. The driver of any NIC that has on-board connection-oriented signaling support can register itself as an MCM driver for better performance in managing calls. Registering as an MCM driver displaces any stand-alone call manager with the NIC driver's own call-management support.  </P>

<P>For example, because the system provides a stand-alone call manager for all ATM NIC drivers, a NIC driver that reports its medium as <B>NdisMediumAtm</B> is unlikely to call <B>NdisMCmRegisterAddressFamily</B>. However, such an ATM NIC driver might call <B>NdisMCmRegisterAddressFamily</B> if its adapter had on-board connection-oriented signaling support.</P>

<P>An MCM driver calls <B>NdisMCmRegisterAddressFamily</B> from its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function to register itself as a call manager with NDIS, after it has determined that its NIC is fully operational so the driver can carry out network I/O operations. In effect, such an MCM driver registers itself as a call manager and advertises its specific signaling services for all clients that subsequently bind themselves to the same NIC when <I>MiniportInitialize</I> calls <B>NdisMCmRegisterAddressFamily</B>. </P>

<P>After <I>MiniportInitialize</I> returns control with a successful registration as a call manager, NDIS calls the <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> functions of potential clients and, then, the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients that bind themselves to the MCM driver's NIC. These clients, in turn, cause NDIS to call the <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function that the MCM driver just registered for its address family. </P>

<P>The MCM driver must set every <B>Cm</B><I>Xxx</I> member in the NDIS_CALL_MANAGER_CHARACTERISTICS structure to a caller-supplied ProtocolCm/Co<I>Xxx</I> function when it calls <B>NdisMCmRegisterAddressFamily</B>, even if it does not support incoming calls, outgoing calls, or point-to-multipoint connections. For whatever subset of connection-oriented functionality that such an MCM driver does not support, its ProtocolCm<I>Xxx </I>functions simply return NDIS_STATUS_NOT_SUPPORTED. For example, NDIS never calls an MCM driver's registered <A HREF="104tdlow_5aeq.htm"><I>ProtocolCmActivateVcComplete</I></A> or <A HREF="104tdlow_6ho2.htm"><I>ProtocolCmDeactivateVcComplete</I></A><I> </I>function, so these can just return NDIS_STATUS_NOT_SUPPORTED but be placeholders in the characteristics structure. </P>

<P>An MCM driver must have <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> and <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> functions and set their entry points in the NDIS_CALL_MANAGER_CHARACTERISTICS structure passed to <B>NdisMCmRegisterAddressFamily</B>. If the driver previously registered a <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A><I> </I>or <A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A><I> </I>function when it called <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>, NDIS ignores these entry points after the MCM driver's call to <B>NdisMCmRegisterAddressFamily</B>. Whenever NDIS calls the MCM driver to create or delete a VC subsequently, NDIS passes in an <I>NdisAfHandle</I> as the initial parameter to the miniport driver-supplied <I>ProtocolCoCreateVc </I>or <I>ProtocolCoDeleteVc </I>function, rather than the <I>MiniportAdapterContext</I> handle passed in to the <I>MiniportCoCreateVc </I>or <I>MiniportCoDeleteVc</I> function of a stand-alone miniport driver. </P>

<P>An MCM driver cannot set the <B>CmRequestHandler</B> member to its <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> function but must provide a separate <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> function when it calls <B>NdisMCmRegisterAddressFamily</B>. Even if such a driver already supplied entry points for its <I>MiniportCoRequest</I>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, and <A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> functions when it called <B>NdisMRegisterMiniport</B>, an MCM driver must have a discrete <I>ProtocolCoRequest</I> function to handle CM-specific requests from clients. For MCM drivers, NDIS calls such a set of driver-supplied request handler(s) according to the following policies:

<UL>
	<LI>When a bound protocol driver calls <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, NDIS calls the NIC driver's <I>MiniportQueryInformation</I> or <I>MiniportSetInformation</I> function, depending on the given <B>RequestType</B> value, if the NIC driver registered these functions with <B>NdisMRegisterMiniport</B>. Otherwise, NDIS calls the NIC driver's registered <I>MiniportCoRequest</I> function. </LI>

	<LI>When a bound protocol driver calls <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A> with a NULL <I>NdisAfHandle</I>, NDIS calls the NIC driver's registered <I>MiniportCoRequest</I> function. Otherwise, NDIS calls the driver-supplied <I>ProtocolCoRequest</I> function that was set in the <B>CmRequestHandler</B> member when the MCM driver called <B>NdisMCmRegisterAddressFamily</B>. </LI>
</UL>

<P>An MCM driver also must have a <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> function to handle asynchronous completions of its subsequent calls to <A HREF="103ndisx_1pbm.htm"><B>NdisMCmRequest</B></A>. </P>

<P>An MCM driver can support more than one address family on a single NIC to which it is bound. The MCM driver must call <B>NdisCmRegisterAddressFamily</B> once for each address family that it registers on the binding and register the same entry points for each address family on the binding. Only one MCM driver can support a particular type of address family for clients bound to any particular NIC driver.</P>

<P>By contrast to MCM drivers, a stand-alone call manager, which usually provides call-management support to clients that depend on several NIC drivers, would call <B>NdisCmRegisterAddressFamily</B> to register its ProtocolCm<I>Xxx</I> and ProtocolCo<I>Xxx</I> driver functions with NDIS.</P>

<P>Callers of <B>NdisMCmRegisterAddressFamily</B> usually run at IRQL = PASSIVE_LEVEL and in the context of a system thread. <B>NdisMCmRegisterAddressFamily</B> must be called at IRQL &lt; DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A>, <A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A>, <A HREF="101mini_7ng2.htm"><B>MiniportSetInformation</B></A>, <A HREF="103ndisx_58tu.htm"><B>NdisCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>, <A HREF="103ndisx_1pbm.htm"><B>NdisMCmRequest</B></A>, <A HREF="103ndisx_6tte.htm"><B>NdisMRegisterMiniport</B></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>, <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="104tdlow_5aeq.htm"><I>ProtocolCmActivateVcComplete</I></A>, <A HREF="104tdlow_9trm.htm"><I>ProtocolCmAddParty</I></A>, <A HREF="104tdlow_3z76.htm"><I>ProtocolCmCloseAf</I></A>, <A HREF="104tdlow_8j1u.htm"><I>ProtocolCmCloseCall</I></A>, <A HREF="104tdlow_6ho2.htm"><I>ProtocolCmDeactivateVcComplete</I></A>, <A HREF="104tdlow_46ia.htm"><I>ProtocolCmDeregisterSap</I></A>, <A HREF="104tdlow_3koi.htm"><I>ProtocolCmDropParty</I></A>, <A HREF="104tdlow_2h2q.htm"><I>ProtocolCmIncomingCallComplete</I></A>, <A HREF="104tdlow_20oi.htm"><I>ProtocolCmMakeCall</I></A>, <A HREF="104tdlow_3436.htm"><I>ProtocolCmModifyCallQoS</I></A>, <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A>, <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A>, <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A>, <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A>, <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A>, <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMCmRegisterAddressFamily"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
