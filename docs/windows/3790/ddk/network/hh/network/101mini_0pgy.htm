<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MiniportCoRequest</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="MiniportCoRequest">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_miniportcorequest_nr"></A>MiniportCoRequest</H1>

<P>The <I>MiniportCoRequest</I> function is required for connection-oriented miniports. <I>MiniportCoRequest</I> handles a protocol-initiated request to get or set information from the miniport driver.</P>

<PRE class=syntax><B>NDIS_STATUS</B> <B>
</B>  <B>MiniportCoRequest(
    IN</B> <B>NDIS_HANDLE</B>  <I>MiniportAdapterContext</I><B>,</B>
    <B>IN</B> <B>NDIS_HANDLE</B>  <I>MiniportVcContext</I> <B>OPTIONAL,</B>
    <B>IN</B> <B>OUT</B> <B>PNDIS_REQUEST</B>  <I>NdisRequest</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>MiniportAdapterContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the miniport driver maintains state information about this instance of the adapter. The miniport driver provided this handle to NDIS by calling <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A> or <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A> from its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> function.</DD>

<DT><I>MiniportVcContext</I></DT>

<DD>Specifies the handle to a miniport driver-allocated context area in which the miniport driver maintains its per-VC state. The miniport driver supplied this handle to NDIS from its <A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> function.</DD>

<DT><I>NdisRequest</I></DT>

<DD>Pointer to a <A HREF="105nstru_3f8y.htm">NDIS_REQUEST</A> structure that contains both the buffer and the request packet for the miniport driver to handle. Depending on the request, the miniport driver returns requested information in the structure provided.
</DD>
</DL>

<H4>Return Value</H4>

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>Indicates that the miniport driver has either set or obtained the data as requested.</DD>

<DT>NDIS_STATUS_PENDING</DT>

<DD>Indicates that the miniport driver will complete the request asynchronously. Once the miniport driver has completed all processing it must call <A HREF="103ndisx_0kmq.htm"><B>NdisMCoRequestComplete</B></A> to signal NDIS that the request is complete.</DD>

<DT>NDIS_STATUS_INVALID_OID</DT>

<DD>Indicates that the request, specified at <I>NdisRequest</I>, is invalid or not recognized.</DD>

<DT>NDIS_STATUS_NOT_SUPPORTED</DT>

<DD>Indicates that the request, specified at <I>NdisRequest</I>, is recognized, but not supported by the miniport driver.</DD>

<DT>NDIS_STATUS_INVALID_LENGTH</DT>

<DD>Indicates that the buffer, supplied at <I>NdisRequest</I>, is of an insufficient size to hold the data requested.</DD>

<DT>NDIS_STATUS_INVALID_DATA</DT>

<DD>Indicates that one or more of the parameters specified for the request at <I>NdisRequest</I> is invalid.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h.</I></P>

<H4>Comments</H4>

<P>NDIS calls the <I>MiniportCoRequest</I> function either on its own behalf or on behalf of a bound protocol driver that called <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>. Miniport drivers should examine the request supplied at <I>NdisRequest</I> and take the action requested. For more information about the required and optional OID_GEN_CO_<I>XXX</I> that connection-oriented miniport drivers must handle, see <A HREF="211cooid_2whe.htm">Connection-Oriented Objects</A>.</P>

<P>Note that NDIS does not validate the OID-specific contents at <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A>. The driver itself must therefore validate these contents. If the driver determines that the value to be set is out of bounds, it should fail the request and return NDIS_STATUS_INVALID_DATA.</P>

<P><I>MiniportCoRequest</I> must be written such that it can be run from IRQL = DISPATCH_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A>, <A HREF="103ndisx_0kmq.htm"><B>NdisMCoRequestComplete</B></A>, <A HREF="103ndisx_175e.htm"><B>NdisMSetAttributes</B></A>, <A HREF="103ndisx_1pmb.htm"><B>NdisMSetAttributesEx</B></A>  </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: MiniportCoRequest"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
