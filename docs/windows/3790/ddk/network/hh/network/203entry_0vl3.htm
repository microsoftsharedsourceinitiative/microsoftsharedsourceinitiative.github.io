<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registering MiniportXxx Functions</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registering MiniportXxx Functions">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_registering_miniportxxx_functions_ng"></A>Registering <I>MiniportXxx</I> Functions</H3>

<P>Each address member of the NDIS_MINIPORT_CHARACTERISTICS structure must be initialized — that is, it must be set to the address of a miniport driver-supplied function or to NULL. The miniport driver must supply entry points for all mandatory <I>MiniportXxx</I> functions; otherwise, NDIS will fail the driver. The <I>MiniportXxx</I> functions are defined in the <I>ndis.h</I> header file. </P>

<P>Because the miniport driver supplies the addresses, and not the names, of its <I>MiniportXxx</I> functions, driver developers are free to name these functions whatever they wish. A reasonable miniport driver-development strategy is to give these functions names that make debugging easier. For instance, the miniport driver <I>mp.sys</I> could name the entry points MpISR, MpSend, etc.</P>

<H4>Registering <I>MiniportXxx</I> Functions of Connectionless Miniport Drivers</H4>

<P>A connectionless miniport driver must register the following mandatory <I>MiniportXxx</I> functions:</P>

<P class=indent1><A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> </P>

<P class=indent1><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> </P>

<P class=indent1><A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> </P>

<P class=indent1><A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> </P>

<P class=indent1><A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> or <A HREF="101mini_9a42.htm"><I>MiniportTransferData</I></A> </P>

<P class=indent1><A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A></P>

<P class=indent1><A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A> (required for miniport drivers that directly manage hardware)</P>

<P class=indent1>A LAN miniport driver must export a <I>MiniportReturnPacket</I> function if it supports multipacket-receive indications by calling <B>NdisMIndicateReceivePacket</B> or <B>NdisMIndicateReceivePacket</B>. If a LAN miniport driver indicates the initial portions of received network packets in lookahead buffers from which received data is copied by interested upper layers, it must export a <I>MiniportTransferData</I> function. A WAN miniport driver does not export either a <I>MiniportReturnPacket</I> function or a <I>MiniportTransferData</I> function.</P>

<UL>
	<LI><I>MiniportSend</I> or <I>MiniportSendPackets</I>
<P>A LAN miniport driver must export either a <I>MiniportSendPackets</I> function or a <I>MiniportSend</I> function. A WAN miniport driver must export a <I>MiniportWanSend</I> function.
</LI>

	<LI><I>MiniportSetInformation</I> </LI>
</UL>

<P>A connectionless miniport driver can also, and in some cases must, register the following <I>MiniportXxx</I> functions: 

<UL>
	<LI><I>MiniportAllocateComplete</I>
<P>Required if the miniport driver controls a bus-master DMA NIC and allocates shared memory at raised IRQL with <B>NdisMAllocateSharedMemoryAsync</B>.
</LI>

	<LI><I>MiniportISR</I>
<P>Not required if the NIC managed by the miniport driver does not generate interrupts. For more information, see <A HREF="203entry_3uxz.htm">Registering Handlers for Interrupt Support</A>.
</LI>

	<LI><I>MiniportHandleInterrupt</I>
<P>Required if a NIC managed by the miniport driver generates interrupts.
</LI>

	<LI><I>MiniportEnableInterrupt</I> and <I>MiniportDisableInterrupt</I>
<P>Not required if the NIC managed by the miniport driver does not generate interrupts.
</LI>

	<LI><I>MiniportCheckForHang</I>
<P>If not supplied, the miniport driver relies on NDIS to determine whether the NIC has stopped responding, based on sends and requests that timeout.
</LI>
</UL>

<P>A connectionless miniport driver cannot export the following <I>MiniportXxx</I> functions:</P>

<P class=indent1><A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A> </P>

<P class=indent1><A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> </P>

<P class=indent1><A HREF="101mini_8ak2.htm"><I>MiniportCoDeactivateVc</I></A> </P>

<P class=indent1><A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A> </P>

<P class=indent1><A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> </P>

<P class=indent1><A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> </P>

<H4>Registering <I>MiniportXxx</I> Functions of Connection-Oriented Miniport Drivers</H4>

<P>A connection-oriented miniport driver must register the following mandatory <I>MiniportXxx</I> functions: </P>

<P class=indent1><A HREF="101mini_7piq.htm"><I>MiniportCoActivateVc</I></A> </P>

<P class=indent1><A HREF="101mini_7otu.htm"><I>MiniportCoCreateVc</I></A> </P>

<P class=indent1><A HREF="101mini_8ak2.htm"><I>MiniportCoDeactivateVc</I></A> </P>

<P class=indent1><A HREF="101mini_30c2.htm"><I>MiniportCoDeleteVc</I></A> </P>

<P class=indent1><A HREF="101mini_0pgy.htm"><I>MiniportCoRequest</I></A> </P>

<P class=indent1><A HREF="101mini_0ycy.htm"><I>MiniportCoSendPackets</I></A> </P>

<P class=indent1><A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> </P>

<P class=indent1><A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> </P>

<P class=indent1><A HREF="101mini_5hiq.htm"><I>MiniportReset</I></A> </P>

<P class=indent1><A HREF="101mini_81ki.htm"><I>MiniportReturnPacket</I></A> </P>

<P>A connection-oriented miniport driver can also, and in some cases must, export the following <I>MiniportXxx</I> functions:

<UL>
	<LI><A HREF="101mini_225u.htm"><I>MiniportAllocateComplete</I></A>
<P>Required if the miniport driver controls a bus-master DMA NIC and allocates memory at raised IRQL with <B>NdisMAllocateSharedMemoryAsync</B>.
</LI>

	<LI><A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>
<P>Not required if the NIC managed by the miniport driver does not generate interrupts, the miniport driver polls the NIC state with a miniport driver-supplied timer function, or if other conditions apply. For more information, see <A HREF="203entry_3uxz.htm">Registering Handlers for Interrupt Support</A>.
</LI>

	<LI><A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>
<P>Required if a NIC managed by the miniport driver generates interrupts.
</LI>

	<LI><A HREF="101mini_222a.htm"><I>MiniportEnableInterrupt</I></A> and <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>
<P>Not required if the NIC managed by the miniport driver does not generate interrupts.
</LI>

	<LI><A HREF="101mini_2zua.htm"><I>MiniportCheckForHang</I></A>
<P>If not supplied, the miniport driver relies on NDIS to determine whether the NIC is hung, based on sends and requests that timeout.
</LI>
</UL>

<P>A connection-oriented miniport driver cannot export the following <I>MiniportXxx</I> functions:</P>

<P class=indent1><A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> </P>

<P class=indent1><A HREF="101mini_7ng2.htm"><I>MiniportSetInformation</I></A> </P>

<P class=indent1><A HREF="101mini_7svm.htm"><I>MiniportSend</I></A> </P>

<P class=indent1><A HREF="101mini_19bm.htm"><I>MiniportSendPackets</I></A> </P>

<P class=indent1><A HREF="101mini_9a42.htm"><I>MiniportTransferData</I></A> </P>

<P>The following topics describe the criteria for choosing when to register optional <I>MiniportXxx</I> functions.</P>

<H4>Registering <I>MiniportXxx</I> Functions of NDIS 5.1 Miniport Drivers</H4>

<P>An NDIS 5.1 miniport driver must register the following mandatory <I>MiniportXxx</I> functions: </P>

<P class=indent1><A HREF="101mini_5tgy.htm"><I>MiniportPnPEventNotify</I></A> </P>

<P class=indent1><A HREF="101mini_7lo2.htm"><I>MiniportShutdown</I></A></P>

<P>An NDIS 5.1 miniport driver that queues send packets for more than one second should also register the following <I>MiniportXxx</I> function: </P>

<P class=indent1><A HREF="101mini_70j6.htm"><I>MiniportCancelSendPackets</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registering%20MiniportXxx%20Functions"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
