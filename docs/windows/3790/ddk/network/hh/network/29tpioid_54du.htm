<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>OID_TAPI_NEGOTIATE_EXT_VERSION</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="OID_TAPI_NEGOTIATE_EXT_VERSION">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_oid_tapi_negotiate_ext_version_nr"></A>OID_TAPI_NEGOTIATE_EXT_VERSION</H1>

<P>The OID_TAPI_NEGOTIATE_EXT_VERSION OID requests the miniport driver to return the highest version extension number the miniport driver is willing to operate under for this device, given the range of possible extension versions. </P>

<P>Support for this request is optional. </P>

<P>This request uses an NDIS_TAPI_NEGOTIATE_EXT_VERSION structure, defined as follows: </P>

<PRE class=syntax>typedef struct _NDIS_TAPI_NEGOTIATE_EXT_VERSION { 
  IN ULONG  ulRequestID; 
  IN ULONG  ulDeviceID; 
  IN ULONG  ulLowVersion; 
  IN ULONG  ulHighVersion; 
  OUT ULONG  ulExtVersion; 
} NDIS_TAPI_NEGOTIATE_EXT_VERSION, *PNDIS_TAPI_NEGOTIATE_EXT_VERSION; </PRE>

<P>The members of this structure contain the following information:

<DL>
<DT><B>ulRequestID</B></DT>

<DD>Reserved.</DD>

<DT><B>ulDeviceID</B></DT>

<DD>Specifies the link or data channel  for which the extension version negotiation is to be performed. The value INITIALIZE_NEGOTIATION cannot be used. This was set up in a preceding <A HREF="29tpioid_5rsi.htm">OID_TAPI_GET_ID</A> request.</DD>

<DT><B>ulLowVersion</B></DT>

<DD>Specifies the lowest extension version under which NDISTAPI or its client application will operate. The most significant two bytes specify the major version and the least significant two bytes specify the minor version. The value of this member is not validated by NDISTAPI when this request is made.</DD>

<DT><B>ulHighVersion</B></DT>

<DD>Specifies the highest extension version under which NDISTAPI or its client application will operate. The most significant two bytes specify the major version and the least significant two bytes specify the minor version. The value of this member is not validated by NDISTAPI when this request is made.</DD>

<DT><B>ulExtVersion</B></DT>

<DD>Specifies the miniport driver's extension version within the range specified by <B>ulLowVersion</B> and <B>ulHighVersion</B>. The most significant two bytes specifiy the major version and the least significant two bytes specify the minor version. 

<P>The miniport driver fills this member with the highest extension version number, within the range requested by the caller, under which it is willing to operate to complete this request successfully. 


<P>If the requested range specified in <B>ulLowVersion</B> and <B>ulHighVersion</B> does not overlap the range supported by the miniport driver, it returns NDIS_STATUS_TAPI_INCOMPATIBLEEXTVERSION.

</DD>
</DL>

<P>The <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> function can return one of the following:</P>

<P class=indent1>NDIS_STATUS_SUCCESS<BR>
NDIS_STATUS_PENDING<BR>
NDIS_STATUS_TAPI_INCOMPATIBLEEXTVERSION<BR>
NDIS_STATUS_TAPI_NODRIVER<BR>
NDIS_STATUS_TAPI_RESOURCEUNAVAIL<BR>
NDIS_STATUS_FAILURE</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: OID_TAPI_NEGOTIATE_EXT_VERSION"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
