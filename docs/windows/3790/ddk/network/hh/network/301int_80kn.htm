<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Registering an Intermediate Driver as a Protocol</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Registering an Intermediate Driver as a Protocol">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_driverentry_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H3><A NAME="ddk_registering_an_intermediate_driver_as_a_protocol_ng"></A>Registering an Intermediate Driver as a Protocol</H3>

<P>An intermediate driver registers its <I>ProtocolXxx</I> functions with NDIS in the context of its <A HREF="JavaScript:hhobj_1.Click()"><B>DriverEntry</B></A> function by calling <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>. </P>

<P>Registering an intermediate driver as a protocol is nearly identical to registering as a protocol driver. For more information, see <A HREF="302pro_0s13.htm">Registering as an NDIS Protocol Driver</A>. </P>

<P>An intermediate driver with a connection-oriented lower edge must register as a connection-oriented client. A connection-oriented client uses the call-set-up and tear-down services of a call manager or integrated miniport call manager (MCM). A connection-oriented client also uses the send and receive capabilities of a connection-oriented miniport driver or an MCM to send and receive data. For more information, see <A HREF="401condis_546f.htm">Connection-Oriented Operations Performed by Clients</A>.</P>

<P>Intermediate driver's protocol handler functions differ from protocol drivers as follows:

<DL>
<DT><B>ReceivePacketHandler</B></DT>

<DD>This is a required function. Intermediate drivers must provide a <A HREF="104tdlow_5i7n.htm"><I>ProtocolReceivePacket</I></A> function to  handle receive data that an underlying miniport driver indicates by calling <B>NdisMIndicateReceivePacket</B>. These receive indications include an array of pointers to one or more packet descriptors or out-of-band data.</DD>

<DT><B>ResetCompleteHandler</B></DT>

<DD>This is a required function. NDIS calls <A HREF="104tdlow_0yya.htm"><I>ProtocolResetComplete</I></A> when a reset operation, begun with a call to <A HREF="103ndisx_9ib6.htm"><B>NdisReset</B></A> that returned NDIS_STATUS_PENDING, is done. Usually, intermediate drivers do not call <B>NdisReset</B>, but the drivers above them might, so an intermediate driver could forward such a reset request to the underlying NDIS driver. </DD>

<DT><B>PnPEventHandler</B></DT>

<DD>This is a required function. NDIS calls <A HREF="104tdlow_5muq.htm"><I>ProtocolPnPEvent</I></A> to indicate a Plug and Play event or a Power Management event. For more information, see <A HREF="301int_2gkn.htm">Handling PnP Events and PM Events in an Intermediate Driver</A>.</DD>
</DL>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Registering%20an%20Intermediate%20Driver%20as%20a%20Protocol"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
