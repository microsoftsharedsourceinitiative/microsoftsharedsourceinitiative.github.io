<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisAcquireSpinLock</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisAcquireSpinLock">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndisacquirespinlock_nr"></A>NdisAcquireSpinLock</H1>

<P><B>NdisAcquireSpinLock</B> acquires a spin lock so the caller gains exclusive access to the resources, shared among driver functions, that the spin lock protects.</P>

<PRE class=syntax><B>VOID
  NdisAcquireSpinLock(</B>
    <B>IN PNDIS_SPIN_LOCK</B>  <I>SpinLock</I>
    <B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>SpinLock</I></DT>

<DD>Pointer to an opaque spin lock, already initialized by the caller.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>The driver must initialize a variable of type NDIS_SPIN_LOCK with <A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A> before it calls any other <B>Ndis</B><I>Xxx</I><B>SpinLock</B> function. The driver must provide resident storage for the spin lock(s) it uses. </P>

<P>After acquiring a spin lock with <B>NdisAcquireSpinLock</B>, the caller must release that lock with a call to <A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A>. A driver must call <B>NdisReleaseSpinLock</B> following each call to <B>NdisAcquireSpinLock</B>. Otherwise, a deadlock occurs, hanging the driver.</P>

<P>A spin lock acquired with <B>NdisAcquireSpinLock</B> must be released with <B>NdisReleaseSpinLock</B>. A spin lock acquired with <A HREF="103ndisx_8z1u.htm"><B>NdisDprAcquireSpinLock</B></A> must be released with <A HREF="103ndisx_8ktu.htm"><B>NdisDprReleaseSpinLock</B></A>. </P>

<P>A driver should never hold a spin lock for an extended period (more than a few instructions). Holding a spin lock for longer than 25 microseconds degrades both system and driver performance.</P>

<P>A miniport driver cannot use a spin lock to protect resources that its other functions share with the <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> and/or <A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A> functions. Instead, a miniport driver must call <B>NdisMSynchronizeWithInterrupt</B> so that its <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A> function accesses such shared resources at the same DIRQL at which its <I>MiniportISR</I> and/or <I>MiniportDisableInterrupt</I> functions do.</P>

<P>Callers of <B>NdisAcquireSpinLock</B> run at IRQL &lt;= DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>, <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="101mini_1tyq.htm"><I>MiniportSynchronizeISR</I></A>, <A HREF="103ndisx_7mk2.htm"><B>NdisAllocateSpinLock</B></A>, <A HREF="103ndisx_8z1u.htm"><B>NdisDprAcquireSpinLock</B></A>, <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A>, <A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisAcquireSpinLock"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
