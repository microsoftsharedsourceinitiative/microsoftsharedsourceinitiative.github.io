<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS_TASK_OFFLOAD_HEADER</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS_TASK_OFFLOAD_HEADER">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_task_offload_header_nr"></A>NDIS_TASK_OFFLOAD_HEADER</H1>

<P>The NDIS_TASK_OFFLOAD_HEADER structure specifies the encapsulation format for send and receive packets on which a miniport driver may perform tasks offloaded from the TCP/IP transport.</P>

<PRE class=syntax>typedef struct _NDIS_TASK_OFFLOAD_HEADER
{
  ULONG  Version;
  ULONG  Size;
  ULONG  Reserved;
  UCHAR  OffsetFirstTask;
  NDIS_ENCAPSULATION_FORMAT  EncapsulationFormat;
} NDIS_TASK_OFFLOAD_HEADER, *PNDIS_TASK_OFFLOAD_HEADER;</PRE>

<H4>Members</H4>

<DL>
<DT><B>Version</B></DT>

<DD>Specifies the task-offload version supported by the TCP/IP transport. This value is always set to NDIS_TASK_OFFLOAD_VERSION.</DD>

<DT><B>Size</B></DT>

<DD>Specifies in bytes the size of the NDIS_TASK_OFFLOAD_HEADER structure. <B>Size</B> is set to <B>sizeof(</B>NDIS_TASK_OFFLOAD_HEADER<B>)</B> and is used to determine the version of the NDIS_TASK_OFFLOAD_HEADER structure.</DD>

<DT><B>Reserved</B></DT>

<DD>This is reserved.</DD>

<DT><B>OffsetFirstTask</B></DT>

<DD>Specifies in bytes the offset from the beginning of the <I>InformationBuffer</I> to the first <A HREF="105nstru_3f5e.htm">NDIS_TASK_OFFLOAD</A> structure. The miniport driver is responsible for setting this value when responding to a query of <A HREF="216offload_0acy.htm">OID_TCP_TASK_OFFLOAD</A>. The TCP/IP transport is responsible for setting this value when setting OID_TCP_TASK_OFFLOAD. If no NDIS_TASK_OFFLOAD structures are in the <I>InformationBuffer</I>, <B>OffsetFirstTask</B> is set to zero.</DD>

<DT><B>EncapsulationFormat</B></DT>

<DD>Specifies the encapsulation format for both send and receive packets that are passed to or from the TCP/IP transport through the miniport driver's NIC. This information is formatted as an NDIS_ENCAPSULATION_FORMAT structure, which is defined as follows:

<PRE>typedef struct _NDIS_ENCAPSULATION_FORMAT
{
   NDIS_ENCAPSULATION  Encapsulation;
   {
      ULONG   FixedHeaderSize:1;
      ULONG   Reserved:31;
   } Flags;
   ULONG     EncapsulationHeaderSize;
} NDIS_ENCAPSULATION_FORMAT,*PNDIS_ENCAPSULATION_FORMAT;</PRE>


<P>The members of this structure contain the following information:


<DL>
<DT><B>Encapsulation</B></DT>

<DD>Specifies the encapsulation type as one of the following values:

<P><B>UNSPECIFIED_Encapsulation</B>


<P>An encapsulation type other than those listed below.


<P><B>NULL_Encapsulation</B>


<P>This is reserved.


<P><B>IEEE_802_3_Encapsulation</B>


<P>IEEE 802.3 encapsulation (Ethernet_DIX)


<P><B>IEEE_802_5_Encapsulation</B>


<P>IEEE 802.5 encapsulation


<P><B>LLC_SNAP_ROUTED_Encapsulation</B>


<P>LLC encapsulation for routed protocols, as described in RFC 1483.<BR>
    Also used to indicate Ethernet LLC/SNAP encapsulation.


<P><B>LLC_SNAP_BRIDGE_Encapsulation</B>


<P>This is reserved.
</DD>

<DT><B>FixedHeaderSize</B></DT>

<DD>This is always set to 1 to indicate that the encapsulation header is the same size in each packet.</DD>

<DT><B>Reserved</B></DT>

<DD>This is reserved.</DD>

<DT><B>EncapsulationHeaderSize</B></DT>

<DD>Specifies in bytes the size of the encapsulation header. The first IP header in the encapsulated transmit packet starts at this offset from the start of the packet.
</DD>
</DL>
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>ndis.h</I>. Include <I>ndis.h</I>.</P>

<H4>Comments</H4>

<P>When the TCP/IP transport queries <A HREF="216offload_0acy.htm">OID_TCP_TASK_OFFLOAD</A>, it initializes and passes an NDIS_TASK_OFFLOAD_HEADER structure in the <I>InformationBuffer</I> associated with the query. The miniport driver that receives this query examines the NDIS_TASK_OFFLOAD_HEADER structure to determine the encapsulation format for send and receive packets processed by the TCP/IP transport. The miniport driver or its NIC uses the encapsulation information to determine the format of the encapsulation header, as well as the start of the first IP header, in such packets so that the NIC can perform offload tasks on these packets.</P>

<P>The miniport driver responds to the OID_TCP_TASK_OFFLOAD query by appending one or more <A HREF="105nstru_3f5e.htm">NDIS_TASK_OFFLOAD</A> structures to the NDIS_TASK_OFFLOAD_HEADER structure in the <I>InformationBuffer</I>. Each NDIS_TASK_OFFLOAD structure represents an offload task supported by the miniport driver's NIC. The miniport driver sets the <B>OffsetFirstTask</B> member of the NDIS_TASK_OFFLOAD_HEADER structure to the offset in bytes from the start of the <I>InformationBuffer</I> to the first NDIS_TASK_OFFLOAD structure. The miniport driver does not alter any other values in the NDIS_TASK_OFFLOAD_HEADER structure. If the <B>Version</B>, <B>Size</B>, or <B>EncapsulationFormat</B> values specified in the NDIS_TASK_OFFLOAD_HEADER structure are not acceptable to the miniport driver, the miniport driver should fail the OID_TCP_TASK_OFFLOAD query.</P>

<P>To support task offloads for a particular frame type, a miniport driver's NIC must support the appropriate encapsulation type or types. The following table indicates which encapsulation types a miniport driver must support to be able to offload tasks for a given frame type:</P>

<TABLE>

<TR VALIGN="top">
<TH align=left width=42%>Frame Type</TH>
<TH align=left width=58%>Encapsulation Type</TH>
</TR>

<TR VALIGN="top">
<TD width=42%>Ethernet</TD>
<TD width=58%><B>IEEE_802_3_Encapsulation</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>Token Ring</TD>
<TD width=58%><B>IEEE_802_5_Encapsulation</B> </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>ATM (CLIP)</TD>
<TD width=58%><B>LLC_SNAP_ROUTED_Encapsulation</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>Other</TD>
<TD width=58%><B>UNSPECIFIED_Encapsulation</B></TD>
</TR>
</TABLE><BR>

<P>A NIC does not have to support the same set of offload tasks for each encapsulation type. For example, an Ethernet NIC can support checksum and IP Security offloads for the <B>IEEE_802_3_Encapsulation</B> type (Ethernet DIX) but only checksum offloads for the <B>LLC_SNAP_ROUTED_Encapsulation</B> type.</P>

<P>A NIC can offload the segmentation of large TCP packets only if

<UL>
	<LI>It supports the encapsulation format specified by the TCP/IP protocol in the NDIS_TASK_OFFLOAD_HEADER structure</LI>

	<LI>Or the specified encapsulation type is <B>UNSPECIFIED_Encapsulation</B> and the <B>EncapsulationHeaderSize</B> is set to the size of the encapsulation header for the media supported by the miniport driver and its NIC</LI>
</UL>

<P>The encapsulation format specified by the TCP/IP transport in the NDIS_TASK_OFFLOAD_HEADER structure applies to both send and receive packets that are passed to or from the TCP/IP transport through the NIC. Only one encapsulation format is supported per NIC at any given time.</P>

<P>To disable all a NIC's task-offload capabilities, the TCP/IP transport sets OID_TCP_TASK_OFFLOAD, passing only an NDIS_TASK_OFFLOAD_HEADER in the <I>InformationBuffer</I>. In this case, the TCP/IP transport sets the <B>OffsetFirstTask</B> member of the NDIS_TASK_OFFLOAD_HEADER to zero.</P>

<H4>See Also</H4>

<P><A HREF="105nstru_3f5e.htm">NDIS_TASK_OFFLOAD</A>, <A HREF="216offload_0acy.htm">OID_TCP_TASK_OFFLOAD</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS_TASK_OFFLOAD_HEADER"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
