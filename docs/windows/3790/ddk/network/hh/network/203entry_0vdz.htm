<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Initializing Polling Timers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="Initializing Polling Timers">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_initializing_polling_timers_ng"></A>Initializing Polling Timers</H2>

<P>MiniportInitialize calls <A HREF="103ndisx_87aq.htm"><B>NdisMInitializeTimer</B></A> to initialize a timer object for each timer that the miniport driver requires. <B>NdisMInitializeTimer</B> associates a miniport driver-supplied timer function with the timer being initialized. When the timer expires, this <I>MiniportTimer</I> function is called. NDIS provides two types of timers: one-shot timers and periodic timers. When a one-shot timer is set by calling <A HREF="103ndisx_6lbm.htm"><B>NdisMSetTimer</B></A> and the timer expires, it must be reset by a call to <B>NdisMSetTimer</B>. This requirement can cause the wait time to drift due to the time it takes on each expiration to reset the timer. A periodic timer, once set, continues to expire at every requested time interval. Such a periodic timer is well suited to polling within a miniport driver. Once set with a call to <A HREF="103ndisx_4lte.htm"><B>NdisMSetPeriodicTimer</B></A>, the timer will continue to expire, causing the associated timer function to be called until the timer is reset in a subsequent call to <B>NdisMSetPeriodicTimer</B> or cleared with a call to <A HREF="103ndisx_6pgy.htm"><B>NdisMCancelTimer</B></A>.</P>

<P>If a timer function shares resources with any other miniport driver function, access to those resources must be protected. If a timer function shares resources with functions that run at the same IRQL (DISPATCH_LEVEL), access to those resources is synchronized with a spin lock. To acquire the previously initialized spin lock, a function calls <A HREF="103ndisx_8z1u.htm"><B>NdisDprAcquireSpinLock</B></A> and <A HREF="103ndisx_8ktu.htm"><B>NdisDprReleaseSpinLock</B></A>. These functions are faster than <A HREF="103ndisx_896a.htm"><B>NdisAcquireSpinLock</B></A> and <A HREF="103ndisx_7uya.htm"><B>NdisReleaseSpinLock</B></A>.</P>

<P>If the timer function shares resources with <I>MiniportISR</I> or <I>MiniportDisableInterrupt</I>, access must be synchronized by calling <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A>. The miniport driver performs any timer-related operations on the shared resources, which are typically device registers, within its <I>MiniportSynchronizeISR</I> function, whose address is passed to <B>NdisMSynchronizeWithInterrupt</B>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: Initializing%20Polling%20Timers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
