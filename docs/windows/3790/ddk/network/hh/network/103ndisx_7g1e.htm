<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMDeregisterInterrupt</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMDeregisterInterrupt">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismderegisterinterrupt_nr"></A>NdisMDeregisterInterrupt</H1>

<P><B>NdisMDeregisterMiniport</B> releases resources previously allocated with <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>.</P>

<PRE class=syntax><B>VOID 
  NdisMDeregisterInterrupt(
    IN PNDIS_MINIPORT_INTERRUPT</B>  <I>Interrupt
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Interrupt</I></DT>

<DD>Pointer to an interrupt object previously registered with <B>NdisMRegisterInterrupt</B>.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P><B>NdisMDeregisterInterrupt</B> releases the association between the initialized interrupt object at <I>Interrupt</I> and the caller’s <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A> function. After <B>NdisMDeregisterInterrupt</B> returns, NDIS will not call the miniport driver’s <I>MiniportISR</I> function or <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A> function.</P>

<P>A miniport driver can call <B>NdisMDeregisterInterrupt</B> from its <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> or <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A> function only if <I>MiniportInitialize</I> previously made a successful call to <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>. </P>

<P>The miniport driver should disable its NIC from generating interrupts before it calls <B>NdisMDeregisterInterrupt</B>. After <B>NdisMDeregisterInterrupt</B> returns control, the miniport driver cannot call <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A>.</P>

<P>Callers of <B>NdisMDeregisterInterrupt</B> run at IRQL = PASSIVE_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="101mini_0jg2.htm"><I>MiniportDisableInterrupt</I></A>, <A HREF="101mini_6stu.htm"><I>MiniportHalt</I></A>, <A HREF="101mini_7s36.htm"><I>MiniportHandleInterrupt</I></A>, <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A>, <A HREF="101mini_38c2.htm"><I>MiniportISR</I></A>, <A HREF="103ndisx_5uk2.htm"><B>NdisMRegisterInterrupt</B></A>, <A HREF="103ndisx_0rn6.htm"><B>NdisMSynchronizeWithInterrupt</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMDeregisterInterrupt"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
