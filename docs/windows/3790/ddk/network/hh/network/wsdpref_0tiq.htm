<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSPAccept</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSPAccept">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wspaccept_nr"></A>WSPAccept</H1>

<P><B>WSPAccept</B> conditionally accepts a connection, based on the return value of a condition function. </P>

<PRE class=syntax><B>SOCKET 
  WSPAccept(
    IN SOCKET </B><I> s</I><B>,</B>
<B>    OUT struct sockaddr FAR  </B><I>*addr</I><B>,</B>
<B>    IN/OUT LPINT </B><I> addrlen</I><B>,</B>
<B>    IN LPCONDITIONPROC </B><I> lpfnCondition</I><B>,</B>
<B>    IN DWORD </B><I> dwCallbackData</I><B>,</B>
<B>    OUT LPINT </B><I> lpErrno</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>s</I></DT>

<DD>Descriptor identifying a socket that is listening for connections as a result of a call to the SAN service provider's <B>WSPListen</B> function.</DD>

<DT><I>addr</I></DT>

<DD>Pointer to a buffer into which the SAN service provider copies the IP address of the remote connecting entity. </DD>

<DT><I>addrlen</I></DT>

<DD>Pointer to a variable that receives the size, in bytes, of the buffer at <I>addr</I>.</DD>

<DT><I>lpfnCondition</I></DT>

<DD>Pointer to a condition function supplied by the Windows Sockets switch. The SAN service provider calls this condition function to accept or reject a connection. The condition function is defined as:

<PRE><B>int CALLBACK
</B>  <B>ConditionFunc(</B>
    <B>IN LPWSABUF</B>  <I>lpCallerId</I><B>,</B>
    <B>IN LPWSABUF</B>  <I>lpCallerData</I><B>,</B>
    <B>IN/OUT LPQOS</B>  <I>lpSQOS</I><B>,</B>
    <B>IN/OUT LPQOS</B>  <I>lpGQOS</I><B>,</B>
    <B>IN/OUT LPWSABUF</B>  <I>lpCalleeId</I><B>,</B>
    <B>IN/OUT LPWSABUF</B>  <I>lpCalleeData</I><B>,</B>
    <B>OUT GROUP FAR</B>  <B>*</B><I>g</I><B>,</B>
    <B>IN DWORD</B>  <I>dwCallbackData</I>
    <B>);</B></PRE>


<P>The parameters of this function are defined as:


<DL>
<DT><I>lpCallerId</I></DT>

<DD>Pointer to a <A HREF="wsdpref_7gqa.htm">WSABUF</A> structure that contains the address of the remote connecting entity. </DD>

<DT><I>lpCallerData</I></DT>

<DD>Pointer to a WSABUF structure that contains any user data that was included with the incoming connection request. </DD>

<DT><I>lpSQOS</I></DT>

<DD>Pointer to a QoS structure that contains flow specifications for socket <I>s</I> supplied to the <B>WSPAccept</B> function. For more information about QoS, see the Platform SDK documentation.</DD>

<DT><I>lpGQOS</I></DT>

<DD>Reserved.</DD>

<DT><I>lpCalleeId</I></DT>

<DD>Pointer to a WSABUF structure into which the switch copies the identifier for the user data at <I>lpCalleeData</I>.</DD>

<DT><I>lpCalleeData</I></DT>

<DD>Pointer to a WSABUF structure that can contain user data that the SAN service provider must pass back to the remote connecting entity.</DD>

<DT><I>g</I></DT>

<DD>Reserved.</DD>

<DT><I>dwCallbackData</I></DT>

<DD>Context information related to the connection/acceptance request.</DD>
</DL>
</DD>

<DT><I>dwCallbackData</I></DT>

<DD>Callback data to be passed back to the Windows Socket switch as the value of the condition function's <I>dwCallbackData</I> parameter. The SAN service provider does not interpret this parameter.</DD>

<DT><I>lpErrno</I></DT>

<DD>Pointer to a variable that receives the error code.
</DD>
</DL>

<H4>Return Value</H4>

<P>Returns a value of type SOCKET that is a descriptor for the accepted socket, if successful; otherwise, returns INVALID_SOCKET and, at <I>lpErrno</I>, one of the following error codes: 

<DL>
<DT>WSAECONNREFUSED</DT>

<DD>Connection request was forcefully rejected as indicated by CF_REJECT.</DD>

<DT>WSAENETDOWN</DT>

<DD>Network subsystem failure.</DD>

<DT>WSAEFAULT</DT>

<DD>Value of <I>addrlen </I>parameter is too small, or the condition function to which <I>lpfnCondition</I> points is not part of the user address space.</DD>

<DT>WSAEINVAL</DT>

<DD>Indicates one of the following: the <B>WSPListen</B> function was not called prior to calling <B>WSPAccept</B>, parameter <I>g</I> specified in the condition function is not a valid value, the return value of the condition function is not valid, or any case where the specified socket is in an invalid state.</DD>

<DT>WSAEMFILE</DT>

<DD>Queue is nonempty upon entry to <B>WSPAccept</B>; no socket descriptors available.</DD>

<DT>WSAENOBUFS</DT>

<DD>No buffer space available.</DD>

<DT>WSAENOTSOCK</DT>

<DD>Descriptor does not describe a socket.</DD>

<DT>WSAEOPNOTSUPP</DT>

<DD>Referenced socket is not a type that supports connection-oriented service.</DD>

<DT>WSATRY_AGAIN</DT>

<DD>Acceptance of the connection request was deferred as indicated in the return value of the condition function (CF_DEFER).</DD>

<DT>WSAEWOULDBLOCK</DT>

<DD>No connections are present to be accepted.</DD>

<DT>WSAEACCES</DT>

<DD>Connection request withdrawn or timed out.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>Ws2spi.h</I>. Include <I>Ws2spi.h</I>. Requires Windows Sockets version&nbsp;2.0.</P>

<H4>Comments</H4>

<P>In response to a SAN service provider’s signaling a network event object, the Windows Sockets switch calls the SAN service provider's <B>WSPEnumNetworkEvents</B> function to receive event codes. The event code for an incoming connection request that previously arrived on the listening local socket is FD_ACCEPT. Upon receiving the FD_ACCEPT event code, the switch calls the SAN service provider's <B>WSPAccept</B> function to accept or reject an incoming connection request. After the switch calls <B>WSPAccept</B>, the SAN service provider resets the event object so the SAN service provider can again signal an event. </P>

<P><B>WSPAccept</B> extracts the first connection request on the listening socket's queue of pending connection requests. To accept or reject the connection request, the SAN service provider must call the condition function that the switch passes to <B>WSPAccept</B>. The condition function must be executed in the same thread as <B>WSPAccept</B>. </P>

<P>If the switch's condition function returns CF_REJECT to reject the connection request, or if some other problem prevents the connection from being fully established, the SAN service provider should return the appropriate error code. </P>

<P>If the switch's condition function returns CF_DEFER to indicate that an accept or reject decision cannot be made immediately, the SAN service provider returns the WSATRY_AGAIN error code and does not reset the event object. When the switch is ready to take action on the connection request, it calls the SAN service provider's <B>WSPAccept</B> function again and returns either CF_ACCEPT or CF_REJECT as a return value from its condition function.</P>

<P>If the switch calls <B>WSPAccept</B> when no pending connections are present on the listening socket's queue, <B>WSPAccept</B> returns the error code WSAEWOULDBLOCK. </P>

<P>If the switch's condition function returns CF_ACCEPT to accept the connection request, <B>WSPAccept</B> creates a new socket. This socket has the same properties as the original local socket. As described in <A HREF="wsdp_695z.htm">Accepting Connection Requests</A>, a SAN service provider must call the <B>WPUCreateSocketHandle</B> function to allocate a descriptor for the new socket. The switch intercepts this up call (calls prefixed with <B>WPU</B>)and returns a socket descriptor. The SAN service provider must store this descriptor in its internal data structure for the new socket. Finally, the SAN service provider returns its own descriptor for the socket to complete the <B>WSPAccept</B> call. The switch must supply the SAN service provider’s internal descriptor for the new socket when calling the SAN service provider’s functions, while the SAN service provider must supply the switch’s socket descriptor in up calls to the switch. </P>

<P>The SAN service provider uses the return value of the switch's condition function to indicate to the remote connecting entity whether it accepts or refuses the connection request. If the switch's condition function returns CF_DEFER, the SAN service provider should indicate that it accepts the connection request and should keep the connection request in its queue of connection requests. After the switch later calls the SAN service provider's <B>WSPAccept</B> function to accept or reject the deferred connection request, the switch's condition function can return either the CF_ACCEPT or CF_REJECT value. If the switch's condition function returns CF_REJECT, the SAN service provider should terminate the already established connection. </P>

<P>If the connection request is accepted, the switch cannot use the new accepted socket to accept more connections. Also if the connection request is accepted, the SAN service provider passes the IP address of the remote connecting entity to the switch. The original socket remains open and in listening mode. </P>

<P>The SAN service provider must supply the address of the remote connecting entity and any user data that was sent along with the incoming connection request at the <I>lpCallerId</I> and <I>lpCallerData</I> parameters of the condition function. If no caller identifier or caller data is available, the SAN service provider sets the corresponding parameter to NULL. </P>

<P>If the SAN service provider supports quality of service (QoS), it specifies flow parameters for socket <I>s</I>. The SAN service specifies flow parameters for both transmission and reception, and specifies any additional provider-specific parameters at the <I>lpSQOS</I> parameter of the condition function. A SAN service provider specifies a NULL value for <I>lpSQOS</I> to indicate that no QoS negotiation is possible. A non-NULL <I>lpSQOS</I> pointer indicates that a QoS negotiation will occur or that the SAN service provider is prepared to accept the QoS request without negotiation.</P>

<P>The switch uses the <I>lpCalleeData</I> parameter of the condition function to supply user data back to the remote connecting entity. The SAN service provider must allocate a WSABUF structure to provide storage for this data. </P>

<P>If the SAN service provider does not support passing user data back to the remote connecting entity, it sets the <B>len</B> member of this WSABUF structure to zero. </P>

<P>If the SAN service provider supports passing user data back to the remote connecting entity, it allocates a buffer to which the <B>buf</B> member of WSABUF points and sets the <B>len</B> member of WSABUF to the maximum number of bytes of data that the condition function can copy into the buffer. After the condition function copies the data, it updates the <B>len</B> member of WSABUF to indicate the actual number of bytes copied. </P>

<P>If the condition function does not pass any user data back to the connecting entity, it sets the <B>len</B> member of WSABUF to zero.</P>

<P>The SAN service provider passes the value that the switch passed as the <I>dwCallbackData</I> parameter in the original <B>WSPAccept</B> call to the <I>dwCallbackData</I> parameter for the condition function. This value is interpreted only by the Windows Sockets switch. The switch can pass context information from the <B>WSPAccept</B> call to the condition function to provide the condition function with any additional information required to determine whether to accept the connection. A typical usage of this functionality is to pass a (suitably cast) pointer to a data structure containing references to application-defined objects with which this socket is associated.</P>

<H4>See Also</H4>

<P><A HREF="wsdpref_7gqa.htm">WSABUF</A>, <A HREF="wsdpref_9lki.htm"><B>WSPEnumNetworkEvents</B></A>, <A HREF="wsdpref_4a5u.htm"><B>WSPListen</B></A>, <A HREF="wsdpref_5hte.htm"><B>WSPRecv</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSPAccept"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
