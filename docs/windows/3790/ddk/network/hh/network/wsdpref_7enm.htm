<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSPConnect</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSPConnect">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wspconnect_nr"></A>WSPConnect</H1>

<P><B>WSPConnect</B> establishes the connection of a socket to a peer, exchanges connect data, and specifies required quality of service based on the supplied flow specification. </P>

<PRE class=syntax><B>int 
  WSPConnect(
    IN SOCKET </B><I> s</I><B>,</B>
<B>    IN const struct sockaddr FAR  </B><I>*name</I><B>,</B>
<B>    IN int </B><I> namelen</I><B>,</B>
<B>    IN LPWSABUF </B><I> lpCallerData</I><B>,</B>
<B>    OUT LPWSABUF </B><I> lpCalleeData</I><B>,</B>
<B>    IN LPQOS </B><I> lpSQOS</I><B>,</B>
<B>    IN LPQOS </B><I> lpGQOS</I><B>,</B>
<B>    OUT LPINT </B><I> lpErrno</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>s</I></DT>

<DD>Descriptor that identifies an unconnected socket.</DD>

<DT><I>name</I></DT>

<DD>Pointer to a sockaddr structure that contains the address of the remote peer to which the socket connects. The sockaddr structure is defined as:

<PRE>sockaddr {
    short     sa_family;
    char      sa_data[14];
    };</PRE>


<P>Except for the <B>sa_family</B><I> </I>member, contents of sockaddr are expressed in network byte order. The SAN service provider does not strictly interpret the <I>name</I> parameter as a pointer to a sockaddr structure. The <I>name</I> parameter is cast this way for Windows Sockets compatibility. The SAN service provider interprets the actual structure as a sockaddr_in structure, which is used with the TCP/IP protocol. The sockaddr_in structure is defined as: 


<PRE>struct sockaddr_in {
    short   sin_family;
    u_short sin_port;
    struct  in_addr sin_addr;
    char    sin_zero[8];
    };</PRE>
</DD>

<DT><I>namelen</I></DT>

<DD>Size, in bytes, of the buffer at <I>name</I>.</DD>

<DT><I>lpCallerData</I></DT>

<DD>Pointer to a <A HREF="wsdpref_7gqa.htm">WSABUF</A> structure that contains any user data that the SAN service provider transmits to the remote peer during connection establishment.</DD>

<DT><I>lpCalleeData</I></DT>

<DD>Pointer to a WSABUF structure that receives any user data that the SAN service provider receives from the remote peer during connection establishment.</DD>

<DT><I>lpSQOS</I></DT>

<DD>Pointer to a QoS structure that contains flow specifications for socket <I>s</I>, one for each direction. For information about QoS, see the Platform SDK documentation.</DD>

<DT><I>lpGQOS</I></DT>

<DD>Reserved. </DD>

<DT><I>lpErrno</I></DT>

<DD>Pointer to a variable that receives the error code.
</DD>
</DL>

<H4>Return Value</H4>

<P>Returns zero if successful; otherwise, returns SOCKET_ERROR and, at <I>lpErrno</I>, one of the following error codes: 

<DL>
<DT>WSAENETDOWN</DT>

<DD>Network subsystem failed.</DD>

<DT>WSAEALREADY</DT>

<DD>Nonblocking <B>WSPConnect</B> call is in progress on the specified socket.


<P class=note><B>Note</B>&nbsp;&nbsp;In order to preserve backward compatibility, this error is reported as WSAEINVAL to Windows Sockets version&nbsp;1.1 applications that link to either <I>Winsock.dll</I> or <I>Wsock32.dll</I>.

</DD>

<DT>WSAEADDRNOTAVAIL</DT>

<DD>Remote address is not a valid address (for example, ADDR_ANY).</DD>

<DT>WSAECONNREFUSED</DT>

<DD>Attempt to connect was rejected. The switch does not attempt to use the TCP/IP service provider to establish the connection. </DD>

<DT>WSAECONNRESET</DT>

<DD>Remote host is not set up to listen for connections. The switch does not attempt to use the TCP/IP service provider to establish the connection. </DD>

<DT>WSAEHOSTUNREACH</DT>

<DD>Remote host does not exist on the SAN subnet. The switch does not attempt to use the TCP/IP service provider to establish the connection. </DD>

<DT>WSAEFAULT</DT>

<DD>The <I>name </I>or <I>namelen </I>parameter is not a valid part of the user address space, the <I>namelen</I> parameter is too small, the buffer length for the <I>lpCalleeData</I>, <I>lpSQOS</I>, or <I>lpGQOS</I> parameter is too small, or the buffer length for <I>lpCallerData</I> parameter is too large.</DD>

<DT>WSAEINVAL</DT>

<DD>Parameter <I>s</I> identifies a listening socket.</DD>

<DT>WSAEISCONN</DT>

<DD>Socket is already connected.</DD>

<DT>WSAENETUNREACH</DT>

<DD>Network cannot currently be reached from the host.</DD>

<DT>WSAENOBUFS</DT>

<DD>No buffer space available; the socket cannot be connected.</DD>

<DT>WSAENOTSOCK</DT>

<DD>Descriptor is not a socket.</DD>

<DT>WSAEOPNOTSUPP</DT>

<DD>Flow specifications specified in the <I>lpSQOS</I> parameter cannot be satisfied.</DD>

<DT>WSAEPROTONOSUPPORT</DT>

<DD>SAN service provider does not support the <I>lpCallerData</I> parameter.</DD>

<DT>WSAETIMEDOUT</DT>

<DD>Attempt to connect timed out without establishing a connection.</DD>

<DT>WSAEWOULDBLOCK</DT>

<DD>Socket is marked as nonblocking and the connection cannot be completed immediately.
</DD>
</DL>

<P>Note that a SAN service provider does not support the following error codes for <B>WSPConnect</B>: 

<DL>
<DT>WSAEADDRINUSE</DT>

<DD>The local socket is always bound to a local IP address that is fully qualified before <B>WSPConnect</B> is called (that is, not a wildcard address). </DD>

<DT>WSAEINTR</DT>

<DD>The Windows Sockets switch never issues cancel blocking calls to a SAN service provider. </DD>

<DT>WSAEINPROGRESS</DT>

<DD>The Windows Sockets switch never issues cancel blocking calls to a SAN service provider. </DD>

<DT>WSAEAFNOSUPPORT</DT>

<DD>All addresses in the AF_INET address family can be used with this socket. </DD>

<DT>WSAEACCES</DT>

<DD>The current version of Windows Sockets Direct does not support SAN service providers handling sockets that receive datagrams. Also, broadcast addresses are not supported.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>Ws2spi.h</I>. Include <I>Ws2spi.h</I>. Requires Windows Sockets version&nbsp;2.0.</P>

<H4>Comments</H4>

<P>The Windows Sockets switch calls a SAN service provider's <B>WSPConnect</B> function to create a connection from a local socket to the specified destination address and to perform other ancillary operations that occur at connect time. Before calling the <B>WSPConnect</B> function, the switch always calls the SAN service provider's <B>WSPBind</B> function to bind the local socket to a local IP address that is associated with one of the network interface cards (NICs) serviced by the SAN service provider. This IP address is fully qualified; that is, the <B>sin_port</B> and <B>sin_addr</B> members of its sockaddr_in structure are both set to nonzero values. </P>

<P>To establish the connection from a local socket to a remote peer, <B>WSPConnect</B> requires that the <I>name </I>parameter point to a fully qualified IP address that specifies the address of that remote peer (that is, the name of that remote peer). After the <B>WSPConnect</B> call completes successfully, the switch can use the socket to send and receive data. If the switch calls <B>WSPConnect</B> to reconnect a socket that is already connected to a peer, the call fails and returns the WSAEISCONN error code.</P>

<P>The Windows Sockets switch always requests a connection to a local socket in nonblocking mode. To inform the SAN service provider that any subsequent <B>WSPConnect</B> call executes in nonblocking mode and to request notification of connection events, the switch calls the SAN service provider’s <B>WSPEventSelect</B> function and passes the FD_CONNECT code and the event object to be associated with that code. </P>

<P>If the SAN service provider's <B>WSPConnect</B> function cannot complete a connection request immediately, the SAN service provider's connection operation proceeds. However, <B>WSPConnect</B> returns with the error WSAEWOULDBLOCK to indicate that the socket is marked as nonblocking and that the connection operation cannot be completed immediately. After the connection operation completes, the SAN service provider can call the Win32® <B>SetEvent</B> function to signal the event object that was previously registered in the <B>WSPEventSelect</B> call. The switch then calls the SAN service provider's <B>WSPEnumNetworkEvents</B> function to obtain the result of the connection operation. To indicate success or the reason for failure of the connection operation, the SAN service provider returns a WSANETWORKEVENTS structure that contains an FD_CONNECT event and possibly an error code associated with FD_CONNECT. </P>

<P>The switch is responsible for allocating memory that is directly or indirectly pointed to by any of the parameters that it specifies. </P>

<P>A SAN service provider can optionally support the following: 

<UL>
	<LI><B>Passing user data for the connection to and from the peer</B>
<P>The exact format of the user data is specific to the AF_INET address family and the applications involved. If the <I>lpCallerData</I> parameter is NULL, the SAN service provider does not send any user data to the peer. The <I>lpCalleeData</I> parameter points to a WSABUF structure that contains user data that the peer supplied to establish the connection. The switch initially sets the <B>len</B> member of WSABUF to the maximum number of bytes of data that the SAN service provider can copy into the buffer to which the <B>buf</B> member of WSABUF points. If the SAN service provider does not receive any user data from the peer, it sets the <B>len</B> member of this WSABUF structure to zero. The information to which <I>lpCalleeData</I> points is valid after the connection operation completes. The FD_CONNECT code notifies that a connection operation completed. 
</LI>

	<LI><B>Quality of service (QoS)</B>
<P>If a SAN service provider supports QoS, the switch can use QoS parameters in a connection request to override any previous QoS specification made for the socket through the <B>WSPIoctl</B> function with either the SIO_SET_QOS or SIO_SET_GROUP_QOS codes. 
</LI>
</UL>

<P>The <I>lpSQOS</I> parameter specifies the flow specifications for socket <I>s</I>, one for each direction, followed by any additional provider-specific parameters. If either the SAN service provider in general or the socket in particular cannot honor the QoS request, the SAN service provider returns the WSAEOPNOTSUPP error code. The sending or receiving flow specification values are ignored, respectively, for any unidirectional sockets. If the switch does not supply provider-specific parameters, it sets the <B>buf</B> and <B>len</B> members of the <B>ProviderSpecific</B> member of the QoS structure to which the <I>lpSQOS</I> points to NULL and zero, respectively. The switch sets the <I>lpSQOS</I> parameter to NULL if it does not supply or forward QoS information. </P>

<P>If a SAN service provider fails the connection request, the switch attempts to use the TCP/IP provider to establish the connection unless the SAN service provider returned one of the following error codes as the result of its connection operation: 

<DL>
<DT>WSAECONNRESET</DT>

<DD>Indicates that no application is listening on the specified port at the destination address. </DD>

<DT>WSAECONNREFUSED</DT>

<DD>Indicates that the remote application actively refused the connection request. </DD>

<DT>WSAEHOSTUNREACH</DT>

<DD>Indicates that the destination address does not exist on the SAN subnet. 
</DD>
</DL>

<P></P>

<H4>See Also</H4>

<P><A HREF="wsdpref_7gqa.htm">WSABUF</A>, <A HREF="wsdpref_5wfm.htm"><B>WSPBind</B></A>, <A HREF="wsdpref_9lki.htm"><B>WSPEnumNetworkEvents</B></A>, <A HREF="wsdpref_5f1u.htm"><B>WSPEventSelect</B></A>, <A HREF="wsdpref_1b3m.htm"><B>WSPIoctl</B></A>, <A HREF="wsdpref_5hte.htm"><B>WSPRecv</B></A>, <A HREF="wsdpref_6ir6.htm"><B>WSPSocket</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSPConnect"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
