<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisCmRegisterAddressFamily</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisCmRegisterAddressFamily">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndiscmregisteraddressfamily_nr"></A>NdisCmRegisterAddressFamily</H1>

<P><B>NdisCmRegisterAddressFamily</B> registers a set of call-manager-supplied functions for connection-oriented communication over a CM-specified address family. </P>

<PRE class=syntax><B>NDIS_STATUS 
    NdisCmRegisterAddressFamily(
    IN NDIS_HANDLE</B>  <I>NdisBindingHandle</I><B>,</B>
    <B>IN PCO_ADDRESS_FAMILY</B>  <I>AddressFamily</I><B>,</B>
    <B>IN PNDIS_CALL_MANAGER_CHARACTERISTICS</B>  <I>CmCharacteristics</I><B>,</B>
    <B>IN UINT</B>  <I>SizeOfCmCharacteristics
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>NdisBindingHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> that identifies the target NIC or the virtual adapter of the next-lower driver to which the caller is bound. </DD>

<DT><I>AddressFamily</I></DT>

<DD>Pointer to a structure of type <A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A> identifying the call manager and the address family it supports for this binding. 

<P>The given <I>AddressFamily</I> becomes an input parameter to the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients bound to the same connection-oriented miniport driver. 
</DD>

<DT><I>CmCharacteristics</I></DT>

<DD>Pointer to an NDIS_CALL_MANAGER_CHARACTERISTICS structure set up by the caller. The structure at <I>CmCharacteristics</I> is defined as follows:

<PRE>typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS {
    UCHAR  MajorVersion;
    UCHAR  MinorVersion;
    USHORT  Filler;           // reserved for system use
    UINT    Reserved;         // reserved for system use
    CO_CREATE_VC_HANDLER  CmCreateVcHandler;
    CO_DELETE_VC_HANDLER  CmDeleteVcHandler;
    CM_OPEN_AF_HANDLER  CmOpenAfHandler;
    CM_CLOSE_AF_HANDLER  CmCloseAfHandler;
    CM_REG_SAP_HANDLER  CmRegisterSapHandler;
    CM_DEREG_SAP_HANDLER  CmDeregisterSapHandler;
    CM_MAKE_CALL_HANDLER  CmMakeCallHandler;
    CM_CLOSE_CALL_HANDLER  CmCloseCallHandler;
    CM_INCOMING_CALL_COMPLETE_HANDLER
                             CmIncomingCallCompleteHandler;
    CM_ADD_PARTY_HANDLER  CmAddPartyHandler;
    CM_DROP_PARTY_HANDLER  CmDropPartyHandler;
    CM_ACTIVATE_VC_COMPLETE_HANDLER  CmActivateVcCompleteHandler;
    CM_DEACTIVATE_VC_COMPLETE_HANDLER
                             CmDeactivateVcCompleteHandler; 
    CM_MODIFY_CALL_QOS_HANDLER  CmModifyCallQoSHandler;
    CO_REQUEST_HANDLER  CmRequestHandler;
    CO_REQUEST_COMPLETE_HANDLER  CmRequestCompleteHandler;
} NDIS_CALL_MANAGER_CHARACTERISTICS,
                   *PNDIS_CALL_MANAGER_CHARACTERISTICS;</PRE>


<P>The protocol should initialize this structure with zeros before setting up the following members:


<DL>
<DT><B>MajorVersion</B></DT>

<DD>Specifies the major version of this structure that the call manager is using. The current value is 0x05.</DD>

<DT><B>MinorVersion</B></DT>

<DD>Specifies the major version of this structure that the call manager is using. The current value is 0x00.  </DD>

<DT><B>Filler</B> and <B>Reserved</B></DT>

<DD>The caller should ignore these members after zero-initializing this structure. </DD>

<DT><B>CmCreateVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A> function. </DD>

<DT><B>CmDeleteVcHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A> function.</DD>

<DT><B>CmOpenAfHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function.</DD>

<DT><B>CmCloseAfHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3z76.htm"><I>ProtocolCmCloseAf</I></A> function.</DD>

<DT><B>CmRegisterSapHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A> function.</DD>

<DT><B>CmDeregisterSapHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_46ia.htm"><I>ProtocolCmDeregisterSap</I></A> function.</DD>

<DT><B>CmMakeCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_20oi.htm"><I>ProtocolCmMakeCall</I></A> function.</DD>

<DT><B>CmCloseCallHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_8j1u.htm"><I>ProtocolCmCloseCall</I></A> function.</DD>

<DT><B>CmIncomingCallCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_2h2q.htm"><I>ProtocolCmIncomingCallComplete</I></A><I> </I>function.</DD>

<DT><B>CmAddPartyHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_9trm.htm"><I>ProtocolCmAddParty</I></A> function.</DD>

<DT><B>CmDropPartyHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3koi.htm"><I>ProtocolCmDropParty</I></A> function.</DD>

<DT><B>CmActivateVcCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_5aeq.htm"><I>ProtocolCmActivateVcComplete</I></A> function.</DD>

<DT><B>CmDeactivateVcCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_6ho2.htm"><I>ProtocolCmDeactivateVcComplete</I></A> function. </DD>

<DT><B>CmModifyCallQoSHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_3436.htm"><I>ProtocolCmModifyCallQoS</I></A> function. </DD>

<DT><B>CmRequestHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A> function.  </DD>

<DT><B>CmRequestCompleteHandler</B></DT>

<DD>Specifies the entry point of the caller's <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> function. </DD>
</DL>
</DD>

<DT><I>SizeOfCmCharacteristics</I></DT>

<DD>Specifies the size in bytes of the structure at <I>CmCharacteristics</I>.
</DD>
</DL>

<H4>Return Value</H4>

<P><B>NdisCmRegisterAddressFamily</B> can return any of the following:

<DL>
<DT>NDIS_STATUS_SUCCESS</DT>

<DD>The protocol has been registered with NDIS as the call manager for the given address family, so NDIS will call the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients that bind themselves to the same NIC driver. </DD>

<DT>NDIS_STATUS_RESOURCES</DT>

<DD>The requested operation failed because NDIS could not allocate sufficient memory or initialize the state it uses to track the call manager or this address family </DD>

<DT>NDIS_STATUS_FAILURE</DT>

<DD>NDIS failed this call, possibly for one of the following reasons:

<UL>
	<LI>This caller was not registered as a connection-oriented protocol. </LI>

	<LI>The NIC driver to which the caller is bound was not registered as a connection-oriented miniport driver.</LI>

	<LI>Another call manager has already registered this address family.</LI>

	<LI>The caller supplied invalid or insufficient information at <I>CmCharacteristics</I>.</LI>

	<LI>The caller's binding is being closed.</LI>
</UL>
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>Only stand-alone call managers, which register themselves as NDIS protocol drivers with <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>, also call <B>NdisCmRegisterAddressFamily</B>. Such a driver calls <B>NdisCmRegisterAddressFamily</B> from its <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> function to register itself on a particular binding with NDIS. </P>

<P>A stand-alone call manager's <I>ProtocolBindAdapter</I> function first establishes the binding to the underlying miniport driver with <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A> before it calls <B>NdisCmRegisterAddressFamily</B>. Each time NDIS calls <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A> with another <I>BindContext</I> handle, this call manager function establishes a binding and registers an address family that it supports. In other words, a stand-alone call manager eventually registers an address family and reregisters its ProtocolCm/Co<I>Xxx</I> functions for each NIC on which it provides call-management services to connection-oriented clients. The call manager can support more than one address family across all the NIC drivers to which it is bound. The call manager can also support more than one address family on a single NIC to which it is bound. In this case, however, the call manager must register the same entry points for each address family on the binding. Only one call manager can support a particular type of address family for clients bound to any particular NIC driver. </P>

<P>In effect, such a protocol driver both registers itself as a stand-alone call manager and advertises its specific signaling services for all clients bound to the same miniport driver when it calls <B>NdisCmRegisterAddressFamily</B>. After its <I>ProtocolBindAdapter</I> returns control with a successful registration as a stand-alone call manager, NDIS calls the <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A> functions of all clients bound to the same miniport driver. These clients, in turn, cause NDIS to call the <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A> function that the call manager just registered for the address family. </P>

<P>A stand-alone call manager must set every <B>Cm</B><I>Xxx</I> member in the NDIS_CALL_MANAGER_CHARACTERISTICS structure to a driver-supplied ProtocolCm/Co<I>Xxx</I> function when it calls <B>NdisCmRegisterAddressFamily</B>, even if it does not support incoming calls, outgoing calls, or point-to-multipoint connections. For whatever subset of connection-oriented functionality that such a call manager does not support, its placeholder ProtocolCm<I>Xxx </I>functions simply return NDIS_STATUS_NOT_SUPPORTED. </P>

<P>After a stand-alone call manager calls <B>NdisCmRegisterAddressFamily</B> successfully, NDIS ignores any entry point(s) that the CM previously specified in the <B>RequestHandler</B> and <B>RequestCompleteHandler</B> members of the NDIS_PROTOCOL_CHARACTERISTICS structure that it passed to <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>. </P>

<P>By contrast to stand-alone call managers, a connection-oriented miniport driver that provides integrated call-managment support, also called an <I>MCM driver</I>, would call <B>NdisMCmRegisterAddressFamily</B> to register its ProtocolCm<I>Xxx</I> and ProtocolCo<I>Xxx</I> driver functions with NDIS. Such a miniport driver never calls <B>NdisRegisterProtocol</B> or <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>. </P>

<P>Callers of <B>NdisCmRegisterAddressFamily</B> usually run at IRQL = PASSIVE_LEVEL and in the context of a system thread. <B>NdisCmRegisterAddressFamily</B> must be called at IRQL &lt; DISPATCH_LEVEL. </P>

<H4>See Also</H4>

<P><A HREF="105nstru_3wtu.htm">CO_ADDRESS_FAMILY</A>, <A HREF="103ndisx_58fm.htm"><B>NdisMCmRegisterAddressFamily</B></A>, <A HREF="103ndisx_9koi.htm"><B>NdisOpenAdapter</B></A>, <A HREF="103ndisx_2cfm.htm"><B>NdisRegisterProtocol</B></A>, <A HREF="103ndisx_1ype.htm"><B>NdisZeroMemory</B></A>, <A HREF="104tdlow_2bqq.htm"><I>ProtocolBindAdapter</I></A>, <A HREF="104tdlow_5aeq.htm"><I>ProtocolCmActivateVcComplete</I></A>, <A HREF="104tdlow_9trm.htm"><I>ProtocolCmAddParty</I></A>, <A HREF="104tdlow_3z76.htm"><I>ProtocolCmCloseAf</I></A>, <A HREF="104tdlow_8j1u.htm"><I>ProtocolCmCloseCall</I></A>, <A HREF="104tdlow_6ho2.htm"><I>ProtocolCmDeactivateVcComplete</I></A>, <A HREF="104tdlow_46ia.htm"><I>ProtocolCmDeregisterSap</I></A>, <A HREF="104tdlow_3koi.htm"><I>ProtocolCmDropParty</I></A>, <A HREF="104tdlow_2h2q.htm"><I>ProtocolCmIncomingCallComplete</I></A>, <A HREF="104tdlow_20oi.htm"><I>ProtocolCmMakeCall</I></A>, <A HREF="104tdlow_3436.htm"><I>ProtocolCmModifyCallQoS</I></A>, <A HREF="104tdlow_5ape.htm"><I>ProtocolCmOpenAf</I></A>, <A HREF="104tdlow_3kky.htm"><I>ProtocolCmRegisterSap</I></A>, <A HREF="104tdlow_2goi.htm"><I>ProtocolCoAfRegisterNotify</I></A>, <A HREF="104tdlow_299u.htm"><I>ProtocolCoCreateVc</I></A>, <A HREF="104tdlow_7ks2.htm"><I>ProtocolCoDeleteVc</I></A>, <A HREF="104tdlow_7hwy.htm"><I>ProtocolCoRequest</I></A>, <A HREF="104tdlow_860i.htm"><I>ProtocolCoRequestComplete</I></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisCmRegisterAddressFamily"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
