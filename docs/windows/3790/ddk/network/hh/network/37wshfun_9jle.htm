<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSHOpenSocket2</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSHOpenSocket2">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wshopensocket2_nr"></A>WSHOpenSocket2</H1>

<P>The <B>WSHOpenSocket2</B> function is called by the MSAFD support DLL in response to an application call to <B>WSASocket</B>.</P>

<PRE class=syntax><B>INT
</B>  <B>WSHOpenSocket2(
    IN OUT PINT</B>  <I>AddressFamily</I><B>,</B>
<B>    IN OUT PINT</B>  <I>SocketType</I><B>,</B>
<B>    IN OUT PINT</B>  <I>Protocol</I><B>,</B>
<B>    IN GROUP</B>  <I>Group</I><B>,</B>
<B>    IN DWORD</B>  <I>Flags</I><B>,</B>
<B>    OUT PUNICODE_STRING</B>  <I>TransportDeviceName</I><B>,</B>
<B>    OUT PVOID</B>  <B>*</B><I>HelperDllSocketContext</I><B>,</B>
<B>    OUT PDWORD</B>  <I>NotificationEvents</I>
<B>    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>AddressFamily</I></DT>

<DD>On input, points to a variable that is set to the address family as specified in the <B>WSASocket</B> call. On output, the variable should be set to the canonicalized value for the address family.</DD>

<DT><I>SocketType</I></DT>

<DD>On input, points to a variable that is set to the socket type as specified in the <B>WSASocket</B> call. On output, the variable should be set to the canonicalized value for the socket type.</DD>

<DT><I>Protocol</I></DT>

<DD>On input, points to a variable that is set to the protocol as specified in the <B>WSASocket</B> call. On output, the variable should be set to the canonicalized value for the protocol.</DD>

<DT><I>Group</I></DT>

<DD>Identifies the group to which the socket that is being opened should belong if nonzero. (For more information about socket grouping, see the Win32 SDK.) Alternatively, this can be one of the following constants to create a new group of sockets.

<DL>
<DT>SG_UNCONSTRAINED_GROUP</DT>

<DD>Create an new unconstrained group of sockets and have this socket become the first member of that group.</DD>

<DT>SG_CONSTRAINED_GROUP</DT>

<DD>Create a new constrained group of sockets and have this socket become the first member of that group.</DD>
</DL>


<P>MSAFD will handle all group mechanisms. The group number, if specified instead of one of the preceding flags, is provided for informational purposes.
</DD>

<DT><I>Flags</I></DT>

<DD>Specifies attributes for the new socket that is to be created. (For more information about Windows Sockets 2 multipoint and root/leaf sockets, see the Platform SDK.) The following lists valid flags that can be specified:

<DL>
<DT>WSA_FLAG_OVERLAPPED</DT>

<DD>Indicates that a socket capable of handing overlapped I/O should be created. If this flag is set, overlapped I/O can be further utilized on calls to <B>WSASend</B>, <B>WSASendTo</B>, <B>WSARecv</B>, <B>WSARecvFrom</B> and <B>WSAIoctl</B>.</DD>

<DT>WSA_FLAG_MULTIPOINT_C_ROOT</DT>

<DD>Indicates that the socket should be created as a c_root in a multipoint session.</DD>

<DT>WSA_FLAG_MULTIPOINT_C_LEAF</DT>

<DD>Indicates that the socket should be created as a c_leaf in a multipoint session.</DD>

<DT>WSA_FLAG_MULTIPOINT_D_ROOT</DT>

<DD>Indicates that the socket should be created as a d_root in a multipoint session.</DD>

<DT>WSA_FLAG_MULTIPOINT_D_LEAD</DT>

<DD>Indicates that the socket should be created as a d_leaf in a multipoint session.</DD>
</DL>
</DD>

<DT><I>TransportDeviceName</I></DT>

<DD>Pointer to a buffered Unicode string that specifies the device name of the transport driver that will support this socket type. Storage for the UNICODE_STRING structure is allocated by the caller, and the string initialized with the transport device name, such as \\Device\\Tcp.</DD>

<DT><I>HelperDllSocketContext</I></DT>

<DD>Pointer to a variable in which <B>WSHOpenSocket2</B> returns the address of a memory block that can be dynamically allocated. The returned pointer is passed to the helper DLL in all subsequent calls regarding the newly created socket. The helper DLL can use this block of memory to maintain per-socket information.</DD>

<DT><I>NotificationEvents</I></DT>

<DD>Pointer to a bitmask variable that the helper DLL sets to specify the state-change events for which the Windows Sockets DLL should call the helper DLL's <B>WSHNotify</B> function. A helper DLL can request notifications by setting this variable to a combination (ORed) of the following, as defined in <I>wsahelp.h</I>:

<DL>
<DT>WSH_NOTIFY_BIND</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>bind</B>.</DD>

<DT>WSH_NOTIFY_LISTEN</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>listen</B>.</DD>

<DT>WSH_NOTIFY_ACCEPT</DT>

<DD>Call <B>WSHNotify</B> when a socket handle is being returned from the <B>WSAAccept</B> or <B>accept</B> function.</DD>

<DT>WSH_NOTIFY_CONNECT</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>WSAConnect </B>or <B>connect</B>.</DD>

<DT>WSH_NOTIFY_SHUTDOWN_RECEIVE</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>shutdown </B>for the receive side of the socket.</DD>

<DT>WSH_NOTIFY_SHUTDOWN_SEND</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>shutdown </B>for the send side of the socket.</DD>

<DT>WSH_NOTIFY_SHUTDOWN_ALL</DT>

<DD>Call <B>WSHNotify</B> on a successful call to <B>shutdown </B>for both sides of the socket.</DD>

<DT>WSH_NOTIFY_CLOSE</DT>

<DD>Call <B>WSHNotify</B> when the socket is being closed.</DD>

<DT>WSH_NOTIFY_CONNECT_ERROR</DT>

<DD>Call <B>WSHNotify</B> when a socket fails a call to <B>WSAConnect</B> or <B>connect </B>occurred.
</DD>
</DL>
</DD>
</DL>

<H4>Return Value</H4>

<P><B>WSHOpenSocket2</B> returns zero to indicate a successful creation of a socket. If this function returns a nonzero value, the corresponding call to <B>WSASocket</B> or <B>WSAAccept </B>fails. If so, the helper DLL should return an appropriate Windows Sockets error code as defined in <I>winsock2.h</I>.</P>

<H4>Headers</H4>

<P>Declared in <I>wsahelp.h</I>. Include <I>wsahelp.h</I>.</P>

<H4>Comments</H4>

<P><B>WSHOpenSocket2</B> is called by the sockets service provider, such as MSAFD.DLL, to create a new socket. A new socket will be created by a call to <B>WSASocket</B> or by <B>WSAAccept</B>.</P>

<P>The helper DLL should canonicalize and verify the input parameters so that Windows Sockets 2 can rely on a unique triple for each type of socket. The parameters for creating a root or leaf depend on the underlying protocol. </P>

<P>Before it returns control, <B>WSHOpenSocket2</B> should allocate necessary memory for a socket-specific context structure, set a notification bitmask, and set the name of the transport driver that handles this socket. </P>

<P>A WSH DLL <I>must</I> set <I>NotificationEvents</I> with WSH_NOTIFY_CLOSE if it allocates memory for per-socket context and returns a pointer at <I>HelperDllSocketContext</I>. Otherwise, a memory leak can occur.</P>

<H4>See Also</H4>

<P><A HREF="37wshfun_0b5e.htm"><B>WSHNotify</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSHOpenSocket2"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
