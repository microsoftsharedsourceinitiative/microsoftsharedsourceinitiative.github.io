<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TdiBuildDisconnect</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TdiBuildDisconnect">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdibuilddisconnect_nr"></A>TdiBuildDisconnect</H1>

<P><B>TdiBuildDisconnect</B> sets up an internal device control IRP for a TDI_DISCONNECT request to the underlying transport through which a local-node client has already established an endpoint-to-endpoint connection with a remote-node peer or to which that client previously made a listen request in anticipation of establishing such a connection. </P>

<PRE class=syntax><B>VOID 
</B>  <B>TdiBuildDisconnect(
</B>    <B>IN PIRP</B>  <I>Irp</I><B>,
</B>    <B>IN PDEVICE_OBJECT</B>  <I>DevObj</I><B>,
</B>    <B>IN PFILE_OBJECT</B>  <I>FileObj</I><B>,
</B>    <B>IN PVOID</B>  <I>CompRoutine</I><B>,
</B>    <B>IN PVOID</B>  <I>Contxt</I><B>,
</B>    <B>IN PLARGE_INTEGER</B>  <I>Time</I><B>,</B><I>
    </I><B>IN ULONG</B>  <I>Flags</I><B>,</B>
    <B>IN PTDI_CONNECTION_INFORMATION</B>  <I>RequestConnectionInfo</I><B>,
</B>    <B>OUT PTDI_CONNECTION_INFORMATION</B>  <I>ReturnConnectionInfo
    </I><B>);</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>Irp</I></DT>

<DD>Pointer to a client-supplied IRP, either originating in a higher level network component or allocated with <B>TdiBuildInternalDeviceControlIrp</B>. </DD>

<DT><I>DevObj</I></DT>

<DD>Pointer to the device object created by the underlying TDI transport driver.</DD>

<DT><I>FileObj</I></DT>

<DD>Pointer to a file object representing the connection endpoint. 

<P>The client previously made a successful request, set up with <B>TdiBuildAssociateAddress</B>, to the transport to set up an association between this connection endpoint and a local-node address. In addition, the client previously did one of the following:


<UL>
	<LI>Made a successful request, set up with <B>TdiBuildConnect</B>, to establish an endpoint-to-endpoint connection with a remote-node peer</LI>

	<LI>Accepted this connection offer from its remote-node peer, which initiated the TDI_CONNECT request</LI>

	<LI>Submitted a successful request, set up with <B>TdiBuildListen</B>, that has just been satisfied by a connection offer from a remote-node peer</LI>
</UL>
</DD>

<DT><I>CompRoutine</I></DT>

<DD>Specifies the entry point of a client-supplied IoCompletion routine or NULL. The I/O Manager calls this routine when the given IRP is completed, unless the client sets this parameter to NULL. </DD>

<DT><I>Contxt</I></DT>

<DD>Pointer to a client-determined context. This client-supplied pointer is passed in to the IoCompletion routine when it is called with the completed IRP. <I>Contxt</I> is NULL if <I>CompRoutine</I> is NULL.</DD>

<DT><I>Time</I></DT>

<DD>Pointer to a variable specifying a system-relative time-out interval that the transport is to use for the disconnection attempt, or this parameter can be NULL. 

<P>An explicit time-out must be specified as the negative of the number of 100-nanosecond intervals, relative to the current system time, that its disconnection attempt is allowed to remain pending before the transport fails this disconnect request. If this pointer is NULL, the transport uses its own default time-out interval for disconnecting from any remote node. 
</DD>

<DT><I>Flags</I></DT>

<DD>Specifies zero if the underlying transport does not support controlled disconnects. If the underlying transport does support controlled disconnects, specifies either of the following:

<DL>
<DT>TDI_DISCONNECT_ABORT</DT>

<DD>Specifies that the underlying transport should close the connection immediately without attempting to complete any pending requests. This value is the default, equivalent to setting <I>Flags</I> to zero.

<P>A client can make a disconnect request with TDI_DISCONNECT_ABORT at any time its connection is not idle. For example, such a client might want to cancel a pending connect or listen request that it made previously. As another example, a client can force the underlying transport to close an endpoint-to-endpoint connection by issuing a second disconnect request with TDI_DISCONNECT_ABORT when its preceding disconnect request with TDI_DISCONNECT_RELEASE remains pending.
</DD>

<DT>TDI_DISCONNECT_RELEASE</DT>

<DD>Specifies that the underlying transport should initiate a controlled disconnect, as described later (see Comments). The remote-node client also issues a disconnect request with this value to confirm a controlled disconnect.

<P>The TDI_DISCONNECT_WAIT flag is not used. 
</DD>
</DL>


<P>Clients can set only one of the preceding options in a disconnect request. The transport will fail any attempt to set more than one of these options. 
</DD>

<DT><I>RequestConnectionInfo</I></DT>

<DD>Pointer to a client-supplied buffer containing a TDI_CONNECTION_INFORMATION structure, possibly containing disconnection data if the client sends any when initiating an endpoint-to-endpoint controlled disconnection. This parameter should be NULL unless the caller initiated a disconnection with TDI_DISCONNECT_RELEASE. </DD>

<DT><I>ReturnConnectionInfo</I></DT>

<DD>Pointer to a caller-supplied buffer, also formatted as TDI_CONNECTION_INFORMATION structure, in which the transport returns any disconnect data it received from the remote node, assuming the remote-node client initiated a controlled disconnection. This parameter should be NULL unless the caller is acknowledging a disconnection with TDI_DISCONNECT_RELEASE. The local-node client cannot retrieve any returned disconnect data after it reuses the connection in a request set up with <B>TdiBuildListen</B> or <B>TdiBuildConnect</B>.
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P><B>TdiBuildDisconnect </B>sets IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B> and TDI_DISCONNECT as the <B>MinorFunction</B> codes in the transport's I/O stack location of the given IRP. This IRP requests that an already established endpoint-to-endpoint connection with a remote-node peer be broken. </P>

<P>A client also can issue a disconnect request to reject an incoming request to connect that was initiated by a remote-node peer. In this case, the client is responding to a completed TDI_LISTEN request that it made previously with the TDI_QUERY_ACCEPT option selected, or the client is rejecting an offered connection from its ClientEventConnect function. Such a client calls <B>TdiBuildDisconnect</B> either with zero or with TDI_DISCONNECT_ABORT at <I>Flags</I>. </P>

<P>While an established endpoint-to-endpoint connection is being disconnected, the underlying transport driver usually refuses any incoming requests for the connection and stops all activity at the specified connection endpoint. However, that connection endpoint remains valid for reuse by the client when the disconnect operation is done. </P>

<P>Because any disconnection operation takes time to complete, the client can receive additional TSDUs on an established endpoint-to-endpoint connection before its disconnect IRP is fully completed. Therefore, a client can assume that the context it maintains for such a connection remains valid until it is notified of disconnect completion, for example, by a call to the IoCompletion routine it supplied to <B>TdiBuildDisconnect</B>. Disconnect-completion notification implies the cessation of all activity, including receive indications, on the connection.</P>

<P>Unless a client requests a controlled disconnect with TDI_DISCONNECT_RELEASE, the transport completes no outstanding I/O requests on the connection and does not confirm that the remote-node peer has been notified of the disconnection before it returns control from a disconnect request. For such a disconnect request, the underlying transport simply cancels all outstanding requests on the given connection, completes its client's disconnect request, and returns control.</P>

<P>Either client on an established endpoint-to-endpoint connection can request a controlled disconnect if the underlying TDI transports support this. If so, the client that initiates the disconnection operation with a TDI_DISCONNECT request causes both transports to coordinate their operations so the remote-node peer is informed that the connection is closing and both transports complete any pending transfers on the connection before it is broken. In these circumstances, the remote-node client must confirm the disconnect before the underlying transport can return from the initiating (local-node) client's disconnect request. </P>

<P>The following summarizes the sequence of operations for a controlled disconnect:

<OL>
	<LI>The local-node client initiates a disconnection by making a disconnect request in which TDI_DISCONNECT_RELEASE was set at <I>Flags</I>. Subsequently, this client can no longer send data on the connection, but it can continue to receive data from its remote-node peer. The underlying transport carries out any pending send operations and completes the pending send requests it is currently holding when such a local-node client makes its disconnect request.</LI>

	<LI>The transport on the remote node completes any pending receive requests its client has made. Then, the remote-node transport notifies its client of the pending disconnect, either by calling ClientEventDisconnect if the remote-node client has registered this event handler or by returning an error code on an outstanding request made by its client. After such a notification, the remote-node client can no longer receive data on the connection, but it can continue to send data until it submits a disconnect request with the TDI_DISCONNECT_RELEASE option to the underlying transport. </LI>

	<LI>When the remote-node client has finished sending data, it makes a disconnect request to its underlying transport with the TDI_DISCONNECT_RELEASE option selected. The underlying transport completes all outstanding sends on the connection normally before completing its client's disconnect request. When this transport returns from the disconnect, the connection has been closed from the point of view of its remote-node client. However, the connection endpoint is still valid and that client can reuse it later.</LI>

	<LI>The remote-node transport notifies the local-node transport to confirm disconnect-completion at the remote node. At this point, the original controlled disconnect request is completed by the local-node transport and the connection has been closed from the point of view of the local-node client. However, the connection endpoint is still valid and that client can reuse it later.</LI>
</OL>

<H4>See Also</H4>

<P><A HREF="35tdicli_2rg2.htm"><B>ClientEventDisconnect</B></A>, <A HREF="34bldmac_99pu.htm"><B>TdiBuildConnect</B></A>, <A HREF="34bldmac_6cc2.htm"><B>TdiBuildListen</B></A>, <A HREF="34bldmac_8df6.htm"><B>TdiBuildInternalDeviceControlIrp</B></A>, <A HREF="36tdstrc_9vg2.htm"><B>TDI_CONNECTION_INFORMATION</B></A>, <A HREF="32ioctl_4hgy.htm"><B>TDI_DISCONNECT</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TdiBuildDisconnect"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
