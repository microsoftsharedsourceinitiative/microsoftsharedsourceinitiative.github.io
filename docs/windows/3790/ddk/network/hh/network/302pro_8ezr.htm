<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NDIS Protocol Drivers</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NDIS Protocol Drivers">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_summary_of_kernel_mode_support_routines_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndis_protocol_drivers_ng"></A>NDIS Protocol Drivers</H1>

<P>This section describes the features of an NDIS driver that exports a set of <I>ProtocolXxx</I> functions at its lower edge. Such a protocol driver communicates with NDIS to send and receive network packets. The protocol driver binds to an underlying miniport driver or intermediate driver that exports a <I>MiniportXxx</I> interface at its upper edge.</P>

<P class=note><B>Note</B>&nbsp;&nbsp;The miniport upper edge of an intermediate driver (virtual miniport) does not manage physical devices. Underlying miniport drivers manage physical devices.</P>

<P>Such an NDIS protocol driver might support TDI at its upper edge. It might also export a private interface to a higher-level kernel-mode driver, possibly through a transport stack of drivers, including one that supports TDI at the top of the stack. For instance, an NDIS protocol driver can be the lowest module of a multimodule transport implementation of a standard protocol such as TCP/IP with TDI support in the highest module. </P>

<P>Protocol drivers always use NDIS-provided functions to communicate with underlying NDIS drivers to send and receive packets. For example, a protocol driver that has a connectionless lower-edge (which communicates with underlying drivers for connectionless media, such as Ethernet or token ring) must call <A HREF="103ndisx_7jw2.htm"><B>NdisSend</B></A> or <A HREF="103ndisx_88s2.htm"><B>NdisSendPackets</B></A> to send packets to an underlying NDIS driver. The protocol driver must call <A HREF="103ndisx_0u42.htm"><B>NdisRequest</B></A> to query or set OIDs that are supported by underlying connectionless drivers. A protocol driver that has a connection-oriented lower edge (which communicates with underlying drivers for connection-oriented media, such as ATM and ISDN) must call <A HREF="103ndisx_15de.htm"><B>NdisCoSendPackets</B></A> to send a packet or packets to a lower-level NDIS driver. It must also call <A HREF="103ndisx_8xde.htm"><B>NdisCoRequest</B></A> to query or set OIDs that are supported by underlying connection-oriented drivers.</P>

<P>NDIS also provides a set of <B>Ndis</B><I>Xxx</I> functions that hide the details of the underlying operating system. For example, a protocol driver can call <A HREF="103ndisx_2rqq.htm"><B>NdisInitializeEvent</B></A> to create an event for synchronization purposes and <A HREF="103ndisx_5r02.htm"><B>NdisInitializeListHead</B></A> to create a linked list. Protocol drivers that use the NDIS versions of such functions are more portable across Microsoft operating systems that support the Win32® interface. However, protocol drivers can also call kernel-mode support routines, such as <A HREF="JavaScript:hhobj_1.Click()"><B>IoCreateDevice</B></A>. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Summary of Kernel-Mode Support Routines</A>.</P>

<P>Developers of protocol drivers should use the same programming considerations that are applied to other NDIS drivers. See <A HREF="103prog_4fvr.htm">Network Driver Programming Considerations</A>.</P>

<P>The following topics describe how to implement a protocol driver:</P>

<P class=indent1><A HREF="302pro_7vxj.htm">Pageable and Discardable Code</A></P>

<P class=indent1><A HREF="302pro_0w9z.htm">Protocol Driver's DriverEntry and Initialization</A></P>

<P class=indent1><A HREF="302pro_333b.htm">Protocol Driver Packet Management</A></P>

<P class=indent1><A HREF="302pro_5rl3.htm">Dynamic Binding in a Protocol Driver</A></P>

<P class=indent1><A HREF="302pro_33l3.htm">Protocol Driver Query and Set Operations</A></P>

<P class=indent1><A HREF="302pro_1dgn.htm">Receiving Data in a Protocol Driver</A></P>

<P class=indent1><A HREF="302pro_6prb.htm">Sending Protocol Driver-Originated Packets</A></P>

<P class=indent1><A HREF="302pro_8o6f.htm">Handling PnP Events and PM Events in a Protocol Driver</A></P>

<P class=indent1><A HREF="302pro_3u5j.htm">Protocol Driver Reset Operations</A></P>

<P class=indent1><A HREF="302pro_8m7b.htm">Status Indications in a Protocol Driver</A></P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NDIS%20Protocol%20Drivers"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
