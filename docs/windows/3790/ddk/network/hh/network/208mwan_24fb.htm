<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TAPI Initialization</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TAPI Initialization">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H2><A NAME="ddk_tapi_initialization_ng"></A>TAPI Initialization</H2>

<P>After an NDIS WAN miniport driver has registered, been initialized and indicated that it is a TAPI provider, <A HREF="101mini_2vw2.htm"><I>MiniportQueryInformation</I></A> is called with an <A HREF="29tpioid_5ng2.htm">OID_TAPI_PROVIDER_INITIALIZE</A> request. There is a one-to-one relationship between a provider and a TAPI-capable adapter. The NDIS_TAPI_PROVIDER_INITIALIZE structure passed in the call contains a <B>ulDeviceIDBase</B> representing an offset. The miniport driver should add this offset to its zero-based line device identifiers when it refers to a device in subsequent OID responses. If the miniport driver manages two devices and it is passed a <B>ulDeviceIDBase</B> of <I>n</I>, those devices will be referenced in future calls as <I>n</I> and <I>n+1</I>, for example, in the <B>ulDeviceID</B> member passed to the miniport driver in the structure for an <A HREF="29tpioid_9jhu.htm">OID_TAPI_OPEN</A>. </P>

<P>The NDIS WAN miniport driver should fill in two members of the OID structure before returning from <I>MiniportQueryInformation</I>. The <B>ulNumLineDevs</B> is set to the number of line devices supported by the adapter. The NIC driver should also set the <B>ulProviderID</B> member to a unique (per adapter) value. Since there is currently no means to guarantee unique <B>ulProviderID</B> values, a good strategy is to pass the NDIS handle passed to <A HREF="101mini_9jzm.htm"><I>MiniportInitialize</I></A> as the <B>ulProviderID</B>. The <B>ulRequestID</B> member of the structure is reserved for NDISTAPI and is opaque to the miniport driver. </P>

<P>The OID_TAPI_PROVIDER_INITIALIZE request sent to registered NDIS WAN miniport drivers is always the result of a higher-level telephony module being loaded and initialized by the first client process. A miniport driver will only receive the OID_TAPI_PROVIDER_INITIALIZE request once per adapter when the first client process on the machine makes a <B>lineInitialize</B> request.</P>

<H4>Communicating Device Characteristics</H4>

<P>After the NDIS WAN miniport driver has returned the number of devices it supports, its <I>MiniportQueryInformation</I> function will be called to return the capabilities of its devices with an <A HREF="29tpioid_64c2.htm">OID_TAPI_GET_DEV_CAPS</A> and to return its device configuration with an <A HREF="29tpioid_0zg2.htm">OID_TAPI_GET_DEV_CONFIG</A>. This information describes how the WAN miniport driver models its device. For example, the same ISDN adapter can be modeled as: 

<UL>
	<LI>1 line, with 1 address, supporting 2 calls per address </LI>

	<LI>1 line, with 2 addresses on this line, supporting one call per address</LI>

	<LI>2 lines, each with 1 address, supporting 1 call per address</LI>
</UL>

<P>A miniport driver will be queried for its characteristics using these already mentioned OIDs, once for each device that it indicated in its response to <A HREF="29tpioid_5ng2.htm">OID_TAPI_PROVIDER_INITIALIZE</A>.</P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TAPI%20Initialization"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
