<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>NdisMRegisterDevice</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="NdisMRegisterDevice">
</HEAD>
<BODY TOPMARGIN="0">
<DIV STYLE="display:none;">
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatesymboliclink_kr">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_device_objects_and_device_stacks_kg">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_handling_irps_kg">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_writing_dispatch_routines_kg">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ioattachdevice_kr">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_ioattachdevice_kr">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatedevice_kr">
</OBJECT>
<OBJECT ID="hhobj_10" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_iocreatesymboliclink_kr">
</OBJECT>
<OBJECT ID="hhobj_11" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="ddk_unicode_string_kr">
</OBJECT>
</DIV>


<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_ndismregisterdevice_nr"></A>NdisMRegisterDevice</H1>

<P>The <B>NdisMRegisterDevice</B> function creates a named device object and a symbolic link between the device object and a user-visible name for that device.</P>

<PRE class=syntax><B>NDIS_STATUS
  NdisMRegisterDevice(
    IN</B> <B>NDIS_HANDLE</B>  <I>NdisWrapperHandle</I><B>,
    IN</B> <B>PNDIS_STRING</B>  <I>DeviceName</I><B>,
    IN</B> <B>PNDIS_STRING</B>  <I>SymbolicName</I><B>,
    IN</B> <B>PDRIVER_DISPATCH</B>  <I>MajorFunctions[]</I><B>,
    OUT</B> <B>PDEVICE_OBJECT</B>  <B>*</B><I>pDeviceObject</I><B>,
    OUT</B> <B>NDIS_HANDLE</B>  *<I>NdisDeviceHandle</I><B>
    );</B></PRE>

<H4>Parameters</H4>

<DL>
<DT><I>NdisWrapperHandle</I></DT>

<DD>Specifies the handle returned by <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>.</DD>

<DT><I>DeviceName</I></DT>

<DD>Pointer to an NDIS_STRING type containing a zero-terminated Unicode string that names the device object. The string must be a full-path name—for example, <B>\Device\</B><I>DeviceName</I>. For Windows 2000 and later, NDIS defines the NDIS_STRING type as a <A HREF="JavaScript:hhobj_1.Click()">UNICODE_STRING</A> type. </DD>

<DT><I>SymbolicName</I></DT>

<DD>Pointer to an NDIS_STRING type containing a Unicode string that is the Win32-visible name of the device being registered. Typically, the <I>SymbolicName</I> has the following format: <B>\DosDevices\</B><I>SymbolicName</I>.</DD>

<DT><I>MajorFunctions</I></DT>

<DD>Pointer to an array of one or more entry points for the device driver's dispatch routines. A driver must set as many separate dispatch entry points as the IRP_MJ_<I>XXX</I> codes that the driver handles for the device object. Each dispatch routine is declared as follows:

<PRE>NTSTATUS
(*PDRIVER_DISPATCH) (
    IN PDEVICE_OBJECT Device Object,
    IN PIRP Irp
);</PRE>


<P>A driver must not supply entry points for Plug and Play or Power Management handlers since the created device object is not for a physical device and therefore does not receive Plug and Play or Power Management IRPs.
</DD>

<DT><I>pDeviceObject</I></DT>

<DD>Pointer to the newly created device object if the call succeeds.</DD>

<DT><I>NdisDeviceHandle</I></DT>

<DD>Pointer to a caller-supplied variable in which this function, if it succeeds, returns a handle to the device object. This handle is a required parameter to the <A HREF="103ndisx_1jw2.htm"><B>NdisMDeregisterDevice</B></A> function that the driver calls subsequently. 
</DD>
</DL>

<H4>Return Values</H4>

<P><B>NdisMRegisterDevice</B> returns STATUS_SUCCESS if it succeeds, NDIS_STATUS_NOT_SUPPORTED if the caller is not an NDIS miniport driver, or a failure code if it fails.</P>

<H4>Headers</H4>

<P>Declared in <I>Ndis.h</I>. Include <I>Ndis.h</I>.</P>

<H4>Comments</H4>

<P>An intermediate driver or miniport driver may require a separate, stand-alone device object. For example, an intermediate miniport driver might require a stand-alone device object to monitor the status of an underlying NIC when the NIC's miniport driver is not up and running. To obtain the NIC's status in such a case, a user-mode application or environmental subsystem sends an IRP to the device object. The IRP is processed by the intermediate driver. Without the stand-alone device object, the NIC's status is available only when the NIC's miniport driver is up and running.</P>

<P>An intermediate driver or miniport driver creates a device object by calling <B>NdisMRegisterDevice</B> from its <B>DriverEntry</B> function after <B>DriverEntry</B> has called <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>. <B>NdisMRegisterDevice</B> creates a named device object and also a symbolic link between the device object name and a user-visible name for that device. If the call to <B>NdisMRegisterDevice</B> succeeds, the I/O Manager allocates storage in nonpaged pool for the device object itself and for all other data structures associated with the device object, including the driver's device extension. The device extension for an object created with <B>NdisMRegisterDevice</B> is reserved for use by NDIS and cannot be used by the driver.</P>

<P>A device object created with <B>NdisMRegisterDevice</B> functions in the same way as a device object and symbolic link that were created with <A HREF="JavaScript:hhobj_2.Click()"><B>IoCreateDevice</B></A> and <A HREF="JavaScript:hhobj_3.Click()"><B>IoCreateSymbolicLink</B></A>, respectively. The miniport driver is responsible for processing all IRPs that it receives for the device object. (NDIS processes all Plug and Play and power management IRPs sent to the device object.) The driver processes IRPs sent to the device object using dispatch routines that it registered when it supplied the <I>MajorFunctions</I> pointer to <B>NdisMRegisterDevice</B>. For more information on device objects, IRPs, and dispatch routines, see <A HREF="JavaScript:hhobj_4.Click()">Device Objects and Device Stacks</A>, <A HREF="JavaScript:hhobj_5.Click()">Handling IRPs</A>, and <A HREF="JavaScript:hhobj_6.Click()">Writing Dispatch Routines</A>.</P>

<P>NDIS drivers should never call <B>IoCreateDevice</B> or <B>IoCreateSymbolicLink</B>. Instead, if an NDIS driver must create a device object, it should call <B>NdisMRegisterDevice</B>. Drivers should never attempt to stack the device object over the physical device object by calling <A HREF="JavaScript:hhobj_7.Click()"><B>IoAttachDevice</B></A>.</P>

<P>The device object that is created with <B>NdisMRegisterDevice</B> is not a physical device object and therefore does not receive Plug and Play or Power Management IRPs. Callers of <B>NdisMRegisterDevice</B> must therefore omit entry points for Plug and Play or Power Management handlers in the array that is pointed to by <I>MajorFunctions</I>.</P>

<P>Note that, if a handle to the device object created with <B>NdisMRegisterDevice</B> is open, the driver that created the device object cannot be unloaded. Before opening a handle to the device object, a user-mode application should therefore register for device event notification, specifying GUID_NDIS_LAN_CLASS as the interface class GUID. On receiving a DBT_DEVICEQUERYREMOVE device event for the device object, the application should close the handle. For more information on processing a request to remove a device, see the Platform SDK documentation.</P>

<P>If a driver's call to <B>NdisMRegisterDevice</B> fails, the driver can continue to load or not, depending on how critical the stand-alone device object is for the driver's operation.</P>

<P>Callers of <B>NdisMRegisterDevice</B> run at IRQL = PASSIVE_LEVEL.</P>

<H4>See Also</H4>

<P><A HREF="101mini_0quq.htm"><B>DriverEntry</B></A>, <A HREF="JavaScript:hhobj_8.Click()"><B>IoAttachDevice</B></A>, <A HREF="JavaScript:hhobj_9.Click()"><B>IoCreateDevice</B></A>, <A HREF="JavaScript:hhobj_10.Click()"><B>IoCreateSymbolicLink</B></A>, <A HREF="103ndisx_1jw2.htm"><B>NdisMDeregisterDevice</B></A>, <A HREF="103ndisx_244y.htm"><B>NdisMInitializeWrapper</B></A>, <A HREF="JavaScript:hhobj_11.Click()">UNICODE_STRING</A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: NdisMRegisterDevice"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
