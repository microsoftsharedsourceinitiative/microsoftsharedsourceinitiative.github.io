<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TDI_SET_EVENT_HANDLER</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="TDI_SET_EVENT_HANDLER">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_tdi_set_event_handler_nr"></A>TDI_SET_EVENT_HANDLER</H1>

<P>When a kernel-mode client makes a TDI_SET_EVENT_HANDLER request, it asks the underlying TDI transport driver to call the specified ClientEvent<I>Xxx</I> routine whenever the corresponding network event occurs. </P>

<H4>IRP</H4>

<P>The transport calls <B>IoGetCurrentIrpStackLocation</B> with the given <I>Irp</I> to get a pointer to its own I/O stack location in the IRP, shown in the following list as <B>IrpSp</B>. The pointer to the IRP is shown in the following list as <B>Irp</B>. IRP members relevant to this request include the following:

<DL>
<DT><B>Irp-&gt;IoStatus.Status</B></DT>

<DD>Specifies the final status of the set-event-handler request. The transport sets this member before it completes the IRP, possibly to one of the following:

<P>STATUS_SUCCESS<BR>
STATUS_INVALID_ADDRESS_COMPONENT<BR>
STATUS_INVALID_PARAMETER


<P>The <B>IoStatus.Information</B> member is zero because no data is transferred for this request. 
</DD>

<DT><B>IrpSp-&gt;MajorFunction</B></DT>

<DD>Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member if it exports a <B>TdiDispatchInternalDeviceControl</B> routine that handles only TDI_<I>XXX</I> requests. </DD>

<DT><B>IrpSp-&gt;MinorFunction</B></DT>

<DD>Specifies TDI_SET_EVENT_HANDLER.</DD>

<DT><B>IrpSp-&gt;FileObject</B></DT>

<DD>Pointer to an open file object representing a local-node address. The transport uses the <B>FsContext</B> and, possibly, <B>FsContext2</B> fields to access the state it maintains about this address. 

<P>Depending on the type of ClientEvent<I>Xxx</I> handler to be registered, this address might be or become associated with an established endpoint-to-endpoint connection made by this client. 
</DD>

<DT><B>IrpSp-&gt;Parameters</B></DT>

<DD>Pointer to a TDI_REQUEST_KERNEL_SET_EVENT structure, defined as follows:

<PRE>struct _TDI_REQUEST_KERNEL_SET_EVENT {<B> </B>
    LONG EventType;<B> </B>
    PVOID EventHandler;<B> </B>
    PVOID EventContext;<B> </B>
} TDI_REQUEST_KERNEL_SET_EVENT, *PTDI_REQUEST_KERNEL_SET_EVENT;<B> </B></PRE>


<P>The transport uses the members of this structure as follows:


<DL>
<DT><B>EventType</B></DT>

<DD>Specifies the type of ClientEvent<I>Xxx</I> handler to be registered (see Comments).</DD>

<DT><B>EventHandler</B></DT>

<DD>Specifies the entry point of the ClientEvent<I>Xxx</I> routine to be called when this type of event occurs. This member can be NULL if the client is deregistering a previously registered event handler. </DD>

<DT><B>EventContext</B></DT>

<DD>Specifies a pointer to be passed, uninterpreted by the transport, to the given ClientEvent<I>Xxx</I> routine whenever it is called. This member is NULL if <B>EventHandler</B> is NULL. 
</DD>
</DL>
</DD>
</DL>

<H4>Headers</H4>

<P>Declared in <I>TdiKrnl.h</I>. Include <I>TdiKrnl.h</I>.</P>

<H4>Comments</H4>

<P>When its client first opens a file object that represents an address, a TDI transport initializes all event handlers associated with that address to NULL for the client.</P>

<P>Subsequently when the client calls <B>TdiBuildSetEventHandler</B> to set up this IRP, it specifies the type of handler to be registered. The transport finds this information at <B>IrpSp-&gt;Parameters</B> in the <B>EventType</B> member. On input, <B>EventType</B> can be one of the following system-defined values: 

<DL>
<DT>TDI_EVENT_CONNECT</DT>

<DD>Register the given <A HREF="35tdicli_56r6.htm">ClientEventConnect</A> handler to be called when an endpoint-to-endpoint connection is offered by a remote-node peer. </DD>

<DT>TDI_EVENT_DISCONNECT</DT>

<DD>Register the given <A HREF="35tdicli_2rg2.htm">ClientEventDisconnect</A> handler to be called when an established endpoint-to-endpoint connection is being closed by the remote-node peer. </DD>

<DT>TDI_EVENT_RECEIVE</DT>

<DD>Register the given <A HREF="35tdicli_7yeq.htm">ClientEventReceive</A> handler to be called when a normal receive comes in on an endpoint-to-endpoint connection from the remote node and the transport will give the client the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE</DT>

<DD>Register the given <A HREF="35tdicli_4qnm.htm">ClientEventChainedReceive</A> handler to be called when a normal receive comes in on an endpoint-to-endpoint connection from the remote node and the transport can give this client read-only access to the buffered full TSDU until the client calls <B>TdiReturnChainedReceives</B> with the <I>TsduDescriptor</I>. </DD>

<DT>TDI_EVENT_RECEIVE_EXPEDITED</DT>

<DD>Register the given <A HREF="35tdicli_7jea.htm">ClientEventReceiveExpedited</A> handler to be called when an expedited receive comes in on an endpoint-to-endpoint connection from the remote node and the transport will give this client the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE_EXPEDITED</DT>

<DD>Register the given <A HREF="35tdicli_57n6.htm">ClientEventChainedReceiveExpedited</A> handler to be called when an expedited receive comes in on an endpoint-to-endpoint connection from the remote node and the transport can give this client read-only access to the buffered full TSDU until the client calls <B>TdiReturnChainedReceives</B> with the <I>TsduDescriptor</I>. </DD>

<DT>TDI_EVENT_RECEIVE_DATAGRAM</DT>

<DD>Register the given <A HREF="35tdicli_7yeq.htm">ClientEventReceive</A> handler to be called when a datagram comes in from a remote node and the transport will give this client the opportunity to copy all or part of the buffered TSDU. </DD>

<DT>TDI_EVENT_CHAINED_RECEIVE_DATAGRAM</DT>

<DD>Register the given <A HREF="35tdicli_0jci.htm">ClientEventChainedReceiveDatagram</A> handler to be called when a datagram comes in from a remote node and the transport can give this client read-only access to the buffered full TSDU until the client calls <B>TdiReturnChainedReceives</B> with the <I>TsduDescriptor</I>. </DD>

<DT>TDI_EVENT_SEND_POSSIBLE</DT>

<DD>Register the given <A HREF="35tdicli_1wc2.htm">ClientEventSendPossible</A> handler to be called when the underlying transport, which previously returned a submitted send request with STATUS_DEVICE_NOT_READY, next has internal buffer space available into which it can copy the resubmitted client-supplied data to be sent. </DD>

<DT>TDI_EVENT_ERROR</DT>

<DD>Register the given <A HREF="35tdicli_98tu.htm">ClientEventError</A> handler to be called if an error occurs in the transport or in an underlying driver such that network I/O on this local-node address has become unreliable or impossible. </DD>

<DT>TDI_EVENT_ERROR_EX</DT>

<DD>Register the given <A HREF="35tdicli_0quq.htm">ClientEventErrorEx</A> handler to be called if an error occurs in the transport or in an underlying driver such that network I/O on this local-node address has become unreliable or impossible. 
</DD>
</DL>

<P>In addition to the preceding system-defined events, a transport can extend this interface at the discretion of the driver writer to support notifications of transport-specific events to kernel-mode clients. Such a transport must define TDI_EVENT_<I>XXX</I> codes in which the most significant bit is set. </P>

<P>A TDI transport can indicate an event to a client while an event of the same kind is in progress. In other words, ClientEventXxx handlers are re-entrant. </P>

<P>A TDI transport can call a client-supplied ClientEvent(Chained)Receive<I>Xxx</I> handler immediately if it is receiving data from the remote node, even before the transport completes the set-event-handler IRP that provided this client entry point. </P>

<P>In general, a transport calls ClientEventChainedReceive<I>Xxx</I> handlers when the <I>ProtocolReceivePacket</I> function at the bottom of the transport stack is called with a receive indication. A call to <I>ProtocolReceivePacket</I> implies that the underlying NDIS miniport driver is temporarily relinquishing ownership of all its resources for the indication specified by the input NDIS_PACKET-type descriptor until that packet descriptor is returned to this underlying NDIS miniport driver. </P>

<P>The transport must set up such an indication as previously described (see <A HREF="32ioctl_5drm.htm">TDI_RECEIVE</A>), passing the NDIS_PACKET-type descriptor as the <I>TsduDescriptor</I> input to its clients' ClientEventChainedReceive<I>Xxx </I>handlers. The clients' subsequent calls to <B>TdiReturnChainedReceives</B> returns the <I>TsduDescriptor</I> and all resources it describes directly to NDIS, which returns these resources to the indicating miniport driver underlying the transport when all such clients have consumed the received data. </P>

<P>On the other hand, a transport calls ClientEventReceive<I>Xxx</I> handlers when the transport's <I>ProtocolReceive</I> function is called with a receive indication. A call to <I>ProtocolReceive</I> implies that the underlying NDIS driver expects all higher level network components to copy the indicated data and return as quickly as possible so the lower driver can regain control of the resources it used to make the receive indication. </P>

<P>A client can disable an already registered event handler by making a subsequent TDI_SET_EVENT_HANDLER request in which the <B>EventType</B> member specifies the type of handler but the <B>EventHandler</B> and <B>EventContext</B> members are NULL. </P>

<P><B>TdiBuildSetEventHandler</B> is the macro a client uses to fill in the IRP.</P>

<H4>See Also</H4>

<P><A HREF="35tdicli_4qnm.htm"><B>ClientEventChainedReceive</B></A>, <A HREF="35tdicli_0jci.htm"><B>ClientEventChainedReceiveDatagram</B></A>, <A HREF="35tdicli_57n6.htm"><B>ClientEventChainedReceiveExpedited</B></A>, <A HREF="35tdicli_56r6.htm"><B>ClientEventConnect</B></A>, <A HREF="35tdicli_2rg2.htm"><B>ClientEventDisconnect</B></A>, <A HREF="35tdicli_98tu.htm"><B>ClientEventError</B></A>, <A HREF="35tdicli_0quq.htm"><B>ClientEventErrorEx</B></A>, <A HREF="35tdicli_7yeq.htm"><B>ClientEventReceive</B></A>, <A HREF="35tdicli_82nm.htm"><B>ClientEventReceiveDatagram</B></A>, <A HREF="35tdicli_7jea.htm"><B>ClientEventReceiveExpedited</B></A>, <A HREF="35tdicli_1wc2.htm"><B>ClientEventSendPossible</B></A>, <A HREF="104tdlow_62k2.htm"><B>ProtocolReceive</B></A>, <A HREF="104tdlow_5i7n.htm"><B>ProtocolReceivePacket</B></A>, <A HREF="34bldmac_6sxe.htm"><B>TdiBuildSetEventHandler</B></A>, <A HREF="31tddisp_2sfm.htm"><B>TdiDispatchInternalDeviceControl</B></A>, <A HREF="32ioctl_5drm.htm"><B>TDI_RECEIVE</B></A>, <A HREF="33tdifun_67aq.htm"><B>TdiReturnChainedReceives</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: TDI_SET_EVENT_HANDLER"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
