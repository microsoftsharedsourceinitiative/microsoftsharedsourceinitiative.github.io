<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WSAPROTOCOL_INFOW</TITLE>
<SCRIPT SRC="../scripts/linkcss.js"></SCRIPT><SCRIPT SRC="../scripts/langref.js"></SCRIPT><META NAME="MS-HKWD" CONTENT="WSAPROTOCOL_INFOW">
</HEAD>
<BODY TOPMARGIN="0">

<TABLE CLASS="buttonbarshade" CELLSPACING=0><TR><TD>&nbsp;</TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING=0>
<TR ID="hdr"><TD CLASS="runninghead" NOWRAP>Network&nbsp;Devices&nbsp;and&nbsp;Protocols:&nbsp;Windows&nbsp;DDK</TD></TR>
</TABLE>
<H1><A NAME="ddk_wsaprotocol_infow_nr"></A>WSAPROTOCOL_INFOW</H1>

<P>The Windows Sockets WSAPROTOCOL_INFOW structure is used to store or retrieve complete information for a given protocol. </P>

<PRE class=syntax>typedef struct _WSAPROTOCOL_INFO {
  DWORD  dwServiceFlags1;
  DWORD  dwServiceFlags2;
  DWORD  dwServiceFlags3;
  DWORD  dwServiceFlags4;
  DWORD  dwProviderFlags;
  GUID  ProviderId;
  DWORD  dwCatalogEntryId;
  WSAPROTOCOLCHAIN  ProtocolChain;
  int  iVersion;
  int  iAddressFamily;
  int  iMaxSockAddr;
  int  iMinSockAddr;
  int  iSocketType;
  int  iProtocol;
  int  iProtocolMaxOffset;
  int  iNetworkByteOrder;
  int  iSecurityScheme;
  DWORD  dwMessageSize;
  DWORD  dwProviderReserved;
  TCHAR  szProtocol[WSAPROTOCOL_LEN+1];
} WSAPROTOCOL_INFO, *LPWSAPROTOCOL_INFO;</PRE>

<H4>Members</H4>

<DL>
<DT><B>dwServiceFlags1</B></DT>

<DD>Bitmask describing the services provided by the protocol. The bitmask can be set with one or more (ORed) of the following flags:

<DL>
<DT>XP1_CONNECTIONLESS</DT>

<DD>Protocol provides connectionless (datagram) service. This flag is not set by a SAN service provider, because it only provides connection-oriented data transfers.</DD>

<DT>XP1_GUARANTEED_DELIVERY</DT>

<DD>Protocol guarantees that all data that it sends reaches the intended destination.</DD>

<DT>XP1_GUARANTEED_ORDER</DT>

<DD>Protocol guarantees that data arrives in the order in which the protocol sent it and that it is not duplicated. The protocol does not guarantee that the data was delivered.</DD>

<DT>XP1_MESSAGE_ORIENTED</DT>

<DD>Protocol honors message boundaries, as opposed to a stream-oriented protocol, which does not honor message boundaries.</DD>

<DT>XP1_PSEUDO_STREAM</DT>

<DD>Although the protocol is message-oriented, it ignores message boundaries for all receives. This is convenient when an application does not require that the protocol frame messages.</DD>

<DT>XP1_GRACEFUL_CLOSE</DT>

<DD>Protocol supports two-phase (graceful) socket closures. If not set, the protocol performs only abortive closures.</DD>

<DT>XP1_EXPEDITED_DATA</DT>

<DD>Protocol supports expedited (urgent) data.</DD>

<DT>XP1_CONNECT_DATA</DT>

<DD>Protocol supports data related to a connection request.</DD>

<DT>XP1_DISCONNECT_DATA</DT>

<DD>Protocol supports data related to a connection shutdown.</DD>

<DT>XP1_SUPPORT_BROADCAST</DT>

<DD>Protocol supports a broadcast mechanism.</DD>

<DT>XP1_SUPPORT_MULTIPOINT</DT>

<DD>Protocol supports a multipoint or multicast mechanism. Control and data plane attributes are indicated in the following values.</DD>

<DT>XP1_MULTIPOINT_CONTROL_PLANE</DT>

<DD>Indicates whether the control plane is rooted (value = 1) or nonrooted (value = 0).</DD>

<DT>XP1_MULTIPOINT_DATA_PLANE</DT>

<DD>Indicates whether the data plane is rooted (value = 1) or nonrooted (value = 0).</DD>

<DT>XP1_QOS_SUPPORTED</DT>

<DD>Set by a SAN service provider if it supports quality of service requests. </DD>

<DT>XP1_RESERVED</DT>

<DD>Reserved.</DD>

<DT>XP1_UNI_SEND</DT>

<DD>Protocol is unidirectional in the send direction.</DD>

<DT>XP1_UNI_RECV</DT>

<DD>Protocol is unidirectional in the receive direction.</DD>

<DT>XP1_IFS_HANDLES</DT>

<DD>Socket descriptors returned by the provider are handles to installable file system (IFS) objects. This flag is not set by a SAN service provider, because the socket descriptors it returns are not handles to IFS objects. </DD>

<DT>XP1_PARTIAL_MESSAGE</DT>

<DD>The MSG_PARTIAL flag is supported in <B>WSPSend</B>.
</DD>
</DL>
</DD>
</DL>

<P>Note that XP1_UNI_SEND and XP1_UNI_RECV are mutually exclusive. The switch sets neither bit for SAN service providers to indicate that the protocol is bidirectional.

<DL>
<DT><B>dwServiceFlags2</B></DT>

<DD>Reserved for additional protocol-defined attributes.</DD>

<DT><B>dwServiceFlags3</B></DT>

<DD>Reserved for additional protocol-defined attributes.</DD>

<DT><B>dwServiceFlags4</B></DT>

<DD>Reserved for additional protocol-defined attributes.</DD>

<DT><B>dwProviderFlags</B></DT>

<DD>Provides information about how this protocol is represented in the protocol catalog. The following flag values are possible:

<DL>
<DT>PFL_MULTIPLE_PROTO_ENTRIES</DT>

<DD>Indicates that this is one of two or more entries for a single protocol (from a given provider) that is capable of implementing multiple behaviors. An example of this is SPX, which, on the receiving side, can behave either as a message-oriented or a stream-oriented protocol.</DD>

<DT>PFL_RECOMMENDED_PROTO_ENTRY</DT>

<DD>Indicates that this is the recommended or most frequently used entry for a protocol that is capable of implementing multiple behaviors.</DD>

<DT>PFL_HIDDEN</DT>

<DD>Set by a SAN service provider to indicate that it is only indirectly exposed to applications through the Windows Sockets switch. </DD>

<DT>PFL_MATCHES_PROTOCOL_ZERO</DT>

<DD>Indicates that a value of zero in the <I>protocol</I> parameter of <B>WSPSocket</B> matches this protocol entry.</DD>
</DL>
</DD>

<DT><B>ProviderId</B></DT>

<DD>Unique identifier assigned to the SAN service provider by the SAN NIC vendor. This value is useful when more than one service provider is able to implement a particular protocol. An application can use the <B>ProviderId</B><I> </I>value to distinguish between providers that might otherwise be indistinguishable.</DD>

<DT><B>dwCatalogEntryId</B></DT>

<DD>Unique identifier assigned by the Windows Sockets interface (<I>Ws2_32.dll</I>) for each WSAPROTOCOL_INFOW structure.</DD>

<DT><B>ProtocolChain</B></DT>

<DD>A <A HREF="wsdpref_0waa.htm">WSAPROTOCOLCHAIN</A> structure that contains a numbered list of Catalog Entry IDs that comprise a protocol chain. 

<P>If the length of the chain is zero, this WSAPROTOCOL_INFOW entry represents a layered protocol that has Windows Sockets 2 SPI as both its top and bottom edges (for example, the Windows Sockets switch). If the length of the chain equals 1, this entry represents a base protocol whose Catalog Entry identifier is in the <B>dwCatalogEntryId</B> member of the WSAPROTOCOL_INFOW structure. If the length of the chain is larger than 1, this entry represents a protocol chain that consists of one or more layered protocols on top of a base protocol. The corresponding Catalog Entry identifiers are in the <B>ProtocolChain.ChainEntries</B> array starting with the layered protocol at the top (the zero element in the <B>ProtocolChain.ChainEntries</B> array) and ending with the base protocol. Refer to the <I>Windows Sockets 2 Service Provider Interface </I>specification for more information on protocol chains.
</DD>

<DT><B>iVersion</B></DT>

<DD>Protocol version identifier.</DD>

<DT><B>iAddressFamily</B></DT>

<DD>Value to pass as the address family parameter to the <B>WSPSocket</B> function to open a socket for this protocol. This value also uniquely defines the structure of protocol addresses (sockaddr structure) used by the protocol (for example, the sockaddr_in structure for TCP/IP).</DD>

<DT><B>iMaxSockAddr</B></DT>

<DD>Maximum address length, in bytes. </DD>

<DT><B>iMinSockAddr</B></DT>

<DD>Minimum address length, in bytes. </DD>

<DT><B>iSocketType</B></DT>

<DD>Value to pass as the socket type parameter to the <B>socket</B> function to open a socket for this protocol.</DD>

<DT><B>iProtocol</B></DT>

<DD>Value to pass as the protocol parameter to the <B>WSPSocket</B> function to open a socket for this protocol.</DD>

<DT><B>iProtocolMaxOffset</B></DT>

<DD>Maximum value that may be added to <B>iProtocol</B> when supplying a value for the protocol parameter to the <B>WSPSocket</B> function. Not all protocols allow a range of values. When this is the case, <B>iProtocolMaxOffset</B><I> </I>is zero.</DD>

<DT><B>iNetworkByteOrder</B></DT>

<DD>Currently, these values are manifest constants (BIGENDIAN and LITTLEENDIAN) that indicate either big-endian or little-endian with the values zero and 1, respectively.</DD>

<DT><B>iSecurityScheme</B></DT>

<DD>Type of security scheme employed, if any. A value of SECURITY_PROTOCOL_NONE is used for protocols that do not incorporate security provisions.</DD>

<DT><B>dwMessageSize</B></DT>

<DD>Maximum message size supported by the protocol. This is the maximum size that can be sent from any of the host’s local interfaces. For protocols that do not support message framing, the actual maximum that can be sent to a given address may be less. There is no standard provision to determine the maximum inbound message size. The following special values are defined:

<DL>
<DT>0</DT>

<DD>Protocol is stream-oriented; therefore, message size is irrelevant.</DD>

<DT>0x1</DT>

<DD>Maximum outbound (send) message size is dependent on the underlying network MTU (maximum transmission unit) and, therefore, cannot be known until after a socket is bound. The switch should use the <B>WSPGetSockOpt</B> function to retrieve the value of SO_MAX_MSG_SIZE after the socket has been bound to a local address.</DD>

<DT>0xFFFFFFFF</DT>

<DD>Protocol is message-oriented, but there is no maximum limit to the size of messages that may be transmitted.</DD>
</DL>
</DD>

<DT><B>dwProviderReserved</B></DT>

<DD>Reserved for use by service providers.</DD>

<DT><B>szProtocol</B></DT>

<DD>Array of characters that contains a human-readable name that identifies the protocol (for example, "TCP"). The maximum number of characters allowed is WSAPROTOCOL_LEN, which is defined to be 256.
</DD>
</DL>

<H4>Headers</H4>

<P>Defined in <I>Winsock2.h</I>. Include <I>Winsock2.h</I>. Requires Windows Sockets version&nbsp;2.0.</P>

<H4>See Also</H4>

<P><A HREF="wsdpref_0waa.htm">WSAPROTOCOLCHAIN</A>, <A HREF="wsdpref_6ir6.htm"><B>WSPSocket</B></A>, <A HREF="wsdpref_40he.htm"><B>WSPStartupEx</B></A> </P>
<DIV CLASS="footer"><A HREF="mailto:ddksurv1@microsoft.com?subject=DDK Topic Feedback&body=Build date: Thursday, January 16, 2003     Topic Title: WSAPROTOCOL_INFOW"> Send feedback on this topic.</A> / Built on Thursday, January 16, 2003 </DIV>
</BODY>
</HTML>
