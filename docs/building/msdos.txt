
<p>I have my System Integrator ID and NDA which you can find in the Partner Center. You can access Microsoft Collaborate <a href="https://developer.microsoft.com/en-us/windows/support/?tabs=Contact-us">here</a> I'm retired from Microsoft until the faternity leaves and Computer Science teaches Opertaing System Theory again. Or until Microsoft is a Computer Science Company not a IT Company.</p>
<p> You may want to try DR-DOS 7.03 from 
<a href="https://en.wikipedia.org/wiki/Santa_Cruz_Operation">Caldera</a> Licensing or
<a href="https://en.wikipedia.org/wiki/Novell">Novell</a> DR-DOS 7.0 from 1999 a updated from MS-DOS as the operating system stayed up to date until 2011 at Novell. and fetch the latest Perl distribution from the NT Sources Perl distribution and start DOS Globbing. I'm working on a Alpha, VAX or MIPS server and I hope I can boot something from the 
<ul>
<li><a target="_self" href="https://en.wikipedia.org/wiki/DECUS" data-test-app-aware-link="">DECUS</a></li>
<li><a target="_self" href="https://www.itprotoday.com/compute-engines/mipsnt-allied-birth" data-test-app-aware-link="">MIPS/NT allied at birth</a></li> 
<li><a target="_self" href="https://www.itprotoday.com/compute-engines/windows-nt-and-vms-rest-story" data-test-app-aware-link="">Windows NT and VMS: The Rest of the Story</a></li> 
<li><a target="_self" href="https://learn.microsoft.com/en-us/visualstudio/releases/2019/compatibility" data-test-app-aware-link="">Visual Studio 2019 Compatibility</a></li>
<li><a target="_self" href="https://devblogs.microsoft.com/oldnewthing/20180122-00/?p=97855" data-test-app-aware-link="">The history of change-packing tools at Microsoft (so far)</a></li>
<li><a target="_self" href="https://devblogs.microsoft.com/oldnewthing/20181224-00/?p=100545" data-test-app-aware-link="">Random internal Windows terminology: IDW, Razzle, and their forgotten partners IDS and Dazzle</a></li>
</ul>
</p>

<p>HERE IS WHERE YOU CAN OBTAIN WINDOWS SOURCE CODE FROM THE SHARED SOURCE INITIATIVE  <a href="https://www.microsoft.com/en-us/sharedsource/">HERE.</a></p>

<p>We'll go over a Macintosh G4 with Visual Studio 4.0 RISC, MIPS, and Macintosh Cross Plaftorm Edtions Later.<p>

<p>The Vitrual Machine or XP/2003 Installation includes:<p>
<ul>
<li>Services for UNIX 3.5</li>
<li>Partition Magic 7.0</p>
<li>Visual C ++ 4.0 (Visual C++ 2.0 mode), Visual C++ 6.0 with Service Packs, Visual Studio 2003 Acedemic w/ Student tools, Visual Studio 2005 Professional, Visual Studio 2008 Team Suite and Visual Studio 2010 Ultimate with Service Packs.</li>
<li>Windows XP Debugging Tools</li>
<li>Sysinternals Suite 1.0</li>
<li><a href="https://archive.org/details/X09-67215">Windows XP Symbols from the Customer Tools Diagnostic Disc</a></li>
<li>Windows 2003 DDK, 2000 Platform SDK RC1, 2003 Platform SDK, Longhorn PDC 2003 LDK and SDK.</li>
<li>Windows CE 6.0 with Platform Builder (Shared Source Edition)</li>
<li>Windows Embedded XP/2009</li>
<li><a href="https://download.cnet.com/microsoft-windows-powershell-1-0-for-windows-xp/3000-2070_4-75450849.html">Microsoft Windows PowerShell 1.0 for Windows XP.</a></li>
<li>GetGNUWin32 Legacy Installation from Sourceforge(needed to build MINGW 1.0)</li>
<li><a href="https://www.activestate.com/products/perl/">Active State Perl (for 2005 Enterprise Contract please call)</a></li>
<li>Windows XP UX Guidelines</li>
<li>IconFX</li>
<li>GIF Movie Gear</li>
<li>MSDN Image Libraries</li>
<li>NuAngel XP/2003 Updates to 2019</li>
</ul>
<p>Cache the Hewlett Packard operating environment for OpenVMS from the <a href="https://ftp.zx.net.nz/pub/archive/">ftp.zx.net.nz World-Wide Web Server</a> FTP Server and start updating to x86. Start with the 95 Win32 SDK. Find the MAPI Sample. Install Azure DevOps which comes with the <a href="https://learn.microsoft.com/en-us/azure/education-hub/access-education-hub">Education Hub on Azure</a>. For Computer Science Majors or Alumni. With the default collection and a OS project. Named OS the path should be _git/OS</p>
<p>In Cygwin use:</p>
<pre>wget -r --no-parent</pre>
<p>to cache a directory</p>
<p>You might want to download the Single UNIX Specification, and put <a href="https://en.wikipedia.org/wiki/UNIX_System_V">AT&T System V</a> <a href="https://archive.org/details/ATTUNIXSystemVRelease4Version2">Source</a> in SFU or SUA and <a href="https://kb.iu.edu/d/agjx">Ultrix</a> from the UNIX Heritage Society <a href="https://www.tuhs.org/">Source</a> in DEC FTP Cache. Which maybe VAX or Alpha.</p>
<p>The <a href="https://ecma-international.org/publications-and-standards/standards/ecma-335/">ECMA 335</a> & 336 Standard started in 2002 and 2006 and worked on FreeBSD before Linux The .NET Framework work begain in 1998 with the COM SDK and the Next Generation Web Services SDK.
<a href="standard/index.html">Here</a> is the documentation for it. The archive can be found on <a href="https://github.com/SSCLI">Github</a> <a href="powerpoints/AdvancedComputerScience-TeachingwiththeSSCLI.ppt">Advanced Computer Science Teaching with the SSCLI</a> is a SSCLI Powerpoint.
<a href="https://www.amazon.com/Common-Language-Infrastructure-Annotated-Standard/dp/0321154932">The Common Language Infrastructure Annotated Standard</a> The .NET Framework 3.5 is in support until 2029.</p>

<p><a href="https://learn.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server">.NET vs. .NET Framework for server apps</a></p>

<pre>Launch a CMD prompt and type pwd to execute UNIX Commands in the Win32 shell. With SFU or SUA.</pre>

<p>Aslo cache the University of Washington and Digital Corp from the same server. You should have your freeware 8.0 for XP from the HP FTP cache. Become a USENIX Member and download all the Login Jorunals and put it in your HP's paper's directory.</p>
<p>You can start updtaing the XP HP cache to x86 32-bit for Services for UNIX in XP/2003. 64-bit for SUA and Windows Server 2003 R2. I started with my Oracle Contract and netbeans 8.1 source and apache ant 1.7 from apache. I might have Visual Studio Webcasts or courses from my 2000, 2004 and 2008 MSDN Enterprise Subscriptions. 
You can buy Visual Studio Source from <a href="https://codejock.com/">Code Jock Suite Pro</a> a Microsoft Partner at Component Source. You also may want to install Bridgeworks from the HP Cache on XP to help port <a href="https://www.amazon.com/Microsoft-Interoperability-Toolkit-Developer-Reference/dp/0735619220">J2EE to .NET Framework</a> from OpenVMS.</p>
<p>Intsall GitFVFS from  <a href="https://github.com/microsoft/VFSForGit">GitHub</a> to speed up the cloning and pushing of repositories.</p>
<p>You can read about the Windows Repo here: <a href="https://vfsforgit.org/">VFS for Git: Git at Enterprise Scale</a></p>
<p><a href="https://learn.microsoft.com/en-us/lifecycle/products/windows-10-enterprise-and-education">Windows 10 Enterprise and Education</a> You may want <a href="https://learn.microsoft.com/en-us/lifecycle/products/windows-10-enterprise-ltsc-2019">10 2019 LTSC</a> like me so you'll have until 2029.</p>
<p>Install Cygwin, the minimium Delev category and the latest <a href="https://www.oracle.com/java/technologies/downloads/">JDK from Oracle.</a> Clone the Java JDK from Github and install at least the Visual Studio 2019 Build Tools. All Devops projects should be in the _git/OS directory. The future GIT structure can be found in the 2005 or 2008 MSDN Library Samples.</p>
<p><a href="https://devclass.com/2023/05/25/azure-linux-released-at-build-where-microsoft-revealed-why-it-did-not-fork-fedora/">Azure Linux released at Build – where Microsoft revealed why it did not fork Fedora</a></p>

<h2>MS-DOS 3.3 OEM Adaption Kit</h2>

<p><a href="https://winworldpc.com/product/microsoft-ms-dos-oem-adaption-kit/3x">Download</a></p>

<h2>Windows 2.0 OEM Adaption Kit</h2>

<p><a href="https://winworldpc.com/product/windows-sdk-ddk/windows-2x">Download</a></p>

<h2>Internal Developer Workstation For Windows NT 3.1</h2>

<p><a href="https://archive.org/details/CDROM_March92">Walnut Creek Source Code</a></p>

<p>Use 7-zip to extract the files even the 'source.exe' is  POSIX Utilities and the Windows 3.1 Resource Kit from J. Moore</p>

<p>The GNU Directory is a 93' GNU Archive gnu/mcrsprts/ Ports of GNU software to non-Unix platforms.

<h2>Internal Developer Server or Workstation for Windows NT 3.5.</h2>

<p>Install on Windows 3.5 Advanced Server, Windows NT 4.0, Back Office Suite or 2003 in a Virtual Machine.</p>

<pre>Download the Win32SDK Extract the MDX Microsoft Access 97 file with 7-Zip or open it with Microsoft Access. 
I use Microsoft Access 97.</pre>

<pre>Install the Windows NT 3.5 DDK. setupddk.bat C:\ddk mips, alpha or i386.</pre>

<pre>Install the Windows NT 3.5 SDK. setupsdk.bat C:\</pre>

<pre>Copy the SDK, DDK, MSTOOLS, and MSDEV directory's to the build drive.</pre>

<pre>run razzle.cmd</pre> 

<pre>set the _NTDRIVE and the apporiate paths</pre>

<pre>D:\NT-782\NT\private\bldtools\buildall.cmd B1</pre>

<p>If you want to build a IDW release execute the following</p>

<pre>D:\NT-782\NT\private\bldtools\idwrelease.cmd built;nonbuilt</pre>

<h2>Internal Developer Server or Workstation for Windows NT 4.0</h2>

<p>Install on Windows NT 4.0, Back Office Suite or 2003 in a Virtual Machine.</p>

<pre>Install the Windows NT 4.0 DDK. You may have to look for a IDW DDK RC Release.</pre>

<pre>Install the Windows NT 4.0 SDK.</pre>

<pre>Install Visual C++ 4.0 w/ MFC Migration Kit.,</pre>

<pre>Copy the DDK, MSTOOLS, and MSDEV directory's to the build drive.</pre>

<pre>Use the CAB SDK to make a cabinet file of the Leaked ZIP to make a CD+R of the Cabinet. 
If you are using NT 4.0 use expand.exe to extract the NT source to its location.</pre> 

<pre>Extract the NT.CAB or cabinet file containing full Windows NT 4.0 source in it.</pre>

<pre>Place the NT Root in the root SDK Directory.</pre>

<pre>Install the Windows NT 4.0 DDK.</pre>

<pre>Install the Windows NT 4.0 SDK.</pre>

<pre>Install Visual C++ 4.0 w/ MFC MIgration Kit.</pre>

<pre>Copy the MSDEV, DDK, And PlatformSDK directory's to the Build drive and rename the DDK to 'IDWNT4' </pre>

<pre>set Path=D:\NT40\MSDEV\bin;D:\NT40\IDWNT4\bin;%path%</pre>

<pre>set Lib=D:\NT40\MSDEV\lib;D:\NT40\MSTOOLS\lib;%lib%</pre>

<pre>set Include=D:\NT40\MSDEV\include;D:\NT40\NT\public\sdk\inc;D:\NT40\NT\private\inc;%include%</pre>

<pre>cd D:\NT40\MSTOOLS\</pre>

<pre>edit VCVARS32 to set MSDevDir=D:\NT40\MSDEV set vcsource=D:\NT40\MSDEV</pre>
									
<pre>run SETENV D:\NT40\MSTOOLS D:\NT40\MSDEV\BIN</pre>

<pre>cd D:\NT40\IDWNT4\bin</pre>

<pre>run D:\NT40\IDWNT4\bin\setenv.bat D:\NT40\IDWNT4</pre>

<pre>build -cz to build the DDK</pre>

<pre>run razzle.cmd with the 'main' 'hotfix_checked' or 'hotfix_free' argument</pre> 

<pre>In razzle set the _NTDRIVE and the apporiate paths</pre>

<pre>You can build just a section of NT using B1, B2 or B3 on the command line.
B1 builds from NT\Private.  B2 builds SDKTools and Utils.B3 builds
Setup, Posix, MVDM, WinDbg, and OS2. </pre>

<pre>D:\NT40\NT\private\bldtools\buildall.cmd B1</pre>

<h2>Internal Developer Server or Workstation for Windows 2000.</h2>

<pre>As of this writing 2000 Source is only 33%.</pre>
<pre>I dont play Black Ops Cold War I'm just not that kind of person.</pre>

<h2> Whistler and pre-reset Longhorn </h2>
<p> The top-most branch was called <strong>main</strong>, which integrated changes from all labs. Under it were several numbered labs, each of which was working on a separate part of Windows, such as:</p>
</ul>
<p > These labs also had a "_N" branch, which served as a buffer between main and the actual branch. For example, changes from the main branch would first get integrated into Lab06_N before later being   integrated into Lab06 in a process called forward integration. The same   applied for reverse integration, where the lab would first integrate   changes into its N-branch before integrating them into the main branch.</p>
<p > There were also <strong>idx</strong> (internal development workstation/server) branches, builds from which are usually recompilations intended for TAP/OEM partners. However, they were also   occasionally released for public testing, e.g. <a target="_self" href="https://betawiki.net/wiki/Windows_Longhorn_build_4074" data-test-app-aware-link="">Windows Longhorn build 4074</a> or <a target="_self" href="https://betawiki.net/wiki/Windows_XP_build_2257" data-test-app-aware-link="">Windows XP build 2257</a>. </p>
<p > Before the release of <a target="_self" href="https://betawiki.net/wiki/Windows_XP" data-test-app-aware-link="">Windows XP</a>, the main branch was forked into the <strong>xpclient</strong> branch while the main branch moved on to track <a target="_self" href="https://betawiki.net/wiki/Windows_Server_2003" data-test-app-aware-link="">Windows Server 2003</a> development.After the final version was shipped, new branches were created for   updates, hotfixes and Service Pack development. Similarly, the <strong>dnsrv</strong> branch (short for Dot NET Server, i.e. Windows .NET Server) was forked from the main branch before the release of Windows Server 2003. </p>
<h2>Since Longhorn reset </h2>
<p>The lab hierarchy was overhauled after the development reset of <a target="_self" href="https://betawiki.net/wiki/Windows_Vista" data-test-app-aware-link="">Longhorn</a> to address the flaws that plagued most of the pre-reset period. Instead of  having a small amount of general virtual build labs each focusing on a  different general scope of Windows functionality, a new hierarchical   model with considerably more feature branches was introduced, which   helped reduce the amount of code to reverse integrate for branch.   Microsoft also set stricter criteria for reverse integrating changes   from the labs into the main branch, which was now renamed to <strong>winmain</strong>. </p>
<p > The main branch was later renamed to <strong>rsmain</strong> at some point after the release of <a target="_self" href="https://betawiki.net/wiki/Windows_10" data-test-app-aware-link="">Windows 10</a>, and then to <strong>rsmaster</strong> after   the Windows source repository's conversion to Git, likely to comply with the Git convention of calling the top-most branch the master   branch. At some point after February 2021,
<a target="_self" href="https://betawiki.net/wiki/Build_lab#cite_note-5" data-test-app-aware-link="">[2]</a> the branch was renamed back to <strong>main</strong>. This was likely done in order to follow suit with other Microsoft   projects after the master/slave terminology became a subject of controversy in 2020 due to slavery connotations.
<a target="_self" href="https://betawiki.net/wiki/Build_lab#cite_note-6" data-test-app-aware-link="">[3]</a>
<a target="_self" href="https://betawiki.net/wiki/Build_lab#cite_note-7" data-test-app-aware-link="">[4]</a></p>

<p> Historically, the build lab was a physical room populated with machines that periodically produced mainline builds of <a target="_self" href="https://betawiki.net/wiki/Windows_NT" data-test-app-aware-link="">Windows NT</a>. At first, there was a single build lab for the entire project that all developers submitted their changes to. As the number of developers grew, the concept of virtual build labs was introduced, where each team developing a subset of the feature set works on its own separate branch and has one or more machines compiling periodic builds of that branch. Each developer submits their changes first to their team's branch, and   they are merged to the mainline only after they meet its acceptance criteria. Other teams can then pull the changes from the mainline into their branches.</p>
<p>Builds that were not built by the build lab machines, but are rather compiled by individual Microsoft employees, are called private builds. They are identified by having the VS_FF_PRIVATEBUILD file flag set in the executable's version information and by including the account name of the individual or service that initiated the build in the   branch part of the build tag. </p>
<p>Microsoft has used several branching systems since the start of <a target="_self" href="https://betawiki.net/wiki/Windows_XP" data-test-app-aware-link="">Windows XP</a> development, which differ in the hierarchy of labs as well as in the naming scheme. However, there are some specifics common to most schemes, such as the presence of a top-most main branch, or the use of special branches for important development milestones.</p>